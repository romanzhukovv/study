ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"timers.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvGetNextExpireTime:
  24              	.LVL0:
  25              	.LFB17:
  26              		.file 1 "FreeRTOS/src/timers.c"
   1:FreeRTOS/src/timers.c **** /*
   2:FreeRTOS/src/timers.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/timers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/timers.c ****  *
   5:FreeRTOS/src/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/timers.c ****  * subject to the following conditions:
  11:FreeRTOS/src/timers.c ****  *
  12:FreeRTOS/src/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/timers.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/timers.c ****  *
  15:FreeRTOS/src/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/timers.c ****  *
  22:FreeRTOS/src/timers.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/timers.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/timers.c ****  *
  25:FreeRTOS/src/timers.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/timers.c ****  */
  27:FreeRTOS/src/timers.c **** 
  28:FreeRTOS/src/timers.c **** /* Standard includes. */
  29:FreeRTOS/src/timers.c **** #include <stdlib.h>
  30:FreeRTOS/src/timers.c **** 
  31:FreeRTOS/src/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/src/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 2


  33:FreeRTOS/src/timers.c **** task.h is included from an application file. */
  34:FreeRTOS/src/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/src/timers.c **** 
  36:FreeRTOS/src/timers.c **** #include "FreeRTOS.h"
  37:FreeRTOS/src/timers.c **** #include "task.h"
  38:FreeRTOS/src/timers.c **** #include "queue.h"
  39:FreeRTOS/src/timers.c **** #include "timers.h"
  40:FreeRTOS/src/timers.c **** 
  41:FreeRTOS/src/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:FreeRTOS/src/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:FreeRTOS/src/timers.c **** #endif
  44:FreeRTOS/src/timers.c **** 
  45:FreeRTOS/src/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:FreeRTOS/src/timers.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS/src/timers.c **** for the header files above, but not in this file, in order to generate the
  48:FreeRTOS/src/timers.c **** correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS/src/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  50:FreeRTOS/src/timers.c **** 
  51:FreeRTOS/src/timers.c **** 
  52:FreeRTOS/src/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:FreeRTOS/src/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:FreeRTOS/src/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:FreeRTOS/src/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:FreeRTOS/src/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:FreeRTOS/src/timers.c **** 
  58:FreeRTOS/src/timers.c **** /* Misc definitions. */
  59:FreeRTOS/src/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:FreeRTOS/src/timers.c **** 
  61:FreeRTOS/src/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:FreeRTOS/src/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:FreeRTOS/src/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:FreeRTOS/src/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:FreeRTOS/src/timers.c **** #endif
  66:FreeRTOS/src/timers.c **** 
  67:FreeRTOS/src/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  68:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_ACTIVE					( ( uint8_t ) 0x01 )
  69:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_STATICALLY_ALLOCATED	( ( uint8_t ) 0x02 )
  70:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_AUTORELOAD				( ( uint8_t ) 0x04 )
  71:FreeRTOS/src/timers.c **** 
  72:FreeRTOS/src/timers.c **** /* The definition of the timers themselves. */
  73:FreeRTOS/src/timers.c **** typedef struct tmrTimerControl /* The old naming convention is used to prevent breaking kernel awar
  74:FreeRTOS/src/timers.c **** {
  75:FreeRTOS/src/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  76:FreeRTOS/src/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  77:FreeRTOS/src/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  78:FreeRTOS/src/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  79:FreeRTOS/src/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  80:FreeRTOS/src/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  81:FreeRTOS/src/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  82:FreeRTOS/src/timers.c **** 	#endif
  83:FreeRTOS/src/timers.c **** 	uint8_t 				ucStatus;			/*<< Holds bits to say if the timer was statically allocated or not, and i
  84:FreeRTOS/src/timers.c **** } xTIMER;
  85:FreeRTOS/src/timers.c **** 
  86:FreeRTOS/src/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  87:FreeRTOS/src/timers.c **** name below to enable the use of older kernel aware debuggers. */
  88:FreeRTOS/src/timers.c **** typedef xTIMER Timer_t;
  89:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 3


  90:FreeRTOS/src/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  91:FreeRTOS/src/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  92:FreeRTOS/src/timers.c **** and messages that request the execution of a non-timer related callback.  The
  93:FreeRTOS/src/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  94:FreeRTOS/src/timers.c **** and xCallbackParametersType respectively. */
  95:FreeRTOS/src/timers.c **** typedef struct tmrTimerParameters
  96:FreeRTOS/src/timers.c **** {
  97:FreeRTOS/src/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  98:FreeRTOS/src/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  99:FreeRTOS/src/timers.c **** } TimerParameter_t;
 100:FreeRTOS/src/timers.c **** 
 101:FreeRTOS/src/timers.c **** 
 102:FreeRTOS/src/timers.c **** typedef struct tmrCallbackParameters
 103:FreeRTOS/src/timers.c **** {
 104:FreeRTOS/src/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 105:FreeRTOS/src/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 106:FreeRTOS/src/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 107:FreeRTOS/src/timers.c **** } CallbackParameters_t;
 108:FreeRTOS/src/timers.c **** 
 109:FreeRTOS/src/timers.c **** /* The structure that contains the two message types, along with an identifier
 110:FreeRTOS/src/timers.c **** that is used to determine which message type is valid. */
 111:FreeRTOS/src/timers.c **** typedef struct tmrTimerQueueMessage
 112:FreeRTOS/src/timers.c **** {
 113:FreeRTOS/src/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 114:FreeRTOS/src/timers.c **** 	union
 115:FreeRTOS/src/timers.c **** 	{
 116:FreeRTOS/src/timers.c **** 		TimerParameter_t xTimerParameters;
 117:FreeRTOS/src/timers.c **** 
 118:FreeRTOS/src/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 119:FreeRTOS/src/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 120:FreeRTOS/src/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 121:FreeRTOS/src/timers.c **** 			CallbackParameters_t xCallbackParameters;
 122:FreeRTOS/src/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 123:FreeRTOS/src/timers.c **** 	} u;
 124:FreeRTOS/src/timers.c **** } DaemonTaskMessage_t;
 125:FreeRTOS/src/timers.c **** 
 126:FreeRTOS/src/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 127:FreeRTOS/src/timers.c **** which static variables must be declared volatile. */
 128:FreeRTOS/src/timers.c **** 
 129:FreeRTOS/src/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 130:FreeRTOS/src/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 131:FreeRTOS/src/timers.c **** timer service task is allowed to access these lists.
 132:FreeRTOS/src/timers.c **** xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 133:FreeRTOS/src/timers.c **** breaks some kernel aware debuggers, and debuggers that reply on removing the
 134:FreeRTOS/src/timers.c **** static qualifier. */
 135:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 136:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 137:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 138:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 139:FreeRTOS/src/timers.c **** 
 140:FreeRTOS/src/timers.c **** /* A queue that is used to send commands to the timer service task. */
 141:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 142:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 143:FreeRTOS/src/timers.c **** 
 144:FreeRTOS/src/timers.c **** /*lint -restore */
 145:FreeRTOS/src/timers.c **** 
 146:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 4


 147:FreeRTOS/src/timers.c **** 
 148:FreeRTOS/src/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 149:FreeRTOS/src/timers.c **** 
 150:FreeRTOS/src/timers.c **** 	/* If static allocation is supported then the application must provide the
 151:FreeRTOS/src/timers.c **** 	following callback function - which enables the application to optionally
 152:FreeRTOS/src/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 153:FreeRTOS/src/timers.c **** 	and TCB. */
 154:FreeRTOS/src/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 155:FreeRTOS/src/timers.c **** 
 156:FreeRTOS/src/timers.c **** #endif
 157:FreeRTOS/src/timers.c **** 
 158:FreeRTOS/src/timers.c **** /*
 159:FreeRTOS/src/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 160:FreeRTOS/src/timers.c ****  * been initialised already.
 161:FreeRTOS/src/timers.c ****  */
 162:FreeRTOS/src/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 163:FreeRTOS/src/timers.c **** 
 164:FreeRTOS/src/timers.c **** /*
 165:FreeRTOS/src/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 166:FreeRTOS/src/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 167:FreeRTOS/src/timers.c ****  * xTimerQueue queue.
 168:FreeRTOS/src/timers.c ****  */
 169:FreeRTOS/src/timers.c **** static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 170:FreeRTOS/src/timers.c **** 
 171:FreeRTOS/src/timers.c **** /*
 172:FreeRTOS/src/timers.c ****  * Called by the timer service task to interpret and process a command it
 173:FreeRTOS/src/timers.c ****  * received on the timer queue.
 174:FreeRTOS/src/timers.c ****  */
 175:FreeRTOS/src/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 176:FreeRTOS/src/timers.c **** 
 177:FreeRTOS/src/timers.c **** /*
 178:FreeRTOS/src/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 179:FreeRTOS/src/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 180:FreeRTOS/src/timers.c ****  */
 181:FreeRTOS/src/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 182:FreeRTOS/src/timers.c **** 
 183:FreeRTOS/src/timers.c **** /*
 184:FreeRTOS/src/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 185:FreeRTOS/src/timers.c ****  * auto-reload timer, then call its callback.
 186:FreeRTOS/src/timers.c ****  */
 187:FreeRTOS/src/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 188:FreeRTOS/src/timers.c **** 
 189:FreeRTOS/src/timers.c **** /*
 190:FreeRTOS/src/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 191:FreeRTOS/src/timers.c ****  * current timer list does not still reference some timers.
 192:FreeRTOS/src/timers.c ****  */
 193:FreeRTOS/src/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 194:FreeRTOS/src/timers.c **** 
 195:FreeRTOS/src/timers.c **** /*
 196:FreeRTOS/src/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 197:FreeRTOS/src/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 198:FreeRTOS/src/timers.c ****  */
 199:FreeRTOS/src/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 200:FreeRTOS/src/timers.c **** 
 201:FreeRTOS/src/timers.c **** /*
 202:FreeRTOS/src/timers.c ****  * If the timer list contains any active timers then return the expire time of
 203:FreeRTOS/src/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 5


 204:FreeRTOS/src/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 205:FreeRTOS/src/timers.c ****  * to pdTRUE.
 206:FreeRTOS/src/timers.c ****  */
 207:FreeRTOS/src/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 208:FreeRTOS/src/timers.c **** 
 209:FreeRTOS/src/timers.c **** /*
 210:FreeRTOS/src/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 211:FreeRTOS/src/timers.c ****  * until either a timer does expire or a command is received.
 212:FreeRTOS/src/timers.c ****  */
 213:FreeRTOS/src/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 214:FreeRTOS/src/timers.c **** 
 215:FreeRTOS/src/timers.c **** /*
 216:FreeRTOS/src/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 217:FreeRTOS/src/timers.c ****  * dynamically to fill in the structure's members.
 218:FreeRTOS/src/timers.c ****  */
 219:FreeRTOS/src/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 220:FreeRTOS/src/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 221:FreeRTOS/src/timers.c **** 									const UBaseType_t uxAutoReload,
 222:FreeRTOS/src/timers.c **** 									void * const pvTimerID,
 223:FreeRTOS/src/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 224:FreeRTOS/src/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 225:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 226:FreeRTOS/src/timers.c **** 
 227:FreeRTOS/src/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 228:FreeRTOS/src/timers.c **** {
 229:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 230:FreeRTOS/src/timers.c **** 
 231:FreeRTOS/src/timers.c **** 	/* This function is called when the scheduler is started if
 232:FreeRTOS/src/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 233:FreeRTOS/src/timers.c **** 	timer service task has been created/initialised.  If timers have already
 234:FreeRTOS/src/timers.c **** 	been created then the initialisation will already have been performed. */
 235:FreeRTOS/src/timers.c **** 	prvCheckForValidListAndQueue();
 236:FreeRTOS/src/timers.c **** 
 237:FreeRTOS/src/timers.c **** 	if( xTimerQueue != NULL )
 238:FreeRTOS/src/timers.c **** 	{
 239:FreeRTOS/src/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 240:FreeRTOS/src/timers.c **** 		{
 241:FreeRTOS/src/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 242:FreeRTOS/src/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 243:FreeRTOS/src/timers.c **** 			uint32_t ulTimerTaskStackSize;
 244:FreeRTOS/src/timers.c **** 
 245:FreeRTOS/src/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 246:FreeRTOS/src/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 247:FreeRTOS/src/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 248:FreeRTOS/src/timers.c **** 													ulTimerTaskStackSize,
 249:FreeRTOS/src/timers.c **** 													NULL,
 250:FreeRTOS/src/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 251:FreeRTOS/src/timers.c **** 													pxTimerTaskStackBuffer,
 252:FreeRTOS/src/timers.c **** 													pxTimerTaskTCBBuffer );
 253:FreeRTOS/src/timers.c **** 
 254:FreeRTOS/src/timers.c **** 			if( xTimerTaskHandle != NULL )
 255:FreeRTOS/src/timers.c **** 			{
 256:FreeRTOS/src/timers.c **** 				xReturn = pdPASS;
 257:FreeRTOS/src/timers.c **** 			}
 258:FreeRTOS/src/timers.c **** 		}
 259:FreeRTOS/src/timers.c **** 		#else
 260:FreeRTOS/src/timers.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 6


 261:FreeRTOS/src/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 262:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 263:FreeRTOS/src/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 264:FreeRTOS/src/timers.c **** 									NULL,
 265:FreeRTOS/src/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 266:FreeRTOS/src/timers.c **** 									&xTimerTaskHandle );
 267:FreeRTOS/src/timers.c **** 		}
 268:FreeRTOS/src/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 269:FreeRTOS/src/timers.c **** 	}
 270:FreeRTOS/src/timers.c **** 	else
 271:FreeRTOS/src/timers.c **** 	{
 272:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 273:FreeRTOS/src/timers.c **** 	}
 274:FreeRTOS/src/timers.c **** 
 275:FreeRTOS/src/timers.c **** 	configASSERT( xReturn );
 276:FreeRTOS/src/timers.c **** 	return xReturn;
 277:FreeRTOS/src/timers.c **** }
 278:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 279:FreeRTOS/src/timers.c **** 
 280:FreeRTOS/src/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 281:FreeRTOS/src/timers.c **** 
 282:FreeRTOS/src/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 283:FreeRTOS/src/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 284:FreeRTOS/src/timers.c **** 								const UBaseType_t uxAutoReload,
 285:FreeRTOS/src/timers.c **** 								void * const pvTimerID,
 286:FreeRTOS/src/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 287:FreeRTOS/src/timers.c **** 	{
 288:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 289:FreeRTOS/src/timers.c **** 
 290:FreeRTOS/src/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values ret
 291:FreeRTOS/src/timers.c **** 
 292:FreeRTOS/src/timers.c **** 		if( pxNewTimer != NULL )
 293:FreeRTOS/src/timers.c **** 		{
 294:FreeRTOS/src/timers.c **** 			/* Status is thus far zero as the timer is not created statically
 295:FreeRTOS/src/timers.c **** 			and has not been started.  The auto-reload bit may get set in
 296:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer. */
 297:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus = 0x00;
 298:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 299:FreeRTOS/src/timers.c **** 		}
 300:FreeRTOS/src/timers.c **** 
 301:FreeRTOS/src/timers.c **** 		return pxNewTimer;
 302:FreeRTOS/src/timers.c **** 	}
 303:FreeRTOS/src/timers.c **** 
 304:FreeRTOS/src/timers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 305:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 306:FreeRTOS/src/timers.c **** 
 307:FreeRTOS/src/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 308:FreeRTOS/src/timers.c **** 
 309:FreeRTOS/src/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 310:FreeRTOS/src/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 311:FreeRTOS/src/timers.c **** 										const UBaseType_t uxAutoReload,
 312:FreeRTOS/src/timers.c **** 										void * const pvTimerID,
 313:FreeRTOS/src/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 314:FreeRTOS/src/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 315:FreeRTOS/src/timers.c **** 	{
 316:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 317:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 7


 318:FreeRTOS/src/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 319:FreeRTOS/src/timers.c **** 		{
 320:FreeRTOS/src/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 321:FreeRTOS/src/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 322:FreeRTOS/src/timers.c **** 			structure. */
 323:FreeRTOS/src/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 324:FreeRTOS/src/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 325:FreeRTOS/src/timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 326:FreeRTOS/src/timers.c **** 		}
 327:FreeRTOS/src/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:FreeRTOS/src/timers.c **** 
 329:FreeRTOS/src/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:FreeRTOS/src/timers.c **** 		configASSERT( pxTimerBuffer );
 331:FreeRTOS/src/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 332:FreeRTOS/src/timers.c **** 
 333:FreeRTOS/src/timers.c **** 		if( pxNewTimer != NULL )
 334:FreeRTOS/src/timers.c **** 		{
 335:FreeRTOS/src/timers.c **** 			/* Timers can be created statically or dynamically so note this
 336:FreeRTOS/src/timers.c **** 			timer was created statically in case it is later deleted.  The
 337:FreeRTOS/src/timers.c **** 			auto-reload bit may get set in prvInitialiseNewTimer(). */
 338:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 339:FreeRTOS/src/timers.c **** 
 340:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 341:FreeRTOS/src/timers.c **** 		}
 342:FreeRTOS/src/timers.c **** 
 343:FreeRTOS/src/timers.c **** 		return pxNewTimer;
 344:FreeRTOS/src/timers.c **** 	}
 345:FreeRTOS/src/timers.c **** 
 346:FreeRTOS/src/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 347:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 348:FreeRTOS/src/timers.c **** 
 349:FreeRTOS/src/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 350:FreeRTOS/src/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 351:FreeRTOS/src/timers.c **** 									const UBaseType_t uxAutoReload,
 352:FreeRTOS/src/timers.c **** 									void * const pvTimerID,
 353:FreeRTOS/src/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 354:FreeRTOS/src/timers.c **** 									Timer_t *pxNewTimer )
 355:FreeRTOS/src/timers.c **** {
 356:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 357:FreeRTOS/src/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 358:FreeRTOS/src/timers.c **** 
 359:FreeRTOS/src/timers.c **** 	if( pxNewTimer != NULL )
 360:FreeRTOS/src/timers.c **** 	{
 361:FreeRTOS/src/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 362:FreeRTOS/src/timers.c **** 		created/initialised. */
 363:FreeRTOS/src/timers.c **** 		prvCheckForValidListAndQueue();
 364:FreeRTOS/src/timers.c **** 
 365:FreeRTOS/src/timers.c **** 		/* Initialise the timer structure members using the function
 366:FreeRTOS/src/timers.c **** 		parameters. */
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 370:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 371:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 372:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
 373:FreeRTOS/src/timers.c **** 		{
 374:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 8


 375:FreeRTOS/src/timers.c **** 		}
 376:FreeRTOS/src/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:FreeRTOS/src/timers.c **** 	}
 378:FreeRTOS/src/timers.c **** }
 379:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 380:FreeRTOS/src/timers.c **** 
 381:FreeRTOS/src/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:FreeRTOS/src/timers.c **** {
 383:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 384:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 385:FreeRTOS/src/timers.c **** 
 386:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 387:FreeRTOS/src/timers.c **** 
 388:FreeRTOS/src/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:FreeRTOS/src/timers.c **** 	on a particular timer definition. */
 390:FreeRTOS/src/timers.c **** 	if( xTimerQueue != NULL )
 391:FreeRTOS/src/timers.c **** 	{
 392:FreeRTOS/src/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = xCommandID;
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 395:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 396:FreeRTOS/src/timers.c **** 
 397:FreeRTOS/src/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 398:FreeRTOS/src/timers.c **** 		{
 399:FreeRTOS/src/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 400:FreeRTOS/src/timers.c **** 			{
 401:FreeRTOS/src/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 402:FreeRTOS/src/timers.c **** 			}
 403:FreeRTOS/src/timers.c **** 			else
 404:FreeRTOS/src/timers.c **** 			{
 405:FreeRTOS/src/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 406:FreeRTOS/src/timers.c **** 			}
 407:FreeRTOS/src/timers.c **** 		}
 408:FreeRTOS/src/timers.c **** 		else
 409:FreeRTOS/src/timers.c **** 		{
 410:FreeRTOS/src/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 411:FreeRTOS/src/timers.c **** 		}
 412:FreeRTOS/src/timers.c **** 
 413:FreeRTOS/src/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:FreeRTOS/src/timers.c **** 	}
 415:FreeRTOS/src/timers.c **** 	else
 416:FreeRTOS/src/timers.c **** 	{
 417:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:FreeRTOS/src/timers.c **** 	}
 419:FreeRTOS/src/timers.c **** 
 420:FreeRTOS/src/timers.c **** 	return xReturn;
 421:FreeRTOS/src/timers.c **** }
 422:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 423:FreeRTOS/src/timers.c **** 
 424:FreeRTOS/src/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:FreeRTOS/src/timers.c **** {
 426:FreeRTOS/src/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:FreeRTOS/src/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:FreeRTOS/src/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 429:FreeRTOS/src/timers.c **** 	return xTimerTaskHandle;
 430:FreeRTOS/src/timers.c **** }
 431:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 9


 432:FreeRTOS/src/timers.c **** 
 433:FreeRTOS/src/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:FreeRTOS/src/timers.c **** {
 435:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 436:FreeRTOS/src/timers.c **** 
 437:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 438:FreeRTOS/src/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 439:FreeRTOS/src/timers.c **** }
 440:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 441:FreeRTOS/src/timers.c **** 
 442:FreeRTOS/src/timers.c **** void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
 443:FreeRTOS/src/timers.c **** {
 444:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 445:FreeRTOS/src/timers.c **** 
 446:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 447:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 448:FreeRTOS/src/timers.c **** 	{
 449:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
 450:FreeRTOS/src/timers.c **** 		{
 451:FreeRTOS/src/timers.c **** 			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 452:FreeRTOS/src/timers.c **** 		}
 453:FreeRTOS/src/timers.c **** 		else
 454:FreeRTOS/src/timers.c **** 		{
 455:FreeRTOS/src/timers.c **** 			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 456:FreeRTOS/src/timers.c **** 		}
 457:FreeRTOS/src/timers.c **** 	}
 458:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 459:FreeRTOS/src/timers.c **** }
 460:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 461:FreeRTOS/src/timers.c **** 
 462:FreeRTOS/src/timers.c **** UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 463:FreeRTOS/src/timers.c **** {
 464:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 465:FreeRTOS/src/timers.c **** UBaseType_t uxReturn;
 466:FreeRTOS/src/timers.c **** 
 467:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 468:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 469:FreeRTOS/src/timers.c **** 	{
 470:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 471:FreeRTOS/src/timers.c **** 		{
 472:FreeRTOS/src/timers.c **** 			/* Not an auto-reload timer. */
 473:FreeRTOS/src/timers.c **** 			uxReturn = ( UBaseType_t ) pdFALSE;
 474:FreeRTOS/src/timers.c **** 		}
 475:FreeRTOS/src/timers.c **** 		else
 476:FreeRTOS/src/timers.c **** 		{
 477:FreeRTOS/src/timers.c **** 			/* Is an auto-reload timer. */
 478:FreeRTOS/src/timers.c **** 			uxReturn = ( UBaseType_t ) pdTRUE;
 479:FreeRTOS/src/timers.c **** 		}
 480:FreeRTOS/src/timers.c **** 	}
 481:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 482:FreeRTOS/src/timers.c **** 
 483:FreeRTOS/src/timers.c **** 	return uxReturn;
 484:FreeRTOS/src/timers.c **** }
 485:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 486:FreeRTOS/src/timers.c **** 
 487:FreeRTOS/src/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 488:FreeRTOS/src/timers.c **** {
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 10


 489:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 490:FreeRTOS/src/timers.c **** TickType_t xReturn;
 491:FreeRTOS/src/timers.c **** 
 492:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 493:FreeRTOS/src/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 494:FreeRTOS/src/timers.c **** 	return xReturn;
 495:FreeRTOS/src/timers.c **** }
 496:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 497:FreeRTOS/src/timers.c **** 
 498:FreeRTOS/src/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 499:FreeRTOS/src/timers.c **** {
 500:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 501:FreeRTOS/src/timers.c **** 
 502:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 503:FreeRTOS/src/timers.c **** 	return pxTimer->pcTimerName;
 504:FreeRTOS/src/timers.c **** }
 505:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 506:FreeRTOS/src/timers.c **** 
 507:FreeRTOS/src/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 508:FreeRTOS/src/timers.c **** {
 509:FreeRTOS/src/timers.c **** BaseType_t xResult;
 510:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 511:FreeRTOS/src/timers.c **** 
 512:FreeRTOS/src/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 513:FreeRTOS/src/timers.c **** 	been performed to ensure the list is not empty. */
 514:FreeRTOS/src/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 515:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 516:FreeRTOS/src/timers.c **** 
 517:FreeRTOS/src/timers.c **** 	/* If the timer is an auto-reload timer then calculate the next
 518:FreeRTOS/src/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 519:FreeRTOS/src/timers.c **** 	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 520:FreeRTOS/src/timers.c **** 	{
 521:FreeRTOS/src/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 522:FreeRTOS/src/timers.c **** 		other than the current time.  It will therefore be inserted into the
 523:FreeRTOS/src/timers.c **** 		correct list relative to the time this task thinks it is now. */
 524:FreeRTOS/src/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 525:FreeRTOS/src/timers.c **** 		{
 526:FreeRTOS/src/timers.c **** 			/* The timer expired before it was added to the active timer
 527:FreeRTOS/src/timers.c **** 			list.  Reload it now.  */
 528:FreeRTOS/src/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 529:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 530:FreeRTOS/src/timers.c **** 			( void ) xResult;
 531:FreeRTOS/src/timers.c **** 		}
 532:FreeRTOS/src/timers.c **** 		else
 533:FreeRTOS/src/timers.c **** 		{
 534:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 535:FreeRTOS/src/timers.c **** 		}
 536:FreeRTOS/src/timers.c **** 	}
 537:FreeRTOS/src/timers.c **** 	else
 538:FreeRTOS/src/timers.c **** 	{
 539:FreeRTOS/src/timers.c **** 		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 540:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 541:FreeRTOS/src/timers.c **** 	}
 542:FreeRTOS/src/timers.c **** 
 543:FreeRTOS/src/timers.c **** 	/* Call the timer callback. */
 544:FreeRTOS/src/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 545:FreeRTOS/src/timers.c **** }
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 11


 546:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 547:FreeRTOS/src/timers.c **** 
 548:FreeRTOS/src/timers.c **** static portTASK_FUNCTION( prvTimerTask, pvParameters )
 549:FreeRTOS/src/timers.c **** {
 550:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 551:FreeRTOS/src/timers.c **** BaseType_t xListWasEmpty;
 552:FreeRTOS/src/timers.c **** 
 553:FreeRTOS/src/timers.c **** 	/* Just to avoid compiler warnings. */
 554:FreeRTOS/src/timers.c **** 	( void ) pvParameters;
 555:FreeRTOS/src/timers.c **** 
 556:FreeRTOS/src/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 557:FreeRTOS/src/timers.c **** 	{
 558:FreeRTOS/src/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 559:FreeRTOS/src/timers.c **** 
 560:FreeRTOS/src/timers.c **** 		/* Allow the application writer to execute some code in the context of
 561:FreeRTOS/src/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 562:FreeRTOS/src/timers.c **** 		application includes initialisation code that would benefit from
 563:FreeRTOS/src/timers.c **** 		executing after the scheduler has been started. */
 564:FreeRTOS/src/timers.c **** 		vApplicationDaemonTaskStartupHook();
 565:FreeRTOS/src/timers.c **** 	}
 566:FreeRTOS/src/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 567:FreeRTOS/src/timers.c **** 
 568:FreeRTOS/src/timers.c **** 	for( ;; )
 569:FreeRTOS/src/timers.c **** 	{
 570:FreeRTOS/src/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 571:FreeRTOS/src/timers.c **** 		obtain the time at which the next timer will expire. */
 572:FreeRTOS/src/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 573:FreeRTOS/src/timers.c **** 
 574:FreeRTOS/src/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 575:FreeRTOS/src/timers.c **** 		until either a timer does expire, or a command is received. */
 576:FreeRTOS/src/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 577:FreeRTOS/src/timers.c **** 
 578:FreeRTOS/src/timers.c **** 		/* Empty the command queue. */
 579:FreeRTOS/src/timers.c **** 		prvProcessReceivedCommands();
 580:FreeRTOS/src/timers.c **** 	}
 581:FreeRTOS/src/timers.c **** }
 582:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 583:FreeRTOS/src/timers.c **** 
 584:FreeRTOS/src/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 585:FreeRTOS/src/timers.c **** {
 586:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 587:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched;
 588:FreeRTOS/src/timers.c **** 
 589:FreeRTOS/src/timers.c **** 	vTaskSuspendAll();
 590:FreeRTOS/src/timers.c **** 	{
 591:FreeRTOS/src/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 592:FreeRTOS/src/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 593:FreeRTOS/src/timers.c **** 		then don't process this timer as any timers that remained in the list
 594:FreeRTOS/src/timers.c **** 		when the lists were switched will have been processed within the
 595:FreeRTOS/src/timers.c **** 		prvSampleTimeNow() function. */
 596:FreeRTOS/src/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 597:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 598:FreeRTOS/src/timers.c **** 		{
 599:FreeRTOS/src/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 600:FreeRTOS/src/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 601:FreeRTOS/src/timers.c **** 			{
 602:FreeRTOS/src/timers.c **** 				( void ) xTaskResumeAll();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 12


 603:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 604:FreeRTOS/src/timers.c **** 			}
 605:FreeRTOS/src/timers.c **** 			else
 606:FreeRTOS/src/timers.c **** 			{
 607:FreeRTOS/src/timers.c **** 				/* The tick count has not overflowed, and the next expire
 608:FreeRTOS/src/timers.c **** 				time has not been reached yet.  This task should therefore
 609:FreeRTOS/src/timers.c **** 				block to wait for the next expire time or a command to be
 610:FreeRTOS/src/timers.c **** 				received - whichever comes first.  The following line cannot
 611:FreeRTOS/src/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 612:FreeRTOS/src/timers.c **** 				case when the current timer list is empty. */
 613:FreeRTOS/src/timers.c **** 				if( xListWasEmpty != pdFALSE )
 614:FreeRTOS/src/timers.c **** 				{
 615:FreeRTOS/src/timers.c **** 					/* The current timer list is empty - is the overflow list
 616:FreeRTOS/src/timers.c **** 					also empty? */
 617:FreeRTOS/src/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 618:FreeRTOS/src/timers.c **** 				}
 619:FreeRTOS/src/timers.c **** 
 620:FreeRTOS/src/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 621:FreeRTOS/src/timers.c **** 
 622:FreeRTOS/src/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 623:FreeRTOS/src/timers.c **** 				{
 624:FreeRTOS/src/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 625:FreeRTOS/src/timers.c **** 					block time to expire.  If a command arrived between the
 626:FreeRTOS/src/timers.c **** 					critical section being exited and this yield then the yield
 627:FreeRTOS/src/timers.c **** 					will not cause the task to block. */
 628:FreeRTOS/src/timers.c **** 					portYIELD_WITHIN_API();
 629:FreeRTOS/src/timers.c **** 				}
 630:FreeRTOS/src/timers.c **** 				else
 631:FreeRTOS/src/timers.c **** 				{
 632:FreeRTOS/src/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 633:FreeRTOS/src/timers.c **** 				}
 634:FreeRTOS/src/timers.c **** 			}
 635:FreeRTOS/src/timers.c **** 		}
 636:FreeRTOS/src/timers.c **** 		else
 637:FreeRTOS/src/timers.c **** 		{
 638:FreeRTOS/src/timers.c **** 			( void ) xTaskResumeAll();
 639:FreeRTOS/src/timers.c **** 		}
 640:FreeRTOS/src/timers.c **** 	}
 641:FreeRTOS/src/timers.c **** }
 642:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 643:FreeRTOS/src/timers.c **** 
 644:FreeRTOS/src/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 645:FreeRTOS/src/timers.c **** {
  27              		.loc 1 645 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 646:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
  32              		.loc 1 646 1 view .LVU1
 647:FreeRTOS/src/timers.c **** 
 648:FreeRTOS/src/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 649:FreeRTOS/src/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 650:FreeRTOS/src/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 651:FreeRTOS/src/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 652:FreeRTOS/src/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 653:FreeRTOS/src/timers.c **** 	timer lists will be switched and the next expiry time can be
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 13


 654:FreeRTOS/src/timers.c **** 	re-assessed.  */
 655:FreeRTOS/src/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  33              		.loc 1 655 2 view .LVU2
  34              		.loc 1 655 20 is_stmt 0 view .LVU3
  35 0000 064B     		ldr	r3, .L6
  36 0002 1A68     		ldr	r2, [r3]
  37 0004 1368     		ldr	r3, [r2]
  38 0006 2BB9     		cbnz	r3, .L4
  39 0008 0123     		movs	r3, #1
  40              	.L2:
  41              		.loc 1 655 18 discriminator 4 view .LVU4
  42 000a 0360     		str	r3, [r0]
 656:FreeRTOS/src/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  43              		.loc 1 656 2 is_stmt 1 discriminator 4 view .LVU5
  44              		.loc 1 656 4 is_stmt 0 discriminator 4 view .LVU6
  45 000c 23B9     		cbnz	r3, .L5
 657:FreeRTOS/src/timers.c **** 	{
 658:FreeRTOS/src/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  46              		.loc 1 658 3 is_stmt 1 view .LVU7
  47              		.loc 1 658 21 is_stmt 0 view .LVU8
  48 000e D368     		ldr	r3, [r2, #12]
  49              		.loc 1 658 19 view .LVU9
  50 0010 1868     		ldr	r0, [r3]
  51              	.LVL1:
  52              		.loc 1 658 19 view .LVU10
  53 0012 7047     		bx	lr
  54              	.LVL2:
  55              	.L4:
 655:FreeRTOS/src/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  56              		.loc 1 655 20 view .LVU11
  57 0014 0023     		movs	r3, #0
  58 0016 F8E7     		b	.L2
  59              	.L5:
 659:FreeRTOS/src/timers.c **** 	}
 660:FreeRTOS/src/timers.c **** 	else
 661:FreeRTOS/src/timers.c **** 	{
 662:FreeRTOS/src/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 663:FreeRTOS/src/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  60              		.loc 1 663 19 view .LVU12
  61 0018 0020     		movs	r0, #0
  62              	.LVL3:
 664:FreeRTOS/src/timers.c **** 	}
 665:FreeRTOS/src/timers.c **** 
 666:FreeRTOS/src/timers.c **** 	return xNextExpireTime;
  63              		.loc 1 666 2 is_stmt 1 view .LVU13
 667:FreeRTOS/src/timers.c **** }
  64              		.loc 1 667 1 is_stmt 0 view .LVU14
  65 001a 7047     		bx	lr
  66              	.L7:
  67              		.align	2
  68              	.L6:
  69 001c 00000000 		.word	.LANCHOR0
  70              		.cfi_endproc
  71              	.LFE17:
  73              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  74              		.align	1
  75              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 14


  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	prvInsertTimerInActiveList:
  81              	.LVL4:
  82              	.LFB19:
 668:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 669:FreeRTOS/src/timers.c **** 
 670:FreeRTOS/src/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 671:FreeRTOS/src/timers.c **** {
 672:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 673:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 674:FreeRTOS/src/timers.c **** 
 675:FreeRTOS/src/timers.c **** 	xTimeNow = xTaskGetTickCount();
 676:FreeRTOS/src/timers.c **** 
 677:FreeRTOS/src/timers.c **** 	if( xTimeNow < xLastTime )
 678:FreeRTOS/src/timers.c **** 	{
 679:FreeRTOS/src/timers.c **** 		prvSwitchTimerLists();
 680:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 681:FreeRTOS/src/timers.c **** 	}
 682:FreeRTOS/src/timers.c **** 	else
 683:FreeRTOS/src/timers.c **** 	{
 684:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 685:FreeRTOS/src/timers.c **** 	}
 686:FreeRTOS/src/timers.c **** 
 687:FreeRTOS/src/timers.c **** 	xLastTime = xTimeNow;
 688:FreeRTOS/src/timers.c **** 
 689:FreeRTOS/src/timers.c **** 	return xTimeNow;
 690:FreeRTOS/src/timers.c **** }
 691:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 692:FreeRTOS/src/timers.c **** 
 693:FreeRTOS/src/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 694:FreeRTOS/src/timers.c **** {
  83              		.loc 1 694 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		.loc 1 694 1 is_stmt 0 view .LVU16
  88 0000 08B5     		push	{r3, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 3, -8
  92              		.cfi_offset 14, -4
 695:FreeRTOS/src/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
  93              		.loc 1 695 1 is_stmt 1 view .LVU17
  94              	.LVL5:
 696:FreeRTOS/src/timers.c **** 
 697:FreeRTOS/src/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  95              		.loc 1 697 2 view .LVU18
  96 0002 4160     		str	r1, [r0, #4]
 698:FreeRTOS/src/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  97              		.loc 1 698 2 view .LVU19
  98 0004 0061     		str	r0, [r0, #16]
 699:FreeRTOS/src/timers.c **** 
 700:FreeRTOS/src/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
  99              		.loc 1 700 2 view .LVU20
 100              		.loc 1 700 4 is_stmt 0 view .LVU21
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 15


 101 0006 9142     		cmp	r1, r2
 102 0008 0CD8     		bhi	.L9
 701:FreeRTOS/src/timers.c **** 	{
 702:FreeRTOS/src/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 703:FreeRTOS/src/timers.c **** 		timer was issued, and the time the command was processed? */
 704:FreeRTOS/src/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 103              		.loc 1 704 3 is_stmt 1 view .LVU22
 104              		.loc 1 704 9 is_stmt 0 view .LVU23
 105 000a D21A     		subs	r2, r2, r3
 106              	.LVL6:
 107              		.loc 1 704 64 view .LVU24
 108 000c 8369     		ldr	r3, [r0, #24]
 109              	.LVL7:
 110              		.loc 1 704 5 view .LVU25
 111 000e 9A42     		cmp	r2, r3
 112 0010 01D3     		bcc	.L15
 705:FreeRTOS/src/timers.c **** 		{
 706:FreeRTOS/src/timers.c **** 			/* The time between a command being issued and the command being
 707:FreeRTOS/src/timers.c **** 			processed actually exceeds the timers period.  */
 708:FreeRTOS/src/timers.c **** 			xProcessTimerNow = pdTRUE;
 113              		.loc 1 708 21 view .LVU26
 114 0012 0120     		movs	r0, #1
 115              	.LVL8:
 116              	.L8:
 709:FreeRTOS/src/timers.c **** 		}
 710:FreeRTOS/src/timers.c **** 		else
 711:FreeRTOS/src/timers.c **** 		{
 712:FreeRTOS/src/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 713:FreeRTOS/src/timers.c **** 		}
 714:FreeRTOS/src/timers.c **** 	}
 715:FreeRTOS/src/timers.c **** 	else
 716:FreeRTOS/src/timers.c **** 	{
 717:FreeRTOS/src/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 718:FreeRTOS/src/timers.c **** 		{
 719:FreeRTOS/src/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 720:FreeRTOS/src/timers.c **** 			but the expiry time has not, then the timer must have already passed
 721:FreeRTOS/src/timers.c **** 			its expiry time and should be processed immediately. */
 722:FreeRTOS/src/timers.c **** 			xProcessTimerNow = pdTRUE;
 723:FreeRTOS/src/timers.c **** 		}
 724:FreeRTOS/src/timers.c **** 		else
 725:FreeRTOS/src/timers.c **** 		{
 726:FreeRTOS/src/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 727:FreeRTOS/src/timers.c **** 		}
 728:FreeRTOS/src/timers.c **** 	}
 729:FreeRTOS/src/timers.c **** 
 730:FreeRTOS/src/timers.c **** 	return xProcessTimerNow;
 731:FreeRTOS/src/timers.c **** }
 117              		.loc 1 731 1 view .LVU27
 118 0014 08BD     		pop	{r3, pc}
 119              	.LVL9:
 120              	.L15:
 712:FreeRTOS/src/timers.c **** 		}
 121              		.loc 1 712 4 is_stmt 1 view .LVU28
 122 0016 011D     		adds	r1, r0, #4
 123              	.LVL10:
 712:FreeRTOS/src/timers.c **** 		}
 124              		.loc 1 712 4 is_stmt 0 view .LVU29
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 16


 125 0018 094B     		ldr	r3, .L16
 126 001a 1868     		ldr	r0, [r3]
 127              	.LVL11:
 712:FreeRTOS/src/timers.c **** 		}
 128              		.loc 1 712 4 view .LVU30
 129 001c FFF7FEFF 		bl	vListInsert
 130              	.LVL12:
 695:FreeRTOS/src/timers.c **** 
 131              		.loc 1 695 12 view .LVU31
 132 0020 0020     		movs	r0, #0
 133 0022 F7E7     		b	.L8
 134              	.LVL13:
 135              	.L9:
 717:FreeRTOS/src/timers.c **** 		{
 136              		.loc 1 717 3 is_stmt 1 view .LVU32
 717:FreeRTOS/src/timers.c **** 		{
 137              		.loc 1 717 5 is_stmt 0 view .LVU33
 138 0024 9A42     		cmp	r2, r3
 139 0026 01D2     		bcs	.L11
 717:FreeRTOS/src/timers.c **** 		{
 140              		.loc 1 717 35 discriminator 1 view .LVU34
 141 0028 9942     		cmp	r1, r3
 142 002a 06D2     		bcs	.L13
 143              	.L11:
 726:FreeRTOS/src/timers.c **** 		}
 144              		.loc 1 726 4 is_stmt 1 view .LVU35
 145 002c 011D     		adds	r1, r0, #4
 146              	.LVL14:
 726:FreeRTOS/src/timers.c **** 		}
 147              		.loc 1 726 4 is_stmt 0 view .LVU36
 148 002e 054B     		ldr	r3, .L16+4
 149              	.LVL15:
 726:FreeRTOS/src/timers.c **** 		}
 150              		.loc 1 726 4 view .LVU37
 151 0030 1868     		ldr	r0, [r3]
 152              	.LVL16:
 726:FreeRTOS/src/timers.c **** 		}
 153              		.loc 1 726 4 view .LVU38
 154 0032 FFF7FEFF 		bl	vListInsert
 155              	.LVL17:
 695:FreeRTOS/src/timers.c **** 
 156              		.loc 1 695 12 view .LVU39
 157 0036 0020     		movs	r0, #0
 158 0038 ECE7     		b	.L8
 159              	.LVL18:
 160              	.L13:
 722:FreeRTOS/src/timers.c **** 		}
 161              		.loc 1 722 21 view .LVU40
 162 003a 0120     		movs	r0, #1
 163              	.LVL19:
 730:FreeRTOS/src/timers.c **** }
 164              		.loc 1 730 2 is_stmt 1 view .LVU41
 730:FreeRTOS/src/timers.c **** }
 165              		.loc 1 730 9 is_stmt 0 view .LVU42
 166 003c EAE7     		b	.L8
 167              	.L17:
 168 003e 00BF     		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 17


 169              	.L16:
 170 0040 00000000 		.word	.LANCHOR1
 171 0044 00000000 		.word	.LANCHOR0
 172              		.cfi_endproc
 173              	.LFE19:
 175              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	prvCheckForValidListAndQueue:
 183              	.LFB22:
 732:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 733:FreeRTOS/src/timers.c **** 
 734:FreeRTOS/src/timers.c **** static void	prvProcessReceivedCommands( void )
 735:FreeRTOS/src/timers.c **** {
 736:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 737:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 738:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 739:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 740:FreeRTOS/src/timers.c **** 
 741:FreeRTOS/src/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 742:FreeRTOS/src/timers.c **** 	{
 743:FreeRTOS/src/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 744:FreeRTOS/src/timers.c **** 		{
 745:FreeRTOS/src/timers.c **** 			/* Negative commands are pended function calls rather than timer
 746:FreeRTOS/src/timers.c **** 			commands. */
 747:FreeRTOS/src/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 748:FreeRTOS/src/timers.c **** 			{
 749:FreeRTOS/src/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 750:FreeRTOS/src/timers.c **** 
 751:FreeRTOS/src/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 752:FreeRTOS/src/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 753:FreeRTOS/src/timers.c **** 				configASSERT( pxCallback );
 754:FreeRTOS/src/timers.c **** 
 755:FreeRTOS/src/timers.c **** 				/* Call the function. */
 756:FreeRTOS/src/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 757:FreeRTOS/src/timers.c **** 			}
 758:FreeRTOS/src/timers.c **** 			else
 759:FreeRTOS/src/timers.c **** 			{
 760:FreeRTOS/src/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 761:FreeRTOS/src/timers.c **** 			}
 762:FreeRTOS/src/timers.c **** 		}
 763:FreeRTOS/src/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 764:FreeRTOS/src/timers.c **** 
 765:FreeRTOS/src/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 766:FreeRTOS/src/timers.c **** 		function calls. */
 767:FreeRTOS/src/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 768:FreeRTOS/src/timers.c **** 		{
 769:FreeRTOS/src/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 770:FreeRTOS/src/timers.c **** 			software timer. */
 771:FreeRTOS/src/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 772:FreeRTOS/src/timers.c **** 
 773:FreeRTOS/src/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 774:FreeRTOS/src/timers.c **** 			{
 775:FreeRTOS/src/timers.c **** 				/* The timer is in a list, remove it. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 18


 776:FreeRTOS/src/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 777:FreeRTOS/src/timers.c **** 			}
 778:FreeRTOS/src/timers.c **** 			else
 779:FreeRTOS/src/timers.c **** 			{
 780:FreeRTOS/src/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 781:FreeRTOS/src/timers.c **** 			}
 782:FreeRTOS/src/timers.c **** 
 783:FreeRTOS/src/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 784:FreeRTOS/src/timers.c **** 
 785:FreeRTOS/src/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 786:FreeRTOS/src/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 787:FreeRTOS/src/timers.c **** 			called after the message is received from xTimerQueue so there is no
 788:FreeRTOS/src/timers.c **** 			possibility of a higher priority task adding a message to the message
 789:FreeRTOS/src/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 790:FreeRTOS/src/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 791:FreeRTOS/src/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 792:FreeRTOS/src/timers.c **** 
 793:FreeRTOS/src/timers.c **** 			switch( xMessage.xMessageID )
 794:FreeRTOS/src/timers.c **** 			{
 795:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START :
 796:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START_FROM_ISR :
 797:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_RESET :
 798:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_RESET_FROM_ISR :
 799:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 800:FreeRTOS/src/timers.c **** 					/* Start or restart a timer. */
 801:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 803:FreeRTOS/src/timers.c **** 					{
 804:FreeRTOS/src/timers.c **** 						/* The timer expired before it was added to the active
 805:FreeRTOS/src/timers.c **** 						timer list.  Process it now. */
 806:FreeRTOS/src/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 807:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 808:FreeRTOS/src/timers.c **** 
 809:FreeRTOS/src/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810:FreeRTOS/src/timers.c **** 						{
 811:FreeRTOS/src/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 812:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 813:FreeRTOS/src/timers.c **** 							( void ) xResult;
 814:FreeRTOS/src/timers.c **** 						}
 815:FreeRTOS/src/timers.c **** 						else
 816:FreeRTOS/src/timers.c **** 						{
 817:FreeRTOS/src/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 818:FreeRTOS/src/timers.c **** 						}
 819:FreeRTOS/src/timers.c **** 					}
 820:FreeRTOS/src/timers.c **** 					else
 821:FreeRTOS/src/timers.c **** 					{
 822:FreeRTOS/src/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 823:FreeRTOS/src/timers.c **** 					}
 824:FreeRTOS/src/timers.c **** 					break;
 825:FreeRTOS/src/timers.c **** 
 826:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_STOP :
 827:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 828:FreeRTOS/src/timers.c **** 					/* The timer has already been removed from the active list. */
 829:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 830:FreeRTOS/src/timers.c **** 					break;
 831:FreeRTOS/src/timers.c **** 
 832:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 19


 833:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 834:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 835:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 836:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 837:FreeRTOS/src/timers.c **** 
 838:FreeRTOS/src/timers.c **** 					/* The new period does not really have a reference, and can
 839:FreeRTOS/src/timers.c **** 					be longer or shorter than the old one.  The command time is
 840:FreeRTOS/src/timers.c **** 					therefore set to the current time, and as the period cannot
 841:FreeRTOS/src/timers.c **** 					be zero the next expiry time can only be in the future,
 842:FreeRTOS/src/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 843:FreeRTOS/src/timers.c **** 					no fail case that needs to be handled here. */
 844:FreeRTOS/src/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 845:FreeRTOS/src/timers.c **** 					break;
 846:FreeRTOS/src/timers.c **** 
 847:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_DELETE :
 848:FreeRTOS/src/timers.c **** 					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 849:FreeRTOS/src/timers.c **** 					{
 850:FreeRTOS/src/timers.c **** 						/* The timer has already been removed from the active list,
 851:FreeRTOS/src/timers.c **** 						just free up the memory if the memory was dynamically
 852:FreeRTOS/src/timers.c **** 						allocated. */
 853:FreeRTOS/src/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 854:FreeRTOS/src/timers.c **** 						{
 855:FreeRTOS/src/timers.c **** 							vPortFree( pxTimer );
 856:FreeRTOS/src/timers.c **** 						}
 857:FreeRTOS/src/timers.c **** 						else
 858:FreeRTOS/src/timers.c **** 						{
 859:FreeRTOS/src/timers.c **** 							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 860:FreeRTOS/src/timers.c **** 						}
 861:FreeRTOS/src/timers.c **** 					}
 862:FreeRTOS/src/timers.c **** 					#else
 863:FreeRTOS/src/timers.c **** 					{
 864:FreeRTOS/src/timers.c **** 						/* If dynamic allocation is not enabled, the memory
 865:FreeRTOS/src/timers.c **** 						could not have been dynamically allocated. So there is
 866:FreeRTOS/src/timers.c **** 						no need to free the memory - just mark the timer as
 867:FreeRTOS/src/timers.c **** 						"not active". */
 868:FreeRTOS/src/timers.c **** 						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 869:FreeRTOS/src/timers.c **** 					}
 870:FreeRTOS/src/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 871:FreeRTOS/src/timers.c **** 					break;
 872:FreeRTOS/src/timers.c **** 
 873:FreeRTOS/src/timers.c **** 				default	:
 874:FreeRTOS/src/timers.c **** 					/* Don't expect to get here. */
 875:FreeRTOS/src/timers.c **** 					break;
 876:FreeRTOS/src/timers.c **** 			}
 877:FreeRTOS/src/timers.c **** 		}
 878:FreeRTOS/src/timers.c **** 	}
 879:FreeRTOS/src/timers.c **** }
 880:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 881:FreeRTOS/src/timers.c **** 
 882:FreeRTOS/src/timers.c **** static void prvSwitchTimerLists( void )
 883:FreeRTOS/src/timers.c **** {
 884:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 885:FreeRTOS/src/timers.c **** List_t *pxTemp;
 886:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 887:FreeRTOS/src/timers.c **** BaseType_t xResult;
 888:FreeRTOS/src/timers.c **** 
 889:FreeRTOS/src/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 20


 890:FreeRTOS/src/timers.c **** 	If there are any timers still referenced from the current timer list
 891:FreeRTOS/src/timers.c **** 	then they must have expired and should be processed before the lists
 892:FreeRTOS/src/timers.c **** 	are switched. */
 893:FreeRTOS/src/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 894:FreeRTOS/src/timers.c **** 	{
 895:FreeRTOS/src/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 896:FreeRTOS/src/timers.c **** 
 897:FreeRTOS/src/timers.c **** 		/* Remove the timer from the list. */
 898:FreeRTOS/src/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 v
 899:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 900:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 901:FreeRTOS/src/timers.c **** 
 902:FreeRTOS/src/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 903:FreeRTOS/src/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 904:FreeRTOS/src/timers.c **** 		have not yet been switched. */
 905:FreeRTOS/src/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 906:FreeRTOS/src/timers.c **** 
 907:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 908:FreeRTOS/src/timers.c **** 		{
 909:FreeRTOS/src/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 910:FreeRTOS/src/timers.c **** 			the timer going into the same timer list then it has already expired
 911:FreeRTOS/src/timers.c **** 			and the timer should be re-inserted into the current list so it is
 912:FreeRTOS/src/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 913:FreeRTOS/src/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 914:FreeRTOS/src/timers.c **** 			the lists have been swapped. */
 915:FreeRTOS/src/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 916:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 917:FreeRTOS/src/timers.c **** 			{
 918:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 919:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 920:FreeRTOS/src/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 921:FreeRTOS/src/timers.c **** 			}
 922:FreeRTOS/src/timers.c **** 			else
 923:FreeRTOS/src/timers.c **** 			{
 924:FreeRTOS/src/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 925:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 926:FreeRTOS/src/timers.c **** 				( void ) xResult;
 927:FreeRTOS/src/timers.c **** 			}
 928:FreeRTOS/src/timers.c **** 		}
 929:FreeRTOS/src/timers.c **** 		else
 930:FreeRTOS/src/timers.c **** 		{
 931:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/src/timers.c **** 		}
 933:FreeRTOS/src/timers.c **** 	}
 934:FreeRTOS/src/timers.c **** 
 935:FreeRTOS/src/timers.c **** 	pxTemp = pxCurrentTimerList;
 936:FreeRTOS/src/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 937:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 938:FreeRTOS/src/timers.c **** }
 939:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 940:FreeRTOS/src/timers.c **** 
 941:FreeRTOS/src/timers.c **** static void prvCheckForValidListAndQueue( void )
 942:FreeRTOS/src/timers.c **** {
 184              		.loc 1 942 1 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 21


 188 0000 38B5     		push	{r3, r4, r5, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 16
 191              		.cfi_offset 3, -16
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 5, -8
 194              		.cfi_offset 14, -4
 943:FreeRTOS/src/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 944:FreeRTOS/src/timers.c **** 	queue used to communicate with the timer service, have been
 945:FreeRTOS/src/timers.c **** 	initialised. */
 946:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 195              		.loc 1 946 2 view .LVU44
 196 0002 FFF7FEFF 		bl	vPortEnterCritical
 197              	.LVL20:
 947:FreeRTOS/src/timers.c **** 	{
 948:FreeRTOS/src/timers.c **** 		if( xTimerQueue == NULL )
 198              		.loc 1 948 3 view .LVU45
 199              		.loc 1 948 19 is_stmt 0 view .LVU46
 200 0006 0F4B     		ldr	r3, .L22
 201 0008 1B68     		ldr	r3, [r3]
 202              		.loc 1 948 5 view .LVU47
 203 000a 13B1     		cbz	r3, .L21
 204              	.L19:
 949:FreeRTOS/src/timers.c **** 		{
 950:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 951:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 952:FreeRTOS/src/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 953:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 954:FreeRTOS/src/timers.c **** 
 955:FreeRTOS/src/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 956:FreeRTOS/src/timers.c **** 			{
 957:FreeRTOS/src/timers.c **** 				/* The timer queue is allocated statically in case
 958:FreeRTOS/src/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 959:FreeRTOS/src/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 960:FreeRTOS/src/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 961:FreeRTOS/src/timers.c **** 
 962:FreeRTOS/src/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 963:FreeRTOS/src/timers.c **** 			}
 964:FreeRTOS/src/timers.c **** 			#else
 965:FreeRTOS/src/timers.c **** 			{
 966:FreeRTOS/src/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 967:FreeRTOS/src/timers.c **** 			}
 968:FreeRTOS/src/timers.c **** 			#endif
 969:FreeRTOS/src/timers.c **** 
 970:FreeRTOS/src/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 971:FreeRTOS/src/timers.c **** 			{
 972:FreeRTOS/src/timers.c **** 				if( xTimerQueue != NULL )
 973:FreeRTOS/src/timers.c **** 				{
 974:FreeRTOS/src/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 975:FreeRTOS/src/timers.c **** 				}
 976:FreeRTOS/src/timers.c **** 				else
 977:FreeRTOS/src/timers.c **** 				{
 978:FreeRTOS/src/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 979:FreeRTOS/src/timers.c **** 				}
 980:FreeRTOS/src/timers.c **** 			}
 981:FreeRTOS/src/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 982:FreeRTOS/src/timers.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 22


 983:FreeRTOS/src/timers.c **** 		else
 984:FreeRTOS/src/timers.c **** 		{
 985:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 205              		.loc 1 985 28 is_stmt 1 view .LVU48
 986:FreeRTOS/src/timers.c **** 		}
 987:FreeRTOS/src/timers.c **** 	}
 988:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 206              		.loc 1 988 2 view .LVU49
 207 000c FFF7FEFF 		bl	vPortExitCritical
 208              	.LVL21:
 989:FreeRTOS/src/timers.c **** }
 209              		.loc 1 989 1 is_stmt 0 view .LVU50
 210 0010 38BD     		pop	{r3, r4, r5, pc}
 211              	.L21:
 950:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 212              		.loc 1 950 4 is_stmt 1 view .LVU51
 213 0012 0D4D     		ldr	r5, .L22+4
 214 0014 2846     		mov	r0, r5
 215 0016 FFF7FEFF 		bl	vListInitialise
 216              	.LVL22:
 951:FreeRTOS/src/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 217              		.loc 1 951 4 view .LVU52
 218 001a 0C4C     		ldr	r4, .L22+8
 219 001c 2046     		mov	r0, r4
 220 001e FFF7FEFF 		bl	vListInitialise
 221              	.LVL23:
 952:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 222              		.loc 1 952 4 view .LVU53
 952:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 223              		.loc 1 952 23 is_stmt 0 view .LVU54
 224 0022 0B4B     		ldr	r3, .L22+12
 225 0024 1D60     		str	r5, [r3]
 953:FreeRTOS/src/timers.c **** 
 226              		.loc 1 953 4 is_stmt 1 view .LVU55
 953:FreeRTOS/src/timers.c **** 
 227              		.loc 1 953 24 is_stmt 0 view .LVU56
 228 0026 0B4B     		ldr	r3, .L22+16
 229 0028 1C60     		str	r4, [r3]
 966:FreeRTOS/src/timers.c **** 			}
 230              		.loc 1 966 5 is_stmt 1 view .LVU57
 966:FreeRTOS/src/timers.c **** 			}
 231              		.loc 1 966 19 is_stmt 0 view .LVU58
 232 002a 0022     		movs	r2, #0
 233 002c 1021     		movs	r1, #16
 234 002e 0A20     		movs	r0, #10
 235 0030 FFF7FEFF 		bl	xQueueGenericCreate
 236              	.LVL24:
 966:FreeRTOS/src/timers.c **** 			}
 237              		.loc 1 966 17 view .LVU59
 238 0034 034B     		ldr	r3, .L22
 239 0036 1860     		str	r0, [r3]
 972:FreeRTOS/src/timers.c **** 				{
 240              		.loc 1 972 5 is_stmt 1 view .LVU60
 972:FreeRTOS/src/timers.c **** 				{
 241              		.loc 1 972 7 is_stmt 0 view .LVU61
 242 0038 0028     		cmp	r0, #0
 243 003a E7D0     		beq	.L19
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 23


 974:FreeRTOS/src/timers.c **** 				}
 244              		.loc 1 974 6 is_stmt 1 view .LVU62
 245 003c 0649     		ldr	r1, .L22+20
 246 003e FFF7FEFF 		bl	vQueueAddToRegistry
 247              	.LVL25:
 248 0042 E3E7     		b	.L19
 249              	.L23:
 250              		.align	2
 251              	.L22:
 252 0044 00000000 		.word	.LANCHOR2
 253 0048 00000000 		.word	.LANCHOR3
 254 004c 00000000 		.word	.LANCHOR4
 255 0050 00000000 		.word	.LANCHOR0
 256 0054 00000000 		.word	.LANCHOR1
 257 0058 00000000 		.word	.LC0
 258              		.cfi_endproc
 259              	.LFE22:
 261              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	prvInitialiseNewTimer:
 269              	.LVL26:
 270              	.LFB6:
 355:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 271              		.loc 1 355 1 view -0
 272              		.cfi_startproc
 273              		@ args = 8, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 355:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 275              		.loc 1 355 1 is_stmt 0 view .LVU64
 276 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 277              	.LCFI2:
 278              		.cfi_def_cfa_offset 24
 279              		.cfi_offset 4, -24
 280              		.cfi_offset 5, -20
 281              		.cfi_offset 6, -16
 282              		.cfi_offset 7, -12
 283              		.cfi_offset 8, -8
 284              		.cfi_offset 14, -4
 285 0004 079C     		ldr	r4, [sp, #28]
 357:FreeRTOS/src/timers.c **** 
 286              		.loc 1 357 45 is_stmt 1 view .LVU65
 359:FreeRTOS/src/timers.c **** 	{
 287              		.loc 1 359 2 view .LVU66
 359:FreeRTOS/src/timers.c **** 	{
 288              		.loc 1 359 4 is_stmt 0 view .LVU67
 289 0006 ACB1     		cbz	r4, .L24
 290 0008 1E46     		mov	r6, r3
 291 000a 1546     		mov	r5, r2
 292 000c 0F46     		mov	r7, r1
 293 000e 8046     		mov	r8, r0
 363:FreeRTOS/src/timers.c **** 
 294              		.loc 1 363 3 is_stmt 1 view .LVU68
 295 0010 FFF7FEFF 		bl	prvCheckForValidListAndQueue
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 24


 296              	.LVL27:
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 297              		.loc 1 367 3 view .LVU69
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 298              		.loc 1 367 27 is_stmt 0 view .LVU70
 299 0014 C4F80080 		str	r8, [r4]
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 300              		.loc 1 368 3 is_stmt 1 view .LVU71
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 301              		.loc 1 368 35 is_stmt 0 view .LVU72
 302 0018 A761     		str	r7, [r4, #24]
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 303              		.loc 1 369 3 is_stmt 1 view .LVU73
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 304              		.loc 1 369 25 is_stmt 0 view .LVU74
 305 001a E661     		str	r6, [r4, #28]
 370:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 306              		.loc 1 370 3 is_stmt 1 view .LVU75
 370:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 307              		.loc 1 370 34 is_stmt 0 view .LVU76
 308 001c 069B     		ldr	r3, [sp, #24]
 309 001e 2362     		str	r3, [r4, #32]
 371:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
 310              		.loc 1 371 3 is_stmt 1 view .LVU77
 311 0020 201D     		adds	r0, r4, #4
 312 0022 FFF7FEFF 		bl	vListInitialiseItem
 313              	.LVL28:
 372:FreeRTOS/src/timers.c **** 		{
 314              		.loc 1 372 3 view .LVU78
 372:FreeRTOS/src/timers.c **** 		{
 315              		.loc 1 372 5 is_stmt 0 view .LVU79
 316 0026 2DB1     		cbz	r5, .L24
 374:FreeRTOS/src/timers.c **** 		}
 317              		.loc 1 374 4 is_stmt 1 view .LVU80
 374:FreeRTOS/src/timers.c **** 		}
 318              		.loc 1 374 25 is_stmt 0 view .LVU81
 319 0028 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 320 002c 43F00403 		orr	r3, r3, #4
 321 0030 84F82430 		strb	r3, [r4, #36]
 376:FreeRTOS/src/timers.c **** 	}
 322              		.loc 1 376 34 is_stmt 1 view .LVU82
 323              	.LVL29:
 324              	.L24:
 378:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 325              		.loc 1 378 1 is_stmt 0 view .LVU83
 326 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 378:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 327              		.loc 1 378 1 view .LVU84
 328              		.cfi_endproc
 329              	.LFE6:
 331              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 332              		.align	1
 333              		.global	xTimerCreateTimerTask
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu softvfp
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 25


 339              	xTimerCreateTimerTask:
 340              	.LFB4:
 228:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 341              		.loc 1 228 1 is_stmt 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345 0000 00B5     		push	{lr}
 346              	.LCFI3:
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 14, -4
 349 0002 83B0     		sub	sp, sp, #12
 350              	.LCFI4:
 351              		.cfi_def_cfa_offset 16
 229:FreeRTOS/src/timers.c **** 
 352              		.loc 1 229 1 view .LVU86
 353              	.LVL30:
 235:FreeRTOS/src/timers.c **** 
 354              		.loc 1 235 2 view .LVU87
 355 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 356              	.LVL31:
 237:FreeRTOS/src/timers.c **** 	{
 357              		.loc 1 237 2 view .LVU88
 237:FreeRTOS/src/timers.c **** 	{
 358              		.loc 1 237 18 is_stmt 0 view .LVU89
 359 0008 084B     		ldr	r3, .L31
 360 000a 1B68     		ldr	r3, [r3]
 237:FreeRTOS/src/timers.c **** 	{
 361              		.loc 1 237 4 view .LVU90
 362 000c 63B1     		cbz	r3, .L29
 261:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 363              		.loc 1 261 4 is_stmt 1 view .LVU91
 261:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 364              		.loc 1 261 14 is_stmt 0 view .LVU92
 365 000e 084B     		ldr	r3, .L31+4
 366 0010 0193     		str	r3, [sp, #4]
 367 0012 0323     		movs	r3, #3
 368 0014 0093     		str	r3, [sp]
 369 0016 0023     		movs	r3, #0
 370 0018 8022     		movs	r2, #128
 371 001a 0649     		ldr	r1, .L31+8
 372 001c 0648     		ldr	r0, .L31+12
 373 001e FFF7FEFF 		bl	xTaskCreate
 374              	.LVL32:
 375              	.L27:
 277:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 376              		.loc 1 277 1 view .LVU93
 377 0022 03B0     		add	sp, sp, #12
 378              	.LCFI5:
 379              		.cfi_remember_state
 380              		.cfi_def_cfa_offset 4
 381              		@ sp needed
 382 0024 5DF804FB 		ldr	pc, [sp], #4
 383              	.LVL33:
 384              	.L29:
 385              	.LCFI6:
 386              		.cfi_restore_state
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 26


 229:FreeRTOS/src/timers.c **** 
 387              		.loc 1 229 12 view .LVU94
 388 0028 0020     		movs	r0, #0
 272:FreeRTOS/src/timers.c **** 	}
 389              		.loc 1 272 27 is_stmt 1 view .LVU95
 275:FreeRTOS/src/timers.c **** 	return xReturn;
 390              		.loc 1 275 25 view .LVU96
 276:FreeRTOS/src/timers.c **** }
 391              		.loc 1 276 2 view .LVU97
 276:FreeRTOS/src/timers.c **** }
 392              		.loc 1 276 9 is_stmt 0 view .LVU98
 393 002a FAE7     		b	.L27
 394              	.L32:
 395              		.align	2
 396              	.L31:
 397 002c 00000000 		.word	.LANCHOR2
 398 0030 00000000 		.word	.LANCHOR5
 399 0034 00000000 		.word	.LC1
 400 0038 00000000 		.word	prvTimerTask
 401              		.cfi_endproc
 402              	.LFE4:
 404              		.section	.text.xTimerCreate,"ax",%progbits
 405              		.align	1
 406              		.global	xTimerCreate
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu softvfp
 412              	xTimerCreate:
 413              	.LVL34:
 414              	.LFB5:
 287:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 415              		.loc 1 287 2 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 4, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 287:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 419              		.loc 1 287 2 is_stmt 0 view .LVU100
 420 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 421              	.LCFI7:
 422              		.cfi_def_cfa_offset 24
 423              		.cfi_offset 4, -24
 424              		.cfi_offset 5, -20
 425              		.cfi_offset 6, -16
 426              		.cfi_offset 7, -12
 427              		.cfi_offset 8, -8
 428              		.cfi_offset 14, -4
 429 0004 82B0     		sub	sp, sp, #8
 430              	.LCFI8:
 431              		.cfi_def_cfa_offset 32
 432 0006 0546     		mov	r5, r0
 433 0008 0E46     		mov	r6, r1
 434 000a 1746     		mov	r7, r2
 435 000c 9846     		mov	r8, r3
 288:FreeRTOS/src/timers.c **** 
 436              		.loc 1 288 2 is_stmt 1 view .LVU101
 290:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 27


 437              		.loc 1 290 3 view .LVU102
 290:FreeRTOS/src/timers.c **** 
 438              		.loc 1 290 30 is_stmt 0 view .LVU103
 439 000e 2820     		movs	r0, #40
 440              	.LVL35:
 290:FreeRTOS/src/timers.c **** 
 441              		.loc 1 290 30 view .LVU104
 442 0010 FFF7FEFF 		bl	pvPortMalloc
 443              	.LVL36:
 292:FreeRTOS/src/timers.c **** 		{
 444              		.loc 1 292 3 is_stmt 1 view .LVU105
 292:FreeRTOS/src/timers.c **** 		{
 445              		.loc 1 292 5 is_stmt 0 view .LVU106
 446 0014 0446     		mov	r4, r0
 447 0016 58B1     		cbz	r0, .L33
 297:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 448              		.loc 1 297 4 is_stmt 1 view .LVU107
 297:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 449              		.loc 1 297 25 is_stmt 0 view .LVU108
 450 0018 0023     		movs	r3, #0
 451 001a 80F82430 		strb	r3, [r0, #36]
 298:FreeRTOS/src/timers.c **** 		}
 452              		.loc 1 298 4 is_stmt 1 view .LVU109
 453 001e 0190     		str	r0, [sp, #4]
 454 0020 089B     		ldr	r3, [sp, #32]
 455 0022 0093     		str	r3, [sp]
 456 0024 4346     		mov	r3, r8
 457 0026 3A46     		mov	r2, r7
 458 0028 3146     		mov	r1, r6
 459 002a 2846     		mov	r0, r5
 460              	.LVL37:
 298:FreeRTOS/src/timers.c **** 		}
 461              		.loc 1 298 4 is_stmt 0 view .LVU110
 462 002c FFF7FEFF 		bl	prvInitialiseNewTimer
 463              	.LVL38:
 301:FreeRTOS/src/timers.c **** 	}
 464              		.loc 1 301 3 is_stmt 1 view .LVU111
 465              	.L33:
 302:FreeRTOS/src/timers.c **** 
 466              		.loc 1 302 2 is_stmt 0 view .LVU112
 467 0030 2046     		mov	r0, r4
 468 0032 02B0     		add	sp, sp, #8
 469              	.LCFI9:
 470              		.cfi_def_cfa_offset 24
 471              		@ sp needed
 472 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 302:FreeRTOS/src/timers.c **** 
 473              		.loc 1 302 2 view .LVU113
 474              		.cfi_endproc
 475              	.LFE5:
 477              		.section	.text.xTimerGenericCommand,"ax",%progbits
 478              		.align	1
 479              		.global	xTimerGenericCommand
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 28


 485              	xTimerGenericCommand:
 486              	.LVL39:
 487              	.LFB7:
 382:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 488              		.loc 1 382 1 is_stmt 1 view -0
 489              		.cfi_startproc
 490              		@ args = 4, pretend = 0, frame = 16
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 382:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 492              		.loc 1 382 1 is_stmt 0 view .LVU115
 493 0000 30B5     		push	{r4, r5, lr}
 494              	.LCFI10:
 495              		.cfi_def_cfa_offset 12
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 5, -8
 498              		.cfi_offset 14, -4
 499 0002 85B0     		sub	sp, sp, #20
 500              	.LCFI11:
 501              		.cfi_def_cfa_offset 32
 383:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 502              		.loc 1 383 1 is_stmt 1 view .LVU116
 503              	.LVL40:
 384:FreeRTOS/src/timers.c **** 
 504              		.loc 1 384 1 view .LVU117
 386:FreeRTOS/src/timers.c **** 
 505              		.loc 1 386 24 view .LVU118
 390:FreeRTOS/src/timers.c **** 	{
 506              		.loc 1 390 2 view .LVU119
 390:FreeRTOS/src/timers.c **** 	{
 507              		.loc 1 390 18 is_stmt 0 view .LVU120
 508 0004 134C     		ldr	r4, .L43
 509 0006 2568     		ldr	r5, [r4]
 390:FreeRTOS/src/timers.c **** 	{
 510              		.loc 1 390 4 view .LVU121
 511 0008 0DB3     		cbz	r5, .L40
 512 000a 1C46     		mov	r4, r3
 393:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 513              		.loc 1 393 3 is_stmt 1 view .LVU122
 393:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 514              		.loc 1 393 23 is_stmt 0 view .LVU123
 515 000c 0091     		str	r1, [sp]
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 516              		.loc 1 394 3 is_stmt 1 view .LVU124
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 517              		.loc 1 394 45 is_stmt 0 view .LVU125
 518 000e 0192     		str	r2, [sp, #4]
 395:FreeRTOS/src/timers.c **** 
 519              		.loc 1 395 3 is_stmt 1 view .LVU126
 395:FreeRTOS/src/timers.c **** 
 520              		.loc 1 395 39 is_stmt 0 view .LVU127
 521 0010 0290     		str	r0, [sp, #8]
 397:FreeRTOS/src/timers.c **** 		{
 522              		.loc 1 397 3 is_stmt 1 view .LVU128
 397:FreeRTOS/src/timers.c **** 		{
 523              		.loc 1 397 5 is_stmt 0 view .LVU129
 524 0012 0529     		cmp	r1, #5
 525 0014 13DC     		bgt	.L38
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 29


 399:FreeRTOS/src/timers.c **** 			{
 526              		.loc 1 399 4 is_stmt 1 view .LVU130
 399:FreeRTOS/src/timers.c **** 			{
 527              		.loc 1 399 8 is_stmt 0 view .LVU131
 528 0016 FFF7FEFF 		bl	xTaskGetSchedulerState
 529              	.LVL41:
 399:FreeRTOS/src/timers.c **** 			{
 530              		.loc 1 399 6 view .LVU132
 531 001a 0228     		cmp	r0, #2
 532 001c 07D0     		beq	.L42
 405:FreeRTOS/src/timers.c **** 			}
 533              		.loc 1 405 5 is_stmt 1 view .LVU133
 405:FreeRTOS/src/timers.c **** 			}
 534              		.loc 1 405 15 is_stmt 0 view .LVU134
 535 001e 0023     		movs	r3, #0
 536 0020 1A46     		mov	r2, r3
 537 0022 6946     		mov	r1, sp
 538 0024 0B48     		ldr	r0, .L43
 539 0026 0068     		ldr	r0, [r0]
 540 0028 FFF7FEFF 		bl	xQueueGenericSend
 541              	.LVL42:
 405:FreeRTOS/src/timers.c **** 			}
 542              		.loc 1 405 15 view .LVU135
 543 002c 0DE0     		b	.L36
 544              	.LVL43:
 545              	.L42:
 401:FreeRTOS/src/timers.c **** 			}
 546              		.loc 1 401 5 is_stmt 1 view .LVU136
 401:FreeRTOS/src/timers.c **** 			}
 547              		.loc 1 401 15 is_stmt 0 view .LVU137
 548 002e 0023     		movs	r3, #0
 549 0030 089A     		ldr	r2, [sp, #32]
 550 0032 6946     		mov	r1, sp
 551 0034 0748     		ldr	r0, .L43
 552 0036 0068     		ldr	r0, [r0]
 553 0038 FFF7FEFF 		bl	xQueueGenericSend
 554              	.LVL44:
 401:FreeRTOS/src/timers.c **** 			}
 555              		.loc 1 401 15 view .LVU138
 556 003c 05E0     		b	.L36
 557              	.LVL45:
 558              	.L38:
 410:FreeRTOS/src/timers.c **** 		}
 559              		.loc 1 410 4 is_stmt 1 view .LVU139
 410:FreeRTOS/src/timers.c **** 		}
 560              		.loc 1 410 14 is_stmt 0 view .LVU140
 561 003e 0023     		movs	r3, #0
 562              	.LVL46:
 410:FreeRTOS/src/timers.c **** 		}
 563              		.loc 1 410 14 view .LVU141
 564 0040 2246     		mov	r2, r4
 565              	.LVL47:
 410:FreeRTOS/src/timers.c **** 		}
 566              		.loc 1 410 14 view .LVU142
 567 0042 6946     		mov	r1, sp
 568              	.LVL48:
 410:FreeRTOS/src/timers.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 30


 569              		.loc 1 410 14 view .LVU143
 570 0044 2846     		mov	r0, r5
 571              	.LVL49:
 410:FreeRTOS/src/timers.c **** 		}
 572              		.loc 1 410 14 view .LVU144
 573 0046 FFF7FEFF 		bl	xQueueGenericSendFromISR
 574              	.LVL50:
 575              	.L36:
 421:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 576              		.loc 1 421 1 view .LVU145
 577 004a 05B0     		add	sp, sp, #20
 578              	.LCFI12:
 579              		.cfi_remember_state
 580              		.cfi_def_cfa_offset 12
 581              		@ sp needed
 582 004c 30BD     		pop	{r4, r5, pc}
 583              	.LVL51:
 584              	.L40:
 585              	.LCFI13:
 586              		.cfi_restore_state
 383:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 587              		.loc 1 383 12 view .LVU146
 588 004e 0020     		movs	r0, #0
 589              	.LVL52:
 417:FreeRTOS/src/timers.c **** 	}
 590              		.loc 1 417 27 is_stmt 1 view .LVU147
 420:FreeRTOS/src/timers.c **** }
 591              		.loc 1 420 2 view .LVU148
 420:FreeRTOS/src/timers.c **** }
 592              		.loc 1 420 9 is_stmt 0 view .LVU149
 593 0050 FBE7     		b	.L36
 594              	.L44:
 595 0052 00BF     		.align	2
 596              	.L43:
 597 0054 00000000 		.word	.LANCHOR2
 598              		.cfi_endproc
 599              	.LFE7:
 601              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 602              		.align	1
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu softvfp
 608              	prvSwitchTimerLists:
 609              	.LFB21:
 883:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 610              		.loc 1 883 1 is_stmt 1 view -0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614 0000 70B5     		push	{r4, r5, r6, lr}
 615              	.LCFI14:
 616              		.cfi_def_cfa_offset 16
 617              		.cfi_offset 4, -16
 618              		.cfi_offset 5, -12
 619              		.cfi_offset 6, -8
 620              		.cfi_offset 14, -4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 31


 621 0002 82B0     		sub	sp, sp, #8
 622              	.LCFI15:
 623              		.cfi_def_cfa_offset 24
 884:FreeRTOS/src/timers.c **** List_t *pxTemp;
 624              		.loc 1 884 1 view .LVU151
 885:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 625              		.loc 1 885 1 view .LVU152
 886:FreeRTOS/src/timers.c **** BaseType_t xResult;
 626              		.loc 1 886 1 view .LVU153
 887:FreeRTOS/src/timers.c **** 
 627              		.loc 1 887 1 view .LVU154
 893:FreeRTOS/src/timers.c **** 	{
 628              		.loc 1 893 2 view .LVU155
 629              	.L47:
 931:FreeRTOS/src/timers.c **** 		}
 630              		.loc 1 931 28 view .LVU156
 893:FreeRTOS/src/timers.c **** 	{
 631              		.loc 1 893 9 is_stmt 0 view .LVU157
 632 0004 164B     		ldr	r3, .L53
 633 0006 1B68     		ldr	r3, [r3]
 634 0008 1A68     		ldr	r2, [r3]
 893:FreeRTOS/src/timers.c **** 	{
 635              		.loc 1 893 7 view .LVU158
 636 000a 12B3     		cbz	r2, .L52
 895:FreeRTOS/src/timers.c **** 
 637              		.loc 1 895 3 is_stmt 1 view .LVU159
 895:FreeRTOS/src/timers.c **** 
 638              		.loc 1 895 21 is_stmt 0 view .LVU160
 639 000c DB68     		ldr	r3, [r3, #12]
 895:FreeRTOS/src/timers.c **** 
 640              		.loc 1 895 19 view .LVU161
 641 000e 1E68     		ldr	r6, [r3]
 642              	.LVL53:
 898:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 643              		.loc 1 898 3 is_stmt 1 view .LVU162
 898:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 644              		.loc 1 898 11 is_stmt 0 view .LVU163
 645 0010 DC68     		ldr	r4, [r3, #12]
 646              	.LVL54:
 899:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 647              		.loc 1 899 3 is_stmt 1 view .LVU164
 899:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 648              		.loc 1 899 12 is_stmt 0 view .LVU165
 649 0012 251D     		adds	r5, r4, #4
 650 0014 2846     		mov	r0, r5
 651 0016 FFF7FEFF 		bl	uxListRemove
 652              	.LVL55:
 900:FreeRTOS/src/timers.c **** 
 653              		.loc 1 900 32 is_stmt 1 view .LVU166
 905:FreeRTOS/src/timers.c **** 
 654              		.loc 1 905 3 view .LVU167
 905:FreeRTOS/src/timers.c **** 
 655              		.loc 1 905 10 is_stmt 0 view .LVU168
 656 001a 236A     		ldr	r3, [r4, #32]
 905:FreeRTOS/src/timers.c **** 
 657              		.loc 1 905 3 view .LVU169
 658 001c 2046     		mov	r0, r4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 32


 659 001e 9847     		blx	r3
 660              	.LVL56:
 907:FreeRTOS/src/timers.c **** 		{
 661              		.loc 1 907 3 is_stmt 1 view .LVU170
 907:FreeRTOS/src/timers.c **** 		{
 662              		.loc 1 907 16 is_stmt 0 view .LVU171
 663 0020 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 907:FreeRTOS/src/timers.c **** 		{
 664              		.loc 1 907 5 view .LVU172
 665 0024 13F0040F 		tst	r3, #4
 666 0028 ECD0     		beq	.L47
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 667              		.loc 1 915 4 is_stmt 1 view .LVU173
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 668              		.loc 1 915 45 is_stmt 0 view .LVU174
 669 002a A369     		ldr	r3, [r4, #24]
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 670              		.loc 1 915 16 view .LVU175
 671 002c 3344     		add	r3, r3, r6
 672              	.LVL57:
 916:FreeRTOS/src/timers.c **** 			{
 673              		.loc 1 916 4 is_stmt 1 view .LVU176
 916:FreeRTOS/src/timers.c **** 			{
 674              		.loc 1 916 6 is_stmt 0 view .LVU177
 675 002e 9E42     		cmp	r6, r3
 676 0030 07D2     		bcs	.L48
 918:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 677              		.loc 1 918 5 is_stmt 1 view .LVU178
 678 0032 6360     		str	r3, [r4, #4]
 919:FreeRTOS/src/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 679              		.loc 1 919 5 view .LVU179
 680 0034 2461     		str	r4, [r4, #16]
 920:FreeRTOS/src/timers.c **** 			}
 681              		.loc 1 920 5 view .LVU180
 682 0036 2946     		mov	r1, r5
 683 0038 094B     		ldr	r3, .L53
 684              	.LVL58:
 920:FreeRTOS/src/timers.c **** 			}
 685              		.loc 1 920 5 is_stmt 0 view .LVU181
 686 003a 1868     		ldr	r0, [r3]
 687 003c FFF7FEFF 		bl	vListInsert
 688              	.LVL59:
 920:FreeRTOS/src/timers.c **** 			}
 689              		.loc 1 920 5 view .LVU182
 690 0040 E0E7     		b	.L47
 691              	.LVL60:
 692              	.L48:
 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 693              		.loc 1 924 5 is_stmt 1 view .LVU183
 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 694              		.loc 1 924 15 is_stmt 0 view .LVU184
 695 0042 0021     		movs	r1, #0
 696 0044 0091     		str	r1, [sp]
 697 0046 0B46     		mov	r3, r1
 698              	.LVL61:
 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 699              		.loc 1 924 15 view .LVU185
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 33


 700 0048 3246     		mov	r2, r6
 701 004a 2046     		mov	r0, r4
 702 004c FFF7FEFF 		bl	xTimerGenericCommand
 703              	.LVL62:
 704 0050 D8E7     		b	.L47
 705              	.LVL63:
 706              	.L52:
 935:FreeRTOS/src/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 707              		.loc 1 935 2 is_stmt 1 view .LVU186
 936:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 708              		.loc 1 936 2 view .LVU187
 936:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 709              		.loc 1 936 21 is_stmt 0 view .LVU188
 710 0052 044A     		ldr	r2, .L53+4
 711 0054 1068     		ldr	r0, [r2]
 712 0056 0249     		ldr	r1, .L53
 713 0058 0860     		str	r0, [r1]
 937:FreeRTOS/src/timers.c **** }
 714              		.loc 1 937 2 is_stmt 1 view .LVU189
 937:FreeRTOS/src/timers.c **** }
 715              		.loc 1 937 22 is_stmt 0 view .LVU190
 716 005a 1360     		str	r3, [r2]
 938:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 717              		.loc 1 938 1 view .LVU191
 718 005c 02B0     		add	sp, sp, #8
 719              	.LCFI16:
 720              		.cfi_def_cfa_offset 16
 721              		@ sp needed
 722 005e 70BD     		pop	{r4, r5, r6, pc}
 723              	.L54:
 724              		.align	2
 725              	.L53:
 726 0060 00000000 		.word	.LANCHOR0
 727 0064 00000000 		.word	.LANCHOR1
 728              		.cfi_endproc
 729              	.LFE21:
 731              		.section	.text.prvSampleTimeNow,"ax",%progbits
 732              		.align	1
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu softvfp
 738              	prvSampleTimeNow:
 739              	.LVL64:
 740              	.LFB18:
 671:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 741              		.loc 1 671 1 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 671:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 745              		.loc 1 671 1 is_stmt 0 view .LVU193
 746 0000 38B5     		push	{r3, r4, r5, lr}
 747              	.LCFI17:
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 3, -16
 750              		.cfi_offset 4, -12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 34


 751              		.cfi_offset 5, -8
 752              		.cfi_offset 14, -4
 753 0002 0546     		mov	r5, r0
 672:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 754              		.loc 1 672 1 is_stmt 1 view .LVU194
 673:FreeRTOS/src/timers.c **** 
 755              		.loc 1 673 17 view .LVU195
 675:FreeRTOS/src/timers.c **** 
 756              		.loc 1 675 2 view .LVU196
 675:FreeRTOS/src/timers.c **** 
 757              		.loc 1 675 13 is_stmt 0 view .LVU197
 758 0004 FFF7FEFF 		bl	xTaskGetTickCount
 759              	.LVL65:
 675:FreeRTOS/src/timers.c **** 
 760              		.loc 1 675 13 view .LVU198
 761 0008 0446     		mov	r4, r0
 762              	.LVL66:
 677:FreeRTOS/src/timers.c **** 	{
 763              		.loc 1 677 2 is_stmt 1 view .LVU199
 677:FreeRTOS/src/timers.c **** 	{
 764              		.loc 1 677 15 is_stmt 0 view .LVU200
 765 000a 074B     		ldr	r3, .L60
 766 000c 1B68     		ldr	r3, [r3]
 677:FreeRTOS/src/timers.c **** 	{
 767              		.loc 1 677 4 view .LVU201
 768 000e 8342     		cmp	r3, r0
 769 0010 05D8     		bhi	.L59
 684:FreeRTOS/src/timers.c **** 	}
 770              		.loc 1 684 3 is_stmt 1 view .LVU202
 684:FreeRTOS/src/timers.c **** 	}
 771              		.loc 1 684 29 is_stmt 0 view .LVU203
 772 0012 0023     		movs	r3, #0
 773 0014 2B60     		str	r3, [r5]
 774              	.LVL67:
 775              	.L57:
 687:FreeRTOS/src/timers.c **** 
 776              		.loc 1 687 2 is_stmt 1 view .LVU204
 687:FreeRTOS/src/timers.c **** 
 777              		.loc 1 687 12 is_stmt 0 view .LVU205
 778 0016 044B     		ldr	r3, .L60
 779 0018 1C60     		str	r4, [r3]
 689:FreeRTOS/src/timers.c **** }
 780              		.loc 1 689 2 is_stmt 1 view .LVU206
 690:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 781              		.loc 1 690 1 is_stmt 0 view .LVU207
 782 001a 2046     		mov	r0, r4
 783 001c 38BD     		pop	{r3, r4, r5, pc}
 784              	.LVL68:
 785              	.L59:
 679:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 786              		.loc 1 679 3 is_stmt 1 view .LVU208
 787 001e FFF7FEFF 		bl	prvSwitchTimerLists
 788              	.LVL69:
 680:FreeRTOS/src/timers.c **** 	}
 789              		.loc 1 680 3 view .LVU209
 680:FreeRTOS/src/timers.c **** 	}
 790              		.loc 1 680 29 is_stmt 0 view .LVU210
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 35


 791 0022 0123     		movs	r3, #1
 792 0024 2B60     		str	r3, [r5]
 793 0026 F6E7     		b	.L57
 794              	.L61:
 795              		.align	2
 796              	.L60:
 797 0028 00000000 		.word	.LANCHOR6
 798              		.cfi_endproc
 799              	.LFE18:
 801              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 802              		.align	1
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu softvfp
 808              	prvProcessExpiredTimer:
 809              	.LVL70:
 810              	.LFB14:
 508:FreeRTOS/src/timers.c **** BaseType_t xResult;
 811              		.loc 1 508 1 is_stmt 1 view -0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 508:FreeRTOS/src/timers.c **** BaseType_t xResult;
 815              		.loc 1 508 1 is_stmt 0 view .LVU212
 816 0000 70B5     		push	{r4, r5, r6, lr}
 817              	.LCFI18:
 818              		.cfi_def_cfa_offset 16
 819              		.cfi_offset 4, -16
 820              		.cfi_offset 5, -12
 821              		.cfi_offset 6, -8
 822              		.cfi_offset 14, -4
 823 0002 82B0     		sub	sp, sp, #8
 824              	.LCFI19:
 825              		.cfi_def_cfa_offset 24
 826 0004 0546     		mov	r5, r0
 827 0006 0E46     		mov	r6, r1
 509:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 828              		.loc 1 509 1 is_stmt 1 view .LVU213
 510:FreeRTOS/src/timers.c **** 
 829              		.loc 1 510 1 view .LVU214
 510:FreeRTOS/src/timers.c **** 
 830              		.loc 1 510 41 is_stmt 0 view .LVU215
 831 0008 124B     		ldr	r3, .L67
 832 000a 1B68     		ldr	r3, [r3]
 833 000c DB68     		ldr	r3, [r3, #12]
 510:FreeRTOS/src/timers.c **** 
 834              		.loc 1 510 17 view .LVU216
 835 000e DC68     		ldr	r4, [r3, #12]
 836              	.LVL71:
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 837              		.loc 1 514 2 is_stmt 1 view .LVU217
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 838              		.loc 1 514 11 is_stmt 0 view .LVU218
 839 0010 201D     		adds	r0, r4, #4
 840              	.LVL72:
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 36


 841              		.loc 1 514 11 view .LVU219
 842 0012 FFF7FEFF 		bl	uxListRemove
 843              	.LVL73:
 515:FreeRTOS/src/timers.c **** 
 844              		.loc 1 515 31 is_stmt 1 view .LVU220
 519:FreeRTOS/src/timers.c **** 	{
 845              		.loc 1 519 2 view .LVU221
 519:FreeRTOS/src/timers.c **** 	{
 846              		.loc 1 519 15 is_stmt 0 view .LVU222
 847 0016 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 519:FreeRTOS/src/timers.c **** 	{
 848              		.loc 1 519 4 view .LVU223
 849 001a 13F0040F 		tst	r3, #4
 850 001e 08D1     		bne	.L66
 539:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 851              		.loc 1 539 3 is_stmt 1 view .LVU224
 539:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 852              		.loc 1 539 21 is_stmt 0 view .LVU225
 853 0020 23F00103 		bic	r3, r3, #1
 854 0024 84F82430 		strb	r3, [r4, #36]
 855              	.L64:
 540:FreeRTOS/src/timers.c **** 	}
 856              		.loc 1 540 27 is_stmt 1 view .LVU226
 544:FreeRTOS/src/timers.c **** }
 857              		.loc 1 544 2 view .LVU227
 544:FreeRTOS/src/timers.c **** }
 858              		.loc 1 544 9 is_stmt 0 view .LVU228
 859 0028 236A     		ldr	r3, [r4, #32]
 544:FreeRTOS/src/timers.c **** }
 860              		.loc 1 544 2 view .LVU229
 861 002a 2046     		mov	r0, r4
 862 002c 9847     		blx	r3
 863              	.LVL74:
 545:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 864              		.loc 1 545 1 view .LVU230
 865 002e 02B0     		add	sp, sp, #8
 866              	.LCFI20:
 867              		.cfi_remember_state
 868              		.cfi_def_cfa_offset 16
 869              		@ sp needed
 870 0030 70BD     		pop	{r4, r5, r6, pc}
 871              	.LVL75:
 872              	.L66:
 873              	.LCFI21:
 874              		.cfi_restore_state
 524:FreeRTOS/src/timers.c **** 		{
 875              		.loc 1 524 3 is_stmt 1 view .LVU231
 524:FreeRTOS/src/timers.c **** 		{
 876              		.loc 1 524 71 is_stmt 0 view .LVU232
 877 0032 A169     		ldr	r1, [r4, #24]
 524:FreeRTOS/src/timers.c **** 		{
 878              		.loc 1 524 7 view .LVU233
 879 0034 2B46     		mov	r3, r5
 880 0036 3246     		mov	r2, r6
 881 0038 2944     		add	r1, r1, r5
 882 003a 2046     		mov	r0, r4
 883 003c FFF7FEFF 		bl	prvInsertTimerInActiveList
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 37


 884              	.LVL76:
 524:FreeRTOS/src/timers.c **** 		{
 885              		.loc 1 524 5 view .LVU234
 886 0040 0028     		cmp	r0, #0
 887 0042 F1D0     		beq	.L64
 528:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 888              		.loc 1 528 4 is_stmt 1 view .LVU235
 528:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 889              		.loc 1 528 14 is_stmt 0 view .LVU236
 890 0044 0021     		movs	r1, #0
 891 0046 0091     		str	r1, [sp]
 892 0048 0B46     		mov	r3, r1
 893 004a 2A46     		mov	r2, r5
 894 004c 2046     		mov	r0, r4
 895 004e FFF7FEFF 		bl	xTimerGenericCommand
 896              	.LVL77:
 529:FreeRTOS/src/timers.c **** 			( void ) xResult;
 897              		.loc 1 529 27 is_stmt 1 view .LVU237
 530:FreeRTOS/src/timers.c **** 		}
 898              		.loc 1 530 4 view .LVU238
 899 0052 E9E7     		b	.L64
 900              	.L68:
 901              		.align	2
 902              	.L67:
 903 0054 00000000 		.word	.LANCHOR0
 904              		.cfi_endproc
 905              	.LFE14:
 907              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 908              		.align	1
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu softvfp
 914              	prvProcessTimerOrBlockTask:
 915              	.LVL78:
 916              	.LFB16:
 585:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 917              		.loc 1 585 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 8
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 585:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 921              		.loc 1 585 1 is_stmt 0 view .LVU240
 922 0000 70B5     		push	{r4, r5, r6, lr}
 923              	.LCFI22:
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 4, -16
 926              		.cfi_offset 5, -12
 927              		.cfi_offset 6, -8
 928              		.cfi_offset 14, -4
 929 0002 82B0     		sub	sp, sp, #8
 930              	.LCFI23:
 931              		.cfi_def_cfa_offset 24
 932 0004 0646     		mov	r6, r0
 933 0006 0C46     		mov	r4, r1
 586:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched;
 934              		.loc 1 586 1 is_stmt 1 view .LVU241
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 38


 587:FreeRTOS/src/timers.c **** 
 935              		.loc 1 587 1 view .LVU242
 589:FreeRTOS/src/timers.c **** 	{
 936              		.loc 1 589 2 view .LVU243
 937 0008 FFF7FEFF 		bl	vTaskSuspendAll
 938              	.LVL79:
 596:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 939              		.loc 1 596 3 view .LVU244
 596:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 940              		.loc 1 596 14 is_stmt 0 view .LVU245
 941 000c 01A8     		add	r0, sp, #4
 942 000e FFF7FEFF 		bl	prvSampleTimeNow
 943              	.LVL80:
 597:FreeRTOS/src/timers.c **** 		{
 944              		.loc 1 597 3 is_stmt 1 view .LVU246
 597:FreeRTOS/src/timers.c **** 		{
 945              		.loc 1 597 31 is_stmt 0 view .LVU247
 946 0012 019B     		ldr	r3, [sp, #4]
 597:FreeRTOS/src/timers.c **** 		{
 947              		.loc 1 597 5 view .LVU248
 948 0014 23BB     		cbnz	r3, .L70
 949 0016 0546     		mov	r5, r0
 600:FreeRTOS/src/timers.c **** 			{
 950              		.loc 1 600 4 is_stmt 1 view .LVU249
 600:FreeRTOS/src/timers.c **** 			{
 951              		.loc 1 600 6 is_stmt 0 view .LVU250
 952 0018 0CB9     		cbnz	r4, .L71
 600:FreeRTOS/src/timers.c **** 			{
 953              		.loc 1 600 37 discriminator 1 view .LVU251
 954 001a B042     		cmp	r0, r6
 955 001c 17D2     		bcs	.L76
 956              	.L71:
 613:FreeRTOS/src/timers.c **** 				{
 957              		.loc 1 613 5 is_stmt 1 view .LVU252
 613:FreeRTOS/src/timers.c **** 				{
 958              		.loc 1 613 7 is_stmt 0 view .LVU253
 959 001e 24B1     		cbz	r4, .L73
 617:FreeRTOS/src/timers.c **** 				}
 960              		.loc 1 617 6 is_stmt 1 view .LVU254
 617:FreeRTOS/src/timers.c **** 				}
 961              		.loc 1 617 22 is_stmt 0 view .LVU255
 962 0020 114B     		ldr	r3, .L77
 963 0022 1B68     		ldr	r3, [r3]
 964 0024 1B68     		ldr	r3, [r3]
 965 0026 CBB9     		cbnz	r3, .L74
 966 0028 0124     		movs	r4, #1
 967              	.LVL81:
 968              	.L73:
 620:FreeRTOS/src/timers.c **** 
 969              		.loc 1 620 5 is_stmt 1 view .LVU256
 970 002a 2246     		mov	r2, r4
 971 002c 711B     		subs	r1, r6, r5
 972 002e 0F4B     		ldr	r3, .L77+4
 973 0030 1868     		ldr	r0, [r3]
 974              	.LVL82:
 620:FreeRTOS/src/timers.c **** 
 975              		.loc 1 620 5 is_stmt 0 view .LVU257
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 39


 976 0032 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 977              	.LVL83:
 622:FreeRTOS/src/timers.c **** 				{
 978              		.loc 1 622 5 is_stmt 1 view .LVU258
 622:FreeRTOS/src/timers.c **** 				{
 979              		.loc 1 622 9 is_stmt 0 view .LVU259
 980 0036 FFF7FEFF 		bl	xTaskResumeAll
 981              	.LVL84:
 622:FreeRTOS/src/timers.c **** 				{
 982              		.loc 1 622 7 view .LVU260
 983 003a 98B9     		cbnz	r0, .L69
 628:FreeRTOS/src/timers.c **** 				}
 984              		.loc 1 628 6 is_stmt 1 view .LVU261
 985 003c 0C4B     		ldr	r3, .L77+8
 986 003e 4FF08052 		mov	r2, #268435456
 987 0042 1A60     		str	r2, [r3]
 628:FreeRTOS/src/timers.c **** 				}
 988              		.loc 1 628 6 view .LVU262
 989              		.syntax unified
 990              	@ 628 "FreeRTOS/src/timers.c" 1
 991 0044 BFF34F8F 		dsb
 992              	@ 0 "" 2
 628:FreeRTOS/src/timers.c **** 				}
 993              		.loc 1 628 6 view .LVU263
 994              	@ 628 "FreeRTOS/src/timers.c" 1
 995 0048 BFF36F8F 		isb
 996              	@ 0 "" 2
 628:FreeRTOS/src/timers.c **** 				}
 997              		.loc 1 628 28 view .LVU264
 998              		.thumb
 999              		.syntax unified
 1000 004c 0AE0     		b	.L69
 1001              	.LVL85:
 1002              	.L76:
 602:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1003              		.loc 1 602 5 view .LVU265
 602:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1004              		.loc 1 602 14 is_stmt 0 view .LVU266
 1005 004e FFF7FEFF 		bl	xTaskResumeAll
 1006              	.LVL86:
 603:FreeRTOS/src/timers.c **** 			}
 1007              		.loc 1 603 5 is_stmt 1 view .LVU267
 1008 0052 2946     		mov	r1, r5
 1009 0054 3046     		mov	r0, r6
 1010 0056 FFF7FEFF 		bl	prvProcessExpiredTimer
 1011              	.LVL87:
 1012 005a 03E0     		b	.L69
 1013              	.LVL88:
 1014              	.L74:
 617:FreeRTOS/src/timers.c **** 				}
 1015              		.loc 1 617 22 is_stmt 0 view .LVU268
 1016 005c 0024     		movs	r4, #0
 1017              	.LVL89:
 617:FreeRTOS/src/timers.c **** 				}
 1018              		.loc 1 617 22 view .LVU269
 1019 005e E4E7     		b	.L73
 1020              	.LVL90:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 40


 1021              	.L70:
 638:FreeRTOS/src/timers.c **** 		}
 1022              		.loc 1 638 4 is_stmt 1 view .LVU270
 638:FreeRTOS/src/timers.c **** 		}
 1023              		.loc 1 638 13 is_stmt 0 view .LVU271
 1024 0060 FFF7FEFF 		bl	xTaskResumeAll
 1025              	.LVL91:
 1026              	.L69:
 641:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1027              		.loc 1 641 1 view .LVU272
 1028 0064 02B0     		add	sp, sp, #8
 1029              	.LCFI24:
 1030              		.cfi_def_cfa_offset 16
 1031              		@ sp needed
 1032 0066 70BD     		pop	{r4, r5, r6, pc}
 1033              	.LVL92:
 1034              	.L78:
 641:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1035              		.loc 1 641 1 view .LVU273
 1036              		.align	2
 1037              	.L77:
 1038 0068 00000000 		.word	.LANCHOR1
 1039 006c 00000000 		.word	.LANCHOR2
 1040 0070 04ED00E0 		.word	-536810236
 1041              		.cfi_endproc
 1042              	.LFE16:
 1044              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1045              		.align	1
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1049              		.fpu softvfp
 1051              	prvProcessReceivedCommands:
 1052              	.LFB20:
 735:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 1053              		.loc 1 735 1 is_stmt 1 view -0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 24
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057 0000 30B5     		push	{r4, r5, lr}
 1058              	.LCFI25:
 1059              		.cfi_def_cfa_offset 12
 1060              		.cfi_offset 4, -12
 1061              		.cfi_offset 5, -8
 1062              		.cfi_offset 14, -4
 1063 0002 89B0     		sub	sp, sp, #36
 1064              	.LCFI26:
 1065              		.cfi_def_cfa_offset 48
 736:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 1066              		.loc 1 736 1 view .LVU275
 737:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 1067              		.loc 1 737 1 view .LVU276
 738:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 1068              		.loc 1 738 1 view .LVU277
 739:FreeRTOS/src/timers.c **** 
 1069              		.loc 1 739 1 view .LVU278
 741:FreeRTOS/src/timers.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 41


 1070              		.loc 1 741 2 view .LVU279
 741:FreeRTOS/src/timers.c **** 	{
 1071              		.loc 1 741 7 is_stmt 0 view .LVU280
 1072 0004 06E0     		b	.L82
 1073              	.L96:
 1074              	.LBB2:
 749:FreeRTOS/src/timers.c **** 
 1075              		.loc 1 749 5 is_stmt 1 view .LVU281
 1076              	.LVL93:
 753:FreeRTOS/src/timers.c **** 
 1077              		.loc 1 753 31 view .LVU282
 756:FreeRTOS/src/timers.c **** 			}
 1078              		.loc 1 756 5 view .LVU283
 1079 0006 0799     		ldr	r1, [sp, #28]
 1080 0008 0698     		ldr	r0, [sp, #24]
 1081 000a 059B     		ldr	r3, [sp, #20]
 1082 000c 9847     		blx	r3
 1083              	.LVL94:
 1084              	.L81:
 756:FreeRTOS/src/timers.c **** 			}
 1085              		.loc 1 756 5 is_stmt 0 view .LVU284
 1086              	.LBE2:
 760:FreeRTOS/src/timers.c **** 			}
 1087              		.loc 1 760 29 is_stmt 1 view .LVU285
 767:FreeRTOS/src/timers.c **** 		{
 1088              		.loc 1 767 3 view .LVU286
 767:FreeRTOS/src/timers.c **** 		{
 1089              		.loc 1 767 15 is_stmt 0 view .LVU287
 1090 000e 049B     		ldr	r3, [sp, #16]
 767:FreeRTOS/src/timers.c **** 		{
 1091              		.loc 1 767 5 view .LVU288
 1092 0010 002B     		cmp	r3, #0
 1093 0012 0BDA     		bge	.L94
 1094              	.L82:
 741:FreeRTOS/src/timers.c **** 	{
 1095              		.loc 1 741 9 view .LVU289
 1096 0014 0022     		movs	r2, #0
 1097 0016 04A9     		add	r1, sp, #16
 1098 0018 324B     		ldr	r3, .L98
 1099 001a 1868     		ldr	r0, [r3]
 1100 001c FFF7FEFF 		bl	xQueueReceive
 1101              	.LVL95:
 741:FreeRTOS/src/timers.c **** 	{
 1102              		.loc 1 741 7 view .LVU290
 1103 0020 0028     		cmp	r0, #0
 1104 0022 5CD0     		beq	.L95
 747:FreeRTOS/src/timers.c **** 			{
 1105              		.loc 1 747 4 is_stmt 1 view .LVU291
 747:FreeRTOS/src/timers.c **** 			{
 1106              		.loc 1 747 16 is_stmt 0 view .LVU292
 1107 0024 049B     		ldr	r3, [sp, #16]
 747:FreeRTOS/src/timers.c **** 			{
 1108              		.loc 1 747 6 view .LVU293
 1109 0026 002B     		cmp	r3, #0
 1110 0028 F1DA     		bge	.L81
 1111 002a ECE7     		b	.L96
 1112              	.L94:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 42


 771:FreeRTOS/src/timers.c **** 
 1113              		.loc 1 771 4 is_stmt 1 view .LVU294
 771:FreeRTOS/src/timers.c **** 
 1114              		.loc 1 771 12 is_stmt 0 view .LVU295
 1115 002c 069C     		ldr	r4, [sp, #24]
 1116              	.LVL96:
 773:FreeRTOS/src/timers.c **** 			{
 1117              		.loc 1 773 4 is_stmt 1 view .LVU296
 773:FreeRTOS/src/timers.c **** 			{
 1118              		.loc 1 773 8 is_stmt 0 view .LVU297
 1119 002e 6369     		ldr	r3, [r4, #20]
 773:FreeRTOS/src/timers.c **** 			{
 1120              		.loc 1 773 6 view .LVU298
 1121 0030 13B1     		cbz	r3, .L83
 776:FreeRTOS/src/timers.c **** 			}
 1122              		.loc 1 776 5 is_stmt 1 view .LVU299
 776:FreeRTOS/src/timers.c **** 			}
 1123              		.loc 1 776 14 is_stmt 0 view .LVU300
 1124 0032 201D     		adds	r0, r4, #4
 1125 0034 FFF7FEFF 		bl	uxListRemove
 1126              	.LVL97:
 1127              	.L83:
 780:FreeRTOS/src/timers.c **** 			}
 1128              		.loc 1 780 29 is_stmt 1 view .LVU301
 783:FreeRTOS/src/timers.c **** 
 1129              		.loc 1 783 106 view .LVU302
 791:FreeRTOS/src/timers.c **** 
 1130              		.loc 1 791 4 view .LVU303
 791:FreeRTOS/src/timers.c **** 
 1131              		.loc 1 791 15 is_stmt 0 view .LVU304
 1132 0038 03A8     		add	r0, sp, #12
 1133 003a FFF7FEFF 		bl	prvSampleTimeNow
 1134              	.LVL98:
 793:FreeRTOS/src/timers.c **** 			{
 1135              		.loc 1 793 4 is_stmt 1 view .LVU305
 793:FreeRTOS/src/timers.c **** 			{
 1136              		.loc 1 793 20 is_stmt 0 view .LVU306
 1137 003e 049B     		ldr	r3, [sp, #16]
 793:FreeRTOS/src/timers.c **** 			{
 1138              		.loc 1 793 4 view .LVU307
 1139 0040 092B     		cmp	r3, #9
 1140 0042 E7D8     		bhi	.L82
 1141 0044 DFE803F0 		tbb	[pc, r3]
 1142              	.L86:
 1143 0048 05       		.byte	(.L88-.L86)/2
 1144 0049 05       		.byte	(.L88-.L86)/2
 1145 004a 05       		.byte	(.L88-.L86)/2
 1146 004b 27       		.byte	(.L87-.L86)/2
 1147 004c 2E       		.byte	(.L85-.L86)/2
 1148 004d 3D       		.byte	(.L89-.L86)/2
 1149 004e 05       		.byte	(.L88-.L86)/2
 1150 004f 05       		.byte	(.L88-.L86)/2
 1151 0050 27       		.byte	(.L87-.L86)/2
 1152 0051 2E       		.byte	(.L85-.L86)/2
 1153              		.p2align 1
 1154              	.L88:
 801:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 43


 1155              		.loc 1 801 6 is_stmt 1 view .LVU308
 801:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1156              		.loc 1 801 24 is_stmt 0 view .LVU309
 1157 0052 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1158 0056 43F00103 		orr	r3, r3, #1
 1159 005a 84F82430 		strb	r3, [r4, #36]
 802:FreeRTOS/src/timers.c **** 					{
 1160              		.loc 1 802 6 is_stmt 1 view .LVU310
 802:FreeRTOS/src/timers.c **** 					{
 1161              		.loc 1 802 75 is_stmt 0 view .LVU311
 1162 005e 0599     		ldr	r1, [sp, #20]
 802:FreeRTOS/src/timers.c **** 					{
 1163              		.loc 1 802 99 view .LVU312
 1164 0060 A569     		ldr	r5, [r4, #24]
 802:FreeRTOS/src/timers.c **** 					{
 1165              		.loc 1 802 10 view .LVU313
 1166 0062 0B46     		mov	r3, r1
 1167 0064 0246     		mov	r2, r0
 1168 0066 2944     		add	r1, r1, r5
 1169 0068 2046     		mov	r0, r4
 1170              	.LVL99:
 802:FreeRTOS/src/timers.c **** 					{
 1171              		.loc 1 802 10 view .LVU314
 1172 006a FFF7FEFF 		bl	prvInsertTimerInActiveList
 1173              	.LVL100:
 802:FreeRTOS/src/timers.c **** 					{
 1174              		.loc 1 802 8 view .LVU315
 1175 006e 0028     		cmp	r0, #0
 1176 0070 D0D0     		beq	.L82
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1177              		.loc 1 806 7 is_stmt 1 view .LVU316
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1178              		.loc 1 806 14 is_stmt 0 view .LVU317
 1179 0072 236A     		ldr	r3, [r4, #32]
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1180              		.loc 1 806 7 view .LVU318
 1181 0074 2046     		mov	r0, r4
 1182 0076 9847     		blx	r3
 1183              	.LVL101:
 807:FreeRTOS/src/timers.c **** 
 1184              		.loc 1 807 36 is_stmt 1 view .LVU319
 809:FreeRTOS/src/timers.c **** 						{
 1185              		.loc 1 809 7 view .LVU320
 809:FreeRTOS/src/timers.c **** 						{
 1186              		.loc 1 809 20 is_stmt 0 view .LVU321
 1187 0078 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 809:FreeRTOS/src/timers.c **** 						{
 1188              		.loc 1 809 9 view .LVU322
 1189 007c 13F0040F 		tst	r3, #4
 1190 0080 C8D0     		beq	.L82
 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1191              		.loc 1 811 8 is_stmt 1 view .LVU323
 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1192              		.loc 1 811 129 is_stmt 0 view .LVU324
 1193 0082 A269     		ldr	r2, [r4, #24]
 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1194              		.loc 1 811 18 view .LVU325
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 44


 1195 0084 0021     		movs	r1, #0
 1196 0086 0091     		str	r1, [sp]
 1197 0088 0B46     		mov	r3, r1
 1198 008a 0598     		ldr	r0, [sp, #20]
 1199 008c 0244     		add	r2, r2, r0
 1200 008e 2046     		mov	r0, r4
 1201 0090 FFF7FEFF 		bl	xTimerGenericCommand
 1202              	.LVL102:
 812:FreeRTOS/src/timers.c **** 							( void ) xResult;
 1203              		.loc 1 812 31 is_stmt 1 view .LVU326
 813:FreeRTOS/src/timers.c **** 						}
 1204              		.loc 1 813 8 view .LVU327
 1205 0094 BEE7     		b	.L82
 1206              	.LVL103:
 1207              	.L87:
 829:FreeRTOS/src/timers.c **** 					break;
 1208              		.loc 1 829 6 view .LVU328
 829:FreeRTOS/src/timers.c **** 					break;
 1209              		.loc 1 829 24 is_stmt 0 view .LVU329
 1210 0096 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1211 009a 23F00103 		bic	r3, r3, #1
 1212 009e 84F82430 		strb	r3, [r4, #36]
 830:FreeRTOS/src/timers.c **** 
 1213              		.loc 1 830 6 is_stmt 1 view .LVU330
 1214 00a2 B7E7     		b	.L82
 1215              	.L85:
 834:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1216              		.loc 1 834 6 view .LVU331
 834:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1217              		.loc 1 834 24 is_stmt 0 view .LVU332
 1218 00a4 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1219 00a8 43F00103 		orr	r3, r3, #1
 1220 00ac 84F82430 		strb	r3, [r4, #36]
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1221              		.loc 1 835 6 is_stmt 1 view .LVU333
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1222              		.loc 1 835 64 is_stmt 0 view .LVU334
 1223 00b0 0599     		ldr	r1, [sp, #20]
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1224              		.loc 1 835 35 view .LVU335
 1225 00b2 A161     		str	r1, [r4, #24]
 836:FreeRTOS/src/timers.c **** 
 1226              		.loc 1 836 58 is_stmt 1 view .LVU336
 844:FreeRTOS/src/timers.c **** 					break;
 1227              		.loc 1 844 6 view .LVU337
 844:FreeRTOS/src/timers.c **** 					break;
 1228              		.loc 1 844 15 is_stmt 0 view .LVU338
 1229 00b4 0346     		mov	r3, r0
 1230 00b6 0246     		mov	r2, r0
 1231 00b8 0144     		add	r1, r1, r0
 1232 00ba 2046     		mov	r0, r4
 1233              	.LVL104:
 844:FreeRTOS/src/timers.c **** 					break;
 1234              		.loc 1 844 15 view .LVU339
 1235 00bc FFF7FEFF 		bl	prvInsertTimerInActiveList
 1236              	.LVL105:
 845:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 45


 1237              		.loc 1 845 6 is_stmt 1 view .LVU340
 1238 00c0 A8E7     		b	.L82
 1239              	.LVL106:
 1240              	.L89:
 853:FreeRTOS/src/timers.c **** 						{
 1241              		.loc 1 853 7 view .LVU341
 853:FreeRTOS/src/timers.c **** 						{
 1242              		.loc 1 853 20 is_stmt 0 view .LVU342
 1243 00c2 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 853:FreeRTOS/src/timers.c **** 						{
 1244              		.loc 1 853 9 view .LVU343
 1245 00c6 13F0020F 		tst	r3, #2
 1246 00ca 04D0     		beq	.L97
 859:FreeRTOS/src/timers.c **** 						}
 1247              		.loc 1 859 8 is_stmt 1 view .LVU344
 859:FreeRTOS/src/timers.c **** 						}
 1248              		.loc 1 859 26 is_stmt 0 view .LVU345
 1249 00cc 23F00103 		bic	r3, r3, #1
 1250 00d0 84F82430 		strb	r3, [r4, #36]
 1251 00d4 9EE7     		b	.L82
 1252              	.L97:
 855:FreeRTOS/src/timers.c **** 						}
 1253              		.loc 1 855 8 is_stmt 1 view .LVU346
 1254 00d6 2046     		mov	r0, r4
 1255              	.LVL107:
 855:FreeRTOS/src/timers.c **** 						}
 1256              		.loc 1 855 8 is_stmt 0 view .LVU347
 1257 00d8 FFF7FEFF 		bl	vPortFree
 1258              	.LVL108:
 1259 00dc 9AE7     		b	.L82
 1260              	.LVL109:
 1261              	.L95:
 879:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1262              		.loc 1 879 1 view .LVU348
 1263 00de 09B0     		add	sp, sp, #36
 1264              	.LCFI27:
 1265              		.cfi_def_cfa_offset 12
 1266              		@ sp needed
 1267 00e0 30BD     		pop	{r4, r5, pc}
 1268              	.L99:
 1269 00e2 00BF     		.align	2
 1270              	.L98:
 1271 00e4 00000000 		.word	.LANCHOR2
 1272              		.cfi_endproc
 1273              	.LFE20:
 1275              		.section	.text.prvTimerTask,"ax",%progbits
 1276              		.align	1
 1277              		.syntax unified
 1278              		.thumb
 1279              		.thumb_func
 1280              		.fpu softvfp
 1282              	prvTimerTask:
 1283              	.LFB15:
 549:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 1284              		.loc 1 549 1 is_stmt 1 view -0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 46


 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              	.LVL110:
 549:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 1289              		.loc 1 549 1 is_stmt 0 view .LVU350
 1290 0000 00B5     		push	{lr}
 1291              	.LCFI28:
 1292              		.cfi_def_cfa_offset 4
 1293              		.cfi_offset 14, -4
 1294 0002 83B0     		sub	sp, sp, #12
 1295              	.LCFI29:
 1296              		.cfi_def_cfa_offset 16
 1297              	.LVL111:
 1298              	.L101:
 550:FreeRTOS/src/timers.c **** BaseType_t xListWasEmpty;
 1299              		.loc 1 550 1 is_stmt 1 discriminator 1 view .LVU351
 551:FreeRTOS/src/timers.c **** 
 1300              		.loc 1 551 1 discriminator 1 view .LVU352
 554:FreeRTOS/src/timers.c **** 
 1301              		.loc 1 554 2 discriminator 1 view .LVU353
 568:FreeRTOS/src/timers.c **** 	{
 1302              		.loc 1 568 2 discriminator 1 view .LVU354
 572:FreeRTOS/src/timers.c **** 
 1303              		.loc 1 572 3 discriminator 1 view .LVU355
 572:FreeRTOS/src/timers.c **** 
 1304              		.loc 1 572 21 is_stmt 0 discriminator 1 view .LVU356
 1305 0004 01A8     		add	r0, sp, #4
 1306 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1307              	.LVL112:
 576:FreeRTOS/src/timers.c **** 
 1308              		.loc 1 576 3 is_stmt 1 discriminator 1 view .LVU357
 1309 000a 0199     		ldr	r1, [sp, #4]
 1310 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1311              	.LVL113:
 579:FreeRTOS/src/timers.c **** 	}
 1312              		.loc 1 579 3 discriminator 1 view .LVU358
 1313 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1314              	.LVL114:
 1315 0014 F6E7     		b	.L101
 1316              		.cfi_endproc
 1317              	.LFE15:
 1319              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1320              		.align	1
 1321              		.global	xTimerGetTimerDaemonTaskHandle
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu softvfp
 1327              	xTimerGetTimerDaemonTaskHandle:
 1328              	.LFB8:
 425:FreeRTOS/src/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1329              		.loc 1 425 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 428:FreeRTOS/src/timers.c **** 	return xTimerTaskHandle;
 1334              		.loc 1 428 46 view .LVU360
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 47


 429:FreeRTOS/src/timers.c **** }
 1335              		.loc 1 429 2 view .LVU361
 430:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1336              		.loc 1 430 1 is_stmt 0 view .LVU362
 1337 0000 014B     		ldr	r3, .L104
 1338 0002 1868     		ldr	r0, [r3]
 1339 0004 7047     		bx	lr
 1340              	.L105:
 1341 0006 00BF     		.align	2
 1342              	.L104:
 1343 0008 00000000 		.word	.LANCHOR5
 1344              		.cfi_endproc
 1345              	.LFE8:
 1347              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1348              		.align	1
 1349              		.global	xTimerGetPeriod
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
 1353              		.fpu softvfp
 1355              	xTimerGetPeriod:
 1356              	.LVL115:
 1357              	.LFB9:
 434:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 1358              		.loc 1 434 1 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 435:FreeRTOS/src/timers.c **** 
 1363              		.loc 1 435 1 view .LVU364
 437:FreeRTOS/src/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1364              		.loc 1 437 24 view .LVU365
 438:FreeRTOS/src/timers.c **** }
 1365              		.loc 1 438 2 view .LVU366
 439:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1366              		.loc 1 439 1 is_stmt 0 view .LVU367
 1367 0000 8069     		ldr	r0, [r0, #24]
 1368              	.LVL116:
 439:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1369              		.loc 1 439 1 view .LVU368
 1370 0002 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE9:
 1374              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 1375              		.align	1
 1376              		.global	vTimerSetReloadMode
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu softvfp
 1382              	vTimerSetReloadMode:
 1383              	.LVL117:
 1384              	.LFB10:
 443:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1385              		.loc 1 443 1 is_stmt 1 view -0
 1386              		.cfi_startproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 48


 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 443:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1389              		.loc 1 443 1 is_stmt 0 view .LVU370
 1390 0000 38B5     		push	{r3, r4, r5, lr}
 1391              	.LCFI30:
 1392              		.cfi_def_cfa_offset 16
 1393              		.cfi_offset 3, -16
 1394              		.cfi_offset 4, -12
 1395              		.cfi_offset 5, -8
 1396              		.cfi_offset 14, -4
 1397 0002 0446     		mov	r4, r0
 1398 0004 0D46     		mov	r5, r1
 444:FreeRTOS/src/timers.c **** 
 1399              		.loc 1 444 1 is_stmt 1 view .LVU371
 1400              	.LVL118:
 446:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1401              		.loc 1 446 24 view .LVU372
 447:FreeRTOS/src/timers.c **** 	{
 1402              		.loc 1 447 2 view .LVU373
 1403 0006 FFF7FEFF 		bl	vPortEnterCritical
 1404              	.LVL119:
 449:FreeRTOS/src/timers.c **** 		{
 1405              		.loc 1 449 3 view .LVU374
 449:FreeRTOS/src/timers.c **** 		{
 1406              		.loc 1 449 5 is_stmt 0 view .LVU375
 1407 000a 45B1     		cbz	r5, .L108
 451:FreeRTOS/src/timers.c **** 		}
 1408              		.loc 1 451 4 is_stmt 1 view .LVU376
 451:FreeRTOS/src/timers.c **** 		}
 1409              		.loc 1 451 22 is_stmt 0 view .LVU377
 1410 000c 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1411 0010 43F00403 		orr	r3, r3, #4
 1412 0014 84F82430 		strb	r3, [r4, #36]
 1413              	.L109:
 458:FreeRTOS/src/timers.c **** }
 1414              		.loc 1 458 2 is_stmt 1 view .LVU378
 1415 0018 FFF7FEFF 		bl	vPortExitCritical
 1416              	.LVL120:
 459:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1417              		.loc 1 459 1 is_stmt 0 view .LVU379
 1418 001c 38BD     		pop	{r3, r4, r5, pc}
 1419              	.LVL121:
 1420              	.L108:
 455:FreeRTOS/src/timers.c **** 		}
 1421              		.loc 1 455 4 is_stmt 1 view .LVU380
 455:FreeRTOS/src/timers.c **** 		}
 1422              		.loc 1 455 22 is_stmt 0 view .LVU381
 1423 001e 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1424 0022 23F00403 		bic	r3, r3, #4
 1425 0026 84F82430 		strb	r3, [r4, #36]
 1426 002a F5E7     		b	.L109
 1427              		.cfi_endproc
 1428              	.LFE10:
 1430              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 1431              		.align	1
 1432              		.global	uxTimerGetReloadMode
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 49


 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu softvfp
 1438              	uxTimerGetReloadMode:
 1439              	.LVL122:
 1440              	.LFB11:
 463:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1441              		.loc 1 463 1 is_stmt 1 view -0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 463:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1445              		.loc 1 463 1 is_stmt 0 view .LVU383
 1446 0000 10B5     		push	{r4, lr}
 1447              	.LCFI31:
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 4, -8
 1450              		.cfi_offset 14, -4
 1451 0002 0446     		mov	r4, r0
 464:FreeRTOS/src/timers.c **** UBaseType_t uxReturn;
 1452              		.loc 1 464 1 is_stmt 1 view .LVU384
 1453              	.LVL123:
 465:FreeRTOS/src/timers.c **** 
 1454              		.loc 1 465 1 view .LVU385
 467:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1455              		.loc 1 467 24 view .LVU386
 468:FreeRTOS/src/timers.c **** 	{
 1456              		.loc 1 468 2 view .LVU387
 1457 0004 FFF7FEFF 		bl	vPortEnterCritical
 1458              	.LVL124:
 470:FreeRTOS/src/timers.c **** 		{
 1459              		.loc 1 470 3 view .LVU388
 470:FreeRTOS/src/timers.c **** 		{
 1460              		.loc 1 470 16 is_stmt 0 view .LVU389
 1461 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 470:FreeRTOS/src/timers.c **** 		{
 1462              		.loc 1 470 5 view .LVU390
 1463 000c 13F0040F 		tst	r3, #4
 1464 0010 04D1     		bne	.L113
 473:FreeRTOS/src/timers.c **** 		}
 1465              		.loc 1 473 13 view .LVU391
 1466 0012 0024     		movs	r4, #0
 1467              	.LVL125:
 1468              	.L112:
 481:FreeRTOS/src/timers.c **** 
 1469              		.loc 1 481 2 is_stmt 1 view .LVU392
 1470 0014 FFF7FEFF 		bl	vPortExitCritical
 1471              	.LVL126:
 483:FreeRTOS/src/timers.c **** }
 1472              		.loc 1 483 2 view .LVU393
 484:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1473              		.loc 1 484 1 is_stmt 0 view .LVU394
 1474 0018 2046     		mov	r0, r4
 1475 001a 10BD     		pop	{r4, pc}
 1476              	.LVL127:
 1477              	.L113:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 50


 478:FreeRTOS/src/timers.c **** 		}
 1478              		.loc 1 478 13 view .LVU395
 1479 001c 0124     		movs	r4, #1
 1480              	.LVL128:
 478:FreeRTOS/src/timers.c **** 		}
 1481              		.loc 1 478 13 view .LVU396
 1482 001e F9E7     		b	.L112
 1483              		.cfi_endproc
 1484              	.LFE11:
 1486              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1487              		.align	1
 1488              		.global	xTimerGetExpiryTime
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1492              		.fpu softvfp
 1494              	xTimerGetExpiryTime:
 1495              	.LVL129:
 1496              	.LFB12:
 488:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1497              		.loc 1 488 1 is_stmt 1 view -0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 489:FreeRTOS/src/timers.c **** TickType_t xReturn;
 1502              		.loc 1 489 1 view .LVU398
 490:FreeRTOS/src/timers.c **** 
 1503              		.loc 1 490 1 view .LVU399
 492:FreeRTOS/src/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1504              		.loc 1 492 24 view .LVU400
 493:FreeRTOS/src/timers.c **** 	return xReturn;
 1505              		.loc 1 493 2 view .LVU401
 494:FreeRTOS/src/timers.c **** }
 1506              		.loc 1 494 2 view .LVU402
 495:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1507              		.loc 1 495 1 is_stmt 0 view .LVU403
 1508 0000 4068     		ldr	r0, [r0, #4]
 1509              	.LVL130:
 495:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1510              		.loc 1 495 1 view .LVU404
 1511 0002 7047     		bx	lr
 1512              		.cfi_endproc
 1513              	.LFE12:
 1515              		.section	.text.pcTimerGetName,"ax",%progbits
 1516              		.align	1
 1517              		.global	pcTimerGetName
 1518              		.syntax unified
 1519              		.thumb
 1520              		.thumb_func
 1521              		.fpu softvfp
 1523              	pcTimerGetName:
 1524              	.LVL131:
 1525              	.LFB13:
 499:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 1526              		.loc 1 499 1 is_stmt 1 view -0
 1527              		.cfi_startproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 51


 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530              		@ link register save eliminated.
 500:FreeRTOS/src/timers.c **** 
 1531              		.loc 1 500 1 view .LVU406
 502:FreeRTOS/src/timers.c **** 	return pxTimer->pcTimerName;
 1532              		.loc 1 502 24 view .LVU407
 503:FreeRTOS/src/timers.c **** }
 1533              		.loc 1 503 2 view .LVU408
 504:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1534              		.loc 1 504 1 is_stmt 0 view .LVU409
 1535 0000 0068     		ldr	r0, [r0]
 1536              	.LVL132:
 504:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1537              		.loc 1 504 1 view .LVU410
 1538 0002 7047     		bx	lr
 1539              		.cfi_endproc
 1540              	.LFE13:
 1542              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1543              		.align	1
 1544              		.global	xTimerIsTimerActive
 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1548              		.fpu softvfp
 1550              	xTimerIsTimerActive:
 1551              	.LVL133:
 1552              	.LFB23:
 990:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 991:FreeRTOS/src/timers.c **** 
 992:FreeRTOS/src/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 993:FreeRTOS/src/timers.c **** {
 1553              		.loc 1 993 1 is_stmt 1 view -0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 1557              		.loc 1 993 1 is_stmt 0 view .LVU412
 1558 0000 10B5     		push	{r4, lr}
 1559              	.LCFI32:
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 4, -8
 1562              		.cfi_offset 14, -4
 1563 0002 0446     		mov	r4, r0
 994:FreeRTOS/src/timers.c **** BaseType_t xReturn;
 1564              		.loc 1 994 1 is_stmt 1 view .LVU413
 995:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 1565              		.loc 1 995 1 view .LVU414
 1566              	.LVL134:
 996:FreeRTOS/src/timers.c **** 
 997:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1567              		.loc 1 997 24 view .LVU415
 998:FreeRTOS/src/timers.c **** 
 999:FreeRTOS/src/timers.c **** 	/* Is the timer in the list of active timers? */
1000:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1568              		.loc 1 1000 2 view .LVU416
 1569 0004 FFF7FEFF 		bl	vPortEnterCritical
 1570              	.LVL135:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 52


1001:FreeRTOS/src/timers.c **** 	{
1002:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1571              		.loc 1 1002 3 view .LVU417
 1572              		.loc 1 1002 16 is_stmt 0 view .LVU418
 1573 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1574              		.loc 1 1002 5 view .LVU419
 1575 000c 13F0010F 		tst	r3, #1
 1576 0010 04D1     		bne	.L119
1003:FreeRTOS/src/timers.c **** 		{
1004:FreeRTOS/src/timers.c **** 			xReturn = pdFALSE;
 1577              		.loc 1 1004 12 view .LVU420
 1578 0012 0024     		movs	r4, #0
 1579              	.LVL136:
 1580              	.L118:
1005:FreeRTOS/src/timers.c **** 		}
1006:FreeRTOS/src/timers.c **** 		else
1007:FreeRTOS/src/timers.c **** 		{
1008:FreeRTOS/src/timers.c **** 			xReturn = pdTRUE;
1009:FreeRTOS/src/timers.c **** 		}
1010:FreeRTOS/src/timers.c **** 	}
1011:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1581              		.loc 1 1011 2 is_stmt 1 view .LVU421
 1582 0014 FFF7FEFF 		bl	vPortExitCritical
 1583              	.LVL137:
1012:FreeRTOS/src/timers.c **** 
1013:FreeRTOS/src/timers.c **** 	return xReturn;
 1584              		.loc 1 1013 2 view .LVU422
1014:FreeRTOS/src/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1585              		.loc 1 1014 1 is_stmt 0 view .LVU423
 1586 0018 2046     		mov	r0, r4
 1587 001a 10BD     		pop	{r4, pc}
 1588              	.LVL138:
 1589              	.L119:
1008:FreeRTOS/src/timers.c **** 		}
 1590              		.loc 1 1008 12 view .LVU424
 1591 001c 0124     		movs	r4, #1
 1592              	.LVL139:
1008:FreeRTOS/src/timers.c **** 		}
 1593              		.loc 1 1008 12 view .LVU425
 1594 001e F9E7     		b	.L118
 1595              		.cfi_endproc
 1596              	.LFE23:
 1598              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1599              		.align	1
 1600              		.global	pvTimerGetTimerID
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu softvfp
 1606              	pvTimerGetTimerID:
 1607              	.LVL140:
 1608              	.LFB24:
1015:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1016:FreeRTOS/src/timers.c **** 
1017:FreeRTOS/src/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1018:FreeRTOS/src/timers.c **** {
 1609              		.loc 1 1018 1 is_stmt 1 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 53


 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613              		.loc 1 1018 1 is_stmt 0 view .LVU427
 1614 0000 10B5     		push	{r4, lr}
 1615              	.LCFI33:
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 4, -8
 1618              		.cfi_offset 14, -4
 1619 0002 0446     		mov	r4, r0
1019:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = xTimer;
 1620              		.loc 1 1019 1 is_stmt 1 view .LVU428
 1621              	.LVL141:
1020:FreeRTOS/src/timers.c **** void *pvReturn;
 1622              		.loc 1 1020 1 view .LVU429
1021:FreeRTOS/src/timers.c **** 
1022:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1623              		.loc 1 1022 24 view .LVU430
1023:FreeRTOS/src/timers.c **** 
1024:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1624              		.loc 1 1024 2 view .LVU431
 1625 0004 FFF7FEFF 		bl	vPortEnterCritical
 1626              	.LVL142:
1025:FreeRTOS/src/timers.c **** 	{
1026:FreeRTOS/src/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1627              		.loc 1 1026 3 view .LVU432
 1628              		.loc 1 1026 12 is_stmt 0 view .LVU433
 1629 0008 E469     		ldr	r4, [r4, #28]
 1630              	.LVL143:
1027:FreeRTOS/src/timers.c **** 	}
1028:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1631              		.loc 1 1028 2 is_stmt 1 view .LVU434
 1632 000a FFF7FEFF 		bl	vPortExitCritical
 1633              	.LVL144:
1029:FreeRTOS/src/timers.c **** 
1030:FreeRTOS/src/timers.c **** 	return pvReturn;
 1634              		.loc 1 1030 2 view .LVU435
1031:FreeRTOS/src/timers.c **** }
 1635              		.loc 1 1031 1 is_stmt 0 view .LVU436
 1636 000e 2046     		mov	r0, r4
 1637 0010 10BD     		pop	{r4, pc}
 1638              		.loc 1 1031 1 view .LVU437
 1639              		.cfi_endproc
 1640              	.LFE24:
 1642              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1643              		.align	1
 1644              		.global	vTimerSetTimerID
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu softvfp
 1650              	vTimerSetTimerID:
 1651              	.LVL145:
 1652              	.LFB25:
1032:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1033:FreeRTOS/src/timers.c **** 
1034:FreeRTOS/src/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 54


1035:FreeRTOS/src/timers.c **** {
 1653              		.loc 1 1035 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		.loc 1 1035 1 is_stmt 0 view .LVU439
 1658 0000 38B5     		push	{r3, r4, r5, lr}
 1659              	.LCFI34:
 1660              		.cfi_def_cfa_offset 16
 1661              		.cfi_offset 3, -16
 1662              		.cfi_offset 4, -12
 1663              		.cfi_offset 5, -8
 1664              		.cfi_offset 14, -4
 1665 0002 0446     		mov	r4, r0
 1666 0004 0D46     		mov	r5, r1
1036:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = xTimer;
 1667              		.loc 1 1036 1 is_stmt 1 view .LVU440
 1668              	.LVL146:
1037:FreeRTOS/src/timers.c **** 
1038:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1669              		.loc 1 1038 24 view .LVU441
1039:FreeRTOS/src/timers.c **** 
1040:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1670              		.loc 1 1040 2 view .LVU442
 1671 0006 FFF7FEFF 		bl	vPortEnterCritical
 1672              	.LVL147:
1041:FreeRTOS/src/timers.c **** 	{
1042:FreeRTOS/src/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1673              		.loc 1 1042 3 view .LVU443
 1674              		.loc 1 1042 22 is_stmt 0 view .LVU444
 1675 000a E561     		str	r5, [r4, #28]
1043:FreeRTOS/src/timers.c **** 	}
1044:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1676              		.loc 1 1044 2 is_stmt 1 view .LVU445
 1677 000c FFF7FEFF 		bl	vPortExitCritical
 1678              	.LVL148:
1045:FreeRTOS/src/timers.c **** }
 1679              		.loc 1 1045 1 is_stmt 0 view .LVU446
 1680 0010 38BD     		pop	{r3, r4, r5, pc}
 1681              		.loc 1 1045 1 view .LVU447
 1682              		.cfi_endproc
 1683              	.LFE25:
 1685              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1686              		.align	1
 1687              		.global	xTimerPendFunctionCallFromISR
 1688              		.syntax unified
 1689              		.thumb
 1690              		.thumb_func
 1691              		.fpu softvfp
 1693              	xTimerPendFunctionCallFromISR:
 1694              	.LVL149:
 1695              	.LFB26:
1046:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1047:FreeRTOS/src/timers.c **** 
1048:FreeRTOS/src/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1049:FreeRTOS/src/timers.c **** 
1050:FreeRTOS/src/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 55


1051:FreeRTOS/src/timers.c **** 	{
 1696              		.loc 1 1051 2 is_stmt 1 view -0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 16
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		.loc 1 1051 2 is_stmt 0 view .LVU449
 1701 0000 10B5     		push	{r4, lr}
 1702              	.LCFI35:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 4, -8
 1705              		.cfi_offset 14, -4
 1706 0002 84B0     		sub	sp, sp, #16
 1707              	.LCFI36:
 1708              		.cfi_def_cfa_offset 24
 1709 0004 1C46     		mov	r4, r3
1052:FreeRTOS/src/timers.c **** 	DaemonTaskMessage_t xMessage;
 1710              		.loc 1 1052 2 is_stmt 1 view .LVU450
1053:FreeRTOS/src/timers.c **** 	BaseType_t xReturn;
 1711              		.loc 1 1053 2 view .LVU451
1054:FreeRTOS/src/timers.c **** 
1055:FreeRTOS/src/timers.c **** 		/* Complete the message with the function parameters and post it to the
1056:FreeRTOS/src/timers.c **** 		daemon task. */
1057:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1712              		.loc 1 1057 3 view .LVU452
 1713              		.loc 1 1057 23 is_stmt 0 view .LVU453
 1714 0006 6FF00103 		mvn	r3, #1
 1715              	.LVL150:
 1716              		.loc 1 1057 23 view .LVU454
 1717 000a 0093     		str	r3, [sp]
1058:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1718              		.loc 1 1058 3 is_stmt 1 view .LVU455
 1719              		.loc 1 1058 53 is_stmt 0 view .LVU456
 1720 000c 0190     		str	r0, [sp, #4]
1059:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1721              		.loc 1 1059 3 is_stmt 1 view .LVU457
 1722              		.loc 1 1059 47 is_stmt 0 view .LVU458
 1723 000e 0291     		str	r1, [sp, #8]
1060:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1724              		.loc 1 1060 3 is_stmt 1 view .LVU459
 1725              		.loc 1 1060 47 is_stmt 0 view .LVU460
 1726 0010 0392     		str	r2, [sp, #12]
1061:FreeRTOS/src/timers.c **** 
1062:FreeRTOS/src/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1727              		.loc 1 1062 3 is_stmt 1 view .LVU461
 1728              		.loc 1 1062 13 is_stmt 0 view .LVU462
 1729 0012 0023     		movs	r3, #0
 1730 0014 2246     		mov	r2, r4
 1731              	.LVL151:
 1732              		.loc 1 1062 13 view .LVU463
 1733 0016 6946     		mov	r1, sp
 1734              	.LVL152:
 1735              		.loc 1 1062 13 view .LVU464
 1736 0018 0248     		ldr	r0, .L127
 1737              	.LVL153:
 1738              		.loc 1 1062 13 view .LVU465
 1739 001a 0068     		ldr	r0, [r0]
 1740 001c FFF7FEFF 		bl	xQueueGenericSendFromISR
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 56


 1741              	.LVL154:
1063:FreeRTOS/src/timers.c **** 
1064:FreeRTOS/src/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1742              		.loc 1 1064 87 is_stmt 1 view .LVU466
1065:FreeRTOS/src/timers.c **** 
1066:FreeRTOS/src/timers.c **** 		return xReturn;
 1743              		.loc 1 1066 3 view .LVU467
1067:FreeRTOS/src/timers.c **** 	}
 1744              		.loc 1 1067 2 is_stmt 0 view .LVU468
 1745 0020 04B0     		add	sp, sp, #16
 1746              	.LCFI37:
 1747              		.cfi_def_cfa_offset 8
 1748              		@ sp needed
 1749 0022 10BD     		pop	{r4, pc}
 1750              	.LVL155:
 1751              	.L128:
 1752              		.loc 1 1067 2 view .LVU469
 1753              		.align	2
 1754              	.L127:
 1755 0024 00000000 		.word	.LANCHOR2
 1756              		.cfi_endproc
 1757              	.LFE26:
 1759              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1760              		.align	1
 1761              		.global	xTimerPendFunctionCall
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu softvfp
 1767              	xTimerPendFunctionCall:
 1768              	.LVL156:
 1769              	.LFB27:
1068:FreeRTOS/src/timers.c **** 
1069:FreeRTOS/src/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1070:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1071:FreeRTOS/src/timers.c **** 
1072:FreeRTOS/src/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1073:FreeRTOS/src/timers.c **** 
1074:FreeRTOS/src/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1075:FreeRTOS/src/timers.c **** 	{
 1770              		.loc 1 1075 2 is_stmt 1 view -0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 16
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              		.loc 1 1075 2 is_stmt 0 view .LVU471
 1775 0000 10B5     		push	{r4, lr}
 1776              	.LCFI38:
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 4, -8
 1779              		.cfi_offset 14, -4
 1780 0002 84B0     		sub	sp, sp, #16
 1781              	.LCFI39:
 1782              		.cfi_def_cfa_offset 24
 1783 0004 1C46     		mov	r4, r3
1076:FreeRTOS/src/timers.c **** 	DaemonTaskMessage_t xMessage;
 1784              		.loc 1 1076 2 is_stmt 1 view .LVU472
1077:FreeRTOS/src/timers.c **** 	BaseType_t xReturn;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 57


 1785              		.loc 1 1077 2 view .LVU473
1078:FreeRTOS/src/timers.c **** 
1079:FreeRTOS/src/timers.c **** 		/* This function can only be called after a timer has been created or
1080:FreeRTOS/src/timers.c **** 		after the scheduler has been started because, until then, the timer
1081:FreeRTOS/src/timers.c **** 		queue does not exist. */
1082:FreeRTOS/src/timers.c **** 		configASSERT( xTimerQueue );
 1786              		.loc 1 1082 30 view .LVU474
1083:FreeRTOS/src/timers.c **** 
1084:FreeRTOS/src/timers.c **** 		/* Complete the message with the function parameters and post it to the
1085:FreeRTOS/src/timers.c **** 		daemon task. */
1086:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1787              		.loc 1 1086 3 view .LVU475
 1788              		.loc 1 1086 23 is_stmt 0 view .LVU476
 1789 0006 4FF0FF33 		mov	r3, #-1
 1790              	.LVL157:
 1791              		.loc 1 1086 23 view .LVU477
 1792 000a 0093     		str	r3, [sp]
1087:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1793              		.loc 1 1087 3 is_stmt 1 view .LVU478
 1794              		.loc 1 1087 53 is_stmt 0 view .LVU479
 1795 000c 0190     		str	r0, [sp, #4]
1088:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1796              		.loc 1 1088 3 is_stmt 1 view .LVU480
 1797              		.loc 1 1088 47 is_stmt 0 view .LVU481
 1798 000e 0291     		str	r1, [sp, #8]
1089:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1799              		.loc 1 1089 3 is_stmt 1 view .LVU482
 1800              		.loc 1 1089 47 is_stmt 0 view .LVU483
 1801 0010 0392     		str	r2, [sp, #12]
1090:FreeRTOS/src/timers.c **** 
1091:FreeRTOS/src/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1802              		.loc 1 1091 3 is_stmt 1 view .LVU484
 1803              		.loc 1 1091 13 is_stmt 0 view .LVU485
 1804 0012 0023     		movs	r3, #0
 1805 0014 2246     		mov	r2, r4
 1806              	.LVL158:
 1807              		.loc 1 1091 13 view .LVU486
 1808 0016 6946     		mov	r1, sp
 1809              	.LVL159:
 1810              		.loc 1 1091 13 view .LVU487
 1811 0018 0248     		ldr	r0, .L131
 1812              	.LVL160:
 1813              		.loc 1 1091 13 view .LVU488
 1814 001a 0068     		ldr	r0, [r0]
 1815 001c FFF7FEFF 		bl	xQueueGenericSend
 1816              	.LVL161:
1092:FreeRTOS/src/timers.c **** 
1093:FreeRTOS/src/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1817              		.loc 1 1093 78 is_stmt 1 view .LVU489
1094:FreeRTOS/src/timers.c **** 
1095:FreeRTOS/src/timers.c **** 		return xReturn;
 1818              		.loc 1 1095 3 view .LVU490
1096:FreeRTOS/src/timers.c **** 	}
 1819              		.loc 1 1096 2 is_stmt 0 view .LVU491
 1820 0020 04B0     		add	sp, sp, #16
 1821              	.LCFI40:
 1822              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 58


 1823              		@ sp needed
 1824 0022 10BD     		pop	{r4, pc}
 1825              	.LVL162:
 1826              	.L132:
 1827              		.loc 1 1096 2 view .LVU492
 1828              		.align	2
 1829              	.L131:
 1830 0024 00000000 		.word	.LANCHOR2
 1831              		.cfi_endproc
 1832              	.LFE27:
 1834              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1835              		.align	2
 1836              		.set	.LANCHOR0,. + 0
 1839              	pxCurrentTimerList:
 1840 0000 00000000 		.space	4
 1841              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1842              		.align	2
 1843              		.set	.LANCHOR1,. + 0
 1846              	pxOverflowTimerList:
 1847 0000 00000000 		.space	4
 1848              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1849              		.align	2
 1850              		.set	.LANCHOR3,. + 0
 1853              	xActiveTimerList1:
 1854 0000 00000000 		.space	20
 1854      00000000 
 1854      00000000 
 1854      00000000 
 1854      00000000 
 1855              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1856              		.align	2
 1857              		.set	.LANCHOR4,. + 0
 1860              	xActiveTimerList2:
 1861 0000 00000000 		.space	20
 1861      00000000 
 1861      00000000 
 1861      00000000 
 1861      00000000 
 1862              		.section	.bss.xLastTime.5528,"aw",%nobits
 1863              		.align	2
 1864              		.set	.LANCHOR6,. + 0
 1867              	xLastTime.5528:
 1868 0000 00000000 		.space	4
 1869              		.section	.bss.xTimerQueue,"aw",%nobits
 1870              		.align	2
 1871              		.set	.LANCHOR2,. + 0
 1874              	xTimerQueue:
 1875 0000 00000000 		.space	4
 1876              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1877              		.align	2
 1878              		.set	.LANCHOR5,. + 0
 1881              	xTimerTaskHandle:
 1882 0000 00000000 		.space	4
 1883              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 1884              		.align	2
 1885              	.LC0:
 1886 0000 546D7251 		.ascii	"TmrQ\000"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 59


 1886      00
 1887              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 1888              		.align	2
 1889              	.LC1:
 1890 0000 546D7220 		.ascii	"Tmr Svc\000"
 1890      53766300 
 1891              		.text
 1892              	.Letext0:
 1893              		.file 2 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 1894              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 1895              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 1896              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 1897              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 1898              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 1899              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 1900              		.file 9 "FreeRTOS/inc/portmacro.h"
 1901              		.file 10 "FreeRTOS/inc/list.h"
 1902              		.file 11 "FreeRTOS/inc/task.h"
 1903              		.file 12 "FreeRTOS/inc/queue.h"
 1904              		.file 13 "FreeRTOS/inc/timers.h"
 1905              		.file 14 "FreeRTOS/inc/portable.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:16     .text.prvGetNextExpireTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:23     .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:69     .text.prvGetNextExpireTime:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:74     .text.prvInsertTimerInActiveList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:80     .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:170    .text.prvInsertTimerInActiveList:0000000000000040 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:176    .text.prvCheckForValidListAndQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:182    .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:252    .text.prvCheckForValidListAndQueue:0000000000000044 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:262    .text.prvInitialiseNewTimer:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:268    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:332    .text.xTimerCreateTimerTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:339    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:397    .text.xTimerCreateTimerTask:000000000000002c $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1282   .text.prvTimerTask:0000000000000000 prvTimerTask
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:405    .text.xTimerCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:412    .text.xTimerCreate:0000000000000000 xTimerCreate
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:478    .text.xTimerGenericCommand:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:485    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:597    .text.xTimerGenericCommand:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:602    .text.prvSwitchTimerLists:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:608    .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:726    .text.prvSwitchTimerLists:0000000000000060 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:732    .text.prvSampleTimeNow:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:738    .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:797    .text.prvSampleTimeNow:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:802    .text.prvProcessExpiredTimer:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:808    .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:903    .text.prvProcessExpiredTimer:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:908    .text.prvProcessTimerOrBlockTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:914    .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1038   .text.prvProcessTimerOrBlockTask:0000000000000068 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1045   .text.prvProcessReceivedCommands:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1051   .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1143   .text.prvProcessReceivedCommands:0000000000000048 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1153   .text.prvProcessReceivedCommands:0000000000000052 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1271   .text.prvProcessReceivedCommands:00000000000000e4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1276   .text.prvTimerTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1320   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1327   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1343   .text.xTimerGetTimerDaemonTaskHandle:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1348   .text.xTimerGetPeriod:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1355   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1375   .text.vTimerSetReloadMode:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1382   .text.vTimerSetReloadMode:0000000000000000 vTimerSetReloadMode
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1431   .text.uxTimerGetReloadMode:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1438   .text.uxTimerGetReloadMode:0000000000000000 uxTimerGetReloadMode
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1487   .text.xTimerGetExpiryTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1494   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1516   .text.pcTimerGetName:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1523   .text.pcTimerGetName:0000000000000000 pcTimerGetName
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1543   .text.xTimerIsTimerActive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1550   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1599   .text.pvTimerGetTimerID:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1606   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s 			page 61


C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1643   .text.vTimerSetTimerID:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1650   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1686   .text.xTimerPendFunctionCallFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1693   .text.xTimerPendFunctionCallFromISR:0000000000000000 xTimerPendFunctionCallFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1755   .text.xTimerPendFunctionCallFromISR:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1760   .text.xTimerPendFunctionCall:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1767   .text.xTimerPendFunctionCall:0000000000000000 xTimerPendFunctionCall
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1830   .text.xTimerPendFunctionCall:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1835   .bss.pxCurrentTimerList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1839   .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1842   .bss.pxOverflowTimerList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1846   .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1849   .bss.xActiveTimerList1:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1853   .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1856   .bss.xActiveTimerList2:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1860   .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1863   .bss.xLastTime.5528:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1867   .bss.xLastTime.5528:0000000000000000 xLastTime.5528
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1870   .bss.xTimerQueue:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1874   .bss.xTimerQueue:0000000000000000 xTimerQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1877   .bss.xTimerTaskHandle:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1881   .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1884   .rodata.prvCheckForValidListAndQueue.str1.4:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc8wRbod.s:1888   .rodata.xTimerCreateTimerTask.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueReceive
vPortFree
