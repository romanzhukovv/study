ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"timers.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvGetNextExpireTime:
  26              	.LVL0:
  27              	.LFB17:
  28              		.file 1 "FreeRTOS/src/timers.c"
   1:FreeRTOS/src/timers.c **** /*
   2:FreeRTOS/src/timers.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/timers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/timers.c ****  *
   5:FreeRTOS/src/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/timers.c ****  * subject to the following conditions:
  11:FreeRTOS/src/timers.c ****  *
  12:FreeRTOS/src/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/timers.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/timers.c ****  *
  15:FreeRTOS/src/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/timers.c ****  *
  22:FreeRTOS/src/timers.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/timers.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/timers.c ****  *
  25:FreeRTOS/src/timers.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/timers.c ****  */
  27:FreeRTOS/src/timers.c **** 
  28:FreeRTOS/src/timers.c **** /* Standard includes. */
  29:FreeRTOS/src/timers.c **** #include <stdlib.h>
  30:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 2


  31:FreeRTOS/src/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/src/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:FreeRTOS/src/timers.c **** task.h is included from an application file. */
  34:FreeRTOS/src/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/src/timers.c **** 
  36:FreeRTOS/src/timers.c **** #include "FreeRTOS.h"
  37:FreeRTOS/src/timers.c **** #include "task.h"
  38:FreeRTOS/src/timers.c **** #include "queue.h"
  39:FreeRTOS/src/timers.c **** #include "timers.h"
  40:FreeRTOS/src/timers.c **** 
  41:FreeRTOS/src/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:FreeRTOS/src/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:FreeRTOS/src/timers.c **** #endif
  44:FreeRTOS/src/timers.c **** 
  45:FreeRTOS/src/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:FreeRTOS/src/timers.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:FreeRTOS/src/timers.c **** for the header files above, but not in this file, in order to generate the
  48:FreeRTOS/src/timers.c **** correct privileged Vs unprivileged linkage and placement. */
  49:FreeRTOS/src/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  50:FreeRTOS/src/timers.c **** 
  51:FreeRTOS/src/timers.c **** 
  52:FreeRTOS/src/timers.c **** /* This entire source file will be skipped if the application is not configured
  53:FreeRTOS/src/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:FreeRTOS/src/timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:FreeRTOS/src/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:FreeRTOS/src/timers.c **** #if ( configUSE_TIMERS == 1 )
  57:FreeRTOS/src/timers.c **** 
  58:FreeRTOS/src/timers.c **** /* Misc definitions. */
  59:FreeRTOS/src/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:FreeRTOS/src/timers.c **** 
  61:FreeRTOS/src/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:FreeRTOS/src/timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:FreeRTOS/src/timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:FreeRTOS/src/timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:FreeRTOS/src/timers.c **** #endif
  66:FreeRTOS/src/timers.c **** 
  67:FreeRTOS/src/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  68:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_ACTIVE					( ( uint8_t ) 0x01 )
  69:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_STATICALLY_ALLOCATED	( ( uint8_t ) 0x02 )
  70:FreeRTOS/src/timers.c **** #define tmrSTATUS_IS_AUTORELOAD				( ( uint8_t ) 0x04 )
  71:FreeRTOS/src/timers.c **** 
  72:FreeRTOS/src/timers.c **** /* The definition of the timers themselves. */
  73:FreeRTOS/src/timers.c **** typedef struct tmrTimerControl /* The old naming convention is used to prevent breaking kernel awar
  74:FreeRTOS/src/timers.c **** {
  75:FreeRTOS/src/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  76:FreeRTOS/src/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  77:FreeRTOS/src/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  78:FreeRTOS/src/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  79:FreeRTOS/src/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  80:FreeRTOS/src/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  81:FreeRTOS/src/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  82:FreeRTOS/src/timers.c **** 	#endif
  83:FreeRTOS/src/timers.c **** 	uint8_t 				ucStatus;			/*<< Holds bits to say if the timer was statically allocated or not, and i
  84:FreeRTOS/src/timers.c **** } xTIMER;
  85:FreeRTOS/src/timers.c **** 
  86:FreeRTOS/src/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  87:FreeRTOS/src/timers.c **** name below to enable the use of older kernel aware debuggers. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 3


  88:FreeRTOS/src/timers.c **** typedef xTIMER Timer_t;
  89:FreeRTOS/src/timers.c **** 
  90:FreeRTOS/src/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  91:FreeRTOS/src/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  92:FreeRTOS/src/timers.c **** and messages that request the execution of a non-timer related callback.  The
  93:FreeRTOS/src/timers.c **** two message types are defined in two separate structures, xTimerParametersType
  94:FreeRTOS/src/timers.c **** and xCallbackParametersType respectively. */
  95:FreeRTOS/src/timers.c **** typedef struct tmrTimerParameters
  96:FreeRTOS/src/timers.c **** {
  97:FreeRTOS/src/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  98:FreeRTOS/src/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  99:FreeRTOS/src/timers.c **** } TimerParameter_t;
 100:FreeRTOS/src/timers.c **** 
 101:FreeRTOS/src/timers.c **** 
 102:FreeRTOS/src/timers.c **** typedef struct tmrCallbackParameters
 103:FreeRTOS/src/timers.c **** {
 104:FreeRTOS/src/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 105:FreeRTOS/src/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 106:FreeRTOS/src/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 107:FreeRTOS/src/timers.c **** } CallbackParameters_t;
 108:FreeRTOS/src/timers.c **** 
 109:FreeRTOS/src/timers.c **** /* The structure that contains the two message types, along with an identifier
 110:FreeRTOS/src/timers.c **** that is used to determine which message type is valid. */
 111:FreeRTOS/src/timers.c **** typedef struct tmrTimerQueueMessage
 112:FreeRTOS/src/timers.c **** {
 113:FreeRTOS/src/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 114:FreeRTOS/src/timers.c **** 	union
 115:FreeRTOS/src/timers.c **** 	{
 116:FreeRTOS/src/timers.c **** 		TimerParameter_t xTimerParameters;
 117:FreeRTOS/src/timers.c **** 
 118:FreeRTOS/src/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 119:FreeRTOS/src/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 120:FreeRTOS/src/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 121:FreeRTOS/src/timers.c **** 			CallbackParameters_t xCallbackParameters;
 122:FreeRTOS/src/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 123:FreeRTOS/src/timers.c **** 	} u;
 124:FreeRTOS/src/timers.c **** } DaemonTaskMessage_t;
 125:FreeRTOS/src/timers.c **** 
 126:FreeRTOS/src/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 127:FreeRTOS/src/timers.c **** which static variables must be declared volatile. */
 128:FreeRTOS/src/timers.c **** 
 129:FreeRTOS/src/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 130:FreeRTOS/src/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 131:FreeRTOS/src/timers.c **** timer service task is allowed to access these lists.
 132:FreeRTOS/src/timers.c **** xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 133:FreeRTOS/src/timers.c **** breaks some kernel aware debuggers, and debuggers that reply on removing the
 134:FreeRTOS/src/timers.c **** static qualifier. */
 135:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 136:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 137:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 138:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 139:FreeRTOS/src/timers.c **** 
 140:FreeRTOS/src/timers.c **** /* A queue that is used to send commands to the timer service task. */
 141:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 142:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 143:FreeRTOS/src/timers.c **** 
 144:FreeRTOS/src/timers.c **** /*lint -restore */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 4


 145:FreeRTOS/src/timers.c **** 
 146:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 147:FreeRTOS/src/timers.c **** 
 148:FreeRTOS/src/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 149:FreeRTOS/src/timers.c **** 
 150:FreeRTOS/src/timers.c **** 	/* If static allocation is supported then the application must provide the
 151:FreeRTOS/src/timers.c **** 	following callback function - which enables the application to optionally
 152:FreeRTOS/src/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 153:FreeRTOS/src/timers.c **** 	and TCB. */
 154:FreeRTOS/src/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 155:FreeRTOS/src/timers.c **** 
 156:FreeRTOS/src/timers.c **** #endif
 157:FreeRTOS/src/timers.c **** 
 158:FreeRTOS/src/timers.c **** /*
 159:FreeRTOS/src/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 160:FreeRTOS/src/timers.c ****  * been initialised already.
 161:FreeRTOS/src/timers.c ****  */
 162:FreeRTOS/src/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 163:FreeRTOS/src/timers.c **** 
 164:FreeRTOS/src/timers.c **** /*
 165:FreeRTOS/src/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 166:FreeRTOS/src/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 167:FreeRTOS/src/timers.c ****  * xTimerQueue queue.
 168:FreeRTOS/src/timers.c ****  */
 169:FreeRTOS/src/timers.c **** static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 170:FreeRTOS/src/timers.c **** 
 171:FreeRTOS/src/timers.c **** /*
 172:FreeRTOS/src/timers.c ****  * Called by the timer service task to interpret and process a command it
 173:FreeRTOS/src/timers.c ****  * received on the timer queue.
 174:FreeRTOS/src/timers.c ****  */
 175:FreeRTOS/src/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 176:FreeRTOS/src/timers.c **** 
 177:FreeRTOS/src/timers.c **** /*
 178:FreeRTOS/src/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 179:FreeRTOS/src/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 180:FreeRTOS/src/timers.c ****  */
 181:FreeRTOS/src/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 182:FreeRTOS/src/timers.c **** 
 183:FreeRTOS/src/timers.c **** /*
 184:FreeRTOS/src/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 185:FreeRTOS/src/timers.c ****  * auto-reload timer, then call its callback.
 186:FreeRTOS/src/timers.c ****  */
 187:FreeRTOS/src/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 188:FreeRTOS/src/timers.c **** 
 189:FreeRTOS/src/timers.c **** /*
 190:FreeRTOS/src/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 191:FreeRTOS/src/timers.c ****  * current timer list does not still reference some timers.
 192:FreeRTOS/src/timers.c ****  */
 193:FreeRTOS/src/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 194:FreeRTOS/src/timers.c **** 
 195:FreeRTOS/src/timers.c **** /*
 196:FreeRTOS/src/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 197:FreeRTOS/src/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 198:FreeRTOS/src/timers.c ****  */
 199:FreeRTOS/src/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 200:FreeRTOS/src/timers.c **** 
 201:FreeRTOS/src/timers.c **** /*
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 5


 202:FreeRTOS/src/timers.c ****  * If the timer list contains any active timers then return the expire time of
 203:FreeRTOS/src/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 204:FreeRTOS/src/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 205:FreeRTOS/src/timers.c ****  * to pdTRUE.
 206:FreeRTOS/src/timers.c ****  */
 207:FreeRTOS/src/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 208:FreeRTOS/src/timers.c **** 
 209:FreeRTOS/src/timers.c **** /*
 210:FreeRTOS/src/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 211:FreeRTOS/src/timers.c ****  * until either a timer does expire or a command is received.
 212:FreeRTOS/src/timers.c ****  */
 213:FreeRTOS/src/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 214:FreeRTOS/src/timers.c **** 
 215:FreeRTOS/src/timers.c **** /*
 216:FreeRTOS/src/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 217:FreeRTOS/src/timers.c ****  * dynamically to fill in the structure's members.
 218:FreeRTOS/src/timers.c ****  */
 219:FreeRTOS/src/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 220:FreeRTOS/src/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 221:FreeRTOS/src/timers.c **** 									const UBaseType_t uxAutoReload,
 222:FreeRTOS/src/timers.c **** 									void * const pvTimerID,
 223:FreeRTOS/src/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 224:FreeRTOS/src/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 225:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 226:FreeRTOS/src/timers.c **** 
 227:FreeRTOS/src/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 228:FreeRTOS/src/timers.c **** {
 229:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 230:FreeRTOS/src/timers.c **** 
 231:FreeRTOS/src/timers.c **** 	/* This function is called when the scheduler is started if
 232:FreeRTOS/src/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 233:FreeRTOS/src/timers.c **** 	timer service task has been created/initialised.  If timers have already
 234:FreeRTOS/src/timers.c **** 	been created then the initialisation will already have been performed. */
 235:FreeRTOS/src/timers.c **** 	prvCheckForValidListAndQueue();
 236:FreeRTOS/src/timers.c **** 
 237:FreeRTOS/src/timers.c **** 	if( xTimerQueue != NULL )
 238:FreeRTOS/src/timers.c **** 	{
 239:FreeRTOS/src/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 240:FreeRTOS/src/timers.c **** 		{
 241:FreeRTOS/src/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 242:FreeRTOS/src/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 243:FreeRTOS/src/timers.c **** 			uint32_t ulTimerTaskStackSize;
 244:FreeRTOS/src/timers.c **** 
 245:FreeRTOS/src/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 246:FreeRTOS/src/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 247:FreeRTOS/src/timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 248:FreeRTOS/src/timers.c **** 													ulTimerTaskStackSize,
 249:FreeRTOS/src/timers.c **** 													NULL,
 250:FreeRTOS/src/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 251:FreeRTOS/src/timers.c **** 													pxTimerTaskStackBuffer,
 252:FreeRTOS/src/timers.c **** 													pxTimerTaskTCBBuffer );
 253:FreeRTOS/src/timers.c **** 
 254:FreeRTOS/src/timers.c **** 			if( xTimerTaskHandle != NULL )
 255:FreeRTOS/src/timers.c **** 			{
 256:FreeRTOS/src/timers.c **** 				xReturn = pdPASS;
 257:FreeRTOS/src/timers.c **** 			}
 258:FreeRTOS/src/timers.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 6


 259:FreeRTOS/src/timers.c **** 		#else
 260:FreeRTOS/src/timers.c **** 		{
 261:FreeRTOS/src/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 262:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 263:FreeRTOS/src/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 264:FreeRTOS/src/timers.c **** 									NULL,
 265:FreeRTOS/src/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 266:FreeRTOS/src/timers.c **** 									&xTimerTaskHandle );
 267:FreeRTOS/src/timers.c **** 		}
 268:FreeRTOS/src/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 269:FreeRTOS/src/timers.c **** 	}
 270:FreeRTOS/src/timers.c **** 	else
 271:FreeRTOS/src/timers.c **** 	{
 272:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 273:FreeRTOS/src/timers.c **** 	}
 274:FreeRTOS/src/timers.c **** 
 275:FreeRTOS/src/timers.c **** 	configASSERT( xReturn );
 276:FreeRTOS/src/timers.c **** 	return xReturn;
 277:FreeRTOS/src/timers.c **** }
 278:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 279:FreeRTOS/src/timers.c **** 
 280:FreeRTOS/src/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 281:FreeRTOS/src/timers.c **** 
 282:FreeRTOS/src/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 283:FreeRTOS/src/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 284:FreeRTOS/src/timers.c **** 								const UBaseType_t uxAutoReload,
 285:FreeRTOS/src/timers.c **** 								void * const pvTimerID,
 286:FreeRTOS/src/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 287:FreeRTOS/src/timers.c **** 	{
 288:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 289:FreeRTOS/src/timers.c **** 
 290:FreeRTOS/src/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values ret
 291:FreeRTOS/src/timers.c **** 
 292:FreeRTOS/src/timers.c **** 		if( pxNewTimer != NULL )
 293:FreeRTOS/src/timers.c **** 		{
 294:FreeRTOS/src/timers.c **** 			/* Status is thus far zero as the timer is not created statically
 295:FreeRTOS/src/timers.c **** 			and has not been started.  The auto-reload bit may get set in
 296:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer. */
 297:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus = 0x00;
 298:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 299:FreeRTOS/src/timers.c **** 		}
 300:FreeRTOS/src/timers.c **** 
 301:FreeRTOS/src/timers.c **** 		return pxNewTimer;
 302:FreeRTOS/src/timers.c **** 	}
 303:FreeRTOS/src/timers.c **** 
 304:FreeRTOS/src/timers.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 305:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 306:FreeRTOS/src/timers.c **** 
 307:FreeRTOS/src/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 308:FreeRTOS/src/timers.c **** 
 309:FreeRTOS/src/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 310:FreeRTOS/src/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 311:FreeRTOS/src/timers.c **** 										const UBaseType_t uxAutoReload,
 312:FreeRTOS/src/timers.c **** 										void * const pvTimerID,
 313:FreeRTOS/src/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 314:FreeRTOS/src/timers.c **** 										StaticTimer_t *pxTimerBuffer )
 315:FreeRTOS/src/timers.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 7


 316:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 317:FreeRTOS/src/timers.c **** 
 318:FreeRTOS/src/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 319:FreeRTOS/src/timers.c **** 		{
 320:FreeRTOS/src/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 321:FreeRTOS/src/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 322:FreeRTOS/src/timers.c **** 			structure. */
 323:FreeRTOS/src/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 324:FreeRTOS/src/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 325:FreeRTOS/src/timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 326:FreeRTOS/src/timers.c **** 		}
 327:FreeRTOS/src/timers.c **** 		#endif /* configASSERT_DEFINED */
 328:FreeRTOS/src/timers.c **** 
 329:FreeRTOS/src/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 330:FreeRTOS/src/timers.c **** 		configASSERT( pxTimerBuffer );
 331:FreeRTOS/src/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 332:FreeRTOS/src/timers.c **** 
 333:FreeRTOS/src/timers.c **** 		if( pxNewTimer != NULL )
 334:FreeRTOS/src/timers.c **** 		{
 335:FreeRTOS/src/timers.c **** 			/* Timers can be created statically or dynamically so note this
 336:FreeRTOS/src/timers.c **** 			timer was created statically in case it is later deleted.  The
 337:FreeRTOS/src/timers.c **** 			auto-reload bit may get set in prvInitialiseNewTimer(). */
 338:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 339:FreeRTOS/src/timers.c **** 
 340:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 341:FreeRTOS/src/timers.c **** 		}
 342:FreeRTOS/src/timers.c **** 
 343:FreeRTOS/src/timers.c **** 		return pxNewTimer;
 344:FreeRTOS/src/timers.c **** 	}
 345:FreeRTOS/src/timers.c **** 
 346:FreeRTOS/src/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 347:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 348:FreeRTOS/src/timers.c **** 
 349:FreeRTOS/src/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 350:FreeRTOS/src/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 351:FreeRTOS/src/timers.c **** 									const UBaseType_t uxAutoReload,
 352:FreeRTOS/src/timers.c **** 									void * const pvTimerID,
 353:FreeRTOS/src/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 354:FreeRTOS/src/timers.c **** 									Timer_t *pxNewTimer )
 355:FreeRTOS/src/timers.c **** {
 356:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 357:FreeRTOS/src/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 358:FreeRTOS/src/timers.c **** 
 359:FreeRTOS/src/timers.c **** 	if( pxNewTimer != NULL )
 360:FreeRTOS/src/timers.c **** 	{
 361:FreeRTOS/src/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 362:FreeRTOS/src/timers.c **** 		created/initialised. */
 363:FreeRTOS/src/timers.c **** 		prvCheckForValidListAndQueue();
 364:FreeRTOS/src/timers.c **** 
 365:FreeRTOS/src/timers.c **** 		/* Initialise the timer structure members using the function
 366:FreeRTOS/src/timers.c **** 		parameters. */
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 370:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 371:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 372:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 8


 373:FreeRTOS/src/timers.c **** 		{
 374:FreeRTOS/src/timers.c **** 			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 375:FreeRTOS/src/timers.c **** 		}
 376:FreeRTOS/src/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 377:FreeRTOS/src/timers.c **** 	}
 378:FreeRTOS/src/timers.c **** }
 379:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 380:FreeRTOS/src/timers.c **** 
 381:FreeRTOS/src/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 382:FreeRTOS/src/timers.c **** {
 383:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 384:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 385:FreeRTOS/src/timers.c **** 
 386:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 387:FreeRTOS/src/timers.c **** 
 388:FreeRTOS/src/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 389:FreeRTOS/src/timers.c **** 	on a particular timer definition. */
 390:FreeRTOS/src/timers.c **** 	if( xTimerQueue != NULL )
 391:FreeRTOS/src/timers.c **** 	{
 392:FreeRTOS/src/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 393:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = xCommandID;
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 395:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 396:FreeRTOS/src/timers.c **** 
 397:FreeRTOS/src/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 398:FreeRTOS/src/timers.c **** 		{
 399:FreeRTOS/src/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 400:FreeRTOS/src/timers.c **** 			{
 401:FreeRTOS/src/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 402:FreeRTOS/src/timers.c **** 			}
 403:FreeRTOS/src/timers.c **** 			else
 404:FreeRTOS/src/timers.c **** 			{
 405:FreeRTOS/src/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 406:FreeRTOS/src/timers.c **** 			}
 407:FreeRTOS/src/timers.c **** 		}
 408:FreeRTOS/src/timers.c **** 		else
 409:FreeRTOS/src/timers.c **** 		{
 410:FreeRTOS/src/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 411:FreeRTOS/src/timers.c **** 		}
 412:FreeRTOS/src/timers.c **** 
 413:FreeRTOS/src/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:FreeRTOS/src/timers.c **** 	}
 415:FreeRTOS/src/timers.c **** 	else
 416:FreeRTOS/src/timers.c **** 	{
 417:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 418:FreeRTOS/src/timers.c **** 	}
 419:FreeRTOS/src/timers.c **** 
 420:FreeRTOS/src/timers.c **** 	return xReturn;
 421:FreeRTOS/src/timers.c **** }
 422:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 423:FreeRTOS/src/timers.c **** 
 424:FreeRTOS/src/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:FreeRTOS/src/timers.c **** {
 426:FreeRTOS/src/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:FreeRTOS/src/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 428:FreeRTOS/src/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 429:FreeRTOS/src/timers.c **** 	return xTimerTaskHandle;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 9


 430:FreeRTOS/src/timers.c **** }
 431:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 432:FreeRTOS/src/timers.c **** 
 433:FreeRTOS/src/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:FreeRTOS/src/timers.c **** {
 435:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 436:FreeRTOS/src/timers.c **** 
 437:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 438:FreeRTOS/src/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 439:FreeRTOS/src/timers.c **** }
 440:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 441:FreeRTOS/src/timers.c **** 
 442:FreeRTOS/src/timers.c **** void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
 443:FreeRTOS/src/timers.c **** {
 444:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 445:FreeRTOS/src/timers.c **** 
 446:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 447:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 448:FreeRTOS/src/timers.c **** 	{
 449:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
 450:FreeRTOS/src/timers.c **** 		{
 451:FreeRTOS/src/timers.c **** 			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 452:FreeRTOS/src/timers.c **** 		}
 453:FreeRTOS/src/timers.c **** 		else
 454:FreeRTOS/src/timers.c **** 		{
 455:FreeRTOS/src/timers.c **** 			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 456:FreeRTOS/src/timers.c **** 		}
 457:FreeRTOS/src/timers.c **** 	}
 458:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 459:FreeRTOS/src/timers.c **** }
 460:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 461:FreeRTOS/src/timers.c **** 
 462:FreeRTOS/src/timers.c **** UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 463:FreeRTOS/src/timers.c **** {
 464:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 465:FreeRTOS/src/timers.c **** UBaseType_t uxReturn;
 466:FreeRTOS/src/timers.c **** 
 467:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 468:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 469:FreeRTOS/src/timers.c **** 	{
 470:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 471:FreeRTOS/src/timers.c **** 		{
 472:FreeRTOS/src/timers.c **** 			/* Not an auto-reload timer. */
 473:FreeRTOS/src/timers.c **** 			uxReturn = ( UBaseType_t ) pdFALSE;
 474:FreeRTOS/src/timers.c **** 		}
 475:FreeRTOS/src/timers.c **** 		else
 476:FreeRTOS/src/timers.c **** 		{
 477:FreeRTOS/src/timers.c **** 			/* Is an auto-reload timer. */
 478:FreeRTOS/src/timers.c **** 			uxReturn = ( UBaseType_t ) pdTRUE;
 479:FreeRTOS/src/timers.c **** 		}
 480:FreeRTOS/src/timers.c **** 	}
 481:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 482:FreeRTOS/src/timers.c **** 
 483:FreeRTOS/src/timers.c **** 	return uxReturn;
 484:FreeRTOS/src/timers.c **** }
 485:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 486:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 10


 487:FreeRTOS/src/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 488:FreeRTOS/src/timers.c **** {
 489:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 490:FreeRTOS/src/timers.c **** TickType_t xReturn;
 491:FreeRTOS/src/timers.c **** 
 492:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 493:FreeRTOS/src/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 494:FreeRTOS/src/timers.c **** 	return xReturn;
 495:FreeRTOS/src/timers.c **** }
 496:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 497:FreeRTOS/src/timers.c **** 
 498:FreeRTOS/src/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 499:FreeRTOS/src/timers.c **** {
 500:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 501:FreeRTOS/src/timers.c **** 
 502:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 503:FreeRTOS/src/timers.c **** 	return pxTimer->pcTimerName;
 504:FreeRTOS/src/timers.c **** }
 505:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 506:FreeRTOS/src/timers.c **** 
 507:FreeRTOS/src/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 508:FreeRTOS/src/timers.c **** {
 509:FreeRTOS/src/timers.c **** BaseType_t xResult;
 510:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 511:FreeRTOS/src/timers.c **** 
 512:FreeRTOS/src/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 513:FreeRTOS/src/timers.c **** 	been performed to ensure the list is not empty. */
 514:FreeRTOS/src/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 515:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 516:FreeRTOS/src/timers.c **** 
 517:FreeRTOS/src/timers.c **** 	/* If the timer is an auto-reload timer then calculate the next
 518:FreeRTOS/src/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 519:FreeRTOS/src/timers.c **** 	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 520:FreeRTOS/src/timers.c **** 	{
 521:FreeRTOS/src/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 522:FreeRTOS/src/timers.c **** 		other than the current time.  It will therefore be inserted into the
 523:FreeRTOS/src/timers.c **** 		correct list relative to the time this task thinks it is now. */
 524:FreeRTOS/src/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 525:FreeRTOS/src/timers.c **** 		{
 526:FreeRTOS/src/timers.c **** 			/* The timer expired before it was added to the active timer
 527:FreeRTOS/src/timers.c **** 			list.  Reload it now.  */
 528:FreeRTOS/src/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 529:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 530:FreeRTOS/src/timers.c **** 			( void ) xResult;
 531:FreeRTOS/src/timers.c **** 		}
 532:FreeRTOS/src/timers.c **** 		else
 533:FreeRTOS/src/timers.c **** 		{
 534:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 535:FreeRTOS/src/timers.c **** 		}
 536:FreeRTOS/src/timers.c **** 	}
 537:FreeRTOS/src/timers.c **** 	else
 538:FreeRTOS/src/timers.c **** 	{
 539:FreeRTOS/src/timers.c **** 		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 540:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 541:FreeRTOS/src/timers.c **** 	}
 542:FreeRTOS/src/timers.c **** 
 543:FreeRTOS/src/timers.c **** 	/* Call the timer callback. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 11


 544:FreeRTOS/src/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 545:FreeRTOS/src/timers.c **** }
 546:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 547:FreeRTOS/src/timers.c **** 
 548:FreeRTOS/src/timers.c **** static portTASK_FUNCTION( prvTimerTask, pvParameters )
 549:FreeRTOS/src/timers.c **** {
 550:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 551:FreeRTOS/src/timers.c **** BaseType_t xListWasEmpty;
 552:FreeRTOS/src/timers.c **** 
 553:FreeRTOS/src/timers.c **** 	/* Just to avoid compiler warnings. */
 554:FreeRTOS/src/timers.c **** 	( void ) pvParameters;
 555:FreeRTOS/src/timers.c **** 
 556:FreeRTOS/src/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 557:FreeRTOS/src/timers.c **** 	{
 558:FreeRTOS/src/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 559:FreeRTOS/src/timers.c **** 
 560:FreeRTOS/src/timers.c **** 		/* Allow the application writer to execute some code in the context of
 561:FreeRTOS/src/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 562:FreeRTOS/src/timers.c **** 		application includes initialisation code that would benefit from
 563:FreeRTOS/src/timers.c **** 		executing after the scheduler has been started. */
 564:FreeRTOS/src/timers.c **** 		vApplicationDaemonTaskStartupHook();
 565:FreeRTOS/src/timers.c **** 	}
 566:FreeRTOS/src/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 567:FreeRTOS/src/timers.c **** 
 568:FreeRTOS/src/timers.c **** 	for( ;; )
 569:FreeRTOS/src/timers.c **** 	{
 570:FreeRTOS/src/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 571:FreeRTOS/src/timers.c **** 		obtain the time at which the next timer will expire. */
 572:FreeRTOS/src/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 573:FreeRTOS/src/timers.c **** 
 574:FreeRTOS/src/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 575:FreeRTOS/src/timers.c **** 		until either a timer does expire, or a command is received. */
 576:FreeRTOS/src/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 577:FreeRTOS/src/timers.c **** 
 578:FreeRTOS/src/timers.c **** 		/* Empty the command queue. */
 579:FreeRTOS/src/timers.c **** 		prvProcessReceivedCommands();
 580:FreeRTOS/src/timers.c **** 	}
 581:FreeRTOS/src/timers.c **** }
 582:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 583:FreeRTOS/src/timers.c **** 
 584:FreeRTOS/src/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 585:FreeRTOS/src/timers.c **** {
 586:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 587:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched;
 588:FreeRTOS/src/timers.c **** 
 589:FreeRTOS/src/timers.c **** 	vTaskSuspendAll();
 590:FreeRTOS/src/timers.c **** 	{
 591:FreeRTOS/src/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 592:FreeRTOS/src/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 593:FreeRTOS/src/timers.c **** 		then don't process this timer as any timers that remained in the list
 594:FreeRTOS/src/timers.c **** 		when the lists were switched will have been processed within the
 595:FreeRTOS/src/timers.c **** 		prvSampleTimeNow() function. */
 596:FreeRTOS/src/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 597:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 598:FreeRTOS/src/timers.c **** 		{
 599:FreeRTOS/src/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 600:FreeRTOS/src/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 12


 601:FreeRTOS/src/timers.c **** 			{
 602:FreeRTOS/src/timers.c **** 				( void ) xTaskResumeAll();
 603:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 604:FreeRTOS/src/timers.c **** 			}
 605:FreeRTOS/src/timers.c **** 			else
 606:FreeRTOS/src/timers.c **** 			{
 607:FreeRTOS/src/timers.c **** 				/* The tick count has not overflowed, and the next expire
 608:FreeRTOS/src/timers.c **** 				time has not been reached yet.  This task should therefore
 609:FreeRTOS/src/timers.c **** 				block to wait for the next expire time or a command to be
 610:FreeRTOS/src/timers.c **** 				received - whichever comes first.  The following line cannot
 611:FreeRTOS/src/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 612:FreeRTOS/src/timers.c **** 				case when the current timer list is empty. */
 613:FreeRTOS/src/timers.c **** 				if( xListWasEmpty != pdFALSE )
 614:FreeRTOS/src/timers.c **** 				{
 615:FreeRTOS/src/timers.c **** 					/* The current timer list is empty - is the overflow list
 616:FreeRTOS/src/timers.c **** 					also empty? */
 617:FreeRTOS/src/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 618:FreeRTOS/src/timers.c **** 				}
 619:FreeRTOS/src/timers.c **** 
 620:FreeRTOS/src/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 621:FreeRTOS/src/timers.c **** 
 622:FreeRTOS/src/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 623:FreeRTOS/src/timers.c **** 				{
 624:FreeRTOS/src/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 625:FreeRTOS/src/timers.c **** 					block time to expire.  If a command arrived between the
 626:FreeRTOS/src/timers.c **** 					critical section being exited and this yield then the yield
 627:FreeRTOS/src/timers.c **** 					will not cause the task to block. */
 628:FreeRTOS/src/timers.c **** 					portYIELD_WITHIN_API();
 629:FreeRTOS/src/timers.c **** 				}
 630:FreeRTOS/src/timers.c **** 				else
 631:FreeRTOS/src/timers.c **** 				{
 632:FreeRTOS/src/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 633:FreeRTOS/src/timers.c **** 				}
 634:FreeRTOS/src/timers.c **** 			}
 635:FreeRTOS/src/timers.c **** 		}
 636:FreeRTOS/src/timers.c **** 		else
 637:FreeRTOS/src/timers.c **** 		{
 638:FreeRTOS/src/timers.c **** 			( void ) xTaskResumeAll();
 639:FreeRTOS/src/timers.c **** 		}
 640:FreeRTOS/src/timers.c **** 	}
 641:FreeRTOS/src/timers.c **** }
 642:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 643:FreeRTOS/src/timers.c **** 
 644:FreeRTOS/src/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 645:FreeRTOS/src/timers.c **** {
  29              		.loc 1 645 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 646:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
  34              		.loc 1 646 1 view .LVU1
 647:FreeRTOS/src/timers.c **** 
 648:FreeRTOS/src/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 649:FreeRTOS/src/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 650:FreeRTOS/src/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 651:FreeRTOS/src/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 13


 652:FreeRTOS/src/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 653:FreeRTOS/src/timers.c **** 	timer lists will be switched and the next expiry time can be
 654:FreeRTOS/src/timers.c **** 	re-assessed.  */
 655:FreeRTOS/src/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  35              		.loc 1 655 2 view .LVU2
  36              		.loc 1 655 20 is_stmt 0 view .LVU3
  37 0000 064B     		ldr	r3, .L6
  38 0002 1A68     		ldr	r2, [r3]
  39 0004 1368     		ldr	r3, [r2]
  40 0006 2BB9     		cbnz	r3, .L4
  41 0008 0123     		movs	r3, #1
  42              	.L2:
  43              		.loc 1 655 18 discriminator 4 view .LVU4
  44 000a 0360     		str	r3, [r0]
 656:FreeRTOS/src/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  45              		.loc 1 656 2 is_stmt 1 discriminator 4 view .LVU5
  46              		.loc 1 656 4 is_stmt 0 discriminator 4 view .LVU6
  47 000c 23B9     		cbnz	r3, .L5
 657:FreeRTOS/src/timers.c **** 	{
 658:FreeRTOS/src/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  48              		.loc 1 658 3 is_stmt 1 view .LVU7
  49              		.loc 1 658 21 is_stmt 0 view .LVU8
  50 000e D368     		ldr	r3, [r2, #12]
  51              		.loc 1 658 19 view .LVU9
  52 0010 1868     		ldr	r0, [r3]
  53              	.LVL1:
  54              		.loc 1 658 19 view .LVU10
  55 0012 7047     		bx	lr
  56              	.LVL2:
  57              	.L4:
 655:FreeRTOS/src/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
  58              		.loc 1 655 20 view .LVU11
  59 0014 0023     		movs	r3, #0
  60 0016 F8E7     		b	.L2
  61              	.L5:
 659:FreeRTOS/src/timers.c **** 	}
 660:FreeRTOS/src/timers.c **** 	else
 661:FreeRTOS/src/timers.c **** 	{
 662:FreeRTOS/src/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 663:FreeRTOS/src/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
  62              		.loc 1 663 19 view .LVU12
  63 0018 0020     		movs	r0, #0
  64              	.LVL3:
 664:FreeRTOS/src/timers.c **** 	}
 665:FreeRTOS/src/timers.c **** 
 666:FreeRTOS/src/timers.c **** 	return xNextExpireTime;
  65              		.loc 1 666 2 is_stmt 1 view .LVU13
 667:FreeRTOS/src/timers.c **** }
  66              		.loc 1 667 1 is_stmt 0 view .LVU14
  67 001a 7047     		bx	lr
  68              	.L7:
  69              		.align	2
  70              	.L6:
  71 001c 00000000 		.word	.LANCHOR0
  72              		.cfi_endproc
  73              	.LFE17:
  75              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 14


  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu fpv4-sp-d16
  82              	prvInsertTimerInActiveList:
  83              	.LVL4:
  84              	.LFB19:
 668:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 669:FreeRTOS/src/timers.c **** 
 670:FreeRTOS/src/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 671:FreeRTOS/src/timers.c **** {
 672:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 673:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 674:FreeRTOS/src/timers.c **** 
 675:FreeRTOS/src/timers.c **** 	xTimeNow = xTaskGetTickCount();
 676:FreeRTOS/src/timers.c **** 
 677:FreeRTOS/src/timers.c **** 	if( xTimeNow < xLastTime )
 678:FreeRTOS/src/timers.c **** 	{
 679:FreeRTOS/src/timers.c **** 		prvSwitchTimerLists();
 680:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 681:FreeRTOS/src/timers.c **** 	}
 682:FreeRTOS/src/timers.c **** 	else
 683:FreeRTOS/src/timers.c **** 	{
 684:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 685:FreeRTOS/src/timers.c **** 	}
 686:FreeRTOS/src/timers.c **** 
 687:FreeRTOS/src/timers.c **** 	xLastTime = xTimeNow;
 688:FreeRTOS/src/timers.c **** 
 689:FreeRTOS/src/timers.c **** 	return xTimeNow;
 690:FreeRTOS/src/timers.c **** }
 691:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 692:FreeRTOS/src/timers.c **** 
 693:FreeRTOS/src/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 694:FreeRTOS/src/timers.c **** {
  85              		.loc 1 694 1 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		.loc 1 694 1 is_stmt 0 view .LVU16
  90 0000 08B5     		push	{r3, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 3, -8
  94              		.cfi_offset 14, -4
 695:FreeRTOS/src/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
  95              		.loc 1 695 1 is_stmt 1 view .LVU17
  96              	.LVL5:
 696:FreeRTOS/src/timers.c **** 
 697:FreeRTOS/src/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  97              		.loc 1 697 2 view .LVU18
  98 0002 4160     		str	r1, [r0, #4]
 698:FreeRTOS/src/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  99              		.loc 1 698 2 view .LVU19
 100 0004 0061     		str	r0, [r0, #16]
 699:FreeRTOS/src/timers.c **** 
 700:FreeRTOS/src/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 15


 101              		.loc 1 700 2 view .LVU20
 102              		.loc 1 700 4 is_stmt 0 view .LVU21
 103 0006 9142     		cmp	r1, r2
 104 0008 0CD8     		bhi	.L9
 701:FreeRTOS/src/timers.c **** 	{
 702:FreeRTOS/src/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 703:FreeRTOS/src/timers.c **** 		timer was issued, and the time the command was processed? */
 704:FreeRTOS/src/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 105              		.loc 1 704 3 is_stmt 1 view .LVU22
 106              		.loc 1 704 9 is_stmt 0 view .LVU23
 107 000a D21A     		subs	r2, r2, r3
 108              	.LVL6:
 109              		.loc 1 704 64 view .LVU24
 110 000c 8369     		ldr	r3, [r0, #24]
 111              	.LVL7:
 112              		.loc 1 704 5 view .LVU25
 113 000e 9A42     		cmp	r2, r3
 114 0010 01D3     		bcc	.L15
 705:FreeRTOS/src/timers.c **** 		{
 706:FreeRTOS/src/timers.c **** 			/* The time between a command being issued and the command being
 707:FreeRTOS/src/timers.c **** 			processed actually exceeds the timers period.  */
 708:FreeRTOS/src/timers.c **** 			xProcessTimerNow = pdTRUE;
 115              		.loc 1 708 21 view .LVU26
 116 0012 0120     		movs	r0, #1
 117              	.LVL8:
 118              	.L8:
 709:FreeRTOS/src/timers.c **** 		}
 710:FreeRTOS/src/timers.c **** 		else
 711:FreeRTOS/src/timers.c **** 		{
 712:FreeRTOS/src/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 713:FreeRTOS/src/timers.c **** 		}
 714:FreeRTOS/src/timers.c **** 	}
 715:FreeRTOS/src/timers.c **** 	else
 716:FreeRTOS/src/timers.c **** 	{
 717:FreeRTOS/src/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 718:FreeRTOS/src/timers.c **** 		{
 719:FreeRTOS/src/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 720:FreeRTOS/src/timers.c **** 			but the expiry time has not, then the timer must have already passed
 721:FreeRTOS/src/timers.c **** 			its expiry time and should be processed immediately. */
 722:FreeRTOS/src/timers.c **** 			xProcessTimerNow = pdTRUE;
 723:FreeRTOS/src/timers.c **** 		}
 724:FreeRTOS/src/timers.c **** 		else
 725:FreeRTOS/src/timers.c **** 		{
 726:FreeRTOS/src/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 727:FreeRTOS/src/timers.c **** 		}
 728:FreeRTOS/src/timers.c **** 	}
 729:FreeRTOS/src/timers.c **** 
 730:FreeRTOS/src/timers.c **** 	return xProcessTimerNow;
 731:FreeRTOS/src/timers.c **** }
 119              		.loc 1 731 1 view .LVU27
 120 0014 08BD     		pop	{r3, pc}
 121              	.LVL9:
 122              	.L15:
 712:FreeRTOS/src/timers.c **** 		}
 123              		.loc 1 712 4 is_stmt 1 view .LVU28
 124 0016 011D     		adds	r1, r0, #4
 125              	.LVL10:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 16


 712:FreeRTOS/src/timers.c **** 		}
 126              		.loc 1 712 4 is_stmt 0 view .LVU29
 127 0018 094B     		ldr	r3, .L16
 128 001a 1868     		ldr	r0, [r3]
 129              	.LVL11:
 712:FreeRTOS/src/timers.c **** 		}
 130              		.loc 1 712 4 view .LVU30
 131 001c FFF7FEFF 		bl	vListInsert
 132              	.LVL12:
 695:FreeRTOS/src/timers.c **** 
 133              		.loc 1 695 12 view .LVU31
 134 0020 0020     		movs	r0, #0
 135 0022 F7E7     		b	.L8
 136              	.LVL13:
 137              	.L9:
 717:FreeRTOS/src/timers.c **** 		{
 138              		.loc 1 717 3 is_stmt 1 view .LVU32
 717:FreeRTOS/src/timers.c **** 		{
 139              		.loc 1 717 5 is_stmt 0 view .LVU33
 140 0024 9A42     		cmp	r2, r3
 141 0026 01D2     		bcs	.L11
 717:FreeRTOS/src/timers.c **** 		{
 142              		.loc 1 717 35 discriminator 1 view .LVU34
 143 0028 9942     		cmp	r1, r3
 144 002a 06D2     		bcs	.L13
 145              	.L11:
 726:FreeRTOS/src/timers.c **** 		}
 146              		.loc 1 726 4 is_stmt 1 view .LVU35
 147 002c 011D     		adds	r1, r0, #4
 148              	.LVL14:
 726:FreeRTOS/src/timers.c **** 		}
 149              		.loc 1 726 4 is_stmt 0 view .LVU36
 150 002e 054B     		ldr	r3, .L16+4
 151              	.LVL15:
 726:FreeRTOS/src/timers.c **** 		}
 152              		.loc 1 726 4 view .LVU37
 153 0030 1868     		ldr	r0, [r3]
 154              	.LVL16:
 726:FreeRTOS/src/timers.c **** 		}
 155              		.loc 1 726 4 view .LVU38
 156 0032 FFF7FEFF 		bl	vListInsert
 157              	.LVL17:
 695:FreeRTOS/src/timers.c **** 
 158              		.loc 1 695 12 view .LVU39
 159 0036 0020     		movs	r0, #0
 160 0038 ECE7     		b	.L8
 161              	.LVL18:
 162              	.L13:
 722:FreeRTOS/src/timers.c **** 		}
 163              		.loc 1 722 21 view .LVU40
 164 003a 0120     		movs	r0, #1
 165              	.LVL19:
 730:FreeRTOS/src/timers.c **** }
 166              		.loc 1 730 2 is_stmt 1 view .LVU41
 730:FreeRTOS/src/timers.c **** }
 167              		.loc 1 730 9 is_stmt 0 view .LVU42
 168 003c EAE7     		b	.L8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 17


 169              	.L17:
 170 003e 00BF     		.align	2
 171              	.L16:
 172 0040 00000000 		.word	.LANCHOR1
 173 0044 00000000 		.word	.LANCHOR0
 174              		.cfi_endproc
 175              	.LFE19:
 177              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	prvCheckForValidListAndQueue:
 185              	.LFB22:
 732:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 733:FreeRTOS/src/timers.c **** 
 734:FreeRTOS/src/timers.c **** static void	prvProcessReceivedCommands( void )
 735:FreeRTOS/src/timers.c **** {
 736:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 737:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 738:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 739:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 740:FreeRTOS/src/timers.c **** 
 741:FreeRTOS/src/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 742:FreeRTOS/src/timers.c **** 	{
 743:FreeRTOS/src/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 744:FreeRTOS/src/timers.c **** 		{
 745:FreeRTOS/src/timers.c **** 			/* Negative commands are pended function calls rather than timer
 746:FreeRTOS/src/timers.c **** 			commands. */
 747:FreeRTOS/src/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 748:FreeRTOS/src/timers.c **** 			{
 749:FreeRTOS/src/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 750:FreeRTOS/src/timers.c **** 
 751:FreeRTOS/src/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 752:FreeRTOS/src/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 753:FreeRTOS/src/timers.c **** 				configASSERT( pxCallback );
 754:FreeRTOS/src/timers.c **** 
 755:FreeRTOS/src/timers.c **** 				/* Call the function. */
 756:FreeRTOS/src/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 757:FreeRTOS/src/timers.c **** 			}
 758:FreeRTOS/src/timers.c **** 			else
 759:FreeRTOS/src/timers.c **** 			{
 760:FreeRTOS/src/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 761:FreeRTOS/src/timers.c **** 			}
 762:FreeRTOS/src/timers.c **** 		}
 763:FreeRTOS/src/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 764:FreeRTOS/src/timers.c **** 
 765:FreeRTOS/src/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 766:FreeRTOS/src/timers.c **** 		function calls. */
 767:FreeRTOS/src/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 768:FreeRTOS/src/timers.c **** 		{
 769:FreeRTOS/src/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 770:FreeRTOS/src/timers.c **** 			software timer. */
 771:FreeRTOS/src/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 772:FreeRTOS/src/timers.c **** 
 773:FreeRTOS/src/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 18


 774:FreeRTOS/src/timers.c **** 			{
 775:FreeRTOS/src/timers.c **** 				/* The timer is in a list, remove it. */
 776:FreeRTOS/src/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 777:FreeRTOS/src/timers.c **** 			}
 778:FreeRTOS/src/timers.c **** 			else
 779:FreeRTOS/src/timers.c **** 			{
 780:FreeRTOS/src/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 781:FreeRTOS/src/timers.c **** 			}
 782:FreeRTOS/src/timers.c **** 
 783:FreeRTOS/src/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 784:FreeRTOS/src/timers.c **** 
 785:FreeRTOS/src/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 786:FreeRTOS/src/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 787:FreeRTOS/src/timers.c **** 			called after the message is received from xTimerQueue so there is no
 788:FreeRTOS/src/timers.c **** 			possibility of a higher priority task adding a message to the message
 789:FreeRTOS/src/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 790:FreeRTOS/src/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 791:FreeRTOS/src/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 792:FreeRTOS/src/timers.c **** 
 793:FreeRTOS/src/timers.c **** 			switch( xMessage.xMessageID )
 794:FreeRTOS/src/timers.c **** 			{
 795:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START :
 796:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START_FROM_ISR :
 797:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_RESET :
 798:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_RESET_FROM_ISR :
 799:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 800:FreeRTOS/src/timers.c **** 					/* Start or restart a timer. */
 801:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 803:FreeRTOS/src/timers.c **** 					{
 804:FreeRTOS/src/timers.c **** 						/* The timer expired before it was added to the active
 805:FreeRTOS/src/timers.c **** 						timer list.  Process it now. */
 806:FreeRTOS/src/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 807:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 808:FreeRTOS/src/timers.c **** 
 809:FreeRTOS/src/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810:FreeRTOS/src/timers.c **** 						{
 811:FreeRTOS/src/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 812:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 813:FreeRTOS/src/timers.c **** 							( void ) xResult;
 814:FreeRTOS/src/timers.c **** 						}
 815:FreeRTOS/src/timers.c **** 						else
 816:FreeRTOS/src/timers.c **** 						{
 817:FreeRTOS/src/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 818:FreeRTOS/src/timers.c **** 						}
 819:FreeRTOS/src/timers.c **** 					}
 820:FreeRTOS/src/timers.c **** 					else
 821:FreeRTOS/src/timers.c **** 					{
 822:FreeRTOS/src/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 823:FreeRTOS/src/timers.c **** 					}
 824:FreeRTOS/src/timers.c **** 					break;
 825:FreeRTOS/src/timers.c **** 
 826:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_STOP :
 827:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 828:FreeRTOS/src/timers.c **** 					/* The timer has already been removed from the active list. */
 829:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 830:FreeRTOS/src/timers.c **** 					break;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 19


 831:FreeRTOS/src/timers.c **** 
 832:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 833:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 834:FreeRTOS/src/timers.c **** 					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 835:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 836:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 837:FreeRTOS/src/timers.c **** 
 838:FreeRTOS/src/timers.c **** 					/* The new period does not really have a reference, and can
 839:FreeRTOS/src/timers.c **** 					be longer or shorter than the old one.  The command time is
 840:FreeRTOS/src/timers.c **** 					therefore set to the current time, and as the period cannot
 841:FreeRTOS/src/timers.c **** 					be zero the next expiry time can only be in the future,
 842:FreeRTOS/src/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 843:FreeRTOS/src/timers.c **** 					no fail case that needs to be handled here. */
 844:FreeRTOS/src/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 845:FreeRTOS/src/timers.c **** 					break;
 846:FreeRTOS/src/timers.c **** 
 847:FreeRTOS/src/timers.c **** 				case tmrCOMMAND_DELETE :
 848:FreeRTOS/src/timers.c **** 					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 849:FreeRTOS/src/timers.c **** 					{
 850:FreeRTOS/src/timers.c **** 						/* The timer has already been removed from the active list,
 851:FreeRTOS/src/timers.c **** 						just free up the memory if the memory was dynamically
 852:FreeRTOS/src/timers.c **** 						allocated. */
 853:FreeRTOS/src/timers.c **** 						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 854:FreeRTOS/src/timers.c **** 						{
 855:FreeRTOS/src/timers.c **** 							vPortFree( pxTimer );
 856:FreeRTOS/src/timers.c **** 						}
 857:FreeRTOS/src/timers.c **** 						else
 858:FreeRTOS/src/timers.c **** 						{
 859:FreeRTOS/src/timers.c **** 							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 860:FreeRTOS/src/timers.c **** 						}
 861:FreeRTOS/src/timers.c **** 					}
 862:FreeRTOS/src/timers.c **** 					#else
 863:FreeRTOS/src/timers.c **** 					{
 864:FreeRTOS/src/timers.c **** 						/* If dynamic allocation is not enabled, the memory
 865:FreeRTOS/src/timers.c **** 						could not have been dynamically allocated. So there is
 866:FreeRTOS/src/timers.c **** 						no need to free the memory - just mark the timer as
 867:FreeRTOS/src/timers.c **** 						"not active". */
 868:FreeRTOS/src/timers.c **** 						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 869:FreeRTOS/src/timers.c **** 					}
 870:FreeRTOS/src/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 871:FreeRTOS/src/timers.c **** 					break;
 872:FreeRTOS/src/timers.c **** 
 873:FreeRTOS/src/timers.c **** 				default	:
 874:FreeRTOS/src/timers.c **** 					/* Don't expect to get here. */
 875:FreeRTOS/src/timers.c **** 					break;
 876:FreeRTOS/src/timers.c **** 			}
 877:FreeRTOS/src/timers.c **** 		}
 878:FreeRTOS/src/timers.c **** 	}
 879:FreeRTOS/src/timers.c **** }
 880:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 881:FreeRTOS/src/timers.c **** 
 882:FreeRTOS/src/timers.c **** static void prvSwitchTimerLists( void )
 883:FreeRTOS/src/timers.c **** {
 884:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 885:FreeRTOS/src/timers.c **** List_t *pxTemp;
 886:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 887:FreeRTOS/src/timers.c **** BaseType_t xResult;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 20


 888:FreeRTOS/src/timers.c **** 
 889:FreeRTOS/src/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 890:FreeRTOS/src/timers.c **** 	If there are any timers still referenced from the current timer list
 891:FreeRTOS/src/timers.c **** 	then they must have expired and should be processed before the lists
 892:FreeRTOS/src/timers.c **** 	are switched. */
 893:FreeRTOS/src/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 894:FreeRTOS/src/timers.c **** 	{
 895:FreeRTOS/src/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 896:FreeRTOS/src/timers.c **** 
 897:FreeRTOS/src/timers.c **** 		/* Remove the timer from the list. */
 898:FreeRTOS/src/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 v
 899:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 900:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 901:FreeRTOS/src/timers.c **** 
 902:FreeRTOS/src/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 903:FreeRTOS/src/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 904:FreeRTOS/src/timers.c **** 		have not yet been switched. */
 905:FreeRTOS/src/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 906:FreeRTOS/src/timers.c **** 
 907:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 908:FreeRTOS/src/timers.c **** 		{
 909:FreeRTOS/src/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 910:FreeRTOS/src/timers.c **** 			the timer going into the same timer list then it has already expired
 911:FreeRTOS/src/timers.c **** 			and the timer should be re-inserted into the current list so it is
 912:FreeRTOS/src/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 913:FreeRTOS/src/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 914:FreeRTOS/src/timers.c **** 			the lists have been swapped. */
 915:FreeRTOS/src/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 916:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 917:FreeRTOS/src/timers.c **** 			{
 918:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 919:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 920:FreeRTOS/src/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 921:FreeRTOS/src/timers.c **** 			}
 922:FreeRTOS/src/timers.c **** 			else
 923:FreeRTOS/src/timers.c **** 			{
 924:FreeRTOS/src/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 925:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 926:FreeRTOS/src/timers.c **** 				( void ) xResult;
 927:FreeRTOS/src/timers.c **** 			}
 928:FreeRTOS/src/timers.c **** 		}
 929:FreeRTOS/src/timers.c **** 		else
 930:FreeRTOS/src/timers.c **** 		{
 931:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/src/timers.c **** 		}
 933:FreeRTOS/src/timers.c **** 	}
 934:FreeRTOS/src/timers.c **** 
 935:FreeRTOS/src/timers.c **** 	pxTemp = pxCurrentTimerList;
 936:FreeRTOS/src/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 937:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 938:FreeRTOS/src/timers.c **** }
 939:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 940:FreeRTOS/src/timers.c **** 
 941:FreeRTOS/src/timers.c **** static void prvCheckForValidListAndQueue( void )
 942:FreeRTOS/src/timers.c **** {
 186              		.loc 1 942 1 is_stmt 1 view -0
 187              		.cfi_startproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 21


 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 38B5     		push	{r3, r4, r5, lr}
 191              	.LCFI1:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 3, -16
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 5, -8
 196              		.cfi_offset 14, -4
 943:FreeRTOS/src/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 944:FreeRTOS/src/timers.c **** 	queue used to communicate with the timer service, have been
 945:FreeRTOS/src/timers.c **** 	initialised. */
 946:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 197              		.loc 1 946 2 view .LVU44
 198 0002 FFF7FEFF 		bl	vPortEnterCritical
 199              	.LVL20:
 947:FreeRTOS/src/timers.c **** 	{
 948:FreeRTOS/src/timers.c **** 		if( xTimerQueue == NULL )
 200              		.loc 1 948 3 view .LVU45
 201              		.loc 1 948 19 is_stmt 0 view .LVU46
 202 0006 0F4B     		ldr	r3, .L22
 203 0008 1B68     		ldr	r3, [r3]
 204              		.loc 1 948 5 view .LVU47
 205 000a 13B1     		cbz	r3, .L21
 206              	.L19:
 949:FreeRTOS/src/timers.c **** 		{
 950:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 951:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 952:FreeRTOS/src/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 953:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 954:FreeRTOS/src/timers.c **** 
 955:FreeRTOS/src/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 956:FreeRTOS/src/timers.c **** 			{
 957:FreeRTOS/src/timers.c **** 				/* The timer queue is allocated statically in case
 958:FreeRTOS/src/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 959:FreeRTOS/src/timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 960:FreeRTOS/src/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 961:FreeRTOS/src/timers.c **** 
 962:FreeRTOS/src/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
 963:FreeRTOS/src/timers.c **** 			}
 964:FreeRTOS/src/timers.c **** 			#else
 965:FreeRTOS/src/timers.c **** 			{
 966:FreeRTOS/src/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 967:FreeRTOS/src/timers.c **** 			}
 968:FreeRTOS/src/timers.c **** 			#endif
 969:FreeRTOS/src/timers.c **** 
 970:FreeRTOS/src/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 971:FreeRTOS/src/timers.c **** 			{
 972:FreeRTOS/src/timers.c **** 				if( xTimerQueue != NULL )
 973:FreeRTOS/src/timers.c **** 				{
 974:FreeRTOS/src/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 975:FreeRTOS/src/timers.c **** 				}
 976:FreeRTOS/src/timers.c **** 				else
 977:FreeRTOS/src/timers.c **** 				{
 978:FreeRTOS/src/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 979:FreeRTOS/src/timers.c **** 				}
 980:FreeRTOS/src/timers.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 22


 981:FreeRTOS/src/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 982:FreeRTOS/src/timers.c **** 		}
 983:FreeRTOS/src/timers.c **** 		else
 984:FreeRTOS/src/timers.c **** 		{
 985:FreeRTOS/src/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 207              		.loc 1 985 28 is_stmt 1 view .LVU48
 986:FreeRTOS/src/timers.c **** 		}
 987:FreeRTOS/src/timers.c **** 	}
 988:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 208              		.loc 1 988 2 view .LVU49
 209 000c FFF7FEFF 		bl	vPortExitCritical
 210              	.LVL21:
 989:FreeRTOS/src/timers.c **** }
 211              		.loc 1 989 1 is_stmt 0 view .LVU50
 212 0010 38BD     		pop	{r3, r4, r5, pc}
 213              	.L21:
 950:FreeRTOS/src/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 214              		.loc 1 950 4 is_stmt 1 view .LVU51
 215 0012 0D4D     		ldr	r5, .L22+4
 216 0014 2846     		mov	r0, r5
 217 0016 FFF7FEFF 		bl	vListInitialise
 218              	.LVL22:
 951:FreeRTOS/src/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 219              		.loc 1 951 4 view .LVU52
 220 001a 0C4C     		ldr	r4, .L22+8
 221 001c 2046     		mov	r0, r4
 222 001e FFF7FEFF 		bl	vListInitialise
 223              	.LVL23:
 952:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 224              		.loc 1 952 4 view .LVU53
 952:FreeRTOS/src/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 225              		.loc 1 952 23 is_stmt 0 view .LVU54
 226 0022 0B4B     		ldr	r3, .L22+12
 227 0024 1D60     		str	r5, [r3]
 953:FreeRTOS/src/timers.c **** 
 228              		.loc 1 953 4 is_stmt 1 view .LVU55
 953:FreeRTOS/src/timers.c **** 
 229              		.loc 1 953 24 is_stmt 0 view .LVU56
 230 0026 0B4B     		ldr	r3, .L22+16
 231 0028 1C60     		str	r4, [r3]
 966:FreeRTOS/src/timers.c **** 			}
 232              		.loc 1 966 5 is_stmt 1 view .LVU57
 966:FreeRTOS/src/timers.c **** 			}
 233              		.loc 1 966 19 is_stmt 0 view .LVU58
 234 002a 0022     		movs	r2, #0
 235 002c 1021     		movs	r1, #16
 236 002e 0A20     		movs	r0, #10
 237 0030 FFF7FEFF 		bl	xQueueGenericCreate
 238              	.LVL24:
 966:FreeRTOS/src/timers.c **** 			}
 239              		.loc 1 966 17 view .LVU59
 240 0034 034B     		ldr	r3, .L22
 241 0036 1860     		str	r0, [r3]
 972:FreeRTOS/src/timers.c **** 				{
 242              		.loc 1 972 5 is_stmt 1 view .LVU60
 972:FreeRTOS/src/timers.c **** 				{
 243              		.loc 1 972 7 is_stmt 0 view .LVU61
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 23


 244 0038 0028     		cmp	r0, #0
 245 003a E7D0     		beq	.L19
 974:FreeRTOS/src/timers.c **** 				}
 246              		.loc 1 974 6 is_stmt 1 view .LVU62
 247 003c 0649     		ldr	r1, .L22+20
 248 003e FFF7FEFF 		bl	vQueueAddToRegistry
 249              	.LVL25:
 250 0042 E3E7     		b	.L19
 251              	.L23:
 252              		.align	2
 253              	.L22:
 254 0044 00000000 		.word	.LANCHOR2
 255 0048 00000000 		.word	.LANCHOR3
 256 004c 00000000 		.word	.LANCHOR4
 257 0050 00000000 		.word	.LANCHOR0
 258 0054 00000000 		.word	.LANCHOR1
 259 0058 00000000 		.word	.LC0
 260              		.cfi_endproc
 261              	.LFE22:
 263              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 264              		.align	1
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 268              		.fpu fpv4-sp-d16
 270              	prvInitialiseNewTimer:
 271              	.LVL26:
 272              	.LFB6:
 355:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 273              		.loc 1 355 1 view -0
 274              		.cfi_startproc
 275              		@ args = 8, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 355:FreeRTOS/src/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 277              		.loc 1 355 1 is_stmt 0 view .LVU64
 278 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 24
 281              		.cfi_offset 4, -24
 282              		.cfi_offset 5, -20
 283              		.cfi_offset 6, -16
 284              		.cfi_offset 7, -12
 285              		.cfi_offset 8, -8
 286              		.cfi_offset 14, -4
 287 0004 079C     		ldr	r4, [sp, #28]
 357:FreeRTOS/src/timers.c **** 
 288              		.loc 1 357 45 is_stmt 1 view .LVU65
 359:FreeRTOS/src/timers.c **** 	{
 289              		.loc 1 359 2 view .LVU66
 359:FreeRTOS/src/timers.c **** 	{
 290              		.loc 1 359 4 is_stmt 0 view .LVU67
 291 0006 ACB1     		cbz	r4, .L24
 292 0008 1E46     		mov	r6, r3
 293 000a 1546     		mov	r5, r2
 294 000c 0F46     		mov	r7, r1
 295 000e 8046     		mov	r8, r0
 363:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 24


 296              		.loc 1 363 3 is_stmt 1 view .LVU68
 297 0010 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 298              	.LVL27:
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 299              		.loc 1 367 3 view .LVU69
 367:FreeRTOS/src/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 300              		.loc 1 367 27 is_stmt 0 view .LVU70
 301 0014 C4F80080 		str	r8, [r4]
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 302              		.loc 1 368 3 is_stmt 1 view .LVU71
 368:FreeRTOS/src/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 303              		.loc 1 368 35 is_stmt 0 view .LVU72
 304 0018 A761     		str	r7, [r4, #24]
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 305              		.loc 1 369 3 is_stmt 1 view .LVU73
 369:FreeRTOS/src/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 306              		.loc 1 369 25 is_stmt 0 view .LVU74
 307 001a E661     		str	r6, [r4, #28]
 370:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 308              		.loc 1 370 3 is_stmt 1 view .LVU75
 370:FreeRTOS/src/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 309              		.loc 1 370 34 is_stmt 0 view .LVU76
 310 001c 069B     		ldr	r3, [sp, #24]
 311 001e 2362     		str	r3, [r4, #32]
 371:FreeRTOS/src/timers.c **** 		if( uxAutoReload != pdFALSE )
 312              		.loc 1 371 3 is_stmt 1 view .LVU77
 313 0020 201D     		adds	r0, r4, #4
 314 0022 FFF7FEFF 		bl	vListInitialiseItem
 315              	.LVL28:
 372:FreeRTOS/src/timers.c **** 		{
 316              		.loc 1 372 3 view .LVU78
 372:FreeRTOS/src/timers.c **** 		{
 317              		.loc 1 372 5 is_stmt 0 view .LVU79
 318 0026 2DB1     		cbz	r5, .L24
 374:FreeRTOS/src/timers.c **** 		}
 319              		.loc 1 374 4 is_stmt 1 view .LVU80
 374:FreeRTOS/src/timers.c **** 		}
 320              		.loc 1 374 25 is_stmt 0 view .LVU81
 321 0028 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 322 002c 43F00403 		orr	r3, r3, #4
 323 0030 84F82430 		strb	r3, [r4, #36]
 376:FreeRTOS/src/timers.c **** 	}
 324              		.loc 1 376 34 is_stmt 1 view .LVU82
 325              	.LVL29:
 326              	.L24:
 378:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 327              		.loc 1 378 1 is_stmt 0 view .LVU83
 328 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 378:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 329              		.loc 1 378 1 view .LVU84
 330              		.cfi_endproc
 331              	.LFE6:
 333              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 334              		.align	1
 335              		.global	xTimerCreateTimerTask
 336              		.syntax unified
 337              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 25


 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	xTimerCreateTimerTask:
 342              	.LFB4:
 228:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 343              		.loc 1 228 1 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 00B5     		push	{lr}
 348              	.LCFI3:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 14, -4
 351 0002 83B0     		sub	sp, sp, #12
 352              	.LCFI4:
 353              		.cfi_def_cfa_offset 16
 229:FreeRTOS/src/timers.c **** 
 354              		.loc 1 229 1 view .LVU86
 355              	.LVL30:
 235:FreeRTOS/src/timers.c **** 
 356              		.loc 1 235 2 view .LVU87
 357 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 358              	.LVL31:
 237:FreeRTOS/src/timers.c **** 	{
 359              		.loc 1 237 2 view .LVU88
 237:FreeRTOS/src/timers.c **** 	{
 360              		.loc 1 237 18 is_stmt 0 view .LVU89
 361 0008 084B     		ldr	r3, .L31
 362 000a 1B68     		ldr	r3, [r3]
 237:FreeRTOS/src/timers.c **** 	{
 363              		.loc 1 237 4 view .LVU90
 364 000c 63B1     		cbz	r3, .L29
 261:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 365              		.loc 1 261 4 is_stmt 1 view .LVU91
 261:FreeRTOS/src/timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 366              		.loc 1 261 14 is_stmt 0 view .LVU92
 367 000e 084B     		ldr	r3, .L31+4
 368 0010 0193     		str	r3, [sp, #4]
 369 0012 0323     		movs	r3, #3
 370 0014 0093     		str	r3, [sp]
 371 0016 0023     		movs	r3, #0
 372 0018 8022     		movs	r2, #128
 373 001a 0649     		ldr	r1, .L31+8
 374 001c 0648     		ldr	r0, .L31+12
 375 001e FFF7FEFF 		bl	xTaskCreate
 376              	.LVL32:
 377              	.L27:
 277:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 378              		.loc 1 277 1 view .LVU93
 379 0022 03B0     		add	sp, sp, #12
 380              	.LCFI5:
 381              		.cfi_remember_state
 382              		.cfi_def_cfa_offset 4
 383              		@ sp needed
 384 0024 5DF804FB 		ldr	pc, [sp], #4
 385              	.LVL33:
 386              	.L29:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 26


 387              	.LCFI6:
 388              		.cfi_restore_state
 229:FreeRTOS/src/timers.c **** 
 389              		.loc 1 229 12 view .LVU94
 390 0028 0020     		movs	r0, #0
 272:FreeRTOS/src/timers.c **** 	}
 391              		.loc 1 272 27 is_stmt 1 view .LVU95
 275:FreeRTOS/src/timers.c **** 	return xReturn;
 392              		.loc 1 275 25 view .LVU96
 276:FreeRTOS/src/timers.c **** }
 393              		.loc 1 276 2 view .LVU97
 276:FreeRTOS/src/timers.c **** }
 394              		.loc 1 276 9 is_stmt 0 view .LVU98
 395 002a FAE7     		b	.L27
 396              	.L32:
 397              		.align	2
 398              	.L31:
 399 002c 00000000 		.word	.LANCHOR2
 400 0030 00000000 		.word	.LANCHOR5
 401 0034 00000000 		.word	.LC1
 402 0038 00000000 		.word	prvTimerTask
 403              		.cfi_endproc
 404              	.LFE4:
 406              		.section	.text.xTimerCreate,"ax",%progbits
 407              		.align	1
 408              		.global	xTimerCreate
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv4-sp-d16
 414              	xTimerCreate:
 415              	.LVL34:
 416              	.LFB5:
 287:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 417              		.loc 1 287 2 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 4, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 287:FreeRTOS/src/timers.c **** 	Timer_t *pxNewTimer;
 421              		.loc 1 287 2 is_stmt 0 view .LVU100
 422 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 423              	.LCFI7:
 424              		.cfi_def_cfa_offset 24
 425              		.cfi_offset 4, -24
 426              		.cfi_offset 5, -20
 427              		.cfi_offset 6, -16
 428              		.cfi_offset 7, -12
 429              		.cfi_offset 8, -8
 430              		.cfi_offset 14, -4
 431 0004 82B0     		sub	sp, sp, #8
 432              	.LCFI8:
 433              		.cfi_def_cfa_offset 32
 434 0006 0546     		mov	r5, r0
 435 0008 0E46     		mov	r6, r1
 436 000a 1746     		mov	r7, r2
 437 000c 9846     		mov	r8, r3
 288:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 27


 438              		.loc 1 288 2 is_stmt 1 view .LVU101
 290:FreeRTOS/src/timers.c **** 
 439              		.loc 1 290 3 view .LVU102
 290:FreeRTOS/src/timers.c **** 
 440              		.loc 1 290 30 is_stmt 0 view .LVU103
 441 000e 2820     		movs	r0, #40
 442              	.LVL35:
 290:FreeRTOS/src/timers.c **** 
 443              		.loc 1 290 30 view .LVU104
 444 0010 FFF7FEFF 		bl	pvPortMalloc
 445              	.LVL36:
 292:FreeRTOS/src/timers.c **** 		{
 446              		.loc 1 292 3 is_stmt 1 view .LVU105
 292:FreeRTOS/src/timers.c **** 		{
 447              		.loc 1 292 5 is_stmt 0 view .LVU106
 448 0014 0446     		mov	r4, r0
 449 0016 58B1     		cbz	r0, .L33
 297:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 450              		.loc 1 297 4 is_stmt 1 view .LVU107
 297:FreeRTOS/src/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 451              		.loc 1 297 25 is_stmt 0 view .LVU108
 452 0018 0023     		movs	r3, #0
 453 001a 80F82430 		strb	r3, [r0, #36]
 298:FreeRTOS/src/timers.c **** 		}
 454              		.loc 1 298 4 is_stmt 1 view .LVU109
 455 001e 0190     		str	r0, [sp, #4]
 456 0020 089B     		ldr	r3, [sp, #32]
 457 0022 0093     		str	r3, [sp]
 458 0024 4346     		mov	r3, r8
 459 0026 3A46     		mov	r2, r7
 460 0028 3146     		mov	r1, r6
 461 002a 2846     		mov	r0, r5
 462              	.LVL37:
 298:FreeRTOS/src/timers.c **** 		}
 463              		.loc 1 298 4 is_stmt 0 view .LVU110
 464 002c FFF7FEFF 		bl	prvInitialiseNewTimer
 465              	.LVL38:
 301:FreeRTOS/src/timers.c **** 	}
 466              		.loc 1 301 3 is_stmt 1 view .LVU111
 467              	.L33:
 302:FreeRTOS/src/timers.c **** 
 468              		.loc 1 302 2 is_stmt 0 view .LVU112
 469 0030 2046     		mov	r0, r4
 470 0032 02B0     		add	sp, sp, #8
 471              	.LCFI9:
 472              		.cfi_def_cfa_offset 24
 473              		@ sp needed
 474 0034 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 302:FreeRTOS/src/timers.c **** 
 475              		.loc 1 302 2 view .LVU113
 476              		.cfi_endproc
 477              	.LFE5:
 479              		.section	.text.xTimerGenericCommand,"ax",%progbits
 480              		.align	1
 481              		.global	xTimerGenericCommand
 482              		.syntax unified
 483              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 28


 484              		.thumb_func
 485              		.fpu fpv4-sp-d16
 487              	xTimerGenericCommand:
 488              	.LVL39:
 489              	.LFB7:
 382:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 490              		.loc 1 382 1 is_stmt 1 view -0
 491              		.cfi_startproc
 492              		@ args = 4, pretend = 0, frame = 16
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 382:FreeRTOS/src/timers.c **** BaseType_t xReturn = pdFAIL;
 494              		.loc 1 382 1 is_stmt 0 view .LVU115
 495 0000 30B5     		push	{r4, r5, lr}
 496              	.LCFI10:
 497              		.cfi_def_cfa_offset 12
 498              		.cfi_offset 4, -12
 499              		.cfi_offset 5, -8
 500              		.cfi_offset 14, -4
 501 0002 85B0     		sub	sp, sp, #20
 502              	.LCFI11:
 503              		.cfi_def_cfa_offset 32
 383:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 504              		.loc 1 383 1 is_stmt 1 view .LVU116
 505              	.LVL40:
 384:FreeRTOS/src/timers.c **** 
 506              		.loc 1 384 1 view .LVU117
 386:FreeRTOS/src/timers.c **** 
 507              		.loc 1 386 24 view .LVU118
 390:FreeRTOS/src/timers.c **** 	{
 508              		.loc 1 390 2 view .LVU119
 390:FreeRTOS/src/timers.c **** 	{
 509              		.loc 1 390 18 is_stmt 0 view .LVU120
 510 0004 134C     		ldr	r4, .L43
 511 0006 2568     		ldr	r5, [r4]
 390:FreeRTOS/src/timers.c **** 	{
 512              		.loc 1 390 4 view .LVU121
 513 0008 0DB3     		cbz	r5, .L40
 514 000a 1C46     		mov	r4, r3
 393:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 515              		.loc 1 393 3 is_stmt 1 view .LVU122
 393:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 516              		.loc 1 393 23 is_stmt 0 view .LVU123
 517 000c 0091     		str	r1, [sp]
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 518              		.loc 1 394 3 is_stmt 1 view .LVU124
 394:FreeRTOS/src/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 519              		.loc 1 394 45 is_stmt 0 view .LVU125
 520 000e 0192     		str	r2, [sp, #4]
 395:FreeRTOS/src/timers.c **** 
 521              		.loc 1 395 3 is_stmt 1 view .LVU126
 395:FreeRTOS/src/timers.c **** 
 522              		.loc 1 395 39 is_stmt 0 view .LVU127
 523 0010 0290     		str	r0, [sp, #8]
 397:FreeRTOS/src/timers.c **** 		{
 524              		.loc 1 397 3 is_stmt 1 view .LVU128
 397:FreeRTOS/src/timers.c **** 		{
 525              		.loc 1 397 5 is_stmt 0 view .LVU129
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 29


 526 0012 0529     		cmp	r1, #5
 527 0014 13DC     		bgt	.L38
 399:FreeRTOS/src/timers.c **** 			{
 528              		.loc 1 399 4 is_stmt 1 view .LVU130
 399:FreeRTOS/src/timers.c **** 			{
 529              		.loc 1 399 8 is_stmt 0 view .LVU131
 530 0016 FFF7FEFF 		bl	xTaskGetSchedulerState
 531              	.LVL41:
 399:FreeRTOS/src/timers.c **** 			{
 532              		.loc 1 399 6 view .LVU132
 533 001a 0228     		cmp	r0, #2
 534 001c 07D0     		beq	.L42
 405:FreeRTOS/src/timers.c **** 			}
 535              		.loc 1 405 5 is_stmt 1 view .LVU133
 405:FreeRTOS/src/timers.c **** 			}
 536              		.loc 1 405 15 is_stmt 0 view .LVU134
 537 001e 0023     		movs	r3, #0
 538 0020 1A46     		mov	r2, r3
 539 0022 6946     		mov	r1, sp
 540 0024 0B48     		ldr	r0, .L43
 541 0026 0068     		ldr	r0, [r0]
 542 0028 FFF7FEFF 		bl	xQueueGenericSend
 543              	.LVL42:
 405:FreeRTOS/src/timers.c **** 			}
 544              		.loc 1 405 15 view .LVU135
 545 002c 0DE0     		b	.L36
 546              	.LVL43:
 547              	.L42:
 401:FreeRTOS/src/timers.c **** 			}
 548              		.loc 1 401 5 is_stmt 1 view .LVU136
 401:FreeRTOS/src/timers.c **** 			}
 549              		.loc 1 401 15 is_stmt 0 view .LVU137
 550 002e 0023     		movs	r3, #0
 551 0030 089A     		ldr	r2, [sp, #32]
 552 0032 6946     		mov	r1, sp
 553 0034 0748     		ldr	r0, .L43
 554 0036 0068     		ldr	r0, [r0]
 555 0038 FFF7FEFF 		bl	xQueueGenericSend
 556              	.LVL44:
 401:FreeRTOS/src/timers.c **** 			}
 557              		.loc 1 401 15 view .LVU138
 558 003c 05E0     		b	.L36
 559              	.LVL45:
 560              	.L38:
 410:FreeRTOS/src/timers.c **** 		}
 561              		.loc 1 410 4 is_stmt 1 view .LVU139
 410:FreeRTOS/src/timers.c **** 		}
 562              		.loc 1 410 14 is_stmt 0 view .LVU140
 563 003e 0023     		movs	r3, #0
 564              	.LVL46:
 410:FreeRTOS/src/timers.c **** 		}
 565              		.loc 1 410 14 view .LVU141
 566 0040 2246     		mov	r2, r4
 567              	.LVL47:
 410:FreeRTOS/src/timers.c **** 		}
 568              		.loc 1 410 14 view .LVU142
 569 0042 6946     		mov	r1, sp
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 30


 570              	.LVL48:
 410:FreeRTOS/src/timers.c **** 		}
 571              		.loc 1 410 14 view .LVU143
 572 0044 2846     		mov	r0, r5
 573              	.LVL49:
 410:FreeRTOS/src/timers.c **** 		}
 574              		.loc 1 410 14 view .LVU144
 575 0046 FFF7FEFF 		bl	xQueueGenericSendFromISR
 576              	.LVL50:
 577              	.L36:
 421:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 578              		.loc 1 421 1 view .LVU145
 579 004a 05B0     		add	sp, sp, #20
 580              	.LCFI12:
 581              		.cfi_remember_state
 582              		.cfi_def_cfa_offset 12
 583              		@ sp needed
 584 004c 30BD     		pop	{r4, r5, pc}
 585              	.LVL51:
 586              	.L40:
 587              	.LCFI13:
 588              		.cfi_restore_state
 383:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 589              		.loc 1 383 12 view .LVU146
 590 004e 0020     		movs	r0, #0
 591              	.LVL52:
 417:FreeRTOS/src/timers.c **** 	}
 592              		.loc 1 417 27 is_stmt 1 view .LVU147
 420:FreeRTOS/src/timers.c **** }
 593              		.loc 1 420 2 view .LVU148
 420:FreeRTOS/src/timers.c **** }
 594              		.loc 1 420 9 is_stmt 0 view .LVU149
 595 0050 FBE7     		b	.L36
 596              	.L44:
 597 0052 00BF     		.align	2
 598              	.L43:
 599 0054 00000000 		.word	.LANCHOR2
 600              		.cfi_endproc
 601              	.LFE7:
 603              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 604              		.align	1
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu fpv4-sp-d16
 610              	prvSwitchTimerLists:
 611              	.LFB21:
 883:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 612              		.loc 1 883 1 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616 0000 70B5     		push	{r4, r5, r6, lr}
 617              	.LCFI14:
 618              		.cfi_def_cfa_offset 16
 619              		.cfi_offset 4, -16
 620              		.cfi_offset 5, -12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 31


 621              		.cfi_offset 6, -8
 622              		.cfi_offset 14, -4
 623 0002 82B0     		sub	sp, sp, #8
 624              	.LCFI15:
 625              		.cfi_def_cfa_offset 24
 884:FreeRTOS/src/timers.c **** List_t *pxTemp;
 626              		.loc 1 884 1 view .LVU151
 885:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 627              		.loc 1 885 1 view .LVU152
 886:FreeRTOS/src/timers.c **** BaseType_t xResult;
 628              		.loc 1 886 1 view .LVU153
 887:FreeRTOS/src/timers.c **** 
 629              		.loc 1 887 1 view .LVU154
 893:FreeRTOS/src/timers.c **** 	{
 630              		.loc 1 893 2 view .LVU155
 631              	.L47:
 931:FreeRTOS/src/timers.c **** 		}
 632              		.loc 1 931 28 view .LVU156
 893:FreeRTOS/src/timers.c **** 	{
 633              		.loc 1 893 9 is_stmt 0 view .LVU157
 634 0004 164B     		ldr	r3, .L53
 635 0006 1B68     		ldr	r3, [r3]
 636 0008 1A68     		ldr	r2, [r3]
 893:FreeRTOS/src/timers.c **** 	{
 637              		.loc 1 893 7 view .LVU158
 638 000a 12B3     		cbz	r2, .L52
 895:FreeRTOS/src/timers.c **** 
 639              		.loc 1 895 3 is_stmt 1 view .LVU159
 895:FreeRTOS/src/timers.c **** 
 640              		.loc 1 895 21 is_stmt 0 view .LVU160
 641 000c DB68     		ldr	r3, [r3, #12]
 895:FreeRTOS/src/timers.c **** 
 642              		.loc 1 895 19 view .LVU161
 643 000e 1E68     		ldr	r6, [r3]
 644              	.LVL53:
 898:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 645              		.loc 1 898 3 is_stmt 1 view .LVU162
 898:FreeRTOS/src/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 646              		.loc 1 898 11 is_stmt 0 view .LVU163
 647 0010 DC68     		ldr	r4, [r3, #12]
 648              	.LVL54:
 899:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 649              		.loc 1 899 3 is_stmt 1 view .LVU164
 899:FreeRTOS/src/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 650              		.loc 1 899 12 is_stmt 0 view .LVU165
 651 0012 251D     		adds	r5, r4, #4
 652 0014 2846     		mov	r0, r5
 653 0016 FFF7FEFF 		bl	uxListRemove
 654              	.LVL55:
 900:FreeRTOS/src/timers.c **** 
 655              		.loc 1 900 32 is_stmt 1 view .LVU166
 905:FreeRTOS/src/timers.c **** 
 656              		.loc 1 905 3 view .LVU167
 905:FreeRTOS/src/timers.c **** 
 657              		.loc 1 905 10 is_stmt 0 view .LVU168
 658 001a 236A     		ldr	r3, [r4, #32]
 905:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 32


 659              		.loc 1 905 3 view .LVU169
 660 001c 2046     		mov	r0, r4
 661 001e 9847     		blx	r3
 662              	.LVL56:
 907:FreeRTOS/src/timers.c **** 		{
 663              		.loc 1 907 3 is_stmt 1 view .LVU170
 907:FreeRTOS/src/timers.c **** 		{
 664              		.loc 1 907 16 is_stmt 0 view .LVU171
 665 0020 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 907:FreeRTOS/src/timers.c **** 		{
 666              		.loc 1 907 5 view .LVU172
 667 0024 13F0040F 		tst	r3, #4
 668 0028 ECD0     		beq	.L47
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 669              		.loc 1 915 4 is_stmt 1 view .LVU173
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 670              		.loc 1 915 45 is_stmt 0 view .LVU174
 671 002a A369     		ldr	r3, [r4, #24]
 915:FreeRTOS/src/timers.c **** 			if( xReloadTime > xNextExpireTime )
 672              		.loc 1 915 16 view .LVU175
 673 002c 3344     		add	r3, r3, r6
 674              	.LVL57:
 916:FreeRTOS/src/timers.c **** 			{
 675              		.loc 1 916 4 is_stmt 1 view .LVU176
 916:FreeRTOS/src/timers.c **** 			{
 676              		.loc 1 916 6 is_stmt 0 view .LVU177
 677 002e 9E42     		cmp	r6, r3
 678 0030 07D2     		bcs	.L48
 918:FreeRTOS/src/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 679              		.loc 1 918 5 is_stmt 1 view .LVU178
 680 0032 6360     		str	r3, [r4, #4]
 919:FreeRTOS/src/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 681              		.loc 1 919 5 view .LVU179
 682 0034 2461     		str	r4, [r4, #16]
 920:FreeRTOS/src/timers.c **** 			}
 683              		.loc 1 920 5 view .LVU180
 684 0036 2946     		mov	r1, r5
 685 0038 094B     		ldr	r3, .L53
 686              	.LVL58:
 920:FreeRTOS/src/timers.c **** 			}
 687              		.loc 1 920 5 is_stmt 0 view .LVU181
 688 003a 1868     		ldr	r0, [r3]
 689 003c FFF7FEFF 		bl	vListInsert
 690              	.LVL59:
 920:FreeRTOS/src/timers.c **** 			}
 691              		.loc 1 920 5 view .LVU182
 692 0040 E0E7     		b	.L47
 693              	.LVL60:
 694              	.L48:
 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 695              		.loc 1 924 5 is_stmt 1 view .LVU183
 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 696              		.loc 1 924 15 is_stmt 0 view .LVU184
 697 0042 0021     		movs	r1, #0
 698 0044 0091     		str	r1, [sp]
 699 0046 0B46     		mov	r3, r1
 700              	.LVL61:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 33


 924:FreeRTOS/src/timers.c **** 				configASSERT( xResult );
 701              		.loc 1 924 15 view .LVU185
 702 0048 3246     		mov	r2, r6
 703 004a 2046     		mov	r0, r4
 704 004c FFF7FEFF 		bl	xTimerGenericCommand
 705              	.LVL62:
 706 0050 D8E7     		b	.L47
 707              	.LVL63:
 708              	.L52:
 935:FreeRTOS/src/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 709              		.loc 1 935 2 is_stmt 1 view .LVU186
 936:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 710              		.loc 1 936 2 view .LVU187
 936:FreeRTOS/src/timers.c **** 	pxOverflowTimerList = pxTemp;
 711              		.loc 1 936 21 is_stmt 0 view .LVU188
 712 0052 044A     		ldr	r2, .L53+4
 713 0054 1068     		ldr	r0, [r2]
 714 0056 0249     		ldr	r1, .L53
 715 0058 0860     		str	r0, [r1]
 937:FreeRTOS/src/timers.c **** }
 716              		.loc 1 937 2 is_stmt 1 view .LVU189
 937:FreeRTOS/src/timers.c **** }
 717              		.loc 1 937 22 is_stmt 0 view .LVU190
 718 005a 1360     		str	r3, [r2]
 938:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 719              		.loc 1 938 1 view .LVU191
 720 005c 02B0     		add	sp, sp, #8
 721              	.LCFI16:
 722              		.cfi_def_cfa_offset 16
 723              		@ sp needed
 724 005e 70BD     		pop	{r4, r5, r6, pc}
 725              	.L54:
 726              		.align	2
 727              	.L53:
 728 0060 00000000 		.word	.LANCHOR0
 729 0064 00000000 		.word	.LANCHOR1
 730              		.cfi_endproc
 731              	.LFE21:
 733              		.section	.text.prvSampleTimeNow,"ax",%progbits
 734              		.align	1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	prvSampleTimeNow:
 741              	.LVL64:
 742              	.LFB18:
 671:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 743              		.loc 1 671 1 is_stmt 1 view -0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 671:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 747              		.loc 1 671 1 is_stmt 0 view .LVU193
 748 0000 38B5     		push	{r3, r4, r5, lr}
 749              	.LCFI17:
 750              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 34


 751              		.cfi_offset 3, -16
 752              		.cfi_offset 4, -12
 753              		.cfi_offset 5, -8
 754              		.cfi_offset 14, -4
 755 0002 0546     		mov	r5, r0
 672:FreeRTOS/src/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 756              		.loc 1 672 1 is_stmt 1 view .LVU194
 673:FreeRTOS/src/timers.c **** 
 757              		.loc 1 673 17 view .LVU195
 675:FreeRTOS/src/timers.c **** 
 758              		.loc 1 675 2 view .LVU196
 675:FreeRTOS/src/timers.c **** 
 759              		.loc 1 675 13 is_stmt 0 view .LVU197
 760 0004 FFF7FEFF 		bl	xTaskGetTickCount
 761              	.LVL65:
 675:FreeRTOS/src/timers.c **** 
 762              		.loc 1 675 13 view .LVU198
 763 0008 0446     		mov	r4, r0
 764              	.LVL66:
 677:FreeRTOS/src/timers.c **** 	{
 765              		.loc 1 677 2 is_stmt 1 view .LVU199
 677:FreeRTOS/src/timers.c **** 	{
 766              		.loc 1 677 15 is_stmt 0 view .LVU200
 767 000a 074B     		ldr	r3, .L60
 768 000c 1B68     		ldr	r3, [r3]
 677:FreeRTOS/src/timers.c **** 	{
 769              		.loc 1 677 4 view .LVU201
 770 000e 8342     		cmp	r3, r0
 771 0010 05D8     		bhi	.L59
 684:FreeRTOS/src/timers.c **** 	}
 772              		.loc 1 684 3 is_stmt 1 view .LVU202
 684:FreeRTOS/src/timers.c **** 	}
 773              		.loc 1 684 29 is_stmt 0 view .LVU203
 774 0012 0023     		movs	r3, #0
 775 0014 2B60     		str	r3, [r5]
 776              	.LVL67:
 777              	.L57:
 687:FreeRTOS/src/timers.c **** 
 778              		.loc 1 687 2 is_stmt 1 view .LVU204
 687:FreeRTOS/src/timers.c **** 
 779              		.loc 1 687 12 is_stmt 0 view .LVU205
 780 0016 044B     		ldr	r3, .L60
 781 0018 1C60     		str	r4, [r3]
 689:FreeRTOS/src/timers.c **** }
 782              		.loc 1 689 2 is_stmt 1 view .LVU206
 690:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 783              		.loc 1 690 1 is_stmt 0 view .LVU207
 784 001a 2046     		mov	r0, r4
 785 001c 38BD     		pop	{r3, r4, r5, pc}
 786              	.LVL68:
 787              	.L59:
 679:FreeRTOS/src/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 788              		.loc 1 679 3 is_stmt 1 view .LVU208
 789 001e FFF7FEFF 		bl	prvSwitchTimerLists
 790              	.LVL69:
 680:FreeRTOS/src/timers.c **** 	}
 791              		.loc 1 680 3 view .LVU209
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 35


 680:FreeRTOS/src/timers.c **** 	}
 792              		.loc 1 680 29 is_stmt 0 view .LVU210
 793 0022 0123     		movs	r3, #1
 794 0024 2B60     		str	r3, [r5]
 795 0026 F6E7     		b	.L57
 796              	.L61:
 797              		.align	2
 798              	.L60:
 799 0028 00000000 		.word	.LANCHOR6
 800              		.cfi_endproc
 801              	.LFE18:
 803              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 804              		.align	1
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu fpv4-sp-d16
 810              	prvProcessExpiredTimer:
 811              	.LVL70:
 812              	.LFB14:
 508:FreeRTOS/src/timers.c **** BaseType_t xResult;
 813              		.loc 1 508 1 is_stmt 1 view -0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 508:FreeRTOS/src/timers.c **** BaseType_t xResult;
 817              		.loc 1 508 1 is_stmt 0 view .LVU212
 818 0000 70B5     		push	{r4, r5, r6, lr}
 819              	.LCFI18:
 820              		.cfi_def_cfa_offset 16
 821              		.cfi_offset 4, -16
 822              		.cfi_offset 5, -12
 823              		.cfi_offset 6, -8
 824              		.cfi_offset 14, -4
 825 0002 82B0     		sub	sp, sp, #8
 826              	.LCFI19:
 827              		.cfi_def_cfa_offset 24
 828 0004 0546     		mov	r5, r0
 829 0006 0E46     		mov	r6, r1
 509:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 830              		.loc 1 509 1 is_stmt 1 view .LVU213
 510:FreeRTOS/src/timers.c **** 
 831              		.loc 1 510 1 view .LVU214
 510:FreeRTOS/src/timers.c **** 
 832              		.loc 1 510 41 is_stmt 0 view .LVU215
 833 0008 124B     		ldr	r3, .L67
 834 000a 1B68     		ldr	r3, [r3]
 835 000c DB68     		ldr	r3, [r3, #12]
 510:FreeRTOS/src/timers.c **** 
 836              		.loc 1 510 17 view .LVU216
 837 000e DC68     		ldr	r4, [r3, #12]
 838              	.LVL71:
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 839              		.loc 1 514 2 is_stmt 1 view .LVU217
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 840              		.loc 1 514 11 is_stmt 0 view .LVU218
 841 0010 201D     		adds	r0, r4, #4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 36


 842              	.LVL72:
 514:FreeRTOS/src/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 843              		.loc 1 514 11 view .LVU219
 844 0012 FFF7FEFF 		bl	uxListRemove
 845              	.LVL73:
 515:FreeRTOS/src/timers.c **** 
 846              		.loc 1 515 31 is_stmt 1 view .LVU220
 519:FreeRTOS/src/timers.c **** 	{
 847              		.loc 1 519 2 view .LVU221
 519:FreeRTOS/src/timers.c **** 	{
 848              		.loc 1 519 15 is_stmt 0 view .LVU222
 849 0016 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 519:FreeRTOS/src/timers.c **** 	{
 850              		.loc 1 519 4 view .LVU223
 851 001a 13F0040F 		tst	r3, #4
 852 001e 08D1     		bne	.L66
 539:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 853              		.loc 1 539 3 is_stmt 1 view .LVU224
 539:FreeRTOS/src/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 854              		.loc 1 539 21 is_stmt 0 view .LVU225
 855 0020 23F00103 		bic	r3, r3, #1
 856 0024 84F82430 		strb	r3, [r4, #36]
 857              	.L64:
 540:FreeRTOS/src/timers.c **** 	}
 858              		.loc 1 540 27 is_stmt 1 view .LVU226
 544:FreeRTOS/src/timers.c **** }
 859              		.loc 1 544 2 view .LVU227
 544:FreeRTOS/src/timers.c **** }
 860              		.loc 1 544 9 is_stmt 0 view .LVU228
 861 0028 236A     		ldr	r3, [r4, #32]
 544:FreeRTOS/src/timers.c **** }
 862              		.loc 1 544 2 view .LVU229
 863 002a 2046     		mov	r0, r4
 864 002c 9847     		blx	r3
 865              	.LVL74:
 545:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 866              		.loc 1 545 1 view .LVU230
 867 002e 02B0     		add	sp, sp, #8
 868              	.LCFI20:
 869              		.cfi_remember_state
 870              		.cfi_def_cfa_offset 16
 871              		@ sp needed
 872 0030 70BD     		pop	{r4, r5, r6, pc}
 873              	.LVL75:
 874              	.L66:
 875              	.LCFI21:
 876              		.cfi_restore_state
 524:FreeRTOS/src/timers.c **** 		{
 877              		.loc 1 524 3 is_stmt 1 view .LVU231
 524:FreeRTOS/src/timers.c **** 		{
 878              		.loc 1 524 71 is_stmt 0 view .LVU232
 879 0032 A169     		ldr	r1, [r4, #24]
 524:FreeRTOS/src/timers.c **** 		{
 880              		.loc 1 524 7 view .LVU233
 881 0034 2B46     		mov	r3, r5
 882 0036 3246     		mov	r2, r6
 883 0038 2944     		add	r1, r1, r5
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 37


 884 003a 2046     		mov	r0, r4
 885 003c FFF7FEFF 		bl	prvInsertTimerInActiveList
 886              	.LVL76:
 524:FreeRTOS/src/timers.c **** 		{
 887              		.loc 1 524 5 view .LVU234
 888 0040 0028     		cmp	r0, #0
 889 0042 F1D0     		beq	.L64
 528:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 890              		.loc 1 528 4 is_stmt 1 view .LVU235
 528:FreeRTOS/src/timers.c **** 			configASSERT( xResult );
 891              		.loc 1 528 14 is_stmt 0 view .LVU236
 892 0044 0021     		movs	r1, #0
 893 0046 0091     		str	r1, [sp]
 894 0048 0B46     		mov	r3, r1
 895 004a 2A46     		mov	r2, r5
 896 004c 2046     		mov	r0, r4
 897 004e FFF7FEFF 		bl	xTimerGenericCommand
 898              	.LVL77:
 529:FreeRTOS/src/timers.c **** 			( void ) xResult;
 899              		.loc 1 529 27 is_stmt 1 view .LVU237
 530:FreeRTOS/src/timers.c **** 		}
 900              		.loc 1 530 4 view .LVU238
 901 0052 E9E7     		b	.L64
 902              	.L68:
 903              		.align	2
 904              	.L67:
 905 0054 00000000 		.word	.LANCHOR0
 906              		.cfi_endproc
 907              	.LFE14:
 909              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 910              		.align	1
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 914              		.fpu fpv4-sp-d16
 916              	prvProcessTimerOrBlockTask:
 917              	.LVL78:
 918              	.LFB16:
 585:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 919              		.loc 1 585 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 8
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 585:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 923              		.loc 1 585 1 is_stmt 0 view .LVU240
 924 0000 70B5     		push	{r4, r5, r6, lr}
 925              	.LCFI22:
 926              		.cfi_def_cfa_offset 16
 927              		.cfi_offset 4, -16
 928              		.cfi_offset 5, -12
 929              		.cfi_offset 6, -8
 930              		.cfi_offset 14, -4
 931 0002 82B0     		sub	sp, sp, #8
 932              	.LCFI23:
 933              		.cfi_def_cfa_offset 24
 934 0004 0646     		mov	r6, r0
 935 0006 0C46     		mov	r4, r1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 38


 586:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched;
 936              		.loc 1 586 1 is_stmt 1 view .LVU241
 587:FreeRTOS/src/timers.c **** 
 937              		.loc 1 587 1 view .LVU242
 589:FreeRTOS/src/timers.c **** 	{
 938              		.loc 1 589 2 view .LVU243
 939 0008 FFF7FEFF 		bl	vTaskSuspendAll
 940              	.LVL79:
 596:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 941              		.loc 1 596 3 view .LVU244
 596:FreeRTOS/src/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 942              		.loc 1 596 14 is_stmt 0 view .LVU245
 943 000c 01A8     		add	r0, sp, #4
 944 000e FFF7FEFF 		bl	prvSampleTimeNow
 945              	.LVL80:
 597:FreeRTOS/src/timers.c **** 		{
 946              		.loc 1 597 3 is_stmt 1 view .LVU246
 597:FreeRTOS/src/timers.c **** 		{
 947              		.loc 1 597 31 is_stmt 0 view .LVU247
 948 0012 019B     		ldr	r3, [sp, #4]
 597:FreeRTOS/src/timers.c **** 		{
 949              		.loc 1 597 5 view .LVU248
 950 0014 23BB     		cbnz	r3, .L70
 951 0016 0546     		mov	r5, r0
 600:FreeRTOS/src/timers.c **** 			{
 952              		.loc 1 600 4 is_stmt 1 view .LVU249
 600:FreeRTOS/src/timers.c **** 			{
 953              		.loc 1 600 6 is_stmt 0 view .LVU250
 954 0018 0CB9     		cbnz	r4, .L71
 600:FreeRTOS/src/timers.c **** 			{
 955              		.loc 1 600 37 discriminator 1 view .LVU251
 956 001a B042     		cmp	r0, r6
 957 001c 17D2     		bcs	.L76
 958              	.L71:
 613:FreeRTOS/src/timers.c **** 				{
 959              		.loc 1 613 5 is_stmt 1 view .LVU252
 613:FreeRTOS/src/timers.c **** 				{
 960              		.loc 1 613 7 is_stmt 0 view .LVU253
 961 001e 24B1     		cbz	r4, .L73
 617:FreeRTOS/src/timers.c **** 				}
 962              		.loc 1 617 6 is_stmt 1 view .LVU254
 617:FreeRTOS/src/timers.c **** 				}
 963              		.loc 1 617 22 is_stmt 0 view .LVU255
 964 0020 114B     		ldr	r3, .L77
 965 0022 1B68     		ldr	r3, [r3]
 966 0024 1B68     		ldr	r3, [r3]
 967 0026 CBB9     		cbnz	r3, .L74
 968 0028 0124     		movs	r4, #1
 969              	.LVL81:
 970              	.L73:
 620:FreeRTOS/src/timers.c **** 
 971              		.loc 1 620 5 is_stmt 1 view .LVU256
 972 002a 2246     		mov	r2, r4
 973 002c 711B     		subs	r1, r6, r5
 974 002e 0F4B     		ldr	r3, .L77+4
 975 0030 1868     		ldr	r0, [r3]
 976              	.LVL82:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 39


 620:FreeRTOS/src/timers.c **** 
 977              		.loc 1 620 5 is_stmt 0 view .LVU257
 978 0032 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 979              	.LVL83:
 622:FreeRTOS/src/timers.c **** 				{
 980              		.loc 1 622 5 is_stmt 1 view .LVU258
 622:FreeRTOS/src/timers.c **** 				{
 981              		.loc 1 622 9 is_stmt 0 view .LVU259
 982 0036 FFF7FEFF 		bl	xTaskResumeAll
 983              	.LVL84:
 622:FreeRTOS/src/timers.c **** 				{
 984              		.loc 1 622 7 view .LVU260
 985 003a 98B9     		cbnz	r0, .L69
 628:FreeRTOS/src/timers.c **** 				}
 986              		.loc 1 628 6 is_stmt 1 view .LVU261
 987 003c 0C4B     		ldr	r3, .L77+8
 988 003e 4FF08052 		mov	r2, #268435456
 989 0042 1A60     		str	r2, [r3]
 628:FreeRTOS/src/timers.c **** 				}
 990              		.loc 1 628 6 view .LVU262
 991              		.syntax unified
 992              	@ 628 "FreeRTOS/src/timers.c" 1
 993 0044 BFF34F8F 		dsb
 994              	@ 0 "" 2
 628:FreeRTOS/src/timers.c **** 				}
 995              		.loc 1 628 6 view .LVU263
 996              	@ 628 "FreeRTOS/src/timers.c" 1
 997 0048 BFF36F8F 		isb
 998              	@ 0 "" 2
 628:FreeRTOS/src/timers.c **** 				}
 999              		.loc 1 628 28 view .LVU264
 1000              		.thumb
 1001              		.syntax unified
 1002 004c 0AE0     		b	.L69
 1003              	.LVL85:
 1004              	.L76:
 602:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1005              		.loc 1 602 5 view .LVU265
 602:FreeRTOS/src/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1006              		.loc 1 602 14 is_stmt 0 view .LVU266
 1007 004e FFF7FEFF 		bl	xTaskResumeAll
 1008              	.LVL86:
 603:FreeRTOS/src/timers.c **** 			}
 1009              		.loc 1 603 5 is_stmt 1 view .LVU267
 1010 0052 2946     		mov	r1, r5
 1011 0054 3046     		mov	r0, r6
 1012 0056 FFF7FEFF 		bl	prvProcessExpiredTimer
 1013              	.LVL87:
 1014 005a 03E0     		b	.L69
 1015              	.LVL88:
 1016              	.L74:
 617:FreeRTOS/src/timers.c **** 				}
 1017              		.loc 1 617 22 is_stmt 0 view .LVU268
 1018 005c 0024     		movs	r4, #0
 1019              	.LVL89:
 617:FreeRTOS/src/timers.c **** 				}
 1020              		.loc 1 617 22 view .LVU269
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 40


 1021 005e E4E7     		b	.L73
 1022              	.LVL90:
 1023              	.L70:
 638:FreeRTOS/src/timers.c **** 		}
 1024              		.loc 1 638 4 is_stmt 1 view .LVU270
 638:FreeRTOS/src/timers.c **** 		}
 1025              		.loc 1 638 13 is_stmt 0 view .LVU271
 1026 0060 FFF7FEFF 		bl	xTaskResumeAll
 1027              	.LVL91:
 1028              	.L69:
 641:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1029              		.loc 1 641 1 view .LVU272
 1030 0064 02B0     		add	sp, sp, #8
 1031              	.LCFI24:
 1032              		.cfi_def_cfa_offset 16
 1033              		@ sp needed
 1034 0066 70BD     		pop	{r4, r5, r6, pc}
 1035              	.LVL92:
 1036              	.L78:
 641:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1037              		.loc 1 641 1 view .LVU273
 1038              		.align	2
 1039              	.L77:
 1040 0068 00000000 		.word	.LANCHOR1
 1041 006c 00000000 		.word	.LANCHOR2
 1042 0070 04ED00E0 		.word	-536810236
 1043              		.cfi_endproc
 1044              	.LFE16:
 1046              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1047              		.align	1
 1048              		.syntax unified
 1049              		.thumb
 1050              		.thumb_func
 1051              		.fpu fpv4-sp-d16
 1053              	prvProcessReceivedCommands:
 1054              	.LFB20:
 735:FreeRTOS/src/timers.c **** DaemonTaskMessage_t xMessage;
 1055              		.loc 1 735 1 is_stmt 1 view -0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 24
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059 0000 30B5     		push	{r4, r5, lr}
 1060              	.LCFI25:
 1061              		.cfi_def_cfa_offset 12
 1062              		.cfi_offset 4, -12
 1063              		.cfi_offset 5, -8
 1064              		.cfi_offset 14, -4
 1065 0002 89B0     		sub	sp, sp, #36
 1066              	.LCFI26:
 1067              		.cfi_def_cfa_offset 48
 736:FreeRTOS/src/timers.c **** Timer_t *pxTimer;
 1068              		.loc 1 736 1 view .LVU275
 737:FreeRTOS/src/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 1069              		.loc 1 737 1 view .LVU276
 738:FreeRTOS/src/timers.c **** TickType_t xTimeNow;
 1070              		.loc 1 738 1 view .LVU277
 739:FreeRTOS/src/timers.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 41


 1071              		.loc 1 739 1 view .LVU278
 741:FreeRTOS/src/timers.c **** 	{
 1072              		.loc 1 741 2 view .LVU279
 741:FreeRTOS/src/timers.c **** 	{
 1073              		.loc 1 741 7 is_stmt 0 view .LVU280
 1074 0004 06E0     		b	.L82
 1075              	.L96:
 1076              	.LBB2:
 749:FreeRTOS/src/timers.c **** 
 1077              		.loc 1 749 5 is_stmt 1 view .LVU281
 1078              	.LVL93:
 753:FreeRTOS/src/timers.c **** 
 1079              		.loc 1 753 31 view .LVU282
 756:FreeRTOS/src/timers.c **** 			}
 1080              		.loc 1 756 5 view .LVU283
 1081 0006 0799     		ldr	r1, [sp, #28]
 1082 0008 0698     		ldr	r0, [sp, #24]
 1083 000a 059B     		ldr	r3, [sp, #20]
 1084 000c 9847     		blx	r3
 1085              	.LVL94:
 1086              	.L81:
 756:FreeRTOS/src/timers.c **** 			}
 1087              		.loc 1 756 5 is_stmt 0 view .LVU284
 1088              	.LBE2:
 760:FreeRTOS/src/timers.c **** 			}
 1089              		.loc 1 760 29 is_stmt 1 view .LVU285
 767:FreeRTOS/src/timers.c **** 		{
 1090              		.loc 1 767 3 view .LVU286
 767:FreeRTOS/src/timers.c **** 		{
 1091              		.loc 1 767 15 is_stmt 0 view .LVU287
 1092 000e 049B     		ldr	r3, [sp, #16]
 767:FreeRTOS/src/timers.c **** 		{
 1093              		.loc 1 767 5 view .LVU288
 1094 0010 002B     		cmp	r3, #0
 1095 0012 0BDA     		bge	.L94
 1096              	.L82:
 741:FreeRTOS/src/timers.c **** 	{
 1097              		.loc 1 741 9 view .LVU289
 1098 0014 0022     		movs	r2, #0
 1099 0016 04A9     		add	r1, sp, #16
 1100 0018 324B     		ldr	r3, .L98
 1101 001a 1868     		ldr	r0, [r3]
 1102 001c FFF7FEFF 		bl	xQueueReceive
 1103              	.LVL95:
 741:FreeRTOS/src/timers.c **** 	{
 1104              		.loc 1 741 7 view .LVU290
 1105 0020 0028     		cmp	r0, #0
 1106 0022 5CD0     		beq	.L95
 747:FreeRTOS/src/timers.c **** 			{
 1107              		.loc 1 747 4 is_stmt 1 view .LVU291
 747:FreeRTOS/src/timers.c **** 			{
 1108              		.loc 1 747 16 is_stmt 0 view .LVU292
 1109 0024 049B     		ldr	r3, [sp, #16]
 747:FreeRTOS/src/timers.c **** 			{
 1110              		.loc 1 747 6 view .LVU293
 1111 0026 002B     		cmp	r3, #0
 1112 0028 F1DA     		bge	.L81
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 42


 1113 002a ECE7     		b	.L96
 1114              	.L94:
 771:FreeRTOS/src/timers.c **** 
 1115              		.loc 1 771 4 is_stmt 1 view .LVU294
 771:FreeRTOS/src/timers.c **** 
 1116              		.loc 1 771 12 is_stmt 0 view .LVU295
 1117 002c 069C     		ldr	r4, [sp, #24]
 1118              	.LVL96:
 773:FreeRTOS/src/timers.c **** 			{
 1119              		.loc 1 773 4 is_stmt 1 view .LVU296
 773:FreeRTOS/src/timers.c **** 			{
 1120              		.loc 1 773 8 is_stmt 0 view .LVU297
 1121 002e 6369     		ldr	r3, [r4, #20]
 773:FreeRTOS/src/timers.c **** 			{
 1122              		.loc 1 773 6 view .LVU298
 1123 0030 13B1     		cbz	r3, .L83
 776:FreeRTOS/src/timers.c **** 			}
 1124              		.loc 1 776 5 is_stmt 1 view .LVU299
 776:FreeRTOS/src/timers.c **** 			}
 1125              		.loc 1 776 14 is_stmt 0 view .LVU300
 1126 0032 201D     		adds	r0, r4, #4
 1127 0034 FFF7FEFF 		bl	uxListRemove
 1128              	.LVL97:
 1129              	.L83:
 780:FreeRTOS/src/timers.c **** 			}
 1130              		.loc 1 780 29 is_stmt 1 view .LVU301
 783:FreeRTOS/src/timers.c **** 
 1131              		.loc 1 783 106 view .LVU302
 791:FreeRTOS/src/timers.c **** 
 1132              		.loc 1 791 4 view .LVU303
 791:FreeRTOS/src/timers.c **** 
 1133              		.loc 1 791 15 is_stmt 0 view .LVU304
 1134 0038 03A8     		add	r0, sp, #12
 1135 003a FFF7FEFF 		bl	prvSampleTimeNow
 1136              	.LVL98:
 793:FreeRTOS/src/timers.c **** 			{
 1137              		.loc 1 793 4 is_stmt 1 view .LVU305
 793:FreeRTOS/src/timers.c **** 			{
 1138              		.loc 1 793 20 is_stmt 0 view .LVU306
 1139 003e 049B     		ldr	r3, [sp, #16]
 793:FreeRTOS/src/timers.c **** 			{
 1140              		.loc 1 793 4 view .LVU307
 1141 0040 092B     		cmp	r3, #9
 1142 0042 E7D8     		bhi	.L82
 1143 0044 DFE803F0 		tbb	[pc, r3]
 1144              	.L86:
 1145 0048 05       		.byte	(.L88-.L86)/2
 1146 0049 05       		.byte	(.L88-.L86)/2
 1147 004a 05       		.byte	(.L88-.L86)/2
 1148 004b 27       		.byte	(.L87-.L86)/2
 1149 004c 2E       		.byte	(.L85-.L86)/2
 1150 004d 3D       		.byte	(.L89-.L86)/2
 1151 004e 05       		.byte	(.L88-.L86)/2
 1152 004f 05       		.byte	(.L88-.L86)/2
 1153 0050 27       		.byte	(.L87-.L86)/2
 1154 0051 2E       		.byte	(.L85-.L86)/2
 1155              		.p2align 1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 43


 1156              	.L88:
 801:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1157              		.loc 1 801 6 is_stmt 1 view .LVU308
 801:FreeRTOS/src/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1158              		.loc 1 801 24 is_stmt 0 view .LVU309
 1159 0052 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1160 0056 43F00103 		orr	r3, r3, #1
 1161 005a 84F82430 		strb	r3, [r4, #36]
 802:FreeRTOS/src/timers.c **** 					{
 1162              		.loc 1 802 6 is_stmt 1 view .LVU310
 802:FreeRTOS/src/timers.c **** 					{
 1163              		.loc 1 802 75 is_stmt 0 view .LVU311
 1164 005e 0599     		ldr	r1, [sp, #20]
 802:FreeRTOS/src/timers.c **** 					{
 1165              		.loc 1 802 99 view .LVU312
 1166 0060 A569     		ldr	r5, [r4, #24]
 802:FreeRTOS/src/timers.c **** 					{
 1167              		.loc 1 802 10 view .LVU313
 1168 0062 0B46     		mov	r3, r1
 1169 0064 0246     		mov	r2, r0
 1170 0066 2944     		add	r1, r1, r5
 1171 0068 2046     		mov	r0, r4
 1172              	.LVL99:
 802:FreeRTOS/src/timers.c **** 					{
 1173              		.loc 1 802 10 view .LVU314
 1174 006a FFF7FEFF 		bl	prvInsertTimerInActiveList
 1175              	.LVL100:
 802:FreeRTOS/src/timers.c **** 					{
 1176              		.loc 1 802 8 view .LVU315
 1177 006e 0028     		cmp	r0, #0
 1178 0070 D0D0     		beq	.L82
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1179              		.loc 1 806 7 is_stmt 1 view .LVU316
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1180              		.loc 1 806 14 is_stmt 0 view .LVU317
 1181 0072 236A     		ldr	r3, [r4, #32]
 806:FreeRTOS/src/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1182              		.loc 1 806 7 view .LVU318
 1183 0074 2046     		mov	r0, r4
 1184 0076 9847     		blx	r3
 1185              	.LVL101:
 807:FreeRTOS/src/timers.c **** 
 1186              		.loc 1 807 36 is_stmt 1 view .LVU319
 809:FreeRTOS/src/timers.c **** 						{
 1187              		.loc 1 809 7 view .LVU320
 809:FreeRTOS/src/timers.c **** 						{
 1188              		.loc 1 809 20 is_stmt 0 view .LVU321
 1189 0078 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 809:FreeRTOS/src/timers.c **** 						{
 1190              		.loc 1 809 9 view .LVU322
 1191 007c 13F0040F 		tst	r3, #4
 1192 0080 C8D0     		beq	.L82
 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1193              		.loc 1 811 8 is_stmt 1 view .LVU323
 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1194              		.loc 1 811 129 is_stmt 0 view .LVU324
 1195 0082 A269     		ldr	r2, [r4, #24]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 44


 811:FreeRTOS/src/timers.c **** 							configASSERT( xResult );
 1196              		.loc 1 811 18 view .LVU325
 1197 0084 0021     		movs	r1, #0
 1198 0086 0091     		str	r1, [sp]
 1199 0088 0B46     		mov	r3, r1
 1200 008a 0598     		ldr	r0, [sp, #20]
 1201 008c 0244     		add	r2, r2, r0
 1202 008e 2046     		mov	r0, r4
 1203 0090 FFF7FEFF 		bl	xTimerGenericCommand
 1204              	.LVL102:
 812:FreeRTOS/src/timers.c **** 							( void ) xResult;
 1205              		.loc 1 812 31 is_stmt 1 view .LVU326
 813:FreeRTOS/src/timers.c **** 						}
 1206              		.loc 1 813 8 view .LVU327
 1207 0094 BEE7     		b	.L82
 1208              	.LVL103:
 1209              	.L87:
 829:FreeRTOS/src/timers.c **** 					break;
 1210              		.loc 1 829 6 view .LVU328
 829:FreeRTOS/src/timers.c **** 					break;
 1211              		.loc 1 829 24 is_stmt 0 view .LVU329
 1212 0096 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1213 009a 23F00103 		bic	r3, r3, #1
 1214 009e 84F82430 		strb	r3, [r4, #36]
 830:FreeRTOS/src/timers.c **** 
 1215              		.loc 1 830 6 is_stmt 1 view .LVU330
 1216 00a2 B7E7     		b	.L82
 1217              	.L85:
 834:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1218              		.loc 1 834 6 view .LVU331
 834:FreeRTOS/src/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1219              		.loc 1 834 24 is_stmt 0 view .LVU332
 1220 00a4 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1221 00a8 43F00103 		orr	r3, r3, #1
 1222 00ac 84F82430 		strb	r3, [r4, #36]
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1223              		.loc 1 835 6 is_stmt 1 view .LVU333
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1224              		.loc 1 835 64 is_stmt 0 view .LVU334
 1225 00b0 0599     		ldr	r1, [sp, #20]
 835:FreeRTOS/src/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1226              		.loc 1 835 35 view .LVU335
 1227 00b2 A161     		str	r1, [r4, #24]
 836:FreeRTOS/src/timers.c **** 
 1228              		.loc 1 836 58 is_stmt 1 view .LVU336
 844:FreeRTOS/src/timers.c **** 					break;
 1229              		.loc 1 844 6 view .LVU337
 844:FreeRTOS/src/timers.c **** 					break;
 1230              		.loc 1 844 15 is_stmt 0 view .LVU338
 1231 00b4 0346     		mov	r3, r0
 1232 00b6 0246     		mov	r2, r0
 1233 00b8 0144     		add	r1, r1, r0
 1234 00ba 2046     		mov	r0, r4
 1235              	.LVL104:
 844:FreeRTOS/src/timers.c **** 					break;
 1236              		.loc 1 844 15 view .LVU339
 1237 00bc FFF7FEFF 		bl	prvInsertTimerInActiveList
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 45


 1238              	.LVL105:
 845:FreeRTOS/src/timers.c **** 
 1239              		.loc 1 845 6 is_stmt 1 view .LVU340
 1240 00c0 A8E7     		b	.L82
 1241              	.LVL106:
 1242              	.L89:
 853:FreeRTOS/src/timers.c **** 						{
 1243              		.loc 1 853 7 view .LVU341
 853:FreeRTOS/src/timers.c **** 						{
 1244              		.loc 1 853 20 is_stmt 0 view .LVU342
 1245 00c2 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 853:FreeRTOS/src/timers.c **** 						{
 1246              		.loc 1 853 9 view .LVU343
 1247 00c6 13F0020F 		tst	r3, #2
 1248 00ca 04D0     		beq	.L97
 859:FreeRTOS/src/timers.c **** 						}
 1249              		.loc 1 859 8 is_stmt 1 view .LVU344
 859:FreeRTOS/src/timers.c **** 						}
 1250              		.loc 1 859 26 is_stmt 0 view .LVU345
 1251 00cc 23F00103 		bic	r3, r3, #1
 1252 00d0 84F82430 		strb	r3, [r4, #36]
 1253 00d4 9EE7     		b	.L82
 1254              	.L97:
 855:FreeRTOS/src/timers.c **** 						}
 1255              		.loc 1 855 8 is_stmt 1 view .LVU346
 1256 00d6 2046     		mov	r0, r4
 1257              	.LVL107:
 855:FreeRTOS/src/timers.c **** 						}
 1258              		.loc 1 855 8 is_stmt 0 view .LVU347
 1259 00d8 FFF7FEFF 		bl	vPortFree
 1260              	.LVL108:
 1261 00dc 9AE7     		b	.L82
 1262              	.LVL109:
 1263              	.L95:
 879:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1264              		.loc 1 879 1 view .LVU348
 1265 00de 09B0     		add	sp, sp, #36
 1266              	.LCFI27:
 1267              		.cfi_def_cfa_offset 12
 1268              		@ sp needed
 1269 00e0 30BD     		pop	{r4, r5, pc}
 1270              	.L99:
 1271 00e2 00BF     		.align	2
 1272              	.L98:
 1273 00e4 00000000 		.word	.LANCHOR2
 1274              		.cfi_endproc
 1275              	.LFE20:
 1277              		.section	.text.prvTimerTask,"ax",%progbits
 1278              		.align	1
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu fpv4-sp-d16
 1284              	prvTimerTask:
 1285              	.LFB15:
 549:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 1286              		.loc 1 549 1 is_stmt 1 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 46


 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 8
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              	.LVL110:
 549:FreeRTOS/src/timers.c **** TickType_t xNextExpireTime;
 1291              		.loc 1 549 1 is_stmt 0 view .LVU350
 1292 0000 00B5     		push	{lr}
 1293              	.LCFI28:
 1294              		.cfi_def_cfa_offset 4
 1295              		.cfi_offset 14, -4
 1296 0002 83B0     		sub	sp, sp, #12
 1297              	.LCFI29:
 1298              		.cfi_def_cfa_offset 16
 1299              	.LVL111:
 1300              	.L101:
 550:FreeRTOS/src/timers.c **** BaseType_t xListWasEmpty;
 1301              		.loc 1 550 1 is_stmt 1 discriminator 1 view .LVU351
 551:FreeRTOS/src/timers.c **** 
 1302              		.loc 1 551 1 discriminator 1 view .LVU352
 554:FreeRTOS/src/timers.c **** 
 1303              		.loc 1 554 2 discriminator 1 view .LVU353
 568:FreeRTOS/src/timers.c **** 	{
 1304              		.loc 1 568 2 discriminator 1 view .LVU354
 572:FreeRTOS/src/timers.c **** 
 1305              		.loc 1 572 3 discriminator 1 view .LVU355
 572:FreeRTOS/src/timers.c **** 
 1306              		.loc 1 572 21 is_stmt 0 discriminator 1 view .LVU356
 1307 0004 01A8     		add	r0, sp, #4
 1308 0006 FFF7FEFF 		bl	prvGetNextExpireTime
 1309              	.LVL112:
 576:FreeRTOS/src/timers.c **** 
 1310              		.loc 1 576 3 is_stmt 1 discriminator 1 view .LVU357
 1311 000a 0199     		ldr	r1, [sp, #4]
 1312 000c FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 1313              	.LVL113:
 579:FreeRTOS/src/timers.c **** 	}
 1314              		.loc 1 579 3 discriminator 1 view .LVU358
 1315 0010 FFF7FEFF 		bl	prvProcessReceivedCommands
 1316              	.LVL114:
 1317 0014 F6E7     		b	.L101
 1318              		.cfi_endproc
 1319              	.LFE15:
 1321              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1322              		.align	1
 1323              		.global	xTimerGetTimerDaemonTaskHandle
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	xTimerGetTimerDaemonTaskHandle:
 1330              	.LFB8:
 425:FreeRTOS/src/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1331              		.loc 1 425 1 view -0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 47


 428:FreeRTOS/src/timers.c **** 	return xTimerTaskHandle;
 1336              		.loc 1 428 46 view .LVU360
 429:FreeRTOS/src/timers.c **** }
 1337              		.loc 1 429 2 view .LVU361
 430:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1338              		.loc 1 430 1 is_stmt 0 view .LVU362
 1339 0000 014B     		ldr	r3, .L104
 1340 0002 1868     		ldr	r0, [r3]
 1341 0004 7047     		bx	lr
 1342              	.L105:
 1343 0006 00BF     		.align	2
 1344              	.L104:
 1345 0008 00000000 		.word	.LANCHOR5
 1346              		.cfi_endproc
 1347              	.LFE8:
 1349              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1350              		.align	1
 1351              		.global	xTimerGetPeriod
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1355              		.fpu fpv4-sp-d16
 1357              	xTimerGetPeriod:
 1358              	.LVL115:
 1359              	.LFB9:
 434:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 1360              		.loc 1 434 1 is_stmt 1 view -0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 435:FreeRTOS/src/timers.c **** 
 1365              		.loc 1 435 1 view .LVU364
 437:FreeRTOS/src/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1366              		.loc 1 437 24 view .LVU365
 438:FreeRTOS/src/timers.c **** }
 1367              		.loc 1 438 2 view .LVU366
 439:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1368              		.loc 1 439 1 is_stmt 0 view .LVU367
 1369 0000 8069     		ldr	r0, [r0, #24]
 1370              	.LVL116:
 439:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1371              		.loc 1 439 1 view .LVU368
 1372 0002 7047     		bx	lr
 1373              		.cfi_endproc
 1374              	.LFE9:
 1376              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 1377              		.align	1
 1378              		.global	vTimerSetReloadMode
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1382              		.fpu fpv4-sp-d16
 1384              	vTimerSetReloadMode:
 1385              	.LVL117:
 1386              	.LFB10:
 443:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 48


 1387              		.loc 1 443 1 is_stmt 1 view -0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 443:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1391              		.loc 1 443 1 is_stmt 0 view .LVU370
 1392 0000 38B5     		push	{r3, r4, r5, lr}
 1393              	.LCFI30:
 1394              		.cfi_def_cfa_offset 16
 1395              		.cfi_offset 3, -16
 1396              		.cfi_offset 4, -12
 1397              		.cfi_offset 5, -8
 1398              		.cfi_offset 14, -4
 1399 0002 0446     		mov	r4, r0
 1400 0004 0D46     		mov	r5, r1
 444:FreeRTOS/src/timers.c **** 
 1401              		.loc 1 444 1 is_stmt 1 view .LVU371
 1402              	.LVL118:
 446:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1403              		.loc 1 446 24 view .LVU372
 447:FreeRTOS/src/timers.c **** 	{
 1404              		.loc 1 447 2 view .LVU373
 1405 0006 FFF7FEFF 		bl	vPortEnterCritical
 1406              	.LVL119:
 449:FreeRTOS/src/timers.c **** 		{
 1407              		.loc 1 449 3 view .LVU374
 449:FreeRTOS/src/timers.c **** 		{
 1408              		.loc 1 449 5 is_stmt 0 view .LVU375
 1409 000a 45B1     		cbz	r5, .L108
 451:FreeRTOS/src/timers.c **** 		}
 1410              		.loc 1 451 4 is_stmt 1 view .LVU376
 451:FreeRTOS/src/timers.c **** 		}
 1411              		.loc 1 451 22 is_stmt 0 view .LVU377
 1412 000c 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1413 0010 43F00403 		orr	r3, r3, #4
 1414 0014 84F82430 		strb	r3, [r4, #36]
 1415              	.L109:
 458:FreeRTOS/src/timers.c **** }
 1416              		.loc 1 458 2 is_stmt 1 view .LVU378
 1417 0018 FFF7FEFF 		bl	vPortExitCritical
 1418              	.LVL120:
 459:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1419              		.loc 1 459 1 is_stmt 0 view .LVU379
 1420 001c 38BD     		pop	{r3, r4, r5, pc}
 1421              	.LVL121:
 1422              	.L108:
 455:FreeRTOS/src/timers.c **** 		}
 1423              		.loc 1 455 4 is_stmt 1 view .LVU380
 455:FreeRTOS/src/timers.c **** 		}
 1424              		.loc 1 455 22 is_stmt 0 view .LVU381
 1425 001e 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1426 0022 23F00403 		bic	r3, r3, #4
 1427 0026 84F82430 		strb	r3, [r4, #36]
 1428 002a F5E7     		b	.L109
 1429              		.cfi_endproc
 1430              	.LFE10:
 1432              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 49


 1433              		.align	1
 1434              		.global	uxTimerGetReloadMode
 1435              		.syntax unified
 1436              		.thumb
 1437              		.thumb_func
 1438              		.fpu fpv4-sp-d16
 1440              	uxTimerGetReloadMode:
 1441              	.LVL122:
 1442              	.LFB11:
 463:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1443              		.loc 1 463 1 is_stmt 1 view -0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 463:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1447              		.loc 1 463 1 is_stmt 0 view .LVU383
 1448 0000 10B5     		push	{r4, lr}
 1449              	.LCFI31:
 1450              		.cfi_def_cfa_offset 8
 1451              		.cfi_offset 4, -8
 1452              		.cfi_offset 14, -4
 1453 0002 0446     		mov	r4, r0
 464:FreeRTOS/src/timers.c **** UBaseType_t uxReturn;
 1454              		.loc 1 464 1 is_stmt 1 view .LVU384
 1455              	.LVL123:
 465:FreeRTOS/src/timers.c **** 
 1456              		.loc 1 465 1 view .LVU385
 467:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1457              		.loc 1 467 24 view .LVU386
 468:FreeRTOS/src/timers.c **** 	{
 1458              		.loc 1 468 2 view .LVU387
 1459 0004 FFF7FEFF 		bl	vPortEnterCritical
 1460              	.LVL124:
 470:FreeRTOS/src/timers.c **** 		{
 1461              		.loc 1 470 3 view .LVU388
 470:FreeRTOS/src/timers.c **** 		{
 1462              		.loc 1 470 16 is_stmt 0 view .LVU389
 1463 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 470:FreeRTOS/src/timers.c **** 		{
 1464              		.loc 1 470 5 view .LVU390
 1465 000c 13F0040F 		tst	r3, #4
 1466 0010 04D1     		bne	.L113
 473:FreeRTOS/src/timers.c **** 		}
 1467              		.loc 1 473 13 view .LVU391
 1468 0012 0024     		movs	r4, #0
 1469              	.LVL125:
 1470              	.L112:
 481:FreeRTOS/src/timers.c **** 
 1471              		.loc 1 481 2 is_stmt 1 view .LVU392
 1472 0014 FFF7FEFF 		bl	vPortExitCritical
 1473              	.LVL126:
 483:FreeRTOS/src/timers.c **** }
 1474              		.loc 1 483 2 view .LVU393
 484:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1475              		.loc 1 484 1 is_stmt 0 view .LVU394
 1476 0018 2046     		mov	r0, r4
 1477 001a 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 50


 1478              	.LVL127:
 1479              	.L113:
 478:FreeRTOS/src/timers.c **** 		}
 1480              		.loc 1 478 13 view .LVU395
 1481 001c 0124     		movs	r4, #1
 1482              	.LVL128:
 478:FreeRTOS/src/timers.c **** 		}
 1483              		.loc 1 478 13 view .LVU396
 1484 001e F9E7     		b	.L112
 1485              		.cfi_endproc
 1486              	.LFE11:
 1488              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1489              		.align	1
 1490              		.global	xTimerGetExpiryTime
 1491              		.syntax unified
 1492              		.thumb
 1493              		.thumb_func
 1494              		.fpu fpv4-sp-d16
 1496              	xTimerGetExpiryTime:
 1497              	.LVL129:
 1498              	.LFB12:
 488:FreeRTOS/src/timers.c **** Timer_t * pxTimer =  xTimer;
 1499              		.loc 1 488 1 is_stmt 1 view -0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 489:FreeRTOS/src/timers.c **** TickType_t xReturn;
 1504              		.loc 1 489 1 view .LVU398
 490:FreeRTOS/src/timers.c **** 
 1505              		.loc 1 490 1 view .LVU399
 492:FreeRTOS/src/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1506              		.loc 1 492 24 view .LVU400
 493:FreeRTOS/src/timers.c **** 	return xReturn;
 1507              		.loc 1 493 2 view .LVU401
 494:FreeRTOS/src/timers.c **** }
 1508              		.loc 1 494 2 view .LVU402
 495:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1509              		.loc 1 495 1 is_stmt 0 view .LVU403
 1510 0000 4068     		ldr	r0, [r0, #4]
 1511              	.LVL130:
 495:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1512              		.loc 1 495 1 view .LVU404
 1513 0002 7047     		bx	lr
 1514              		.cfi_endproc
 1515              	.LFE12:
 1517              		.section	.text.pcTimerGetName,"ax",%progbits
 1518              		.align	1
 1519              		.global	pcTimerGetName
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	pcTimerGetName:
 1526              	.LVL131:
 1527              	.LFB13:
 499:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 51


 1528              		.loc 1 499 1 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532              		@ link register save eliminated.
 500:FreeRTOS/src/timers.c **** 
 1533              		.loc 1 500 1 view .LVU406
 502:FreeRTOS/src/timers.c **** 	return pxTimer->pcTimerName;
 1534              		.loc 1 502 24 view .LVU407
 503:FreeRTOS/src/timers.c **** }
 1535              		.loc 1 503 2 view .LVU408
 504:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1536              		.loc 1 504 1 is_stmt 0 view .LVU409
 1537 0000 0068     		ldr	r0, [r0]
 1538              	.LVL132:
 504:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 1539              		.loc 1 504 1 view .LVU410
 1540 0002 7047     		bx	lr
 1541              		.cfi_endproc
 1542              	.LFE13:
 1544              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1545              		.align	1
 1546              		.global	xTimerIsTimerActive
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1550              		.fpu fpv4-sp-d16
 1552              	xTimerIsTimerActive:
 1553              	.LVL133:
 1554              	.LFB23:
 990:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
 991:FreeRTOS/src/timers.c **** 
 992:FreeRTOS/src/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 993:FreeRTOS/src/timers.c **** {
 1555              		.loc 1 993 1 is_stmt 1 view -0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 0
 1558              		@ frame_needed = 0, uses_anonymous_args = 0
 1559              		.loc 1 993 1 is_stmt 0 view .LVU412
 1560 0000 10B5     		push	{r4, lr}
 1561              	.LCFI32:
 1562              		.cfi_def_cfa_offset 8
 1563              		.cfi_offset 4, -8
 1564              		.cfi_offset 14, -4
 1565 0002 0446     		mov	r4, r0
 994:FreeRTOS/src/timers.c **** BaseType_t xReturn;
 1566              		.loc 1 994 1 is_stmt 1 view .LVU413
 995:FreeRTOS/src/timers.c **** Timer_t *pxTimer = xTimer;
 1567              		.loc 1 995 1 view .LVU414
 1568              	.LVL134:
 996:FreeRTOS/src/timers.c **** 
 997:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1569              		.loc 1 997 24 view .LVU415
 998:FreeRTOS/src/timers.c **** 
 999:FreeRTOS/src/timers.c **** 	/* Is the timer in the list of active timers? */
1000:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1570              		.loc 1 1000 2 view .LVU416
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 52


 1571 0004 FFF7FEFF 		bl	vPortEnterCritical
 1572              	.LVL135:
1001:FreeRTOS/src/timers.c **** 	{
1002:FreeRTOS/src/timers.c **** 		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1573              		.loc 1 1002 3 view .LVU417
 1574              		.loc 1 1002 16 is_stmt 0 view .LVU418
 1575 0008 94F82430 		ldrb	r3, [r4, #36]	@ zero_extendqisi2
 1576              		.loc 1 1002 5 view .LVU419
 1577 000c 13F0010F 		tst	r3, #1
 1578 0010 04D1     		bne	.L119
1003:FreeRTOS/src/timers.c **** 		{
1004:FreeRTOS/src/timers.c **** 			xReturn = pdFALSE;
 1579              		.loc 1 1004 12 view .LVU420
 1580 0012 0024     		movs	r4, #0
 1581              	.LVL136:
 1582              	.L118:
1005:FreeRTOS/src/timers.c **** 		}
1006:FreeRTOS/src/timers.c **** 		else
1007:FreeRTOS/src/timers.c **** 		{
1008:FreeRTOS/src/timers.c **** 			xReturn = pdTRUE;
1009:FreeRTOS/src/timers.c **** 		}
1010:FreeRTOS/src/timers.c **** 	}
1011:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1583              		.loc 1 1011 2 is_stmt 1 view .LVU421
 1584 0014 FFF7FEFF 		bl	vPortExitCritical
 1585              	.LVL137:
1012:FreeRTOS/src/timers.c **** 
1013:FreeRTOS/src/timers.c **** 	return xReturn;
 1586              		.loc 1 1013 2 view .LVU422
1014:FreeRTOS/src/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1587              		.loc 1 1014 1 is_stmt 0 view .LVU423
 1588 0018 2046     		mov	r0, r4
 1589 001a 10BD     		pop	{r4, pc}
 1590              	.LVL138:
 1591              	.L119:
1008:FreeRTOS/src/timers.c **** 		}
 1592              		.loc 1 1008 12 view .LVU424
 1593 001c 0124     		movs	r4, #1
 1594              	.LVL139:
1008:FreeRTOS/src/timers.c **** 		}
 1595              		.loc 1 1008 12 view .LVU425
 1596 001e F9E7     		b	.L118
 1597              		.cfi_endproc
 1598              	.LFE23:
 1600              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1601              		.align	1
 1602              		.global	pvTimerGetTimerID
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1606              		.fpu fpv4-sp-d16
 1608              	pvTimerGetTimerID:
 1609              	.LVL140:
 1610              	.LFB24:
1015:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1016:FreeRTOS/src/timers.c **** 
1017:FreeRTOS/src/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 53


1018:FreeRTOS/src/timers.c **** {
 1611              		.loc 1 1018 1 is_stmt 1 view -0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		.loc 1 1018 1 is_stmt 0 view .LVU427
 1616 0000 10B5     		push	{r4, lr}
 1617              	.LCFI33:
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 4, -8
 1620              		.cfi_offset 14, -4
 1621 0002 0446     		mov	r4, r0
1019:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = xTimer;
 1622              		.loc 1 1019 1 is_stmt 1 view .LVU428
 1623              	.LVL141:
1020:FreeRTOS/src/timers.c **** void *pvReturn;
 1624              		.loc 1 1020 1 view .LVU429
1021:FreeRTOS/src/timers.c **** 
1022:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1625              		.loc 1 1022 24 view .LVU430
1023:FreeRTOS/src/timers.c **** 
1024:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1626              		.loc 1 1024 2 view .LVU431
 1627 0004 FFF7FEFF 		bl	vPortEnterCritical
 1628              	.LVL142:
1025:FreeRTOS/src/timers.c **** 	{
1026:FreeRTOS/src/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1629              		.loc 1 1026 3 view .LVU432
 1630              		.loc 1 1026 12 is_stmt 0 view .LVU433
 1631 0008 E469     		ldr	r4, [r4, #28]
 1632              	.LVL143:
1027:FreeRTOS/src/timers.c **** 	}
1028:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1633              		.loc 1 1028 2 is_stmt 1 view .LVU434
 1634 000a FFF7FEFF 		bl	vPortExitCritical
 1635              	.LVL144:
1029:FreeRTOS/src/timers.c **** 
1030:FreeRTOS/src/timers.c **** 	return pvReturn;
 1636              		.loc 1 1030 2 view .LVU435
1031:FreeRTOS/src/timers.c **** }
 1637              		.loc 1 1031 1 is_stmt 0 view .LVU436
 1638 000e 2046     		mov	r0, r4
 1639 0010 10BD     		pop	{r4, pc}
 1640              		.loc 1 1031 1 view .LVU437
 1641              		.cfi_endproc
 1642              	.LFE24:
 1644              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1645              		.align	1
 1646              		.global	vTimerSetTimerID
 1647              		.syntax unified
 1648              		.thumb
 1649              		.thumb_func
 1650              		.fpu fpv4-sp-d16
 1652              	vTimerSetTimerID:
 1653              	.LVL145:
 1654              	.LFB25:
1032:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 54


1033:FreeRTOS/src/timers.c **** 
1034:FreeRTOS/src/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1035:FreeRTOS/src/timers.c **** {
 1655              		.loc 1 1035 1 is_stmt 1 view -0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 0
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659              		.loc 1 1035 1 is_stmt 0 view .LVU439
 1660 0000 38B5     		push	{r3, r4, r5, lr}
 1661              	.LCFI34:
 1662              		.cfi_def_cfa_offset 16
 1663              		.cfi_offset 3, -16
 1664              		.cfi_offset 4, -12
 1665              		.cfi_offset 5, -8
 1666              		.cfi_offset 14, -4
 1667 0002 0446     		mov	r4, r0
 1668 0004 0D46     		mov	r5, r1
1036:FreeRTOS/src/timers.c **** Timer_t * const pxTimer = xTimer;
 1669              		.loc 1 1036 1 is_stmt 1 view .LVU440
 1670              	.LVL146:
1037:FreeRTOS/src/timers.c **** 
1038:FreeRTOS/src/timers.c **** 	configASSERT( xTimer );
 1671              		.loc 1 1038 24 view .LVU441
1039:FreeRTOS/src/timers.c **** 
1040:FreeRTOS/src/timers.c **** 	taskENTER_CRITICAL();
 1672              		.loc 1 1040 2 view .LVU442
 1673 0006 FFF7FEFF 		bl	vPortEnterCritical
 1674              	.LVL147:
1041:FreeRTOS/src/timers.c **** 	{
1042:FreeRTOS/src/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1675              		.loc 1 1042 3 view .LVU443
 1676              		.loc 1 1042 22 is_stmt 0 view .LVU444
 1677 000a E561     		str	r5, [r4, #28]
1043:FreeRTOS/src/timers.c **** 	}
1044:FreeRTOS/src/timers.c **** 	taskEXIT_CRITICAL();
 1678              		.loc 1 1044 2 is_stmt 1 view .LVU445
 1679 000c FFF7FEFF 		bl	vPortExitCritical
 1680              	.LVL148:
1045:FreeRTOS/src/timers.c **** }
 1681              		.loc 1 1045 1 is_stmt 0 view .LVU446
 1682 0010 38BD     		pop	{r3, r4, r5, pc}
 1683              		.loc 1 1045 1 view .LVU447
 1684              		.cfi_endproc
 1685              	.LFE25:
 1687              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1688              		.align	1
 1689              		.global	xTimerPendFunctionCallFromISR
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	xTimerPendFunctionCallFromISR:
 1696              	.LVL149:
 1697              	.LFB26:
1046:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1047:FreeRTOS/src/timers.c **** 
1048:FreeRTOS/src/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 55


1049:FreeRTOS/src/timers.c **** 
1050:FreeRTOS/src/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1051:FreeRTOS/src/timers.c **** 	{
 1698              		.loc 1 1051 2 is_stmt 1 view -0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 16
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              		.loc 1 1051 2 is_stmt 0 view .LVU449
 1703 0000 10B5     		push	{r4, lr}
 1704              	.LCFI35:
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 4, -8
 1707              		.cfi_offset 14, -4
 1708 0002 84B0     		sub	sp, sp, #16
 1709              	.LCFI36:
 1710              		.cfi_def_cfa_offset 24
 1711 0004 1C46     		mov	r4, r3
1052:FreeRTOS/src/timers.c **** 	DaemonTaskMessage_t xMessage;
 1712              		.loc 1 1052 2 is_stmt 1 view .LVU450
1053:FreeRTOS/src/timers.c **** 	BaseType_t xReturn;
 1713              		.loc 1 1053 2 view .LVU451
1054:FreeRTOS/src/timers.c **** 
1055:FreeRTOS/src/timers.c **** 		/* Complete the message with the function parameters and post it to the
1056:FreeRTOS/src/timers.c **** 		daemon task. */
1057:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1714              		.loc 1 1057 3 view .LVU452
 1715              		.loc 1 1057 23 is_stmt 0 view .LVU453
 1716 0006 6FF00103 		mvn	r3, #1
 1717              	.LVL150:
 1718              		.loc 1 1057 23 view .LVU454
 1719 000a 0093     		str	r3, [sp]
1058:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1720              		.loc 1 1058 3 is_stmt 1 view .LVU455
 1721              		.loc 1 1058 53 is_stmt 0 view .LVU456
 1722 000c 0190     		str	r0, [sp, #4]
1059:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1723              		.loc 1 1059 3 is_stmt 1 view .LVU457
 1724              		.loc 1 1059 47 is_stmt 0 view .LVU458
 1725 000e 0291     		str	r1, [sp, #8]
1060:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1726              		.loc 1 1060 3 is_stmt 1 view .LVU459
 1727              		.loc 1 1060 47 is_stmt 0 view .LVU460
 1728 0010 0392     		str	r2, [sp, #12]
1061:FreeRTOS/src/timers.c **** 
1062:FreeRTOS/src/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1729              		.loc 1 1062 3 is_stmt 1 view .LVU461
 1730              		.loc 1 1062 13 is_stmt 0 view .LVU462
 1731 0012 0023     		movs	r3, #0
 1732 0014 2246     		mov	r2, r4
 1733              	.LVL151:
 1734              		.loc 1 1062 13 view .LVU463
 1735 0016 6946     		mov	r1, sp
 1736              	.LVL152:
 1737              		.loc 1 1062 13 view .LVU464
 1738 0018 0248     		ldr	r0, .L127
 1739              	.LVL153:
 1740              		.loc 1 1062 13 view .LVU465
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 56


 1741 001a 0068     		ldr	r0, [r0]
 1742 001c FFF7FEFF 		bl	xQueueGenericSendFromISR
 1743              	.LVL154:
1063:FreeRTOS/src/timers.c **** 
1064:FreeRTOS/src/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1744              		.loc 1 1064 87 is_stmt 1 view .LVU466
1065:FreeRTOS/src/timers.c **** 
1066:FreeRTOS/src/timers.c **** 		return xReturn;
 1745              		.loc 1 1066 3 view .LVU467
1067:FreeRTOS/src/timers.c **** 	}
 1746              		.loc 1 1067 2 is_stmt 0 view .LVU468
 1747 0020 04B0     		add	sp, sp, #16
 1748              	.LCFI37:
 1749              		.cfi_def_cfa_offset 8
 1750              		@ sp needed
 1751 0022 10BD     		pop	{r4, pc}
 1752              	.LVL155:
 1753              	.L128:
 1754              		.loc 1 1067 2 view .LVU469
 1755              		.align	2
 1756              	.L127:
 1757 0024 00000000 		.word	.LANCHOR2
 1758              		.cfi_endproc
 1759              	.LFE26:
 1761              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1762              		.align	1
 1763              		.global	xTimerPendFunctionCall
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1767              		.fpu fpv4-sp-d16
 1769              	xTimerPendFunctionCall:
 1770              	.LVL156:
 1771              	.LFB27:
1068:FreeRTOS/src/timers.c **** 
1069:FreeRTOS/src/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1070:FreeRTOS/src/timers.c **** /*-----------------------------------------------------------*/
1071:FreeRTOS/src/timers.c **** 
1072:FreeRTOS/src/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1073:FreeRTOS/src/timers.c **** 
1074:FreeRTOS/src/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1075:FreeRTOS/src/timers.c **** 	{
 1772              		.loc 1 1075 2 is_stmt 1 view -0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 16
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776              		.loc 1 1075 2 is_stmt 0 view .LVU471
 1777 0000 10B5     		push	{r4, lr}
 1778              	.LCFI38:
 1779              		.cfi_def_cfa_offset 8
 1780              		.cfi_offset 4, -8
 1781              		.cfi_offset 14, -4
 1782 0002 84B0     		sub	sp, sp, #16
 1783              	.LCFI39:
 1784              		.cfi_def_cfa_offset 24
 1785 0004 1C46     		mov	r4, r3
1076:FreeRTOS/src/timers.c **** 	DaemonTaskMessage_t xMessage;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 57


 1786              		.loc 1 1076 2 is_stmt 1 view .LVU472
1077:FreeRTOS/src/timers.c **** 	BaseType_t xReturn;
 1787              		.loc 1 1077 2 view .LVU473
1078:FreeRTOS/src/timers.c **** 
1079:FreeRTOS/src/timers.c **** 		/* This function can only be called after a timer has been created or
1080:FreeRTOS/src/timers.c **** 		after the scheduler has been started because, until then, the timer
1081:FreeRTOS/src/timers.c **** 		queue does not exist. */
1082:FreeRTOS/src/timers.c **** 		configASSERT( xTimerQueue );
 1788              		.loc 1 1082 30 view .LVU474
1083:FreeRTOS/src/timers.c **** 
1084:FreeRTOS/src/timers.c **** 		/* Complete the message with the function parameters and post it to the
1085:FreeRTOS/src/timers.c **** 		daemon task. */
1086:FreeRTOS/src/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1789              		.loc 1 1086 3 view .LVU475
 1790              		.loc 1 1086 23 is_stmt 0 view .LVU476
 1791 0006 4FF0FF33 		mov	r3, #-1
 1792              	.LVL157:
 1793              		.loc 1 1086 23 view .LVU477
 1794 000a 0093     		str	r3, [sp]
1087:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1795              		.loc 1 1087 3 is_stmt 1 view .LVU478
 1796              		.loc 1 1087 53 is_stmt 0 view .LVU479
 1797 000c 0190     		str	r0, [sp, #4]
1088:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1798              		.loc 1 1088 3 is_stmt 1 view .LVU480
 1799              		.loc 1 1088 47 is_stmt 0 view .LVU481
 1800 000e 0291     		str	r1, [sp, #8]
1089:FreeRTOS/src/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1801              		.loc 1 1089 3 is_stmt 1 view .LVU482
 1802              		.loc 1 1089 47 is_stmt 0 view .LVU483
 1803 0010 0392     		str	r2, [sp, #12]
1090:FreeRTOS/src/timers.c **** 
1091:FreeRTOS/src/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1804              		.loc 1 1091 3 is_stmt 1 view .LVU484
 1805              		.loc 1 1091 13 is_stmt 0 view .LVU485
 1806 0012 0023     		movs	r3, #0
 1807 0014 2246     		mov	r2, r4
 1808              	.LVL158:
 1809              		.loc 1 1091 13 view .LVU486
 1810 0016 6946     		mov	r1, sp
 1811              	.LVL159:
 1812              		.loc 1 1091 13 view .LVU487
 1813 0018 0248     		ldr	r0, .L131
 1814              	.LVL160:
 1815              		.loc 1 1091 13 view .LVU488
 1816 001a 0068     		ldr	r0, [r0]
 1817 001c FFF7FEFF 		bl	xQueueGenericSend
 1818              	.LVL161:
1092:FreeRTOS/src/timers.c **** 
1093:FreeRTOS/src/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1819              		.loc 1 1093 78 is_stmt 1 view .LVU489
1094:FreeRTOS/src/timers.c **** 
1095:FreeRTOS/src/timers.c **** 		return xReturn;
 1820              		.loc 1 1095 3 view .LVU490
1096:FreeRTOS/src/timers.c **** 	}
 1821              		.loc 1 1096 2 is_stmt 0 view .LVU491
 1822 0020 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 58


 1823              	.LCFI40:
 1824              		.cfi_def_cfa_offset 8
 1825              		@ sp needed
 1826 0022 10BD     		pop	{r4, pc}
 1827              	.LVL162:
 1828              	.L132:
 1829              		.loc 1 1096 2 view .LVU492
 1830              		.align	2
 1831              	.L131:
 1832 0024 00000000 		.word	.LANCHOR2
 1833              		.cfi_endproc
 1834              	.LFE27:
 1836              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1837              		.align	2
 1838              		.set	.LANCHOR0,. + 0
 1841              	pxCurrentTimerList:
 1842 0000 00000000 		.space	4
 1843              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1844              		.align	2
 1845              		.set	.LANCHOR1,. + 0
 1848              	pxOverflowTimerList:
 1849 0000 00000000 		.space	4
 1850              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1851              		.align	2
 1852              		.set	.LANCHOR3,. + 0
 1855              	xActiveTimerList1:
 1856 0000 00000000 		.space	20
 1856      00000000 
 1856      00000000 
 1856      00000000 
 1856      00000000 
 1857              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1858              		.align	2
 1859              		.set	.LANCHOR4,. + 0
 1862              	xActiveTimerList2:
 1863 0000 00000000 		.space	20
 1863      00000000 
 1863      00000000 
 1863      00000000 
 1863      00000000 
 1864              		.section	.bss.xLastTime.6835,"aw",%nobits
 1865              		.align	2
 1866              		.set	.LANCHOR6,. + 0
 1869              	xLastTime.6835:
 1870 0000 00000000 		.space	4
 1871              		.section	.bss.xTimerQueue,"aw",%nobits
 1872              		.align	2
 1873              		.set	.LANCHOR2,. + 0
 1876              	xTimerQueue:
 1877 0000 00000000 		.space	4
 1878              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1879              		.align	2
 1880              		.set	.LANCHOR5,. + 0
 1883              	xTimerTaskHandle:
 1884 0000 00000000 		.space	4
 1885              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 1886              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 59


 1887              	.LC0:
 1888 0000 546D7251 		.ascii	"TmrQ\000"
 1888      00
 1889              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 1890              		.align	2
 1891              	.LC1:
 1892 0000 546D7220 		.ascii	"Tmr Svc\000"
 1892      53766300 
 1893              		.text
 1894              	.Letext0:
 1895              		.file 2 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 1896              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 1897              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 1898              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 1899              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 1900              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 1901              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 1902              		.file 9 "FreeRTOS/inc/portmacro.h"
 1903              		.file 10 "FreeRTOS/inc/list.h"
 1904              		.file 11 "FreeRTOS/inc/task.h"
 1905              		.file 12 "FreeRTOS/inc/queue.h"
 1906              		.file 13 "FreeRTOS/inc/timers.h"
 1907              		.file 14 "FreeRTOS/inc/portable.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timers.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:18     .text.prvGetNextExpireTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:25     .text.prvGetNextExpireTime:0000000000000000 prvGetNextExpireTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:71     .text.prvGetNextExpireTime:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:76     .text.prvInsertTimerInActiveList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:82     .text.prvInsertTimerInActiveList:0000000000000000 prvInsertTimerInActiveList
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:172    .text.prvInsertTimerInActiveList:0000000000000040 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:178    .text.prvCheckForValidListAndQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:184    .text.prvCheckForValidListAndQueue:0000000000000000 prvCheckForValidListAndQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:254    .text.prvCheckForValidListAndQueue:0000000000000044 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:264    .text.prvInitialiseNewTimer:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:270    .text.prvInitialiseNewTimer:0000000000000000 prvInitialiseNewTimer
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:334    .text.xTimerCreateTimerTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:341    .text.xTimerCreateTimerTask:0000000000000000 xTimerCreateTimerTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:399    .text.xTimerCreateTimerTask:000000000000002c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1284   .text.prvTimerTask:0000000000000000 prvTimerTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:407    .text.xTimerCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:414    .text.xTimerCreate:0000000000000000 xTimerCreate
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:480    .text.xTimerGenericCommand:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:487    .text.xTimerGenericCommand:0000000000000000 xTimerGenericCommand
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:599    .text.xTimerGenericCommand:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:604    .text.prvSwitchTimerLists:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:610    .text.prvSwitchTimerLists:0000000000000000 prvSwitchTimerLists
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:728    .text.prvSwitchTimerLists:0000000000000060 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:734    .text.prvSampleTimeNow:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:740    .text.prvSampleTimeNow:0000000000000000 prvSampleTimeNow
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:799    .text.prvSampleTimeNow:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:804    .text.prvProcessExpiredTimer:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:810    .text.prvProcessExpiredTimer:0000000000000000 prvProcessExpiredTimer
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:905    .text.prvProcessExpiredTimer:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:910    .text.prvProcessTimerOrBlockTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:916    .text.prvProcessTimerOrBlockTask:0000000000000000 prvProcessTimerOrBlockTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1040   .text.prvProcessTimerOrBlockTask:0000000000000068 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1047   .text.prvProcessReceivedCommands:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1053   .text.prvProcessReceivedCommands:0000000000000000 prvProcessReceivedCommands
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1145   .text.prvProcessReceivedCommands:0000000000000048 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1155   .text.prvProcessReceivedCommands:0000000000000052 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1273   .text.prvProcessReceivedCommands:00000000000000e4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1278   .text.prvTimerTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1322   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1329   .text.xTimerGetTimerDaemonTaskHandle:0000000000000000 xTimerGetTimerDaemonTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1345   .text.xTimerGetTimerDaemonTaskHandle:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1350   .text.xTimerGetPeriod:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1357   .text.xTimerGetPeriod:0000000000000000 xTimerGetPeriod
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1377   .text.vTimerSetReloadMode:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1384   .text.vTimerSetReloadMode:0000000000000000 vTimerSetReloadMode
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1433   .text.uxTimerGetReloadMode:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1440   .text.uxTimerGetReloadMode:0000000000000000 uxTimerGetReloadMode
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1489   .text.xTimerGetExpiryTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1496   .text.xTimerGetExpiryTime:0000000000000000 xTimerGetExpiryTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1518   .text.pcTimerGetName:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1525   .text.pcTimerGetName:0000000000000000 pcTimerGetName
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1545   .text.xTimerIsTimerActive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1552   .text.xTimerIsTimerActive:0000000000000000 xTimerIsTimerActive
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1601   .text.pvTimerGetTimerID:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1608   .text.pvTimerGetTimerID:0000000000000000 pvTimerGetTimerID
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s 			page 61


C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1645   .text.vTimerSetTimerID:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1652   .text.vTimerSetTimerID:0000000000000000 vTimerSetTimerID
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1688   .text.xTimerPendFunctionCallFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1695   .text.xTimerPendFunctionCallFromISR:0000000000000000 xTimerPendFunctionCallFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1757   .text.xTimerPendFunctionCallFromISR:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1762   .text.xTimerPendFunctionCall:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1769   .text.xTimerPendFunctionCall:0000000000000000 xTimerPendFunctionCall
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1832   .text.xTimerPendFunctionCall:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1837   .bss.pxCurrentTimerList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1841   .bss.pxCurrentTimerList:0000000000000000 pxCurrentTimerList
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1844   .bss.pxOverflowTimerList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1848   .bss.pxOverflowTimerList:0000000000000000 pxOverflowTimerList
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1851   .bss.xActiveTimerList1:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1855   .bss.xActiveTimerList1:0000000000000000 xActiveTimerList1
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1858   .bss.xActiveTimerList2:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1862   .bss.xActiveTimerList2:0000000000000000 xActiveTimerList2
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1865   .bss.xLastTime.6835:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1869   .bss.xLastTime.6835:0000000000000000 xLastTime.6835
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1872   .bss.xTimerQueue:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1876   .bss.xTimerQueue:0000000000000000 xTimerQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1879   .bss.xTimerTaskHandle:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1883   .bss.xTimerTaskHandle:0000000000000000 xTimerTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1886   .rodata.prvCheckForValidListAndQueue.str1.4:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccceVtX2.s:1890   .rodata.xTimerCreateTimerTask.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vListInitialiseItem
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueReceive
vPortFree
