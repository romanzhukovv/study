ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB13:
  28              		.file 1 "FreeRTOS/src/tasks.c"
   1:FreeRTOS/src/tasks.c **** /*
   2:FreeRTOS/src/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/tasks.c ****  *
   5:FreeRTOS/src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/tasks.c ****  * subject to the following conditions:
  11:FreeRTOS/src/tasks.c ****  *
  12:FreeRTOS/src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/tasks.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/tasks.c ****  *
  15:FreeRTOS/src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/tasks.c ****  *
  22:FreeRTOS/src/tasks.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/tasks.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/tasks.c ****  *
  25:FreeRTOS/src/tasks.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/tasks.c ****  */
  27:FreeRTOS/src/tasks.c **** 
  28:FreeRTOS/src/tasks.c **** /* Standard includes. */
  29:FreeRTOS/src/tasks.c **** #include <stdlib.h>
  30:FreeRTOS/src/tasks.c **** #include <string.h>
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 2


  31:FreeRTOS/src/tasks.c **** 
  32:FreeRTOS/src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:FreeRTOS/src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/src/tasks.c **** task.h is included from an application file. */
  35:FreeRTOS/src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/src/tasks.c **** 
  37:FreeRTOS/src/tasks.c **** /* FreeRTOS includes. */
  38:FreeRTOS/src/tasks.c **** #include "FreeRTOS.h"
  39:FreeRTOS/src/tasks.c **** #include "task.h"
  40:FreeRTOS/src/tasks.c **** #include "timers.h"
  41:FreeRTOS/src/tasks.c **** #include "stack_macros.h"
  42:FreeRTOS/src/tasks.c **** 
  43:FreeRTOS/src/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:FreeRTOS/src/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS/src/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:FreeRTOS/src/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS/src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:FreeRTOS/src/tasks.c **** 
  49:FreeRTOS/src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:FreeRTOS/src/tasks.c **** functions but without including stdio.h here. */
  51:FreeRTOS/src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:FreeRTOS/src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:FreeRTOS/src/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:FreeRTOS/src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:FreeRTOS/src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:FreeRTOS/src/tasks.c **** 	#include <stdio.h>
  57:FreeRTOS/src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:FreeRTOS/src/tasks.c **** 
  59:FreeRTOS/src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:FreeRTOS/src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:FreeRTOS/src/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:FreeRTOS/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:FreeRTOS/src/tasks.c **** #else
  64:FreeRTOS/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:FreeRTOS/src/tasks.c **** #endif
  66:FreeRTOS/src/tasks.c **** 
  67:FreeRTOS/src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:FreeRTOS/src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:FreeRTOS/src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:FreeRTOS/src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:FreeRTOS/src/tasks.c **** 
  72:FreeRTOS/src/tasks.c **** /*
  73:FreeRTOS/src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:FreeRTOS/src/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:FreeRTOS/src/tasks.c ****  */
  76:FreeRTOS/src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:FreeRTOS/src/tasks.c **** 
  78:FreeRTOS/src/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:FreeRTOS/src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:FreeRTOS/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:FreeRTOS/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:FreeRTOS/src/tasks.c **** 
  83:FreeRTOS/src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:FreeRTOS/src/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:FreeRTOS/src/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:FreeRTOS/src/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:FreeRTOS/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 3


  88:FreeRTOS/src/tasks.c **** #else
  89:FreeRTOS/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:FreeRTOS/src/tasks.c **** #endif
  91:FreeRTOS/src/tasks.c **** 
  92:FreeRTOS/src/tasks.c **** /*
  93:FreeRTOS/src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:FreeRTOS/src/tasks.c ****  */
  95:FreeRTOS/src/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:FreeRTOS/src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:FreeRTOS/src/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:FreeRTOS/src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:FreeRTOS/src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:FreeRTOS/src/tasks.c **** 
 101:FreeRTOS/src/tasks.c **** /*
 102:FreeRTOS/src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:FreeRTOS/src/tasks.c ****  * global, rather than file scope.
 104:FreeRTOS/src/tasks.c ****  */
 105:FreeRTOS/src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:FreeRTOS/src/tasks.c **** 	#define static
 107:FreeRTOS/src/tasks.c **** #endif
 108:FreeRTOS/src/tasks.c **** 
 109:FreeRTOS/src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:FreeRTOS/src/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:FreeRTOS/src/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:FreeRTOS/src/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:FreeRTOS/src/tasks.c **** #endif
 114:FreeRTOS/src/tasks.c **** 
 115:FreeRTOS/src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:FreeRTOS/src/tasks.c **** 
 117:FreeRTOS/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:FreeRTOS/src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:FreeRTOS/src/tasks.c **** 	microcontroller architecture. */
 120:FreeRTOS/src/tasks.c **** 
 121:FreeRTOS/src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:FreeRTOS/src/tasks.c **** 	state task. */
 123:FreeRTOS/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:FreeRTOS/src/tasks.c **** 	{																									\
 125:FreeRTOS/src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:FreeRTOS/src/tasks.c **** 		{																								\
 127:FreeRTOS/src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:FreeRTOS/src/tasks.c **** 		}																								\
 129:FreeRTOS/src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:FreeRTOS/src/tasks.c **** 
 131:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 132:FreeRTOS/src/tasks.c **** 
 133:FreeRTOS/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:FreeRTOS/src/tasks.c **** 	{																									\
 135:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:FreeRTOS/src/tasks.c **** 																										\
 137:FreeRTOS/src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:FreeRTOS/src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:FreeRTOS/src/tasks.c **** 		{																								\
 140:FreeRTOS/src/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:FreeRTOS/src/tasks.c **** 			--uxTopPriority;																			\
 142:FreeRTOS/src/tasks.c **** 		}																								\
 143:FreeRTOS/src/tasks.c **** 																										\
 144:FreeRTOS/src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 4


 145:FreeRTOS/src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:FreeRTOS/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:FreeRTOS/src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:FreeRTOS/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:FreeRTOS/src/tasks.c **** 
 150:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 151:FreeRTOS/src/tasks.c **** 
 152:FreeRTOS/src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:FreeRTOS/src/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:FreeRTOS/src/tasks.c **** 	being used. */
 155:FreeRTOS/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:FreeRTOS/src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:FreeRTOS/src/tasks.c **** 
 158:FreeRTOS/src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:FreeRTOS/src/tasks.c **** 
 160:FreeRTOS/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:FreeRTOS/src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:FreeRTOS/src/tasks.c **** 	architecture being used. */
 163:FreeRTOS/src/tasks.c **** 
 164:FreeRTOS/src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:FreeRTOS/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:FreeRTOS/src/tasks.c **** 
 167:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 168:FreeRTOS/src/tasks.c **** 
 169:FreeRTOS/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:FreeRTOS/src/tasks.c **** 	{																								\
 171:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:FreeRTOS/src/tasks.c **** 																									\
 173:FreeRTOS/src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:FreeRTOS/src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:FreeRTOS/src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:FreeRTOS/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:FreeRTOS/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:FreeRTOS/src/tasks.c **** 
 179:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 180:FreeRTOS/src/tasks.c **** 
 181:FreeRTOS/src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:FreeRTOS/src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:FreeRTOS/src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:FreeRTOS/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:FreeRTOS/src/tasks.c **** 	{																									\
 186:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:FreeRTOS/src/tasks.c **** 		{																								\
 188:FreeRTOS/src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:FreeRTOS/src/tasks.c **** 		}																								\
 190:FreeRTOS/src/tasks.c **** 	}
 191:FreeRTOS/src/tasks.c **** 
 192:FreeRTOS/src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:FreeRTOS/src/tasks.c **** 
 194:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 195:FreeRTOS/src/tasks.c **** 
 196:FreeRTOS/src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:FreeRTOS/src/tasks.c **** count overflows. */
 198:FreeRTOS/src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:FreeRTOS/src/tasks.c **** {																									\
 200:FreeRTOS/src/tasks.c **** 	List_t *pxTemp;																					\
 201:FreeRTOS/src/tasks.c **** 																									\
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 5


 202:FreeRTOS/src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:FreeRTOS/src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:FreeRTOS/src/tasks.c **** 																									\
 205:FreeRTOS/src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:FreeRTOS/src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:FreeRTOS/src/tasks.c **** 	xNumOfOverflows++;																				\
 209:FreeRTOS/src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:FreeRTOS/src/tasks.c **** }
 211:FreeRTOS/src/tasks.c **** 
 212:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 213:FreeRTOS/src/tasks.c **** 
 214:FreeRTOS/src/tasks.c **** /*
 215:FreeRTOS/src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:FreeRTOS/src/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:FreeRTOS/src/tasks.c ****  */
 218:FreeRTOS/src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:FreeRTOS/src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:FreeRTOS/src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:FreeRTOS/src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:FreeRTOS/src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 224:FreeRTOS/src/tasks.c **** 
 225:FreeRTOS/src/tasks.c **** /*
 226:FreeRTOS/src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:FreeRTOS/src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:FreeRTOS/src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:FreeRTOS/src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:FreeRTOS/src/tasks.c ****  */
 231:FreeRTOS/src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:FreeRTOS/src/tasks.c **** 
 233:FreeRTOS/src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:FreeRTOS/src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:FreeRTOS/src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:FreeRTOS/src/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:FreeRTOS/src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:FreeRTOS/src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:FreeRTOS/src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:FreeRTOS/src/tasks.c **** to its original value when it is released. */
 241:FreeRTOS/src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:FreeRTOS/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:FreeRTOS/src/tasks.c **** #else
 244:FreeRTOS/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:FreeRTOS/src/tasks.c **** #endif
 246:FreeRTOS/src/tasks.c **** 
 247:FreeRTOS/src/tasks.c **** /*
 248:FreeRTOS/src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:FreeRTOS/src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:FreeRTOS/src/tasks.c ****  * (the task's run time environment, including register values)
 251:FreeRTOS/src/tasks.c ****  */
 252:FreeRTOS/src/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:FreeRTOS/src/tasks.c **** {
 254:FreeRTOS/src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:FreeRTOS/src/tasks.c **** 
 256:FreeRTOS/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:FreeRTOS/src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:FreeRTOS/src/tasks.c **** 	#endif
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 6


 259:FreeRTOS/src/tasks.c **** 
 260:FreeRTOS/src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:FreeRTOS/src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:FreeRTOS/src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:FreeRTOS/src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:FreeRTOS/src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:FreeRTOS/src/tasks.c **** 
 266:FreeRTOS/src/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:FreeRTOS/src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:FreeRTOS/src/tasks.c **** 	#endif
 269:FreeRTOS/src/tasks.c **** 
 270:FreeRTOS/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:FreeRTOS/src/tasks.c **** 	#endif
 273:FreeRTOS/src/tasks.c **** 
 274:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:FreeRTOS/src/tasks.c **** 	#endif
 278:FreeRTOS/src/tasks.c **** 
 279:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:FreeRTOS/src/tasks.c **** 	#endif
 283:FreeRTOS/src/tasks.c **** 
 284:FreeRTOS/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:FreeRTOS/src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:FreeRTOS/src/tasks.c **** 	#endif
 287:FreeRTOS/src/tasks.c **** 
 288:FreeRTOS/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:FreeRTOS/src/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:FreeRTOS/src/tasks.c **** 	#endif
 291:FreeRTOS/src/tasks.c **** 
 292:FreeRTOS/src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:FreeRTOS/src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:FreeRTOS/src/tasks.c **** 	#endif
 295:FreeRTOS/src/tasks.c **** 
 296:FreeRTOS/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:FreeRTOS/src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:FreeRTOS/src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:FreeRTOS/src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:FreeRTOS/src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:FreeRTOS/src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:FreeRTOS/src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:FreeRTOS/src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:FreeRTOS/src/tasks.c **** 
 305:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:FreeRTOS/src/tasks.c **** 		for additional information. */
 307:FreeRTOS/src/tasks.c **** 		struct	_reent xNewLib_reent;
 308:FreeRTOS/src/tasks.c **** 	#endif
 309:FreeRTOS/src/tasks.c **** 
 310:FreeRTOS/src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:FreeRTOS/src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:FreeRTOS/src/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:FreeRTOS/src/tasks.c **** 	#endif
 314:FreeRTOS/src/tasks.c **** 
 315:FreeRTOS/src/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 7


 316:FreeRTOS/src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:FreeRTOS/src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:FreeRTOS/src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:FreeRTOS/src/tasks.c **** 	#endif
 320:FreeRTOS/src/tasks.c **** 
 321:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:FreeRTOS/src/tasks.c **** 		uint8_t ucDelayAborted;
 323:FreeRTOS/src/tasks.c **** 	#endif
 324:FreeRTOS/src/tasks.c **** 
 325:FreeRTOS/src/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:FreeRTOS/src/tasks.c **** 		int iTaskErrno;
 327:FreeRTOS/src/tasks.c **** 	#endif
 328:FreeRTOS/src/tasks.c **** 
 329:FreeRTOS/src/tasks.c **** } tskTCB;
 330:FreeRTOS/src/tasks.c **** 
 331:FreeRTOS/src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:FreeRTOS/src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:FreeRTOS/src/tasks.c **** typedef tskTCB TCB_t;
 334:FreeRTOS/src/tasks.c **** 
 335:FreeRTOS/src/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:FreeRTOS/src/tasks.c **** which static variables must be declared volatile. */
 337:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:FreeRTOS/src/tasks.c **** 
 339:FreeRTOS/src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:FreeRTOS/src/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:FreeRTOS/src/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:FreeRTOS/src/tasks.c **** the static qualifier. */
 343:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:FreeRTOS/src/tasks.c **** 
 350:FreeRTOS/src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:FreeRTOS/src/tasks.c **** 
 352:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:FreeRTOS/src/tasks.c **** 
 355:FreeRTOS/src/tasks.c **** #endif
 356:FreeRTOS/src/tasks.c **** 
 357:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:FreeRTOS/src/tasks.c **** 
 359:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:FreeRTOS/src/tasks.c **** 
 361:FreeRTOS/src/tasks.c **** #endif
 362:FreeRTOS/src/tasks.c **** 
 363:FreeRTOS/src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:FreeRTOS/src/tasks.c **** the errno of the currently running task. */
 365:FreeRTOS/src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:FreeRTOS/src/tasks.c **** 	int FreeRTOS_errno = 0;
 367:FreeRTOS/src/tasks.c **** #endif
 368:FreeRTOS/src/tasks.c **** 
 369:FreeRTOS/src/tasks.c **** /* Other file private variables. --------------------------------*/
 370:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 8


 373:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:FreeRTOS/src/tasks.c **** 
 381:FreeRTOS/src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:FreeRTOS/src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:FreeRTOS/src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:FreeRTOS/src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:FreeRTOS/src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:FreeRTOS/src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:FreeRTOS/src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:FreeRTOS/src/tasks.c **** accessed from a critical section. */
 389:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:FreeRTOS/src/tasks.c **** 
 391:FreeRTOS/src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:FreeRTOS/src/tasks.c **** 
 393:FreeRTOS/src/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:FreeRTOS/src/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:FreeRTOS/src/tasks.c **** 
 398:FreeRTOS/src/tasks.c **** #endif
 399:FreeRTOS/src/tasks.c **** 
 400:FreeRTOS/src/tasks.c **** /*lint -restore */
 401:FreeRTOS/src/tasks.c **** 
 402:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 403:FreeRTOS/src/tasks.c **** 
 404:FreeRTOS/src/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:FreeRTOS/src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:FreeRTOS/src/tasks.c **** 
 407:FreeRTOS/src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:FreeRTOS/src/tasks.c **** 
 409:FreeRTOS/src/tasks.c **** #endif
 410:FreeRTOS/src/tasks.c **** 
 411:FreeRTOS/src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:FreeRTOS/src/tasks.c **** 
 413:FreeRTOS/src/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:FreeRTOS/src/tasks.c **** 
 415:FreeRTOS/src/tasks.c **** #endif
 416:FreeRTOS/src/tasks.c **** 
 417:FreeRTOS/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:FreeRTOS/src/tasks.c **** 
 419:FreeRTOS/src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:FreeRTOS/src/tasks.c **** 
 421:FreeRTOS/src/tasks.c **** #endif
 422:FreeRTOS/src/tasks.c **** 
 423:FreeRTOS/src/tasks.c **** /* File private functions. --------------------------------*/
 424:FreeRTOS/src/tasks.c **** 
 425:FreeRTOS/src/tasks.c **** /**
 426:FreeRTOS/src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:FreeRTOS/src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:FreeRTOS/src/tasks.c ****  * is in any other state.
 429:FreeRTOS/src/tasks.c ****  */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 9


 430:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:FreeRTOS/src/tasks.c **** 
 432:FreeRTOS/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:FreeRTOS/src/tasks.c **** 
 434:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:FreeRTOS/src/tasks.c **** 
 436:FreeRTOS/src/tasks.c **** /*
 437:FreeRTOS/src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:FreeRTOS/src/tasks.c ****  * automatically upon the creation of the first task.
 439:FreeRTOS/src/tasks.c ****  */
 440:FreeRTOS/src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:FreeRTOS/src/tasks.c **** 
 442:FreeRTOS/src/tasks.c **** /*
 443:FreeRTOS/src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:FreeRTOS/src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:FreeRTOS/src/tasks.c ****  * creation of the first user task.
 446:FreeRTOS/src/tasks.c ****  *
 447:FreeRTOS/src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:FreeRTOS/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:FreeRTOS/src/tasks.c ****  *
 450:FreeRTOS/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:FreeRTOS/src/tasks.c ****  *
 452:FreeRTOS/src/tasks.c ****  */
 453:FreeRTOS/src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:FreeRTOS/src/tasks.c **** 
 455:FreeRTOS/src/tasks.c **** /*
 456:FreeRTOS/src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:FreeRTOS/src/tasks.c ****  * including the stack pointed to by the TCB.
 458:FreeRTOS/src/tasks.c ****  *
 459:FreeRTOS/src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:FreeRTOS/src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:FreeRTOS/src/tasks.c ****  */
 462:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:FreeRTOS/src/tasks.c **** 
 464:FreeRTOS/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:FreeRTOS/src/tasks.c **** 
 466:FreeRTOS/src/tasks.c **** #endif
 467:FreeRTOS/src/tasks.c **** 
 468:FreeRTOS/src/tasks.c **** /*
 469:FreeRTOS/src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:FreeRTOS/src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:FreeRTOS/src/tasks.c ****  * and its TCB deleted.
 472:FreeRTOS/src/tasks.c ****  */
 473:FreeRTOS/src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:FreeRTOS/src/tasks.c **** 
 475:FreeRTOS/src/tasks.c **** /*
 476:FreeRTOS/src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:FreeRTOS/src/tasks.c ****  * either the current or the overflow delayed task list.
 478:FreeRTOS/src/tasks.c ****  */
 479:FreeRTOS/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:FreeRTOS/src/tasks.c **** 
 481:FreeRTOS/src/tasks.c **** /*
 482:FreeRTOS/src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:FreeRTOS/src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:FreeRTOS/src/tasks.c ****  * a suspended list, etc.).
 485:FreeRTOS/src/tasks.c ****  *
 486:FreeRTOS/src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 10


 487:FreeRTOS/src/tasks.c ****  * NORMAL APPLICATION CODE.
 488:FreeRTOS/src/tasks.c ****  */
 489:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:FreeRTOS/src/tasks.c **** 
 491:FreeRTOS/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:FreeRTOS/src/tasks.c **** 
 493:FreeRTOS/src/tasks.c **** #endif
 494:FreeRTOS/src/tasks.c **** 
 495:FreeRTOS/src/tasks.c **** /*
 496:FreeRTOS/src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:FreeRTOS/src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:FreeRTOS/src/tasks.c ****  */
 499:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:FreeRTOS/src/tasks.c **** 
 501:FreeRTOS/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:FreeRTOS/src/tasks.c **** 
 503:FreeRTOS/src/tasks.c **** #endif
 504:FreeRTOS/src/tasks.c **** 
 505:FreeRTOS/src/tasks.c **** /*
 506:FreeRTOS/src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:FreeRTOS/src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:FreeRTOS/src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:FreeRTOS/src/tasks.c ****  */
 510:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:FreeRTOS/src/tasks.c **** 
 512:FreeRTOS/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:FreeRTOS/src/tasks.c **** 
 514:FreeRTOS/src/tasks.c **** #endif
 515:FreeRTOS/src/tasks.c **** 
 516:FreeRTOS/src/tasks.c **** /*
 517:FreeRTOS/src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:FreeRTOS/src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:FreeRTOS/src/tasks.c ****  *
 520:FreeRTOS/src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:FreeRTOS/src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:FreeRTOS/src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:FreeRTOS/src/tasks.c ****  * set to a value other than 1.
 524:FreeRTOS/src/tasks.c ****  */
 525:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:FreeRTOS/src/tasks.c **** 
 527:FreeRTOS/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:FreeRTOS/src/tasks.c **** 
 529:FreeRTOS/src/tasks.c **** #endif
 530:FreeRTOS/src/tasks.c **** 
 531:FreeRTOS/src/tasks.c **** /*
 532:FreeRTOS/src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:FreeRTOS/src/tasks.c ****  * will exit the Blocked state.
 534:FreeRTOS/src/tasks.c ****  */
 535:FreeRTOS/src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:FreeRTOS/src/tasks.c **** 
 537:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:FreeRTOS/src/tasks.c **** 
 539:FreeRTOS/src/tasks.c **** 	/*
 540:FreeRTOS/src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:FreeRTOS/src/tasks.c **** 	 * human readable tables of task information.
 542:FreeRTOS/src/tasks.c **** 	 */
 543:FreeRTOS/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 11


 544:FreeRTOS/src/tasks.c **** 
 545:FreeRTOS/src/tasks.c **** #endif
 546:FreeRTOS/src/tasks.c **** 
 547:FreeRTOS/src/tasks.c **** /*
 548:FreeRTOS/src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:FreeRTOS/src/tasks.c ****  * dynamically to fill in the structure's members.
 550:FreeRTOS/src/tasks.c ****  */
 551:FreeRTOS/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:FreeRTOS/src/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 554:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 555:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
 556:FreeRTOS/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:FreeRTOS/src/tasks.c **** 									TCB_t *pxNewTCB,
 558:FreeRTOS/src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:FreeRTOS/src/tasks.c **** 
 560:FreeRTOS/src/tasks.c **** /*
 561:FreeRTOS/src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:FreeRTOS/src/tasks.c ****  * under the control of the scheduler.
 563:FreeRTOS/src/tasks.c ****  */
 564:FreeRTOS/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:FreeRTOS/src/tasks.c **** 
 566:FreeRTOS/src/tasks.c **** /*
 567:FreeRTOS/src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:FreeRTOS/src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:FreeRTOS/src/tasks.c ****  * called by the function.
 570:FreeRTOS/src/tasks.c ****  */
 571:FreeRTOS/src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:FreeRTOS/src/tasks.c **** 
 573:FreeRTOS/src/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:FreeRTOS/src/tasks.c **** 
 575:FreeRTOS/src/tasks.c **** #endif
 576:FreeRTOS/src/tasks.c **** 
 577:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 578:FreeRTOS/src/tasks.c **** 
 579:FreeRTOS/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:FreeRTOS/src/tasks.c **** 
 581:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:FreeRTOS/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 584:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 585:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
 586:FreeRTOS/src/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:FreeRTOS/src/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:FreeRTOS/src/tasks.c **** 	{
 589:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 590:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
 591:FreeRTOS/src/tasks.c **** 
 592:FreeRTOS/src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:FreeRTOS/src/tasks.c **** 
 595:FreeRTOS/src/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:FreeRTOS/src/tasks.c **** 		{
 597:FreeRTOS/src/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:FreeRTOS/src/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:FreeRTOS/src/tasks.c **** 			structure. */
 600:FreeRTOS/src/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 12


 601:FreeRTOS/src/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:FreeRTOS/src/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:FreeRTOS/src/tasks.c **** 		}
 604:FreeRTOS/src/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:FreeRTOS/src/tasks.c **** 
 606:FreeRTOS/src/tasks.c **** 
 607:FreeRTOS/src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:FreeRTOS/src/tasks.c **** 		{
 609:FreeRTOS/src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:FreeRTOS/src/tasks.c **** 			function - use them. */
 611:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:FreeRTOS/src/tasks.c **** 
 614:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:FreeRTOS/src/tasks.c **** 			{
 616:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:FreeRTOS/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:FreeRTOS/src/tasks.c **** 			}
 620:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:FreeRTOS/src/tasks.c **** 
 622:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:FreeRTOS/src/tasks.c **** 		}
 625:FreeRTOS/src/tasks.c **** 		else
 626:FreeRTOS/src/tasks.c **** 		{
 627:FreeRTOS/src/tasks.c **** 			xReturn = NULL;
 628:FreeRTOS/src/tasks.c **** 		}
 629:FreeRTOS/src/tasks.c **** 
 630:FreeRTOS/src/tasks.c **** 		return xReturn;
 631:FreeRTOS/src/tasks.c **** 	}
 632:FreeRTOS/src/tasks.c **** 
 633:FreeRTOS/src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 635:FreeRTOS/src/tasks.c **** 
 636:FreeRTOS/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:FreeRTOS/src/tasks.c **** 
 638:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:FreeRTOS/src/tasks.c **** 	{
 640:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 641:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:FreeRTOS/src/tasks.c **** 
 643:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:FreeRTOS/src/tasks.c **** 
 646:FreeRTOS/src/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:FreeRTOS/src/tasks.c **** 		{
 648:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:FreeRTOS/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:FreeRTOS/src/tasks.c **** 			not static allocation is being used. */
 651:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:FreeRTOS/src/tasks.c **** 
 653:FreeRTOS/src/tasks.c **** 			/* Store the stack location in the TCB. */
 654:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:FreeRTOS/src/tasks.c **** 
 656:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 13


 658:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:FreeRTOS/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:FreeRTOS/src/tasks.c **** 			}
 662:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:FreeRTOS/src/tasks.c **** 
 664:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->pcName,
 666:FreeRTOS/src/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:FreeRTOS/src/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->xRegions );
 671:FreeRTOS/src/tasks.c **** 
 672:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 674:FreeRTOS/src/tasks.c **** 		}
 675:FreeRTOS/src/tasks.c **** 
 676:FreeRTOS/src/tasks.c **** 		return xReturn;
 677:FreeRTOS/src/tasks.c **** 	}
 678:FreeRTOS/src/tasks.c **** 
 679:FreeRTOS/src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 681:FreeRTOS/src/tasks.c **** 
 682:FreeRTOS/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:FreeRTOS/src/tasks.c **** 
 684:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:FreeRTOS/src/tasks.c **** 	{
 686:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 687:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:FreeRTOS/src/tasks.c **** 
 689:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:FreeRTOS/src/tasks.c **** 
 691:FreeRTOS/src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:FreeRTOS/src/tasks.c **** 		{
 693:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:FreeRTOS/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:FreeRTOS/src/tasks.c **** 			not static allocation is being used. */
 696:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:FreeRTOS/src/tasks.c **** 
 698:FreeRTOS/src/tasks.c **** 			if( pxNewTCB != NULL )
 699:FreeRTOS/src/tasks.c **** 			{
 700:FreeRTOS/src/tasks.c **** 				/* Store the stack location in the TCB. */
 701:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:FreeRTOS/src/tasks.c **** 
 703:FreeRTOS/src/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:FreeRTOS/src/tasks.c **** 				{
 705:FreeRTOS/src/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:FreeRTOS/src/tasks.c **** 					this task had a statically allocated stack in case it is
 707:FreeRTOS/src/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:FreeRTOS/src/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:FreeRTOS/src/tasks.c **** 				}
 710:FreeRTOS/src/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:FreeRTOS/src/tasks.c **** 
 712:FreeRTOS/src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->pcName,
 714:FreeRTOS/src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 14


 715:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:FreeRTOS/src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->xRegions );
 719:FreeRTOS/src/tasks.c **** 
 720:FreeRTOS/src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 722:FreeRTOS/src/tasks.c **** 			}
 723:FreeRTOS/src/tasks.c **** 		}
 724:FreeRTOS/src/tasks.c **** 
 725:FreeRTOS/src/tasks.c **** 		return xReturn;
 726:FreeRTOS/src/tasks.c **** 	}
 727:FreeRTOS/src/tasks.c **** 
 728:FreeRTOS/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 730:FreeRTOS/src/tasks.c **** 
 731:FreeRTOS/src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:FreeRTOS/src/tasks.c **** 
 733:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:FreeRTOS/src/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:FreeRTOS/src/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:FreeRTOS/src/tasks.c **** 							void * const pvParameters,
 737:FreeRTOS/src/tasks.c **** 							UBaseType_t uxPriority,
 738:FreeRTOS/src/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:FreeRTOS/src/tasks.c **** 	{
 740:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 741:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 742:FreeRTOS/src/tasks.c **** 
 743:FreeRTOS/src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:FreeRTOS/src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:FreeRTOS/src/tasks.c **** 		the TCB then the stack. */
 746:FreeRTOS/src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:FreeRTOS/src/tasks.c **** 		{
 748:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:FreeRTOS/src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:FreeRTOS/src/tasks.c **** 			allocation is being used. */
 751:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:FreeRTOS/src/tasks.c **** 
 753:FreeRTOS/src/tasks.c **** 			if( pxNewTCB != NULL )
 754:FreeRTOS/src/tasks.c **** 			{
 755:FreeRTOS/src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:FreeRTOS/src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:FreeRTOS/src/tasks.c **** 				be deleted later if required. */
 758:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:FreeRTOS/src/tasks.c **** 
 760:FreeRTOS/src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:FreeRTOS/src/tasks.c **** 				{
 762:FreeRTOS/src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:FreeRTOS/src/tasks.c **** 					vPortFree( pxNewTCB );
 764:FreeRTOS/src/tasks.c **** 					pxNewTCB = NULL;
 765:FreeRTOS/src/tasks.c **** 				}
 766:FreeRTOS/src/tasks.c **** 			}
 767:FreeRTOS/src/tasks.c **** 		}
 768:FreeRTOS/src/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:FreeRTOS/src/tasks.c **** 		{
 770:FreeRTOS/src/tasks.c **** 		StackType_t *pxStack;
 771:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 15


 772:FreeRTOS/src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:FreeRTOS/src/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:FreeRTOS/src/tasks.c **** 
 775:FreeRTOS/src/tasks.c **** 			if( pxStack != NULL )
 776:FreeRTOS/src/tasks.c **** 			{
 777:FreeRTOS/src/tasks.c **** 				/* Allocate space for the TCB. */
 778:FreeRTOS/src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:FreeRTOS/src/tasks.c **** 
 780:FreeRTOS/src/tasks.c **** 				if( pxNewTCB != NULL )
 781:FreeRTOS/src/tasks.c **** 				{
 782:FreeRTOS/src/tasks.c **** 					/* Store the stack location in the TCB. */
 783:FreeRTOS/src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:FreeRTOS/src/tasks.c **** 				}
 785:FreeRTOS/src/tasks.c **** 				else
 786:FreeRTOS/src/tasks.c **** 				{
 787:FreeRTOS/src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:FreeRTOS/src/tasks.c **** 					it again. */
 789:FreeRTOS/src/tasks.c **** 					vPortFree( pxStack );
 790:FreeRTOS/src/tasks.c **** 				}
 791:FreeRTOS/src/tasks.c **** 			}
 792:FreeRTOS/src/tasks.c **** 			else
 793:FreeRTOS/src/tasks.c **** 			{
 794:FreeRTOS/src/tasks.c **** 				pxNewTCB = NULL;
 795:FreeRTOS/src/tasks.c **** 			}
 796:FreeRTOS/src/tasks.c **** 		}
 797:FreeRTOS/src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:FreeRTOS/src/tasks.c **** 
 799:FreeRTOS/src/tasks.c **** 		if( pxNewTCB != NULL )
 800:FreeRTOS/src/tasks.c **** 		{
 801:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:FreeRTOS/src/tasks.c **** 			{
 803:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:FreeRTOS/src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:FreeRTOS/src/tasks.c **** 			}
 807:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:FreeRTOS/src/tasks.c **** 
 809:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 812:FreeRTOS/src/tasks.c **** 		}
 813:FreeRTOS/src/tasks.c **** 		else
 814:FreeRTOS/src/tasks.c **** 		{
 815:FreeRTOS/src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:FreeRTOS/src/tasks.c **** 		}
 817:FreeRTOS/src/tasks.c **** 
 818:FreeRTOS/src/tasks.c **** 		return xReturn;
 819:FreeRTOS/src/tasks.c **** 	}
 820:FreeRTOS/src/tasks.c **** 
 821:FreeRTOS/src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 823:FreeRTOS/src/tasks.c **** 
 824:FreeRTOS/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:FreeRTOS/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 827:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 828:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 16


 829:FreeRTOS/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:FreeRTOS/src/tasks.c **** 									TCB_t *pxNewTCB,
 831:FreeRTOS/src/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:FreeRTOS/src/tasks.c **** {
 833:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 834:FreeRTOS/src/tasks.c **** UBaseType_t x;
 835:FreeRTOS/src/tasks.c **** 
 836:FreeRTOS/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:FreeRTOS/src/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:FreeRTOS/src/tasks.c **** 		BaseType_t xRunPrivileged;
 839:FreeRTOS/src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:FreeRTOS/src/tasks.c **** 		{
 841:FreeRTOS/src/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:FreeRTOS/src/tasks.c **** 		}
 843:FreeRTOS/src/tasks.c **** 		else
 844:FreeRTOS/src/tasks.c **** 		{
 845:FreeRTOS/src/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:FreeRTOS/src/tasks.c **** 		}
 847:FreeRTOS/src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:FreeRTOS/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:FreeRTOS/src/tasks.c **** 
 850:FreeRTOS/src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:FreeRTOS/src/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:FreeRTOS/src/tasks.c **** 	{
 853:FreeRTOS/src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:FreeRTOS/src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:FreeRTOS/src/tasks.c **** 	}
 856:FreeRTOS/src/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:FreeRTOS/src/tasks.c **** 
 858:FreeRTOS/src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:FreeRTOS/src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:FreeRTOS/src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:FreeRTOS/src/tasks.c **** 	by the port. */
 862:FreeRTOS/src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:FreeRTOS/src/tasks.c **** 	{
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:FreeRTOS/src/tasks.c **** 
 867:FreeRTOS/src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:FreeRTOS/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:FreeRTOS/src/tasks.c **** 
 870:FreeRTOS/src/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:FreeRTOS/src/tasks.c **** 		{
 872:FreeRTOS/src/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:FreeRTOS/src/tasks.c **** 			debugging. */
 874:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:FreeRTOS/src/tasks.c **** 		}
 876:FreeRTOS/src/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:FreeRTOS/src/tasks.c **** 	}
 878:FreeRTOS/src/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:FreeRTOS/src/tasks.c **** 	{
 880:FreeRTOS/src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:FreeRTOS/src/tasks.c **** 
 882:FreeRTOS/src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:FreeRTOS/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:FreeRTOS/src/tasks.c **** 
 885:FreeRTOS/src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 17


 886:FreeRTOS/src/tasks.c **** 		performed. */
 887:FreeRTOS/src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:FreeRTOS/src/tasks.c **** 	}
 889:FreeRTOS/src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:FreeRTOS/src/tasks.c **** 
 891:FreeRTOS/src/tasks.c **** 	/* Store the task name in the TCB. */
 892:FreeRTOS/src/tasks.c **** 	if( pcName != NULL )
 893:FreeRTOS/src/tasks.c **** 	{
 894:FreeRTOS/src/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:FreeRTOS/src/tasks.c **** 		{
 896:FreeRTOS/src/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:FreeRTOS/src/tasks.c **** 
 898:FreeRTOS/src/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:FreeRTOS/src/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:FreeRTOS/src/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:FreeRTOS/src/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:FreeRTOS/src/tasks.c **** 			{
 903:FreeRTOS/src/tasks.c **** 				break;
 904:FreeRTOS/src/tasks.c **** 			}
 905:FreeRTOS/src/tasks.c **** 			else
 906:FreeRTOS/src/tasks.c **** 			{
 907:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:FreeRTOS/src/tasks.c **** 			}
 909:FreeRTOS/src/tasks.c **** 		}
 910:FreeRTOS/src/tasks.c **** 
 911:FreeRTOS/src/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:FreeRTOS/src/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:FreeRTOS/src/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:FreeRTOS/src/tasks.c **** 	}
 915:FreeRTOS/src/tasks.c **** 	else
 916:FreeRTOS/src/tasks.c **** 	{
 917:FreeRTOS/src/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:FreeRTOS/src/tasks.c **** 		terminator when it is read out. */
 919:FreeRTOS/src/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:FreeRTOS/src/tasks.c **** 	}
 921:FreeRTOS/src/tasks.c **** 
 922:FreeRTOS/src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:FreeRTOS/src/tasks.c **** 	remove the privilege bit if one is present. */
 924:FreeRTOS/src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:FreeRTOS/src/tasks.c **** 	{
 926:FreeRTOS/src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:FreeRTOS/src/tasks.c **** 	}
 928:FreeRTOS/src/tasks.c **** 	else
 929:FreeRTOS/src/tasks.c **** 	{
 930:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:FreeRTOS/src/tasks.c **** 	}
 932:FreeRTOS/src/tasks.c **** 
 933:FreeRTOS/src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:FreeRTOS/src/tasks.c **** 	{
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:FreeRTOS/src/tasks.c **** 	}
 939:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:FreeRTOS/src/tasks.c **** 
 941:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 18


 943:FreeRTOS/src/tasks.c **** 
 944:FreeRTOS/src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:FreeRTOS/src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:FreeRTOS/src/tasks.c **** 
 948:FreeRTOS/src/tasks.c **** 	/* Event lists are always in priority order. */
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:FreeRTOS/src/tasks.c **** 
 952:FreeRTOS/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:FreeRTOS/src/tasks.c **** 	{
 954:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:FreeRTOS/src/tasks.c **** 	}
 956:FreeRTOS/src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:FreeRTOS/src/tasks.c **** 
 958:FreeRTOS/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:FreeRTOS/src/tasks.c **** 	{
 960:FreeRTOS/src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:FreeRTOS/src/tasks.c **** 	}
 962:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:FreeRTOS/src/tasks.c **** 
 964:FreeRTOS/src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:FreeRTOS/src/tasks.c **** 	{
 966:FreeRTOS/src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:FreeRTOS/src/tasks.c **** 	}
 968:FreeRTOS/src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:FreeRTOS/src/tasks.c **** 
 970:FreeRTOS/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:FreeRTOS/src/tasks.c **** 	{
 972:FreeRTOS/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:FreeRTOS/src/tasks.c **** 	}
 974:FreeRTOS/src/tasks.c **** 	#else
 975:FreeRTOS/src/tasks.c **** 	{
 976:FreeRTOS/src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:FreeRTOS/src/tasks.c **** 		( void ) xRegions;
 978:FreeRTOS/src/tasks.c **** 	}
 979:FreeRTOS/src/tasks.c **** 	#endif
 980:FreeRTOS/src/tasks.c **** 
 981:FreeRTOS/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:FreeRTOS/src/tasks.c **** 	{
 983:FreeRTOS/src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:FreeRTOS/src/tasks.c **** 		{
 985:FreeRTOS/src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:FreeRTOS/src/tasks.c **** 		}
 987:FreeRTOS/src/tasks.c **** 	}
 988:FreeRTOS/src/tasks.c **** 	#endif
 989:FreeRTOS/src/tasks.c **** 
 990:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:FreeRTOS/src/tasks.c **** 	{
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:FreeRTOS/src/tasks.c **** 	}
 995:FreeRTOS/src/tasks.c **** 	#endif
 996:FreeRTOS/src/tasks.c **** 
 997:FreeRTOS/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:FreeRTOS/src/tasks.c **** 	{
 999:FreeRTOS/src/tasks.c **** 		/* Initialise this task's Newlib reent structure.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 19


1000:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:FreeRTOS/src/tasks.c **** 		for additional information. */
1002:FreeRTOS/src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:FreeRTOS/src/tasks.c **** 	}
1004:FreeRTOS/src/tasks.c **** 	#endif
1005:FreeRTOS/src/tasks.c **** 
1006:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:FreeRTOS/src/tasks.c **** 	{
1008:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:FreeRTOS/src/tasks.c **** 	}
1010:FreeRTOS/src/tasks.c **** 	#endif
1011:FreeRTOS/src/tasks.c **** 
1012:FreeRTOS/src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:FreeRTOS/src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:FreeRTOS/src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:FreeRTOS/src/tasks.c **** 	the top of stack variable is updated. */
1016:FreeRTOS/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:FreeRTOS/src/tasks.c **** 	{
1018:FreeRTOS/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:FreeRTOS/src/tasks.c **** 		pass the stack end address to the stack initialization
1020:FreeRTOS/src/tasks.c **** 		function as well. */
1021:FreeRTOS/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:FreeRTOS/src/tasks.c **** 		{
1023:FreeRTOS/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:FreeRTOS/src/tasks.c **** 			{
1025:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:FreeRTOS/src/tasks.c **** 			}
1027:FreeRTOS/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:FreeRTOS/src/tasks.c **** 			{
1029:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:FreeRTOS/src/tasks.c **** 			}
1031:FreeRTOS/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:FreeRTOS/src/tasks.c **** 		}
1033:FreeRTOS/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:FreeRTOS/src/tasks.c **** 		{
1035:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:FreeRTOS/src/tasks.c **** 		}
1037:FreeRTOS/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:FreeRTOS/src/tasks.c **** 	}
1039:FreeRTOS/src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:FreeRTOS/src/tasks.c **** 	{
1041:FreeRTOS/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:FreeRTOS/src/tasks.c **** 		pass the stack end address to the stack initialization
1043:FreeRTOS/src/tasks.c **** 		function as well. */
1044:FreeRTOS/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:FreeRTOS/src/tasks.c **** 		{
1046:FreeRTOS/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:FreeRTOS/src/tasks.c **** 			{
1048:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:FreeRTOS/src/tasks.c **** 			}
1050:FreeRTOS/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:FreeRTOS/src/tasks.c **** 			{
1052:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:FreeRTOS/src/tasks.c **** 			}
1054:FreeRTOS/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:FreeRTOS/src/tasks.c **** 		}
1056:FreeRTOS/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 20


1057:FreeRTOS/src/tasks.c **** 		{
1058:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:FreeRTOS/src/tasks.c **** 		}
1060:FreeRTOS/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:FreeRTOS/src/tasks.c **** 	}
1062:FreeRTOS/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:FreeRTOS/src/tasks.c **** 
1064:FreeRTOS/src/tasks.c **** 	if( pxCreatedTask != NULL )
1065:FreeRTOS/src/tasks.c **** 	{
1066:FreeRTOS/src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:FreeRTOS/src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:FreeRTOS/src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:FreeRTOS/src/tasks.c **** 	}
1070:FreeRTOS/src/tasks.c **** 	else
1071:FreeRTOS/src/tasks.c **** 	{
1072:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:FreeRTOS/src/tasks.c **** 	}
1074:FreeRTOS/src/tasks.c **** }
1075:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1076:FreeRTOS/src/tasks.c **** 
1077:FreeRTOS/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:FreeRTOS/src/tasks.c **** {
1079:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:FreeRTOS/src/tasks.c **** 	updated. */
1081:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
1082:FreeRTOS/src/tasks.c **** 	{
1083:FreeRTOS/src/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:FreeRTOS/src/tasks.c **** 		{
1086:FreeRTOS/src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:FreeRTOS/src/tasks.c **** 			the suspended state - make this the current task. */
1088:FreeRTOS/src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:FreeRTOS/src/tasks.c **** 
1090:FreeRTOS/src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:FreeRTOS/src/tasks.c **** 			{
1092:FreeRTOS/src/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:FreeRTOS/src/tasks.c **** 				initialisation required.  We will not recover if this call
1094:FreeRTOS/src/tasks.c **** 				fails, but we will report the failure. */
1095:FreeRTOS/src/tasks.c **** 				prvInitialiseTaskLists();
1096:FreeRTOS/src/tasks.c **** 			}
1097:FreeRTOS/src/tasks.c **** 			else
1098:FreeRTOS/src/tasks.c **** 			{
1099:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:FreeRTOS/src/tasks.c **** 			}
1101:FreeRTOS/src/tasks.c **** 		}
1102:FreeRTOS/src/tasks.c **** 		else
1103:FreeRTOS/src/tasks.c **** 		{
1104:FreeRTOS/src/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:FreeRTOS/src/tasks.c **** 			current task if it is the highest priority task to be created
1106:FreeRTOS/src/tasks.c **** 			so far. */
1107:FreeRTOS/src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:FreeRTOS/src/tasks.c **** 			{
1109:FreeRTOS/src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:FreeRTOS/src/tasks.c **** 				{
1111:FreeRTOS/src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:FreeRTOS/src/tasks.c **** 				}
1113:FreeRTOS/src/tasks.c **** 				else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 21


1114:FreeRTOS/src/tasks.c **** 				{
1115:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:FreeRTOS/src/tasks.c **** 				}
1117:FreeRTOS/src/tasks.c **** 			}
1118:FreeRTOS/src/tasks.c **** 			else
1119:FreeRTOS/src/tasks.c **** 			{
1120:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:FreeRTOS/src/tasks.c **** 			}
1122:FreeRTOS/src/tasks.c **** 		}
1123:FreeRTOS/src/tasks.c **** 
1124:FreeRTOS/src/tasks.c **** 		uxTaskNumber++;
1125:FreeRTOS/src/tasks.c **** 
1126:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:FreeRTOS/src/tasks.c **** 		{
1128:FreeRTOS/src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:FreeRTOS/src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:FreeRTOS/src/tasks.c **** 		}
1131:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:FreeRTOS/src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:FreeRTOS/src/tasks.c **** 
1134:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:FreeRTOS/src/tasks.c **** 
1136:FreeRTOS/src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:FreeRTOS/src/tasks.c **** 	}
1138:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
1139:FreeRTOS/src/tasks.c **** 
1140:FreeRTOS/src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:FreeRTOS/src/tasks.c **** 	{
1142:FreeRTOS/src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:FreeRTOS/src/tasks.c **** 		then it should run now. */
1144:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:FreeRTOS/src/tasks.c **** 		{
1146:FreeRTOS/src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:FreeRTOS/src/tasks.c **** 		}
1148:FreeRTOS/src/tasks.c **** 		else
1149:FreeRTOS/src/tasks.c **** 		{
1150:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:FreeRTOS/src/tasks.c **** 		}
1152:FreeRTOS/src/tasks.c **** 	}
1153:FreeRTOS/src/tasks.c **** 	else
1154:FreeRTOS/src/tasks.c **** 	{
1155:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:FreeRTOS/src/tasks.c **** 	}
1157:FreeRTOS/src/tasks.c **** }
1158:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1159:FreeRTOS/src/tasks.c **** 
1160:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:FreeRTOS/src/tasks.c **** 
1162:FreeRTOS/src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:FreeRTOS/src/tasks.c **** 	{
1164:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1165:FreeRTOS/src/tasks.c **** 
1166:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1167:FreeRTOS/src/tasks.c **** 		{
1168:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:FreeRTOS/src/tasks.c **** 			being deleted. */
1170:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 22


1171:FreeRTOS/src/tasks.c **** 
1172:FreeRTOS/src/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:FreeRTOS/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:FreeRTOS/src/tasks.c **** 			{
1175:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:FreeRTOS/src/tasks.c **** 			}
1177:FreeRTOS/src/tasks.c **** 			else
1178:FreeRTOS/src/tasks.c **** 			{
1179:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:FreeRTOS/src/tasks.c **** 			}
1181:FreeRTOS/src/tasks.c **** 
1182:FreeRTOS/src/tasks.c **** 			/* Is the task waiting on an event also? */
1183:FreeRTOS/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:FreeRTOS/src/tasks.c **** 			{
1185:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:FreeRTOS/src/tasks.c **** 			}
1187:FreeRTOS/src/tasks.c **** 			else
1188:FreeRTOS/src/tasks.c **** 			{
1189:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:FreeRTOS/src/tasks.c **** 			}
1191:FreeRTOS/src/tasks.c **** 
1192:FreeRTOS/src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:FreeRTOS/src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:FreeRTOS/src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:FreeRTOS/src/tasks.c **** 			not return. */
1196:FreeRTOS/src/tasks.c **** 			uxTaskNumber++;
1197:FreeRTOS/src/tasks.c **** 
1198:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:FreeRTOS/src/tasks.c **** 			{
1200:FreeRTOS/src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:FreeRTOS/src/tasks.c **** 				task itself, as a context switch to another task is required.
1202:FreeRTOS/src/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:FreeRTOS/src/tasks.c **** 				check the termination list and free up any memory allocated by
1204:FreeRTOS/src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:FreeRTOS/src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:FreeRTOS/src/tasks.c **** 
1207:FreeRTOS/src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:FreeRTOS/src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:FreeRTOS/src/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:FreeRTOS/src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:FreeRTOS/src/tasks.c **** 
1212:FreeRTOS/src/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:FreeRTOS/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:FreeRTOS/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:FreeRTOS/src/tasks.c **** 
1216:FreeRTOS/src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:FreeRTOS/src/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:FreeRTOS/src/tasks.c **** 				after which it is not possible to yield away from this task -
1219:FreeRTOS/src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:FreeRTOS/src/tasks.c **** 				required. */
1221:FreeRTOS/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:FreeRTOS/src/tasks.c **** 			}
1223:FreeRTOS/src/tasks.c **** 			else
1224:FreeRTOS/src/tasks.c **** 			{
1225:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:FreeRTOS/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:FreeRTOS/src/tasks.c **** 				prvDeleteTCB( pxTCB );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 23


1228:FreeRTOS/src/tasks.c **** 
1229:FreeRTOS/src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:FreeRTOS/src/tasks.c **** 				the task that has just been deleted. */
1231:FreeRTOS/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:FreeRTOS/src/tasks.c **** 			}
1233:FreeRTOS/src/tasks.c **** 		}
1234:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1235:FreeRTOS/src/tasks.c **** 
1236:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:FreeRTOS/src/tasks.c **** 		been deleted. */
1238:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:FreeRTOS/src/tasks.c **** 		{
1240:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:FreeRTOS/src/tasks.c **** 			{
1242:FreeRTOS/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
1244:FreeRTOS/src/tasks.c **** 			}
1245:FreeRTOS/src/tasks.c **** 			else
1246:FreeRTOS/src/tasks.c **** 			{
1247:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:FreeRTOS/src/tasks.c **** 			}
1249:FreeRTOS/src/tasks.c **** 		}
1250:FreeRTOS/src/tasks.c **** 	}
1251:FreeRTOS/src/tasks.c **** 
1252:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1254:FreeRTOS/src/tasks.c **** 
1255:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:FreeRTOS/src/tasks.c **** 
1257:FreeRTOS/src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:FreeRTOS/src/tasks.c **** 	{
1259:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
1260:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:FreeRTOS/src/tasks.c **** 
1262:FreeRTOS/src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:FreeRTOS/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:FreeRTOS/src/tasks.c **** 
1266:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
1267:FreeRTOS/src/tasks.c **** 		{
1268:FreeRTOS/src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:FreeRTOS/src/tasks.c **** 			block. */
1270:FreeRTOS/src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:FreeRTOS/src/tasks.c **** 
1272:FreeRTOS/src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:FreeRTOS/src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:FreeRTOS/src/tasks.c **** 
1275:FreeRTOS/src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:FreeRTOS/src/tasks.c **** 			{
1277:FreeRTOS/src/tasks.c **** 				/* The tick count has overflowed since this function was
1278:FreeRTOS/src/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:FreeRTOS/src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:FreeRTOS/src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:FreeRTOS/src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:FreeRTOS/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:FreeRTOS/src/tasks.c **** 				{
1284:FreeRTOS/src/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 24


1285:FreeRTOS/src/tasks.c **** 				}
1286:FreeRTOS/src/tasks.c **** 				else
1287:FreeRTOS/src/tasks.c **** 				{
1288:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:FreeRTOS/src/tasks.c **** 				}
1290:FreeRTOS/src/tasks.c **** 			}
1291:FreeRTOS/src/tasks.c **** 			else
1292:FreeRTOS/src/tasks.c **** 			{
1293:FreeRTOS/src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:FreeRTOS/src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:FreeRTOS/src/tasks.c **** 				tick time is less than the wake time. */
1296:FreeRTOS/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:FreeRTOS/src/tasks.c **** 				{
1298:FreeRTOS/src/tasks.c **** 					xShouldDelay = pdTRUE;
1299:FreeRTOS/src/tasks.c **** 				}
1300:FreeRTOS/src/tasks.c **** 				else
1301:FreeRTOS/src/tasks.c **** 				{
1302:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:FreeRTOS/src/tasks.c **** 				}
1304:FreeRTOS/src/tasks.c **** 			}
1305:FreeRTOS/src/tasks.c **** 
1306:FreeRTOS/src/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:FreeRTOS/src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:FreeRTOS/src/tasks.c **** 
1309:FreeRTOS/src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:FreeRTOS/src/tasks.c **** 			{
1311:FreeRTOS/src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:FreeRTOS/src/tasks.c **** 
1313:FreeRTOS/src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:FreeRTOS/src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:FreeRTOS/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:FreeRTOS/src/tasks.c **** 			}
1317:FreeRTOS/src/tasks.c **** 			else
1318:FreeRTOS/src/tasks.c **** 			{
1319:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:FreeRTOS/src/tasks.c **** 			}
1321:FreeRTOS/src/tasks.c **** 		}
1322:FreeRTOS/src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:FreeRTOS/src/tasks.c **** 
1324:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:FreeRTOS/src/tasks.c **** 		have put ourselves to sleep. */
1326:FreeRTOS/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:FreeRTOS/src/tasks.c **** 		{
1328:FreeRTOS/src/tasks.c **** 			portYIELD_WITHIN_API();
1329:FreeRTOS/src/tasks.c **** 		}
1330:FreeRTOS/src/tasks.c **** 		else
1331:FreeRTOS/src/tasks.c **** 		{
1332:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:FreeRTOS/src/tasks.c **** 		}
1334:FreeRTOS/src/tasks.c **** 	}
1335:FreeRTOS/src/tasks.c **** 
1336:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1338:FreeRTOS/src/tasks.c **** 
1339:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:FreeRTOS/src/tasks.c **** 
1341:FreeRTOS/src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 25


1342:FreeRTOS/src/tasks.c **** 	{
1343:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:FreeRTOS/src/tasks.c **** 
1345:FreeRTOS/src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:FreeRTOS/src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:FreeRTOS/src/tasks.c **** 		{
1348:FreeRTOS/src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:FreeRTOS/src/tasks.c **** 			vTaskSuspendAll();
1350:FreeRTOS/src/tasks.c **** 			{
1351:FreeRTOS/src/tasks.c **** 				traceTASK_DELAY();
1352:FreeRTOS/src/tasks.c **** 
1353:FreeRTOS/src/tasks.c **** 				/* A task that is removed from the event list while the
1354:FreeRTOS/src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:FreeRTOS/src/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:FreeRTOS/src/tasks.c **** 				is resumed.
1357:FreeRTOS/src/tasks.c **** 
1358:FreeRTOS/src/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:FreeRTOS/src/tasks.c **** 				executing task. */
1360:FreeRTOS/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:FreeRTOS/src/tasks.c **** 			}
1362:FreeRTOS/src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:FreeRTOS/src/tasks.c **** 		}
1364:FreeRTOS/src/tasks.c **** 		else
1365:FreeRTOS/src/tasks.c **** 		{
1366:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:FreeRTOS/src/tasks.c **** 		}
1368:FreeRTOS/src/tasks.c **** 
1369:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:FreeRTOS/src/tasks.c **** 		have put ourselves to sleep. */
1371:FreeRTOS/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:FreeRTOS/src/tasks.c **** 		{
1373:FreeRTOS/src/tasks.c **** 			portYIELD_WITHIN_API();
1374:FreeRTOS/src/tasks.c **** 		}
1375:FreeRTOS/src/tasks.c **** 		else
1376:FreeRTOS/src/tasks.c **** 		{
1377:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:FreeRTOS/src/tasks.c **** 		}
1379:FreeRTOS/src/tasks.c **** 	}
1380:FreeRTOS/src/tasks.c **** 
1381:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1383:FreeRTOS/src/tasks.c **** 
1384:FreeRTOS/src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:FreeRTOS/src/tasks.c **** 
1386:FreeRTOS/src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:FreeRTOS/src/tasks.c **** 	{
1388:FreeRTOS/src/tasks.c **** 	eTaskState eReturn;
1389:FreeRTOS/src/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:FreeRTOS/src/tasks.c **** 
1392:FreeRTOS/src/tasks.c **** 		configASSERT( pxTCB );
1393:FreeRTOS/src/tasks.c **** 
1394:FreeRTOS/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:FreeRTOS/src/tasks.c **** 		{
1396:FreeRTOS/src/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:FreeRTOS/src/tasks.c **** 			eReturn = eRunning;
1398:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 26


1399:FreeRTOS/src/tasks.c **** 		else
1400:FreeRTOS/src/tasks.c **** 		{
1401:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1402:FreeRTOS/src/tasks.c **** 			{
1403:FreeRTOS/src/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:FreeRTOS/src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:FreeRTOS/src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:FreeRTOS/src/tasks.c **** 			}
1407:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1408:FreeRTOS/src/tasks.c **** 
1409:FreeRTOS/src/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:FreeRTOS/src/tasks.c **** 			{
1411:FreeRTOS/src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:FreeRTOS/src/tasks.c **** 				lists. */
1413:FreeRTOS/src/tasks.c **** 				eReturn = eBlocked;
1414:FreeRTOS/src/tasks.c **** 			}
1415:FreeRTOS/src/tasks.c **** 
1416:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:FreeRTOS/src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:FreeRTOS/src/tasks.c **** 				{
1419:FreeRTOS/src/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:FreeRTOS/src/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:FreeRTOS/src/tasks.c **** 					indefinitely? */
1422:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:FreeRTOS/src/tasks.c **** 					{
1424:FreeRTOS/src/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:FreeRTOS/src/tasks.c **** 						{
1426:FreeRTOS/src/tasks.c **** 							/* The task does not appear on the event list item of
1427:FreeRTOS/src/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:FreeRTOS/src/tasks.c **** 							blocked state if it is waiting on its notification
1429:FreeRTOS/src/tasks.c **** 							rather than waiting on an object. */
1430:FreeRTOS/src/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:FreeRTOS/src/tasks.c **** 							{
1432:FreeRTOS/src/tasks.c **** 								eReturn = eBlocked;
1433:FreeRTOS/src/tasks.c **** 							}
1434:FreeRTOS/src/tasks.c **** 							else
1435:FreeRTOS/src/tasks.c **** 							{
1436:FreeRTOS/src/tasks.c **** 								eReturn = eSuspended;
1437:FreeRTOS/src/tasks.c **** 							}
1438:FreeRTOS/src/tasks.c **** 						}
1439:FreeRTOS/src/tasks.c **** 						#else
1440:FreeRTOS/src/tasks.c **** 						{
1441:FreeRTOS/src/tasks.c **** 							eReturn = eSuspended;
1442:FreeRTOS/src/tasks.c **** 						}
1443:FreeRTOS/src/tasks.c **** 						#endif
1444:FreeRTOS/src/tasks.c **** 					}
1445:FreeRTOS/src/tasks.c **** 					else
1446:FreeRTOS/src/tasks.c **** 					{
1447:FreeRTOS/src/tasks.c **** 						eReturn = eBlocked;
1448:FreeRTOS/src/tasks.c **** 					}
1449:FreeRTOS/src/tasks.c **** 				}
1450:FreeRTOS/src/tasks.c **** 			#endif
1451:FreeRTOS/src/tasks.c **** 
1452:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:FreeRTOS/src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:FreeRTOS/src/tasks.c **** 				{
1455:FreeRTOS/src/tasks.c **** 					/* The task being queried is referenced from the deleted
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 27


1456:FreeRTOS/src/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:FreeRTOS/src/tasks.c **** 					all. */
1458:FreeRTOS/src/tasks.c **** 					eReturn = eDeleted;
1459:FreeRTOS/src/tasks.c **** 				}
1460:FreeRTOS/src/tasks.c **** 			#endif
1461:FreeRTOS/src/tasks.c **** 
1462:FreeRTOS/src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:FreeRTOS/src/tasks.c **** 			{
1464:FreeRTOS/src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:FreeRTOS/src/tasks.c **** 				Ready (including pending ready) state. */
1466:FreeRTOS/src/tasks.c **** 				eReturn = eReady;
1467:FreeRTOS/src/tasks.c **** 			}
1468:FreeRTOS/src/tasks.c **** 		}
1469:FreeRTOS/src/tasks.c **** 
1470:FreeRTOS/src/tasks.c **** 		return eReturn;
1471:FreeRTOS/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:FreeRTOS/src/tasks.c **** 
1473:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1475:FreeRTOS/src/tasks.c **** 
1476:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:FreeRTOS/src/tasks.c **** 
1478:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:FreeRTOS/src/tasks.c **** 	{
1480:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
1481:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
1482:FreeRTOS/src/tasks.c **** 
1483:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1484:FreeRTOS/src/tasks.c **** 		{
1485:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:FreeRTOS/src/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:FreeRTOS/src/tasks.c **** 		}
1490:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1491:FreeRTOS/src/tasks.c **** 
1492:FreeRTOS/src/tasks.c **** 		return uxReturn;
1493:FreeRTOS/src/tasks.c **** 	}
1494:FreeRTOS/src/tasks.c **** 
1495:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1497:FreeRTOS/src/tasks.c **** 
1498:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:FreeRTOS/src/tasks.c **** 
1500:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:FreeRTOS/src/tasks.c **** 	{
1502:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
1503:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:FreeRTOS/src/tasks.c **** 
1505:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 28


1513:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:FreeRTOS/src/tasks.c **** 		provided on the following link:
1520:FreeRTOS/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:FreeRTOS/src/tasks.c **** 
1523:FreeRTOS/src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:FreeRTOS/src/tasks.c **** 		{
1525:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:FreeRTOS/src/tasks.c **** 			task that is being queried. */
1527:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:FreeRTOS/src/tasks.c **** 		}
1530:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:FreeRTOS/src/tasks.c **** 
1532:FreeRTOS/src/tasks.c **** 		return uxReturn;
1533:FreeRTOS/src/tasks.c **** 	}
1534:FreeRTOS/src/tasks.c **** 
1535:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1537:FreeRTOS/src/tasks.c **** 
1538:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:FreeRTOS/src/tasks.c **** 
1540:FreeRTOS/src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:FreeRTOS/src/tasks.c **** 	{
1542:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1543:FreeRTOS/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:FreeRTOS/src/tasks.c **** 
1546:FreeRTOS/src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:FreeRTOS/src/tasks.c **** 
1548:FreeRTOS/src/tasks.c **** 		/* Ensure the new priority is valid. */
1549:FreeRTOS/src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:FreeRTOS/src/tasks.c **** 		{
1551:FreeRTOS/src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:FreeRTOS/src/tasks.c **** 		}
1553:FreeRTOS/src/tasks.c **** 		else
1554:FreeRTOS/src/tasks.c **** 		{
1555:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:FreeRTOS/src/tasks.c **** 		}
1557:FreeRTOS/src/tasks.c **** 
1558:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1559:FreeRTOS/src/tasks.c **** 		{
1560:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:FreeRTOS/src/tasks.c **** 			task that is being changed. */
1562:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:FreeRTOS/src/tasks.c **** 
1564:FreeRTOS/src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:FreeRTOS/src/tasks.c **** 
1566:FreeRTOS/src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:FreeRTOS/src/tasks.c **** 			{
1568:FreeRTOS/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:FreeRTOS/src/tasks.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 29


1570:FreeRTOS/src/tasks.c **** 			#else
1571:FreeRTOS/src/tasks.c **** 			{
1572:FreeRTOS/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:FreeRTOS/src/tasks.c **** 			}
1574:FreeRTOS/src/tasks.c **** 			#endif
1575:FreeRTOS/src/tasks.c **** 
1576:FreeRTOS/src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:FreeRTOS/src/tasks.c **** 			{
1578:FreeRTOS/src/tasks.c **** 				/* The priority change may have readied a task of higher
1579:FreeRTOS/src/tasks.c **** 				priority than the calling task. */
1580:FreeRTOS/src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:FreeRTOS/src/tasks.c **** 				{
1582:FreeRTOS/src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:FreeRTOS/src/tasks.c **** 					{
1584:FreeRTOS/src/tasks.c **** 						/* The priority of a task other than the currently
1585:FreeRTOS/src/tasks.c **** 						running task is being raised.  Is the priority being
1586:FreeRTOS/src/tasks.c **** 						raised above that of the running task? */
1587:FreeRTOS/src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:FreeRTOS/src/tasks.c **** 						{
1589:FreeRTOS/src/tasks.c **** 							xYieldRequired = pdTRUE;
1590:FreeRTOS/src/tasks.c **** 						}
1591:FreeRTOS/src/tasks.c **** 						else
1592:FreeRTOS/src/tasks.c **** 						{
1593:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:FreeRTOS/src/tasks.c **** 						}
1595:FreeRTOS/src/tasks.c **** 					}
1596:FreeRTOS/src/tasks.c **** 					else
1597:FreeRTOS/src/tasks.c **** 					{
1598:FreeRTOS/src/tasks.c **** 						/* The priority of the running task is being raised,
1599:FreeRTOS/src/tasks.c **** 						but the running task must already be the highest
1600:FreeRTOS/src/tasks.c **** 						priority task able to run so no yield is required. */
1601:FreeRTOS/src/tasks.c **** 					}
1602:FreeRTOS/src/tasks.c **** 				}
1603:FreeRTOS/src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:FreeRTOS/src/tasks.c **** 				{
1605:FreeRTOS/src/tasks.c **** 					/* Setting the priority of the running task down means
1606:FreeRTOS/src/tasks.c **** 					there may now be another task of higher priority that
1607:FreeRTOS/src/tasks.c **** 					is ready to execute. */
1608:FreeRTOS/src/tasks.c **** 					xYieldRequired = pdTRUE;
1609:FreeRTOS/src/tasks.c **** 				}
1610:FreeRTOS/src/tasks.c **** 				else
1611:FreeRTOS/src/tasks.c **** 				{
1612:FreeRTOS/src/tasks.c **** 					/* Setting the priority of any other task down does not
1613:FreeRTOS/src/tasks.c **** 					require a yield as the running task must be above the
1614:FreeRTOS/src/tasks.c **** 					new priority of the task being modified. */
1615:FreeRTOS/src/tasks.c **** 				}
1616:FreeRTOS/src/tasks.c **** 
1617:FreeRTOS/src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:FreeRTOS/src/tasks.c **** 				before its uxPriority member is changed so the
1619:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:FreeRTOS/src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:FreeRTOS/src/tasks.c **** 
1622:FreeRTOS/src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:FreeRTOS/src/tasks.c **** 				{
1624:FreeRTOS/src/tasks.c **** 					/* Only change the priority being used if the task is not
1625:FreeRTOS/src/tasks.c **** 					currently using an inherited priority. */
1626:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 30


1627:FreeRTOS/src/tasks.c **** 					{
1628:FreeRTOS/src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:FreeRTOS/src/tasks.c **** 					}
1630:FreeRTOS/src/tasks.c **** 					else
1631:FreeRTOS/src/tasks.c **** 					{
1632:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:FreeRTOS/src/tasks.c **** 					}
1634:FreeRTOS/src/tasks.c **** 
1635:FreeRTOS/src/tasks.c **** 					/* The base priority gets set whatever. */
1636:FreeRTOS/src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:FreeRTOS/src/tasks.c **** 				}
1638:FreeRTOS/src/tasks.c **** 				#else
1639:FreeRTOS/src/tasks.c **** 				{
1640:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:FreeRTOS/src/tasks.c **** 				}
1642:FreeRTOS/src/tasks.c **** 				#endif
1643:FreeRTOS/src/tasks.c **** 
1644:FreeRTOS/src/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:FreeRTOS/src/tasks.c **** 				being used for anything else. */
1646:FreeRTOS/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:FreeRTOS/src/tasks.c **** 				{
1648:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:FreeRTOS/src/tasks.c **** 				}
1650:FreeRTOS/src/tasks.c **** 				else
1651:FreeRTOS/src/tasks.c **** 				{
1652:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:FreeRTOS/src/tasks.c **** 				}
1654:FreeRTOS/src/tasks.c **** 
1655:FreeRTOS/src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:FreeRTOS/src/tasks.c **** 				nothing more than change its priority variable. However, if
1657:FreeRTOS/src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:FreeRTOS/src/tasks.c **** 				in the list appropriate to its new priority. */
1659:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:FreeRTOS/src/tasks.c **** 				{
1661:FreeRTOS/src/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:FreeRTOS/src/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:FreeRTOS/src/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:FreeRTOS/src/tasks.c **** 					{
1666:FreeRTOS/src/tasks.c **** 						/* It is known that the task is in its ready list so
1667:FreeRTOS/src/tasks.c **** 						there is no need to check again and the port level
1668:FreeRTOS/src/tasks.c **** 						reset macro can be called directly. */
1669:FreeRTOS/src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:FreeRTOS/src/tasks.c **** 					}
1671:FreeRTOS/src/tasks.c **** 					else
1672:FreeRTOS/src/tasks.c **** 					{
1673:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:FreeRTOS/src/tasks.c **** 					}
1675:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:FreeRTOS/src/tasks.c **** 				}
1677:FreeRTOS/src/tasks.c **** 				else
1678:FreeRTOS/src/tasks.c **** 				{
1679:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:FreeRTOS/src/tasks.c **** 				}
1681:FreeRTOS/src/tasks.c **** 
1682:FreeRTOS/src/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 31


1684:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:FreeRTOS/src/tasks.c **** 				}
1686:FreeRTOS/src/tasks.c **** 				else
1687:FreeRTOS/src/tasks.c **** 				{
1688:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:FreeRTOS/src/tasks.c **** 				}
1690:FreeRTOS/src/tasks.c **** 
1691:FreeRTOS/src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:FreeRTOS/src/tasks.c **** 				optimised task selection is not being used. */
1693:FreeRTOS/src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:FreeRTOS/src/tasks.c **** 			}
1695:FreeRTOS/src/tasks.c **** 		}
1696:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1697:FreeRTOS/src/tasks.c **** 	}
1698:FreeRTOS/src/tasks.c **** 
1699:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1701:FreeRTOS/src/tasks.c **** 
1702:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:FreeRTOS/src/tasks.c **** 
1704:FreeRTOS/src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:FreeRTOS/src/tasks.c **** 	{
1706:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1707:FreeRTOS/src/tasks.c **** 
1708:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1709:FreeRTOS/src/tasks.c **** 		{
1710:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:FreeRTOS/src/tasks.c **** 			being suspended. */
1712:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:FreeRTOS/src/tasks.c **** 
1714:FreeRTOS/src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:FreeRTOS/src/tasks.c **** 
1716:FreeRTOS/src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:FreeRTOS/src/tasks.c **** 			suspended list. */
1718:FreeRTOS/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:FreeRTOS/src/tasks.c **** 			{
1720:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:FreeRTOS/src/tasks.c **** 			}
1722:FreeRTOS/src/tasks.c **** 			else
1723:FreeRTOS/src/tasks.c **** 			{
1724:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:FreeRTOS/src/tasks.c **** 			}
1726:FreeRTOS/src/tasks.c **** 
1727:FreeRTOS/src/tasks.c **** 			/* Is the task waiting on an event also? */
1728:FreeRTOS/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:FreeRTOS/src/tasks.c **** 			{
1730:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:FreeRTOS/src/tasks.c **** 			}
1732:FreeRTOS/src/tasks.c **** 			else
1733:FreeRTOS/src/tasks.c **** 			{
1734:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:FreeRTOS/src/tasks.c **** 			}
1736:FreeRTOS/src/tasks.c **** 
1737:FreeRTOS/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:FreeRTOS/src/tasks.c **** 
1739:FreeRTOS/src/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 32


1741:FreeRTOS/src/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:FreeRTOS/src/tasks.c **** 				{
1743:FreeRTOS/src/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:FreeRTOS/src/tasks.c **** 					now suspended, so no notification was received. */
1745:FreeRTOS/src/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:FreeRTOS/src/tasks.c **** 				}
1747:FreeRTOS/src/tasks.c **** 			}
1748:FreeRTOS/src/tasks.c **** 			#endif
1749:FreeRTOS/src/tasks.c **** 		}
1750:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1751:FreeRTOS/src/tasks.c **** 
1752:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:FreeRTOS/src/tasks.c **** 		{
1754:FreeRTOS/src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:FreeRTOS/src/tasks.c **** 			task that is now in the Suspended state. */
1756:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1757:FreeRTOS/src/tasks.c **** 			{
1758:FreeRTOS/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:FreeRTOS/src/tasks.c **** 			}
1760:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1761:FreeRTOS/src/tasks.c **** 		}
1762:FreeRTOS/src/tasks.c **** 		else
1763:FreeRTOS/src/tasks.c **** 		{
1764:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:FreeRTOS/src/tasks.c **** 		}
1766:FreeRTOS/src/tasks.c **** 
1767:FreeRTOS/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:FreeRTOS/src/tasks.c **** 		{
1769:FreeRTOS/src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:FreeRTOS/src/tasks.c **** 			{
1771:FreeRTOS/src/tasks.c **** 				/* The current task has just been suspended. */
1772:FreeRTOS/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
1774:FreeRTOS/src/tasks.c **** 			}
1775:FreeRTOS/src/tasks.c **** 			else
1776:FreeRTOS/src/tasks.c **** 			{
1777:FreeRTOS/src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:FreeRTOS/src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:FreeRTOS/src/tasks.c **** 				must be adjusted to point to a different task. */
1780:FreeRTOS/src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:FreeRTOS/src/tasks.c **** 				{
1782:FreeRTOS/src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:FreeRTOS/src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:FreeRTOS/src/tasks.c **** 					be set to point to it no matter what its relative priority
1785:FreeRTOS/src/tasks.c **** 					is. */
1786:FreeRTOS/src/tasks.c **** 					pxCurrentTCB = NULL;
1787:FreeRTOS/src/tasks.c **** 				}
1788:FreeRTOS/src/tasks.c **** 				else
1789:FreeRTOS/src/tasks.c **** 				{
1790:FreeRTOS/src/tasks.c **** 					vTaskSwitchContext();
1791:FreeRTOS/src/tasks.c **** 				}
1792:FreeRTOS/src/tasks.c **** 			}
1793:FreeRTOS/src/tasks.c **** 		}
1794:FreeRTOS/src/tasks.c **** 		else
1795:FreeRTOS/src/tasks.c **** 		{
1796:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 33


1798:FreeRTOS/src/tasks.c **** 	}
1799:FreeRTOS/src/tasks.c **** 
1800:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1802:FreeRTOS/src/tasks.c **** 
1803:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:FreeRTOS/src/tasks.c **** 
1805:FreeRTOS/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:FreeRTOS/src/tasks.c **** 	{
  29              		.loc 1 1806 2 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1807:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1807 2 view .LVU1
1808:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1808 2 view .LVU2
1809:FreeRTOS/src/tasks.c **** 
1810:FreeRTOS/src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:FreeRTOS/src/tasks.c **** 		section. */
1812:FreeRTOS/src/tasks.c **** 
1813:FreeRTOS/src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:FreeRTOS/src/tasks.c **** 		configASSERT( xTask );
  36              		.loc 1 1814 24 view .LVU3
1815:FreeRTOS/src/tasks.c **** 
1816:FreeRTOS/src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:FreeRTOS/src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  37              		.loc 1 1817 3 view .LVU4
  38              		.loc 1 1817 7 is_stmt 0 view .LVU5
  39 0000 4269     		ldr	r2, [r0, #20]
  40              		.loc 1 1817 5 view .LVU6
  41 0002 084B     		ldr	r3, .L7
  42 0004 9A42     		cmp	r2, r3
  43 0006 01D0     		beq	.L6
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  44              		.loc 1 1807 13 view .LVU7
  45 0008 0020     		movs	r0, #0
  46              	.LVL1:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1807 13 view .LVU8
  48 000a 7047     		bx	lr
  49              	.LVL2:
  50              	.L6:
1818:FreeRTOS/src/tasks.c **** 		{
1819:FreeRTOS/src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:FreeRTOS/src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  51              		.loc 1 1820 4 is_stmt 1 view .LVU9
  52              		.loc 1 1820 8 is_stmt 0 view .LVU10
  53 000c 836A     		ldr	r3, [r0, #40]
  54              		.loc 1 1820 6 view .LVU11
  55 000e 064A     		ldr	r2, .L7+4
  56 0010 9342     		cmp	r3, r2
  57 0012 02D0     		beq	.L4
1821:FreeRTOS/src/tasks.c **** 			{
1822:FreeRTOS/src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:FreeRTOS/src/tasks.c **** 				state, or because is is blocked with no timeout? */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 34


1824:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  58              		.loc 1 1824 5 is_stmt 1 view .LVU12
  59              		.loc 1 1824 7 is_stmt 0 view .LVU13
  60 0014 1BB1     		cbz	r3, .L5
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  61              		.loc 1 1807 13 view .LVU14
  62 0016 0020     		movs	r0, #0
  63              	.LVL3:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  64              		.loc 1 1807 13 view .LVU15
  65 0018 7047     		bx	lr
  66              	.LVL4:
  67              	.L4:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  68              		.loc 1 1807 13 view .LVU16
  69 001a 0020     		movs	r0, #0
  70              	.LVL5:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  71              		.loc 1 1807 13 view .LVU17
  72 001c 7047     		bx	lr
  73              	.LVL6:
  74              	.L5:
1825:FreeRTOS/src/tasks.c **** 				{
1826:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
  75              		.loc 1 1826 14 view .LVU18
  76 001e 0120     		movs	r0, #1
  77              	.LVL7:
1827:FreeRTOS/src/tasks.c **** 				}
1828:FreeRTOS/src/tasks.c **** 				else
1829:FreeRTOS/src/tasks.c **** 				{
1830:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:FreeRTOS/src/tasks.c **** 				}
1832:FreeRTOS/src/tasks.c **** 			}
1833:FreeRTOS/src/tasks.c **** 			else
1834:FreeRTOS/src/tasks.c **** 			{
1835:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:FreeRTOS/src/tasks.c **** 			}
1837:FreeRTOS/src/tasks.c **** 		}
1838:FreeRTOS/src/tasks.c **** 		else
1839:FreeRTOS/src/tasks.c **** 		{
1840:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
  78              		.loc 1 1840 28 is_stmt 1 view .LVU19
1841:FreeRTOS/src/tasks.c **** 		}
1842:FreeRTOS/src/tasks.c **** 
1843:FreeRTOS/src/tasks.c **** 		return xReturn;
  79              		.loc 1 1843 3 view .LVU20
1844:FreeRTOS/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1844 2 is_stmt 0 view .LVU21
  81 0020 7047     		bx	lr
  82              	.L8:
  83 0022 00BF     		.align	2
  84              	.L7:
  85 0024 00000000 		.word	.LANCHOR0
  86 0028 00000000 		.word	.LANCHOR1
  87              		.cfi_endproc
  88              	.LFE13:
  90              		.section	.text.prvIdleTask,"ax",%progbits
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 35


  91              		.align	1
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	prvIdleTask:
  98              	.LFB36:
1845:FreeRTOS/src/tasks.c **** 
1846:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1848:FreeRTOS/src/tasks.c **** 
1849:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:FreeRTOS/src/tasks.c **** 
1851:FreeRTOS/src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:FreeRTOS/src/tasks.c **** 	{
1853:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:FreeRTOS/src/tasks.c **** 
1855:FreeRTOS/src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToResume );
1857:FreeRTOS/src/tasks.c **** 
1858:FreeRTOS/src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:FreeRTOS/src/tasks.c **** 		currently executing task. */
1860:FreeRTOS/src/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:FreeRTOS/src/tasks.c **** 		{
1862:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1863:FreeRTOS/src/tasks.c **** 			{
1864:FreeRTOS/src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:FreeRTOS/src/tasks.c **** 				{
1866:FreeRTOS/src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:FreeRTOS/src/tasks.c **** 
1868:FreeRTOS/src/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:FreeRTOS/src/tasks.c **** 					suspended because this is inside a critical section. */
1870:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:FreeRTOS/src/tasks.c **** 
1873:FreeRTOS/src/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:FreeRTOS/src/tasks.c **** 					{
1876:FreeRTOS/src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:FreeRTOS/src/tasks.c **** 						but will leave the lists in the correct state for the
1878:FreeRTOS/src/tasks.c **** 						next yield. */
1879:FreeRTOS/src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:FreeRTOS/src/tasks.c **** 					}
1881:FreeRTOS/src/tasks.c **** 					else
1882:FreeRTOS/src/tasks.c **** 					{
1883:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:FreeRTOS/src/tasks.c **** 					}
1885:FreeRTOS/src/tasks.c **** 				}
1886:FreeRTOS/src/tasks.c **** 				else
1887:FreeRTOS/src/tasks.c **** 				{
1888:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:FreeRTOS/src/tasks.c **** 				}
1890:FreeRTOS/src/tasks.c **** 			}
1891:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1892:FreeRTOS/src/tasks.c **** 		}
1893:FreeRTOS/src/tasks.c **** 		else
1894:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 36


1895:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:FreeRTOS/src/tasks.c **** 		}
1897:FreeRTOS/src/tasks.c **** 	}
1898:FreeRTOS/src/tasks.c **** 
1899:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:FreeRTOS/src/tasks.c **** 
1901:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1902:FreeRTOS/src/tasks.c **** 
1903:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:FreeRTOS/src/tasks.c **** 
1905:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:FreeRTOS/src/tasks.c **** 	{
1907:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:FreeRTOS/src/tasks.c **** 
1911:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToResume );
1912:FreeRTOS/src/tasks.c **** 
1913:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:FreeRTOS/src/tasks.c **** 		provided on the following link:
1928:FreeRTOS/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:FreeRTOS/src/tasks.c **** 
1931:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:FreeRTOS/src/tasks.c **** 		{
1933:FreeRTOS/src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:FreeRTOS/src/tasks.c **** 			{
1935:FreeRTOS/src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:FreeRTOS/src/tasks.c **** 
1937:FreeRTOS/src/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:FreeRTOS/src/tasks.c **** 				{
1940:FreeRTOS/src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:FreeRTOS/src/tasks.c **** 					suspended list to the ready list directly. */
1942:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:FreeRTOS/src/tasks.c **** 					{
1944:FreeRTOS/src/tasks.c **** 						xYieldRequired = pdTRUE;
1945:FreeRTOS/src/tasks.c **** 					}
1946:FreeRTOS/src/tasks.c **** 					else
1947:FreeRTOS/src/tasks.c **** 					{
1948:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:FreeRTOS/src/tasks.c **** 					}
1950:FreeRTOS/src/tasks.c **** 
1951:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 37


1952:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:FreeRTOS/src/tasks.c **** 				}
1954:FreeRTOS/src/tasks.c **** 				else
1955:FreeRTOS/src/tasks.c **** 				{
1956:FreeRTOS/src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:FreeRTOS/src/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:FreeRTOS/src/tasks.c **** 					unsuspended. */
1959:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:FreeRTOS/src/tasks.c **** 				}
1961:FreeRTOS/src/tasks.c **** 			}
1962:FreeRTOS/src/tasks.c **** 			else
1963:FreeRTOS/src/tasks.c **** 			{
1964:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:FreeRTOS/src/tasks.c **** 			}
1966:FreeRTOS/src/tasks.c **** 		}
1967:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:FreeRTOS/src/tasks.c **** 
1969:FreeRTOS/src/tasks.c **** 		return xYieldRequired;
1970:FreeRTOS/src/tasks.c **** 	}
1971:FreeRTOS/src/tasks.c **** 
1972:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1974:FreeRTOS/src/tasks.c **** 
1975:FreeRTOS/src/tasks.c **** void vTaskStartScheduler( void )
1976:FreeRTOS/src/tasks.c **** {
1977:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
1978:FreeRTOS/src/tasks.c **** 
1979:FreeRTOS/src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:FreeRTOS/src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:FreeRTOS/src/tasks.c **** 	{
1982:FreeRTOS/src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:FreeRTOS/src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:FreeRTOS/src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:FreeRTOS/src/tasks.c **** 
1986:FreeRTOS/src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:FreeRTOS/src/tasks.c **** 		address of the RAM then create the idle task. */
1988:FreeRTOS/src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:FreeRTOS/src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:FreeRTOS/src/tasks.c **** 												configIDLE_TASK_NAME,
1991:FreeRTOS/src/tasks.c **** 												ulIdleTaskStackSize,
1992:FreeRTOS/src/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:FreeRTOS/src/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:FreeRTOS/src/tasks.c **** 												pxIdleTaskStackBuffer,
1995:FreeRTOS/src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:FreeRTOS/src/tasks.c **** 
1997:FreeRTOS/src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:FreeRTOS/src/tasks.c **** 		{
1999:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
2000:FreeRTOS/src/tasks.c **** 		}
2001:FreeRTOS/src/tasks.c **** 		else
2002:FreeRTOS/src/tasks.c **** 		{
2003:FreeRTOS/src/tasks.c **** 			xReturn = pdFAIL;
2004:FreeRTOS/src/tasks.c **** 		}
2005:FreeRTOS/src/tasks.c **** 	}
2006:FreeRTOS/src/tasks.c **** 	#else
2007:FreeRTOS/src/tasks.c **** 	{
2008:FreeRTOS/src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 38


2009:FreeRTOS/src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
2011:FreeRTOS/src/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:FreeRTOS/src/tasks.c **** 								( void * ) NULL,
2013:FreeRTOS/src/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:FreeRTOS/src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:FreeRTOS/src/tasks.c **** 	}
2016:FreeRTOS/src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:FreeRTOS/src/tasks.c **** 
2018:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:FreeRTOS/src/tasks.c **** 	{
2020:FreeRTOS/src/tasks.c **** 		if( xReturn == pdPASS )
2021:FreeRTOS/src/tasks.c **** 		{
2022:FreeRTOS/src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:FreeRTOS/src/tasks.c **** 		}
2024:FreeRTOS/src/tasks.c **** 		else
2025:FreeRTOS/src/tasks.c **** 		{
2026:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:FreeRTOS/src/tasks.c **** 		}
2028:FreeRTOS/src/tasks.c **** 	}
2029:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:FreeRTOS/src/tasks.c **** 
2031:FreeRTOS/src/tasks.c **** 	if( xReturn == pdPASS )
2032:FreeRTOS/src/tasks.c **** 	{
2033:FreeRTOS/src/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:FreeRTOS/src/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:FreeRTOS/src/tasks.c **** 		the only macro called by the function. */
2036:FreeRTOS/src/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:FreeRTOS/src/tasks.c **** 		{
2038:FreeRTOS/src/tasks.c **** 			freertos_tasks_c_additions_init();
2039:FreeRTOS/src/tasks.c **** 		}
2040:FreeRTOS/src/tasks.c **** 		#endif
2041:FreeRTOS/src/tasks.c **** 
2042:FreeRTOS/src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:FreeRTOS/src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:FreeRTOS/src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:FreeRTOS/src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:FreeRTOS/src/tasks.c **** 		starts to run. */
2047:FreeRTOS/src/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:FreeRTOS/src/tasks.c **** 
2049:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:FreeRTOS/src/tasks.c **** 		{
2051:FreeRTOS/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:FreeRTOS/src/tasks.c **** 			structure specific to the task that will run first.
2053:FreeRTOS/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:FreeRTOS/src/tasks.c **** 			for additional information. */
2055:FreeRTOS/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:FreeRTOS/src/tasks.c **** 		}
2057:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:FreeRTOS/src/tasks.c **** 
2059:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:FreeRTOS/src/tasks.c **** 
2063:FreeRTOS/src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:FreeRTOS/src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:FreeRTOS/src/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 39


2066:FreeRTOS/src/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:FreeRTOS/src/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:FreeRTOS/src/tasks.c **** 		FreeRTOSConfig.h file. */
2069:FreeRTOS/src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:FreeRTOS/src/tasks.c **** 
2071:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:FreeRTOS/src/tasks.c **** 
2073:FreeRTOS/src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:FreeRTOS/src/tasks.c **** 		portable interface. */
2075:FreeRTOS/src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:FreeRTOS/src/tasks.c **** 		{
2077:FreeRTOS/src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:FreeRTOS/src/tasks.c **** 			function will not return. */
2079:FreeRTOS/src/tasks.c **** 		}
2080:FreeRTOS/src/tasks.c **** 		else
2081:FreeRTOS/src/tasks.c **** 		{
2082:FreeRTOS/src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:FreeRTOS/src/tasks.c **** 		}
2084:FreeRTOS/src/tasks.c **** 	}
2085:FreeRTOS/src/tasks.c **** 	else
2086:FreeRTOS/src/tasks.c **** 	{
2087:FreeRTOS/src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:FreeRTOS/src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:FreeRTOS/src/tasks.c **** 		or the timer task. */
2090:FreeRTOS/src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:FreeRTOS/src/tasks.c **** 	}
2092:FreeRTOS/src/tasks.c **** 
2093:FreeRTOS/src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:FreeRTOS/src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:FreeRTOS/src/tasks.c **** 	( void ) xIdleTaskHandle;
2096:FreeRTOS/src/tasks.c **** }
2097:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2098:FreeRTOS/src/tasks.c **** 
2099:FreeRTOS/src/tasks.c **** void vTaskEndScheduler( void )
2100:FreeRTOS/src/tasks.c **** {
2101:FreeRTOS/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:FreeRTOS/src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:FreeRTOS/src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:FreeRTOS/src/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:FreeRTOS/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
2107:FreeRTOS/src/tasks.c **** }
2108:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2109:FreeRTOS/src/tasks.c **** 
2110:FreeRTOS/src/tasks.c **** void vTaskSuspendAll( void )
2111:FreeRTOS/src/tasks.c **** {
2112:FreeRTOS/src/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:FreeRTOS/src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:FreeRTOS/src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:FreeRTOS/src/tasks.c **** 	http://goo.gl/wu4acr */
2116:FreeRTOS/src/tasks.c **** 
2117:FreeRTOS/src/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:FreeRTOS/src/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:FreeRTOS/src/tasks.c **** 	portSOFTWARE_BARRIER();
2120:FreeRTOS/src/tasks.c **** 
2121:FreeRTOS/src/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:FreeRTOS/src/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 40


2123:FreeRTOS/src/tasks.c **** 	++uxSchedulerSuspended;
2124:FreeRTOS/src/tasks.c **** 
2125:FreeRTOS/src/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:FreeRTOS/src/tasks.c **** 	the above increment elsewhere. */
2127:FreeRTOS/src/tasks.c **** 	portMEMORY_BARRIER();
2128:FreeRTOS/src/tasks.c **** }
2129:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2130:FreeRTOS/src/tasks.c **** 
2131:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:FreeRTOS/src/tasks.c **** 
2133:FreeRTOS/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:FreeRTOS/src/tasks.c **** 	{
2135:FreeRTOS/src/tasks.c **** 	TickType_t xReturn;
2136:FreeRTOS/src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:FreeRTOS/src/tasks.c **** 
2138:FreeRTOS/src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:FreeRTOS/src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:FreeRTOS/src/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:FreeRTOS/src/tasks.c **** 		running. */
2142:FreeRTOS/src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:FreeRTOS/src/tasks.c **** 		{
2144:FreeRTOS/src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:FreeRTOS/src/tasks.c **** 			{
2146:FreeRTOS/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:FreeRTOS/src/tasks.c **** 			}
2148:FreeRTOS/src/tasks.c **** 		}
2149:FreeRTOS/src/tasks.c **** 		#else
2150:FreeRTOS/src/tasks.c **** 		{
2151:FreeRTOS/src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:FreeRTOS/src/tasks.c **** 
2153:FreeRTOS/src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:FreeRTOS/src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:FreeRTOS/src/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:FreeRTOS/src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:FreeRTOS/src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:FreeRTOS/src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:FreeRTOS/src/tasks.c **** 			{
2160:FreeRTOS/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:FreeRTOS/src/tasks.c **** 			}
2162:FreeRTOS/src/tasks.c **** 		}
2163:FreeRTOS/src/tasks.c **** 		#endif
2164:FreeRTOS/src/tasks.c **** 
2165:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:FreeRTOS/src/tasks.c **** 		{
2167:FreeRTOS/src/tasks.c **** 			xReturn = 0;
2168:FreeRTOS/src/tasks.c **** 		}
2169:FreeRTOS/src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:FreeRTOS/src/tasks.c **** 		{
2171:FreeRTOS/src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:FreeRTOS/src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:FreeRTOS/src/tasks.c **** 			processed. */
2174:FreeRTOS/src/tasks.c **** 			xReturn = 0;
2175:FreeRTOS/src/tasks.c **** 		}
2176:FreeRTOS/src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:FreeRTOS/src/tasks.c **** 		{
2178:FreeRTOS/src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:FreeRTOS/src/tasks.c **** 			idle priority.  This path can only be reached if
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 41


2180:FreeRTOS/src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:FreeRTOS/src/tasks.c **** 			xReturn = 0;
2182:FreeRTOS/src/tasks.c **** 		}
2183:FreeRTOS/src/tasks.c **** 		else
2184:FreeRTOS/src/tasks.c **** 		{
2185:FreeRTOS/src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:FreeRTOS/src/tasks.c **** 		}
2187:FreeRTOS/src/tasks.c **** 
2188:FreeRTOS/src/tasks.c **** 		return xReturn;
2189:FreeRTOS/src/tasks.c **** 	}
2190:FreeRTOS/src/tasks.c **** 
2191:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2193:FreeRTOS/src/tasks.c **** 
2194:FreeRTOS/src/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:FreeRTOS/src/tasks.c **** {
2196:FreeRTOS/src/tasks.c **** TCB_t *pxTCB = NULL;
2197:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:FreeRTOS/src/tasks.c **** 
2199:FreeRTOS/src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:FreeRTOS/src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:FreeRTOS/src/tasks.c **** 
2203:FreeRTOS/src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:FreeRTOS/src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:FreeRTOS/src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:FreeRTOS/src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:FreeRTOS/src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
2209:FreeRTOS/src/tasks.c **** 	{
2210:FreeRTOS/src/tasks.c **** 		--uxSchedulerSuspended;
2211:FreeRTOS/src/tasks.c **** 
2212:FreeRTOS/src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:FreeRTOS/src/tasks.c **** 		{
2214:FreeRTOS/src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:FreeRTOS/src/tasks.c **** 			{
2216:FreeRTOS/src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:FreeRTOS/src/tasks.c **** 				appropriate ready list. */
2218:FreeRTOS/src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:FreeRTOS/src/tasks.c **** 				{
2220:FreeRTOS/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:FreeRTOS/src/tasks.c **** 
2225:FreeRTOS/src/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:FreeRTOS/src/tasks.c **** 					task then a yield must be performed. */
2227:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:FreeRTOS/src/tasks.c **** 					{
2229:FreeRTOS/src/tasks.c **** 						xYieldPending = pdTRUE;
2230:FreeRTOS/src/tasks.c **** 					}
2231:FreeRTOS/src/tasks.c **** 					else
2232:FreeRTOS/src/tasks.c **** 					{
2233:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:FreeRTOS/src/tasks.c **** 					}
2235:FreeRTOS/src/tasks.c **** 				}
2236:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 42


2237:FreeRTOS/src/tasks.c **** 				if( pxTCB != NULL )
2238:FreeRTOS/src/tasks.c **** 				{
2239:FreeRTOS/src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:FreeRTOS/src/tasks.c **** 					which may have prevented the next unblock time from being
2241:FreeRTOS/src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:FreeRTOS/src/tasks.c **** 					important for low power tickless implementations, where
2243:FreeRTOS/src/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:FreeRTOS/src/tasks.c **** 					state. */
2245:FreeRTOS/src/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:FreeRTOS/src/tasks.c **** 				}
2247:FreeRTOS/src/tasks.c **** 
2248:FreeRTOS/src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:FreeRTOS/src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:FreeRTOS/src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:FreeRTOS/src/tasks.c **** 				time. */
2252:FreeRTOS/src/tasks.c **** 				{
2253:FreeRTOS/src/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:FreeRTOS/src/tasks.c **** 
2255:FreeRTOS/src/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:FreeRTOS/src/tasks.c **** 					{
2257:FreeRTOS/src/tasks.c **** 						do
2258:FreeRTOS/src/tasks.c **** 						{
2259:FreeRTOS/src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:FreeRTOS/src/tasks.c **** 							{
2261:FreeRTOS/src/tasks.c **** 								xYieldPending = pdTRUE;
2262:FreeRTOS/src/tasks.c **** 							}
2263:FreeRTOS/src/tasks.c **** 							else
2264:FreeRTOS/src/tasks.c **** 							{
2265:FreeRTOS/src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:FreeRTOS/src/tasks.c **** 							}
2267:FreeRTOS/src/tasks.c **** 							--xPendedCounts;
2268:FreeRTOS/src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:FreeRTOS/src/tasks.c **** 
2270:FreeRTOS/src/tasks.c **** 						xPendedTicks = 0;
2271:FreeRTOS/src/tasks.c **** 					}
2272:FreeRTOS/src/tasks.c **** 					else
2273:FreeRTOS/src/tasks.c **** 					{
2274:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:FreeRTOS/src/tasks.c **** 					}
2276:FreeRTOS/src/tasks.c **** 				}
2277:FreeRTOS/src/tasks.c **** 
2278:FreeRTOS/src/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:FreeRTOS/src/tasks.c **** 				{
2280:FreeRTOS/src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:FreeRTOS/src/tasks.c **** 					{
2282:FreeRTOS/src/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:FreeRTOS/src/tasks.c **** 					}
2284:FreeRTOS/src/tasks.c **** 					#endif
2285:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:FreeRTOS/src/tasks.c **** 				}
2287:FreeRTOS/src/tasks.c **** 				else
2288:FreeRTOS/src/tasks.c **** 				{
2289:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:FreeRTOS/src/tasks.c **** 				}
2291:FreeRTOS/src/tasks.c **** 			}
2292:FreeRTOS/src/tasks.c **** 		}
2293:FreeRTOS/src/tasks.c **** 		else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 43


2294:FreeRTOS/src/tasks.c **** 		{
2295:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:FreeRTOS/src/tasks.c **** 		}
2297:FreeRTOS/src/tasks.c **** 	}
2298:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
2299:FreeRTOS/src/tasks.c **** 
2300:FreeRTOS/src/tasks.c **** 	return xAlreadyYielded;
2301:FreeRTOS/src/tasks.c **** }
2302:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2303:FreeRTOS/src/tasks.c **** 
2304:FreeRTOS/src/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:FreeRTOS/src/tasks.c **** {
2306:FreeRTOS/src/tasks.c **** TickType_t xTicks;
2307:FreeRTOS/src/tasks.c **** 
2308:FreeRTOS/src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:FreeRTOS/src/tasks.c **** 	{
2311:FreeRTOS/src/tasks.c **** 		xTicks = xTickCount;
2312:FreeRTOS/src/tasks.c **** 	}
2313:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:FreeRTOS/src/tasks.c **** 
2315:FreeRTOS/src/tasks.c **** 	return xTicks;
2316:FreeRTOS/src/tasks.c **** }
2317:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2318:FreeRTOS/src/tasks.c **** 
2319:FreeRTOS/src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:FreeRTOS/src/tasks.c **** {
2321:FreeRTOS/src/tasks.c **** TickType_t xReturn;
2322:FreeRTOS/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:FreeRTOS/src/tasks.c **** 
2324:FreeRTOS/src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:FreeRTOS/src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:FreeRTOS/src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:FreeRTOS/src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:FreeRTOS/src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:FreeRTOS/src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:FreeRTOS/src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:FreeRTOS/src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:FreeRTOS/src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:FreeRTOS/src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:FreeRTOS/src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:FreeRTOS/src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:FreeRTOS/src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:FreeRTOS/src/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:FreeRTOS/src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:FreeRTOS/src/tasks.c **** 
2340:FreeRTOS/src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:FreeRTOS/src/tasks.c **** 	{
2342:FreeRTOS/src/tasks.c **** 		xReturn = xTickCount;
2343:FreeRTOS/src/tasks.c **** 	}
2344:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:FreeRTOS/src/tasks.c **** 
2346:FreeRTOS/src/tasks.c **** 	return xReturn;
2347:FreeRTOS/src/tasks.c **** }
2348:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2349:FreeRTOS/src/tasks.c **** 
2350:FreeRTOS/src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 44


2351:FreeRTOS/src/tasks.c **** {
2352:FreeRTOS/src/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:FreeRTOS/src/tasks.c **** 	BaseType_t. */
2354:FreeRTOS/src/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:FreeRTOS/src/tasks.c **** }
2356:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2357:FreeRTOS/src/tasks.c **** 
2358:FreeRTOS/src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:FreeRTOS/src/tasks.c **** {
2360:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
2361:FreeRTOS/src/tasks.c **** 
2362:FreeRTOS/src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:FreeRTOS/src/tasks.c **** 	queried. */
2364:FreeRTOS/src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
2366:FreeRTOS/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:FreeRTOS/src/tasks.c **** }
2368:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2369:FreeRTOS/src/tasks.c **** 
2370:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:FreeRTOS/src/tasks.c **** 
2372:FreeRTOS/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:FreeRTOS/src/tasks.c **** 	{
2374:FreeRTOS/src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:FreeRTOS/src/tasks.c **** 	UBaseType_t x;
2376:FreeRTOS/src/tasks.c **** 	char cNextChar;
2377:FreeRTOS/src/tasks.c **** 	BaseType_t xBreakLoop;
2378:FreeRTOS/src/tasks.c **** 
2379:FreeRTOS/src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:FreeRTOS/src/tasks.c **** 
2381:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:FreeRTOS/src/tasks.c **** 		{
2383:FreeRTOS/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:FreeRTOS/src/tasks.c **** 
2385:FreeRTOS/src/tasks.c **** 			do
2386:FreeRTOS/src/tasks.c **** 			{
2387:FreeRTOS/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:FreeRTOS/src/tasks.c **** 
2389:FreeRTOS/src/tasks.c **** 				/* Check each character in the name looking for a match or
2390:FreeRTOS/src/tasks.c **** 				mismatch. */
2391:FreeRTOS/src/tasks.c **** 				xBreakLoop = pdFALSE;
2392:FreeRTOS/src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:FreeRTOS/src/tasks.c **** 				{
2394:FreeRTOS/src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:FreeRTOS/src/tasks.c **** 
2396:FreeRTOS/src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:FreeRTOS/src/tasks.c **** 					{
2398:FreeRTOS/src/tasks.c **** 						/* Characters didn't match. */
2399:FreeRTOS/src/tasks.c **** 						xBreakLoop = pdTRUE;
2400:FreeRTOS/src/tasks.c **** 					}
2401:FreeRTOS/src/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:FreeRTOS/src/tasks.c **** 					{
2403:FreeRTOS/src/tasks.c **** 						/* Both strings terminated, a match must have been
2404:FreeRTOS/src/tasks.c **** 						found. */
2405:FreeRTOS/src/tasks.c **** 						pxReturn = pxNextTCB;
2406:FreeRTOS/src/tasks.c **** 						xBreakLoop = pdTRUE;
2407:FreeRTOS/src/tasks.c **** 					}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 45


2408:FreeRTOS/src/tasks.c **** 					else
2409:FreeRTOS/src/tasks.c **** 					{
2410:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:FreeRTOS/src/tasks.c **** 					}
2412:FreeRTOS/src/tasks.c **** 
2413:FreeRTOS/src/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:FreeRTOS/src/tasks.c **** 					{
2415:FreeRTOS/src/tasks.c **** 						break;
2416:FreeRTOS/src/tasks.c **** 					}
2417:FreeRTOS/src/tasks.c **** 				}
2418:FreeRTOS/src/tasks.c **** 
2419:FreeRTOS/src/tasks.c **** 				if( pxReturn != NULL )
2420:FreeRTOS/src/tasks.c **** 				{
2421:FreeRTOS/src/tasks.c **** 					/* The handle has been found. */
2422:FreeRTOS/src/tasks.c **** 					break;
2423:FreeRTOS/src/tasks.c **** 				}
2424:FreeRTOS/src/tasks.c **** 
2425:FreeRTOS/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:FreeRTOS/src/tasks.c **** 		}
2427:FreeRTOS/src/tasks.c **** 		else
2428:FreeRTOS/src/tasks.c **** 		{
2429:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:FreeRTOS/src/tasks.c **** 		}
2431:FreeRTOS/src/tasks.c **** 
2432:FreeRTOS/src/tasks.c **** 		return pxReturn;
2433:FreeRTOS/src/tasks.c **** 	}
2434:FreeRTOS/src/tasks.c **** 
2435:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2437:FreeRTOS/src/tasks.c **** 
2438:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:FreeRTOS/src/tasks.c **** 
2440:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:FreeRTOS/src/tasks.c **** 	{
2442:FreeRTOS/src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:FreeRTOS/src/tasks.c **** 	TCB_t* pxTCB;
2444:FreeRTOS/src/tasks.c **** 
2445:FreeRTOS/src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:FreeRTOS/src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:FreeRTOS/src/tasks.c **** 
2448:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2449:FreeRTOS/src/tasks.c **** 		{
2450:FreeRTOS/src/tasks.c **** 			/* Search the ready lists. */
2451:FreeRTOS/src/tasks.c **** 			do
2452:FreeRTOS/src/tasks.c **** 			{
2453:FreeRTOS/src/tasks.c **** 				uxQueue--;
2454:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:FreeRTOS/src/tasks.c **** 
2456:FreeRTOS/src/tasks.c **** 				if( pxTCB != NULL )
2457:FreeRTOS/src/tasks.c **** 				{
2458:FreeRTOS/src/tasks.c **** 					/* Found the handle. */
2459:FreeRTOS/src/tasks.c **** 					break;
2460:FreeRTOS/src/tasks.c **** 				}
2461:FreeRTOS/src/tasks.c **** 
2462:FreeRTOS/src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:FreeRTOS/src/tasks.c **** 
2464:FreeRTOS/src/tasks.c **** 			/* Search the delayed lists. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 46


2465:FreeRTOS/src/tasks.c **** 			if( pxTCB == NULL )
2466:FreeRTOS/src/tasks.c **** 			{
2467:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:FreeRTOS/src/tasks.c **** 			}
2469:FreeRTOS/src/tasks.c **** 
2470:FreeRTOS/src/tasks.c **** 			if( pxTCB == NULL )
2471:FreeRTOS/src/tasks.c **** 			{
2472:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:FreeRTOS/src/tasks.c **** 			}
2474:FreeRTOS/src/tasks.c **** 
2475:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:FreeRTOS/src/tasks.c **** 			{
2477:FreeRTOS/src/tasks.c **** 				if( pxTCB == NULL )
2478:FreeRTOS/src/tasks.c **** 				{
2479:FreeRTOS/src/tasks.c **** 					/* Search the suspended list. */
2480:FreeRTOS/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:FreeRTOS/src/tasks.c **** 				}
2482:FreeRTOS/src/tasks.c **** 			}
2483:FreeRTOS/src/tasks.c **** 			#endif
2484:FreeRTOS/src/tasks.c **** 
2485:FreeRTOS/src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:FreeRTOS/src/tasks.c **** 			{
2487:FreeRTOS/src/tasks.c **** 				if( pxTCB == NULL )
2488:FreeRTOS/src/tasks.c **** 				{
2489:FreeRTOS/src/tasks.c **** 					/* Search the deleted list. */
2490:FreeRTOS/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:FreeRTOS/src/tasks.c **** 				}
2492:FreeRTOS/src/tasks.c **** 			}
2493:FreeRTOS/src/tasks.c **** 			#endif
2494:FreeRTOS/src/tasks.c **** 		}
2495:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2496:FreeRTOS/src/tasks.c **** 
2497:FreeRTOS/src/tasks.c **** 		return pxTCB;
2498:FreeRTOS/src/tasks.c **** 	}
2499:FreeRTOS/src/tasks.c **** 
2500:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2502:FreeRTOS/src/tasks.c **** 
2503:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:FreeRTOS/src/tasks.c **** 
2505:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:FreeRTOS/src/tasks.c **** 	{
2507:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:FreeRTOS/src/tasks.c **** 
2509:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2510:FreeRTOS/src/tasks.c **** 		{
2511:FreeRTOS/src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:FreeRTOS/src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:FreeRTOS/src/tasks.c **** 			{
2514:FreeRTOS/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:FreeRTOS/src/tasks.c **** 				task in the Ready state. */
2516:FreeRTOS/src/tasks.c **** 				do
2517:FreeRTOS/src/tasks.c **** 				{
2518:FreeRTOS/src/tasks.c **** 					uxQueue--;
2519:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:FreeRTOS/src/tasks.c **** 
2521:FreeRTOS/src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 47


2522:FreeRTOS/src/tasks.c **** 
2523:FreeRTOS/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:FreeRTOS/src/tasks.c **** 				task in the Blocked state. */
2525:FreeRTOS/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:FreeRTOS/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:FreeRTOS/src/tasks.c **** 
2528:FreeRTOS/src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:FreeRTOS/src/tasks.c **** 				{
2530:FreeRTOS/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:FreeRTOS/src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:FreeRTOS/src/tasks.c **** 				}
2534:FreeRTOS/src/tasks.c **** 				#endif
2535:FreeRTOS/src/tasks.c **** 
2536:FreeRTOS/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:FreeRTOS/src/tasks.c **** 				{
2538:FreeRTOS/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:FreeRTOS/src/tasks.c **** 					each task in the Suspended state. */
2540:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:FreeRTOS/src/tasks.c **** 				}
2542:FreeRTOS/src/tasks.c **** 				#endif
2543:FreeRTOS/src/tasks.c **** 
2544:FreeRTOS/src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:FreeRTOS/src/tasks.c **** 				{
2546:FreeRTOS/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:FreeRTOS/src/tasks.c **** 					{
2548:FreeRTOS/src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:FreeRTOS/src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:FreeRTOS/src/tasks.c **** 						#else
2551:FreeRTOS/src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:FreeRTOS/src/tasks.c **** 						#endif
2553:FreeRTOS/src/tasks.c **** 					}
2554:FreeRTOS/src/tasks.c **** 				}
2555:FreeRTOS/src/tasks.c **** 				#else
2556:FreeRTOS/src/tasks.c **** 				{
2557:FreeRTOS/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:FreeRTOS/src/tasks.c **** 					{
2559:FreeRTOS/src/tasks.c **** 						*pulTotalRunTime = 0;
2560:FreeRTOS/src/tasks.c **** 					}
2561:FreeRTOS/src/tasks.c **** 				}
2562:FreeRTOS/src/tasks.c **** 				#endif
2563:FreeRTOS/src/tasks.c **** 			}
2564:FreeRTOS/src/tasks.c **** 			else
2565:FreeRTOS/src/tasks.c **** 			{
2566:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:FreeRTOS/src/tasks.c **** 			}
2568:FreeRTOS/src/tasks.c **** 		}
2569:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2570:FreeRTOS/src/tasks.c **** 
2571:FreeRTOS/src/tasks.c **** 		return uxTask;
2572:FreeRTOS/src/tasks.c **** 	}
2573:FreeRTOS/src/tasks.c **** 
2574:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2576:FreeRTOS/src/tasks.c **** 
2577:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 48


2579:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:FreeRTOS/src/tasks.c **** 	{
2581:FreeRTOS/src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:FreeRTOS/src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:FreeRTOS/src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:FreeRTOS/src/tasks.c **** 		return xIdleTaskHandle;
2585:FreeRTOS/src/tasks.c **** 	}
2586:FreeRTOS/src/tasks.c **** 
2587:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2589:FreeRTOS/src/tasks.c **** 
2590:FreeRTOS/src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:FreeRTOS/src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:FreeRTOS/src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:FreeRTOS/src/tasks.c **** 1. */
2594:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:FreeRTOS/src/tasks.c **** 
2596:FreeRTOS/src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:FreeRTOS/src/tasks.c **** 	{
2598:FreeRTOS/src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:FreeRTOS/src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:FreeRTOS/src/tasks.c **** 		each stepped tick. */
2601:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:FreeRTOS/src/tasks.c **** 		xTickCount += xTicksToJump;
2603:FreeRTOS/src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:FreeRTOS/src/tasks.c **** 	}
2605:FreeRTOS/src/tasks.c **** 
2606:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2608:FreeRTOS/src/tasks.c **** 
2609:FreeRTOS/src/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:FreeRTOS/src/tasks.c **** {
2611:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:FreeRTOS/src/tasks.c **** 
2613:FreeRTOS/src/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:FreeRTOS/src/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:FreeRTOS/src/tasks.c **** 
2617:FreeRTOS/src/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:FreeRTOS/src/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:FreeRTOS/src/tasks.c **** 	vTaskSuspendAll();
2620:FreeRTOS/src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:FreeRTOS/src/tasks.c **** 
2623:FreeRTOS/src/tasks.c **** 	return xYieldRequired;
2624:FreeRTOS/src/tasks.c **** }
2625:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2626:FreeRTOS/src/tasks.c **** 
2627:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:FreeRTOS/src/tasks.c **** 
2629:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:FreeRTOS/src/tasks.c **** 	{
2631:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
2633:FreeRTOS/src/tasks.c **** 
2634:FreeRTOS/src/tasks.c **** 		configASSERT( pxTCB );
2635:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 49


2636:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2637:FreeRTOS/src/tasks.c **** 		{
2638:FreeRTOS/src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:FreeRTOS/src/tasks.c **** 			it is actually in the Blocked state. */
2640:FreeRTOS/src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:FreeRTOS/src/tasks.c **** 			{
2642:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
2643:FreeRTOS/src/tasks.c **** 
2644:FreeRTOS/src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:FreeRTOS/src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:FreeRTOS/src/tasks.c **** 				scheduler is suspended. */
2647:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:FreeRTOS/src/tasks.c **** 
2649:FreeRTOS/src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:FreeRTOS/src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:FreeRTOS/src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:FreeRTOS/src/tasks.c **** 				is used. */
2653:FreeRTOS/src/tasks.c **** 				taskENTER_CRITICAL();
2654:FreeRTOS/src/tasks.c **** 				{
2655:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:FreeRTOS/src/tasks.c **** 					{
2657:FreeRTOS/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:FreeRTOS/src/tasks.c **** 
2659:FreeRTOS/src/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:FreeRTOS/src/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:FreeRTOS/src/tasks.c **** 						then block again. */
2662:FreeRTOS/src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:FreeRTOS/src/tasks.c **** 					}
2664:FreeRTOS/src/tasks.c **** 					else
2665:FreeRTOS/src/tasks.c **** 					{
2666:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:FreeRTOS/src/tasks.c **** 					}
2668:FreeRTOS/src/tasks.c **** 				}
2669:FreeRTOS/src/tasks.c **** 				taskEXIT_CRITICAL();
2670:FreeRTOS/src/tasks.c **** 
2671:FreeRTOS/src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:FreeRTOS/src/tasks.c **** 
2674:FreeRTOS/src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:FreeRTOS/src/tasks.c **** 				switch if preemption is turned off. */
2676:FreeRTOS/src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:FreeRTOS/src/tasks.c **** 				{
2678:FreeRTOS/src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:FreeRTOS/src/tasks.c **** 					performed if the unblocked task has a priority that is
2680:FreeRTOS/src/tasks.c **** 					equal to or higher than the currently executing task. */
2681:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:FreeRTOS/src/tasks.c **** 					{
2683:FreeRTOS/src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:FreeRTOS/src/tasks.c **** 						is unsuspended. */
2685:FreeRTOS/src/tasks.c **** 						xYieldPending = pdTRUE;
2686:FreeRTOS/src/tasks.c **** 					}
2687:FreeRTOS/src/tasks.c **** 					else
2688:FreeRTOS/src/tasks.c **** 					{
2689:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:FreeRTOS/src/tasks.c **** 					}
2691:FreeRTOS/src/tasks.c **** 				}
2692:FreeRTOS/src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 50


2693:FreeRTOS/src/tasks.c **** 			}
2694:FreeRTOS/src/tasks.c **** 			else
2695:FreeRTOS/src/tasks.c **** 			{
2696:FreeRTOS/src/tasks.c **** 				xReturn = pdFAIL;
2697:FreeRTOS/src/tasks.c **** 			}
2698:FreeRTOS/src/tasks.c **** 		}
2699:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2700:FreeRTOS/src/tasks.c **** 
2701:FreeRTOS/src/tasks.c **** 		return xReturn;
2702:FreeRTOS/src/tasks.c **** 	}
2703:FreeRTOS/src/tasks.c **** 
2704:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2706:FreeRTOS/src/tasks.c **** 
2707:FreeRTOS/src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:FreeRTOS/src/tasks.c **** {
2709:FreeRTOS/src/tasks.c **** TCB_t * pxTCB;
2710:FreeRTOS/src/tasks.c **** TickType_t xItemValue;
2711:FreeRTOS/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:FreeRTOS/src/tasks.c **** 
2713:FreeRTOS/src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:FreeRTOS/src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:FreeRTOS/src/tasks.c **** 	tasks to be unblocked. */
2716:FreeRTOS/src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:FreeRTOS/src/tasks.c **** 	{
2719:FreeRTOS/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:FreeRTOS/src/tasks.c **** 		block. */
2721:FreeRTOS/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:FreeRTOS/src/tasks.c **** 
2723:FreeRTOS/src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:FreeRTOS/src/tasks.c **** 		delayed lists if it wraps to 0. */
2725:FreeRTOS/src/tasks.c **** 		xTickCount = xConstTickCount;
2726:FreeRTOS/src/tasks.c **** 
2727:FreeRTOS/src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:FreeRTOS/src/tasks.c **** 		{
2729:FreeRTOS/src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:FreeRTOS/src/tasks.c **** 		}
2731:FreeRTOS/src/tasks.c **** 		else
2732:FreeRTOS/src/tasks.c **** 		{
2733:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:FreeRTOS/src/tasks.c **** 		}
2735:FreeRTOS/src/tasks.c **** 
2736:FreeRTOS/src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:FreeRTOS/src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:FreeRTOS/src/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:FreeRTOS/src/tasks.c **** 		look any further down the list. */
2740:FreeRTOS/src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:FreeRTOS/src/tasks.c **** 		{
2742:FreeRTOS/src/tasks.c **** 			for( ;; )
2743:FreeRTOS/src/tasks.c **** 			{
2744:FreeRTOS/src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:FreeRTOS/src/tasks.c **** 				{
2746:FreeRTOS/src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:FreeRTOS/src/tasks.c **** 					to the maximum possible value so it is extremely
2748:FreeRTOS/src/tasks.c **** 					unlikely that the
2749:FreeRTOS/src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 51


2750:FreeRTOS/src/tasks.c **** 					next time through. */
2751:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:FreeRTOS/src/tasks.c **** 					break;
2753:FreeRTOS/src/tasks.c **** 				}
2754:FreeRTOS/src/tasks.c **** 				else
2755:FreeRTOS/src/tasks.c **** 				{
2756:FreeRTOS/src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:FreeRTOS/src/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:FreeRTOS/src/tasks.c **** 					at which the task at the head of the delayed list must
2759:FreeRTOS/src/tasks.c **** 					be removed from the Blocked state. */
2760:FreeRTOS/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:FreeRTOS/src/tasks.c **** 
2763:FreeRTOS/src/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:FreeRTOS/src/tasks.c **** 					{
2765:FreeRTOS/src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:FreeRTOS/src/tasks.c **** 						item value is the time at which the task at the head
2767:FreeRTOS/src/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:FreeRTOS/src/tasks.c **** 						state -	so record the item value in
2769:FreeRTOS/src/tasks.c **** 						xNextTaskUnblockTime. */
2770:FreeRTOS/src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:FreeRTOS/src/tasks.c **** 					}
2773:FreeRTOS/src/tasks.c **** 					else
2774:FreeRTOS/src/tasks.c **** 					{
2775:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:FreeRTOS/src/tasks.c **** 					}
2777:FreeRTOS/src/tasks.c **** 
2778:FreeRTOS/src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:FreeRTOS/src/tasks.c **** 
2781:FreeRTOS/src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:FreeRTOS/src/tasks.c **** 					it from the event list. */
2783:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:FreeRTOS/src/tasks.c **** 					{
2785:FreeRTOS/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:FreeRTOS/src/tasks.c **** 					}
2787:FreeRTOS/src/tasks.c **** 					else
2788:FreeRTOS/src/tasks.c **** 					{
2789:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:FreeRTOS/src/tasks.c **** 					}
2791:FreeRTOS/src/tasks.c **** 
2792:FreeRTOS/src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:FreeRTOS/src/tasks.c **** 					list. */
2794:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:FreeRTOS/src/tasks.c **** 
2796:FreeRTOS/src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:FreeRTOS/src/tasks.c **** 					context switch if preemption is turned off. */
2798:FreeRTOS/src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:FreeRTOS/src/tasks.c **** 					{
2800:FreeRTOS/src/tasks.c **** 						/* Preemption is on, but a context switch should
2801:FreeRTOS/src/tasks.c **** 						only be performed if the unblocked task has a
2802:FreeRTOS/src/tasks.c **** 						priority that is equal to or higher than the
2803:FreeRTOS/src/tasks.c **** 						currently executing task. */
2804:FreeRTOS/src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:FreeRTOS/src/tasks.c **** 						{
2806:FreeRTOS/src/tasks.c **** 							xSwitchRequired = pdTRUE;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 52


2807:FreeRTOS/src/tasks.c **** 						}
2808:FreeRTOS/src/tasks.c **** 						else
2809:FreeRTOS/src/tasks.c **** 						{
2810:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:FreeRTOS/src/tasks.c **** 						}
2812:FreeRTOS/src/tasks.c **** 					}
2813:FreeRTOS/src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:FreeRTOS/src/tasks.c **** 				}
2815:FreeRTOS/src/tasks.c **** 			}
2816:FreeRTOS/src/tasks.c **** 		}
2817:FreeRTOS/src/tasks.c **** 
2818:FreeRTOS/src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:FreeRTOS/src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:FreeRTOS/src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:FreeRTOS/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:FreeRTOS/src/tasks.c **** 		{
2823:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:FreeRTOS/src/tasks.c **** 			{
2825:FreeRTOS/src/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:FreeRTOS/src/tasks.c **** 			}
2827:FreeRTOS/src/tasks.c **** 			else
2828:FreeRTOS/src/tasks.c **** 			{
2829:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:FreeRTOS/src/tasks.c **** 			}
2831:FreeRTOS/src/tasks.c **** 		}
2832:FreeRTOS/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:FreeRTOS/src/tasks.c **** 
2834:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:FreeRTOS/src/tasks.c **** 		{
2836:FreeRTOS/src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:FreeRTOS/src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:FreeRTOS/src/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:FreeRTOS/src/tasks.c **** 			{
2840:FreeRTOS/src/tasks.c **** 				vApplicationTickHook();
2841:FreeRTOS/src/tasks.c **** 			}
2842:FreeRTOS/src/tasks.c **** 			else
2843:FreeRTOS/src/tasks.c **** 			{
2844:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:FreeRTOS/src/tasks.c **** 			}
2846:FreeRTOS/src/tasks.c **** 		}
2847:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:FreeRTOS/src/tasks.c **** 
2849:FreeRTOS/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:FreeRTOS/src/tasks.c **** 		{
2851:FreeRTOS/src/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:FreeRTOS/src/tasks.c **** 			{
2853:FreeRTOS/src/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:FreeRTOS/src/tasks.c **** 			}
2855:FreeRTOS/src/tasks.c **** 			else
2856:FreeRTOS/src/tasks.c **** 			{
2857:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:FreeRTOS/src/tasks.c **** 			}
2859:FreeRTOS/src/tasks.c **** 		}
2860:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:FreeRTOS/src/tasks.c **** 	}
2862:FreeRTOS/src/tasks.c **** 	else
2863:FreeRTOS/src/tasks.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 53


2864:FreeRTOS/src/tasks.c **** 		++xPendedTicks;
2865:FreeRTOS/src/tasks.c **** 
2866:FreeRTOS/src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:FreeRTOS/src/tasks.c **** 		scheduler is locked. */
2868:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:FreeRTOS/src/tasks.c **** 		{
2870:FreeRTOS/src/tasks.c **** 			vApplicationTickHook();
2871:FreeRTOS/src/tasks.c **** 		}
2872:FreeRTOS/src/tasks.c **** 		#endif
2873:FreeRTOS/src/tasks.c **** 	}
2874:FreeRTOS/src/tasks.c **** 
2875:FreeRTOS/src/tasks.c **** 	return xSwitchRequired;
2876:FreeRTOS/src/tasks.c **** }
2877:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2878:FreeRTOS/src/tasks.c **** 
2879:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:FreeRTOS/src/tasks.c **** 
2881:FreeRTOS/src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:FreeRTOS/src/tasks.c **** 	{
2883:FreeRTOS/src/tasks.c **** 	TCB_t *xTCB;
2884:FreeRTOS/src/tasks.c **** 
2885:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:FreeRTOS/src/tasks.c **** 		getting set. */
2887:FreeRTOS/src/tasks.c **** 		if( xTask == NULL )
2888:FreeRTOS/src/tasks.c **** 		{
2889:FreeRTOS/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:FreeRTOS/src/tasks.c **** 		}
2891:FreeRTOS/src/tasks.c **** 		else
2892:FreeRTOS/src/tasks.c **** 		{
2893:FreeRTOS/src/tasks.c **** 			xTCB = xTask;
2894:FreeRTOS/src/tasks.c **** 		}
2895:FreeRTOS/src/tasks.c **** 
2896:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2898:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
2899:FreeRTOS/src/tasks.c **** 		{
2900:FreeRTOS/src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:FreeRTOS/src/tasks.c **** 		}
2902:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
2903:FreeRTOS/src/tasks.c **** 	}
2904:FreeRTOS/src/tasks.c **** 
2905:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2907:FreeRTOS/src/tasks.c **** 
2908:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:FreeRTOS/src/tasks.c **** 
2910:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:FreeRTOS/src/tasks.c **** 	{
2912:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
2913:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xReturn;
2914:FreeRTOS/src/tasks.c **** 
2915:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:FreeRTOS/src/tasks.c **** 
2918:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2920:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 54


2921:FreeRTOS/src/tasks.c **** 		{
2922:FreeRTOS/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:FreeRTOS/src/tasks.c **** 		}
2924:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
2925:FreeRTOS/src/tasks.c **** 
2926:FreeRTOS/src/tasks.c **** 		return xReturn;
2927:FreeRTOS/src/tasks.c **** 	}
2928:FreeRTOS/src/tasks.c **** 
2929:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2931:FreeRTOS/src/tasks.c **** 
2932:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:FreeRTOS/src/tasks.c **** 
2934:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:FreeRTOS/src/tasks.c **** 	{
2936:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
2937:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xReturn;
2938:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:FreeRTOS/src/tasks.c **** 
2940:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:FreeRTOS/src/tasks.c **** 
2943:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2945:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:FreeRTOS/src/tasks.c **** 		{
2947:FreeRTOS/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:FreeRTOS/src/tasks.c **** 		}
2949:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:FreeRTOS/src/tasks.c **** 
2951:FreeRTOS/src/tasks.c **** 		return xReturn;
2952:FreeRTOS/src/tasks.c **** 	}
2953:FreeRTOS/src/tasks.c **** 
2954:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2956:FreeRTOS/src/tasks.c **** 
2957:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:FreeRTOS/src/tasks.c **** 
2959:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:FreeRTOS/src/tasks.c **** 	{
2961:FreeRTOS/src/tasks.c **** 	TCB_t *xTCB;
2962:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
2963:FreeRTOS/src/tasks.c **** 
2964:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:FreeRTOS/src/tasks.c **** 		if( xTask == NULL )
2966:FreeRTOS/src/tasks.c **** 		{
2967:FreeRTOS/src/tasks.c **** 			xTCB = pxCurrentTCB;
2968:FreeRTOS/src/tasks.c **** 		}
2969:FreeRTOS/src/tasks.c **** 		else
2970:FreeRTOS/src/tasks.c **** 		{
2971:FreeRTOS/src/tasks.c **** 			xTCB = xTask;
2972:FreeRTOS/src/tasks.c **** 		}
2973:FreeRTOS/src/tasks.c **** 
2974:FreeRTOS/src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:FreeRTOS/src/tasks.c **** 		{
2976:FreeRTOS/src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 55


2978:FreeRTOS/src/tasks.c **** 		else
2979:FreeRTOS/src/tasks.c **** 		{
2980:FreeRTOS/src/tasks.c **** 			xReturn = pdFAIL;
2981:FreeRTOS/src/tasks.c **** 		}
2982:FreeRTOS/src/tasks.c **** 
2983:FreeRTOS/src/tasks.c **** 		return xReturn;
2984:FreeRTOS/src/tasks.c **** 	}
2985:FreeRTOS/src/tasks.c **** 
2986:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2988:FreeRTOS/src/tasks.c **** 
2989:FreeRTOS/src/tasks.c **** void vTaskSwitchContext( void )
2990:FreeRTOS/src/tasks.c **** {
2991:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:FreeRTOS/src/tasks.c **** 	{
2993:FreeRTOS/src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:FreeRTOS/src/tasks.c **** 		switch. */
2995:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
2996:FreeRTOS/src/tasks.c **** 	}
2997:FreeRTOS/src/tasks.c **** 	else
2998:FreeRTOS/src/tasks.c **** 	{
2999:FreeRTOS/src/tasks.c **** 		xYieldPending = pdFALSE;
3000:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:FreeRTOS/src/tasks.c **** 
3002:FreeRTOS/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:FreeRTOS/src/tasks.c **** 		{
3004:FreeRTOS/src/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:FreeRTOS/src/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:FreeRTOS/src/tasks.c **** 			#else
3007:FreeRTOS/src/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:FreeRTOS/src/tasks.c **** 			#endif
3009:FreeRTOS/src/tasks.c **** 
3010:FreeRTOS/src/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:FreeRTOS/src/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:FreeRTOS/src/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:FreeRTOS/src/tasks.c **** 			protection here so count values are only valid until the timer
3014:FreeRTOS/src/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:FreeRTOS/src/tasks.c **** 			against suspect run time stat counter implementations - which
3016:FreeRTOS/src/tasks.c **** 			are provided by the application, not the kernel. */
3017:FreeRTOS/src/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:FreeRTOS/src/tasks.c **** 			{
3019:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:FreeRTOS/src/tasks.c **** 			}
3021:FreeRTOS/src/tasks.c **** 			else
3022:FreeRTOS/src/tasks.c **** 			{
3023:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:FreeRTOS/src/tasks.c **** 			}
3025:FreeRTOS/src/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:FreeRTOS/src/tasks.c **** 		}
3027:FreeRTOS/src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:FreeRTOS/src/tasks.c **** 
3029:FreeRTOS/src/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:FreeRTOS/src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:FreeRTOS/src/tasks.c **** 
3032:FreeRTOS/src/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:FreeRTOS/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 56


3035:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:FreeRTOS/src/tasks.c **** 		}
3037:FreeRTOS/src/tasks.c **** 		#endif
3038:FreeRTOS/src/tasks.c **** 
3039:FreeRTOS/src/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:FreeRTOS/src/tasks.c **** 		optimised asm code. */
3041:FreeRTOS/src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:FreeRTOS/src/tasks.c **** 
3044:FreeRTOS/src/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:FreeRTOS/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:FreeRTOS/src/tasks.c **** 		{
3047:FreeRTOS/src/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:FreeRTOS/src/tasks.c **** 		}
3049:FreeRTOS/src/tasks.c **** 		#endif
3050:FreeRTOS/src/tasks.c **** 
3051:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:FreeRTOS/src/tasks.c **** 		{
3053:FreeRTOS/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:FreeRTOS/src/tasks.c **** 			structure specific to this task.
3055:FreeRTOS/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:FreeRTOS/src/tasks.c **** 			for additional information. */
3057:FreeRTOS/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:FreeRTOS/src/tasks.c **** 		}
3059:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:FreeRTOS/src/tasks.c **** 	}
3061:FreeRTOS/src/tasks.c **** }
3062:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3063:FreeRTOS/src/tasks.c **** 
3064:FreeRTOS/src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:FreeRTOS/src/tasks.c **** {
3066:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
3067:FreeRTOS/src/tasks.c **** 
3068:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:FreeRTOS/src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:FreeRTOS/src/tasks.c **** 
3071:FreeRTOS/src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:FreeRTOS/src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:FreeRTOS/src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:FreeRTOS/src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:FreeRTOS/src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:FreeRTOS/src/tasks.c **** 
3077:FreeRTOS/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:FreeRTOS/src/tasks.c **** }
3079:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3080:FreeRTOS/src/tasks.c **** 
3081:FreeRTOS/src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:FreeRTOS/src/tasks.c **** {
3083:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
3084:FreeRTOS/src/tasks.c **** 
3085:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:FreeRTOS/src/tasks.c **** 	the event groups implementation. */
3087:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:FreeRTOS/src/tasks.c **** 
3089:FreeRTOS/src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:FreeRTOS/src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:FreeRTOS/src/tasks.c **** 	task that is not in the Blocked state. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 57


3092:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:FreeRTOS/src/tasks.c **** 
3094:FreeRTOS/src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:FreeRTOS/src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:FreeRTOS/src/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:FreeRTOS/src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:FreeRTOS/src/tasks.c **** 	the task level). */
3099:FreeRTOS/src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:FreeRTOS/src/tasks.c **** 
3101:FreeRTOS/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:FreeRTOS/src/tasks.c **** }
3103:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3104:FreeRTOS/src/tasks.c **** 
3105:FreeRTOS/src/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:FreeRTOS/src/tasks.c **** 
3107:FreeRTOS/src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:FreeRTOS/src/tasks.c **** 	{
3109:FreeRTOS/src/tasks.c **** 		configASSERT( pxEventList );
3110:FreeRTOS/src/tasks.c **** 
3111:FreeRTOS/src/tasks.c **** 		/* This function should not be called by application code hence the
3112:FreeRTOS/src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:FreeRTOS/src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:FreeRTOS/src/tasks.c **** 		it should be called with the scheduler suspended. */
3115:FreeRTOS/src/tasks.c **** 
3116:FreeRTOS/src/tasks.c **** 
3117:FreeRTOS/src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:FreeRTOS/src/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:FreeRTOS/src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:FreeRTOS/src/tasks.c **** 		can be used in place of vListInsert. */
3121:FreeRTOS/src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:FreeRTOS/src/tasks.c **** 
3123:FreeRTOS/src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:FreeRTOS/src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:FreeRTOS/src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:FreeRTOS/src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:FreeRTOS/src/tasks.c **** 		{
3128:FreeRTOS/src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:FreeRTOS/src/tasks.c **** 		}
3130:FreeRTOS/src/tasks.c **** 
3131:FreeRTOS/src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:FreeRTOS/src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:FreeRTOS/src/tasks.c **** 	}
3134:FreeRTOS/src/tasks.c **** 
3135:FreeRTOS/src/tasks.c **** #endif /* configUSE_TIMERS */
3136:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3137:FreeRTOS/src/tasks.c **** 
3138:FreeRTOS/src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:FreeRTOS/src/tasks.c **** {
3140:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
3141:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
3142:FreeRTOS/src/tasks.c **** 
3143:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:FreeRTOS/src/tasks.c **** 	called from a critical section within an ISR. */
3145:FreeRTOS/src/tasks.c **** 
3146:FreeRTOS/src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:FreeRTOS/src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:FreeRTOS/src/tasks.c **** 	the delayed list, and add it to the ready list.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 58


3149:FreeRTOS/src/tasks.c **** 
3150:FreeRTOS/src/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:FreeRTOS/src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:FreeRTOS/src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:FreeRTOS/src/tasks.c **** 
3154:FreeRTOS/src/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:FreeRTOS/src/tasks.c **** 	pxEventList is not empty. */
3156:FreeRTOS/src/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:FreeRTOS/src/tasks.c **** 
3160:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:FreeRTOS/src/tasks.c **** 	{
3162:FreeRTOS/src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:FreeRTOS/src/tasks.c **** 
3165:FreeRTOS/src/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:FreeRTOS/src/tasks.c **** 		{
3167:FreeRTOS/src/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:FreeRTOS/src/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:FreeRTOS/src/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:FreeRTOS/src/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:FreeRTOS/src/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:FreeRTOS/src/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:FreeRTOS/src/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:FreeRTOS/src/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:FreeRTOS/src/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:FreeRTOS/src/tasks.c **** 		}
3177:FreeRTOS/src/tasks.c **** 		#endif
3178:FreeRTOS/src/tasks.c **** 	}
3179:FreeRTOS/src/tasks.c **** 	else
3180:FreeRTOS/src/tasks.c **** 	{
3181:FreeRTOS/src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:FreeRTOS/src/tasks.c **** 		pending until the scheduler is resumed. */
3183:FreeRTOS/src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:FreeRTOS/src/tasks.c **** 	}
3185:FreeRTOS/src/tasks.c **** 
3186:FreeRTOS/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:FreeRTOS/src/tasks.c **** 	{
3188:FreeRTOS/src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:FreeRTOS/src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:FreeRTOS/src/tasks.c **** 		it should force a context switch now. */
3191:FreeRTOS/src/tasks.c **** 		xReturn = pdTRUE;
3192:FreeRTOS/src/tasks.c **** 
3193:FreeRTOS/src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:FreeRTOS/src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
3196:FreeRTOS/src/tasks.c **** 	}
3197:FreeRTOS/src/tasks.c **** 	else
3198:FreeRTOS/src/tasks.c **** 	{
3199:FreeRTOS/src/tasks.c **** 		xReturn = pdFALSE;
3200:FreeRTOS/src/tasks.c **** 	}
3201:FreeRTOS/src/tasks.c **** 
3202:FreeRTOS/src/tasks.c **** 	return xReturn;
3203:FreeRTOS/src/tasks.c **** }
3204:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3205:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 59


3206:FreeRTOS/src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:FreeRTOS/src/tasks.c **** {
3208:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
3209:FreeRTOS/src/tasks.c **** 
3210:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:FreeRTOS/src/tasks.c **** 	the event flags implementation. */
3212:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:FreeRTOS/src/tasks.c **** 
3214:FreeRTOS/src/tasks.c **** 	/* Store the new item value in the event list. */
3215:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:FreeRTOS/src/tasks.c **** 
3217:FreeRTOS/src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:FreeRTOS/src/tasks.c **** 	event flags. */
3219:FreeRTOS/src/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:FreeRTOS/src/tasks.c **** 
3223:FreeRTOS/src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:FreeRTOS/src/tasks.c **** 	{
3225:FreeRTOS/src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:FreeRTOS/src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:FreeRTOS/src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:FreeRTOS/src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:FreeRTOS/src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:FreeRTOS/src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:FreeRTOS/src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:FreeRTOS/src/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:FreeRTOS/src/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:FreeRTOS/src/tasks.c **** 	}
3235:FreeRTOS/src/tasks.c **** 	#endif
3236:FreeRTOS/src/tasks.c **** 
3237:FreeRTOS/src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:FreeRTOS/src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:FreeRTOS/src/tasks.c **** 	lists. */
3240:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:FreeRTOS/src/tasks.c **** 
3243:FreeRTOS/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:FreeRTOS/src/tasks.c **** 	{
3245:FreeRTOS/src/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:FreeRTOS/src/tasks.c **** 		a context switch is required.  This function is called with the
3247:FreeRTOS/src/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:FreeRTOS/src/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
3250:FreeRTOS/src/tasks.c **** 	}
3251:FreeRTOS/src/tasks.c **** }
3252:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3253:FreeRTOS/src/tasks.c **** 
3254:FreeRTOS/src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:FreeRTOS/src/tasks.c **** {
3256:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
3257:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
3258:FreeRTOS/src/tasks.c **** 	{
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:FreeRTOS/src/tasks.c **** 	}
3262:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 60


3263:FreeRTOS/src/tasks.c **** }
3264:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3265:FreeRTOS/src/tasks.c **** 
3266:FreeRTOS/src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:FreeRTOS/src/tasks.c **** {
3268:FreeRTOS/src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:FreeRTOS/src/tasks.c **** }
3272:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3273:FreeRTOS/src/tasks.c **** 
3274:FreeRTOS/src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:FreeRTOS/src/tasks.c **** {
3276:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
3277:FreeRTOS/src/tasks.c **** 
3278:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
3279:FreeRTOS/src/tasks.c **** 	configASSERT( pxTicksToWait );
3280:FreeRTOS/src/tasks.c **** 
3281:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
3282:FreeRTOS/src/tasks.c **** 	{
3283:FreeRTOS/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:FreeRTOS/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:FreeRTOS/src/tasks.c **** 
3287:FreeRTOS/src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:FreeRTOS/src/tasks.c **** 			{
3290:FreeRTOS/src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:FreeRTOS/src/tasks.c **** 				but has the same result. */
3292:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
3294:FreeRTOS/src/tasks.c **** 			}
3295:FreeRTOS/src/tasks.c **** 			else
3296:FreeRTOS/src/tasks.c **** 		#endif
3297:FreeRTOS/src/tasks.c **** 
3298:FreeRTOS/src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:FreeRTOS/src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:FreeRTOS/src/tasks.c **** 			{
3301:FreeRTOS/src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:FreeRTOS/src/tasks.c **** 				specified is the maximum block time then the task should block
3303:FreeRTOS/src/tasks.c **** 				indefinitely, and therefore never time out. */
3304:FreeRTOS/src/tasks.c **** 				xReturn = pdFALSE;
3305:FreeRTOS/src/tasks.c **** 			}
3306:FreeRTOS/src/tasks.c **** 			else
3307:FreeRTOS/src/tasks.c **** 		#endif
3308:FreeRTOS/src/tasks.c **** 
3309:FreeRTOS/src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:FreeRTOS/src/tasks.c **** 		{
3311:FreeRTOS/src/tasks.c **** 			/* The tick count is greater than the time at which
3312:FreeRTOS/src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:FreeRTOS/src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:FreeRTOS/src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:FreeRTOS/src/tasks.c **** 			was called. */
3316:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
3317:FreeRTOS/src/tasks.c **** 		}
3318:FreeRTOS/src/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 61


3320:FreeRTOS/src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:FreeRTOS/src/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
3324:FreeRTOS/src/tasks.c **** 		}
3325:FreeRTOS/src/tasks.c **** 		else
3326:FreeRTOS/src/tasks.c **** 		{
3327:FreeRTOS/src/tasks.c **** 			*pxTicksToWait = 0;
3328:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
3329:FreeRTOS/src/tasks.c **** 		}
3330:FreeRTOS/src/tasks.c **** 	}
3331:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
3332:FreeRTOS/src/tasks.c **** 
3333:FreeRTOS/src/tasks.c **** 	return xReturn;
3334:FreeRTOS/src/tasks.c **** }
3335:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/src/tasks.c **** 
3337:FreeRTOS/src/tasks.c **** void vTaskMissedYield( void )
3338:FreeRTOS/src/tasks.c **** {
3339:FreeRTOS/src/tasks.c **** 	xYieldPending = pdTRUE;
3340:FreeRTOS/src/tasks.c **** }
3341:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3342:FreeRTOS/src/tasks.c **** 
3343:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:FreeRTOS/src/tasks.c **** 
3345:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:FreeRTOS/src/tasks.c **** 	{
3347:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
3348:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
3349:FreeRTOS/src/tasks.c **** 
3350:FreeRTOS/src/tasks.c **** 		if( xTask != NULL )
3351:FreeRTOS/src/tasks.c **** 		{
3352:FreeRTOS/src/tasks.c **** 			pxTCB = xTask;
3353:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:FreeRTOS/src/tasks.c **** 		}
3355:FreeRTOS/src/tasks.c **** 		else
3356:FreeRTOS/src/tasks.c **** 		{
3357:FreeRTOS/src/tasks.c **** 			uxReturn = 0U;
3358:FreeRTOS/src/tasks.c **** 		}
3359:FreeRTOS/src/tasks.c **** 
3360:FreeRTOS/src/tasks.c **** 		return uxReturn;
3361:FreeRTOS/src/tasks.c **** 	}
3362:FreeRTOS/src/tasks.c **** 
3363:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3365:FreeRTOS/src/tasks.c **** 
3366:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:FreeRTOS/src/tasks.c **** 
3368:FreeRTOS/src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:FreeRTOS/src/tasks.c **** 	{
3370:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
3371:FreeRTOS/src/tasks.c **** 
3372:FreeRTOS/src/tasks.c **** 		if( xTask != NULL )
3373:FreeRTOS/src/tasks.c **** 		{
3374:FreeRTOS/src/tasks.c **** 			pxTCB = xTask;
3375:FreeRTOS/src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 62


3377:FreeRTOS/src/tasks.c **** 	}
3378:FreeRTOS/src/tasks.c **** 
3379:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:FreeRTOS/src/tasks.c **** 
3381:FreeRTOS/src/tasks.c **** /*
3382:FreeRTOS/src/tasks.c ****  * -----------------------------------------------------------
3383:FreeRTOS/src/tasks.c ****  * The Idle task.
3384:FreeRTOS/src/tasks.c ****  * ----------------------------------------------------------
3385:FreeRTOS/src/tasks.c ****  *
3386:FreeRTOS/src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:FreeRTOS/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:FreeRTOS/src/tasks.c ****  *
3389:FreeRTOS/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:FreeRTOS/src/tasks.c ****  *
3391:FreeRTOS/src/tasks.c ****  */
3392:FreeRTOS/src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:FreeRTOS/src/tasks.c **** {
  99              		.loc 1 3393 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ Volatile: function does not return.
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.LVL8:
 106              	.L10:
3394:FreeRTOS/src/tasks.c **** 	/* Stop warnings. */
3395:FreeRTOS/src/tasks.c **** 	( void ) pvParameters;
 107              		.loc 1 3395 2 view .LVU23
3396:FreeRTOS/src/tasks.c **** 
3397:FreeRTOS/src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:FreeRTOS/src/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:FreeRTOS/src/tasks.c **** 
3400:FreeRTOS/src/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:FreeRTOS/src/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:FreeRTOS/src/tasks.c **** 	any. */
3403:FreeRTOS/src/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
 108              		.loc 1 3403 64 view .LVU24
3404:FreeRTOS/src/tasks.c **** 
3405:FreeRTOS/src/tasks.c **** 	for( ;; )
 109              		.loc 1 3405 2 view .LVU25
3406:FreeRTOS/src/tasks.c **** 	{
3407:FreeRTOS/src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:FreeRTOS/src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:FreeRTOS/src/tasks.c **** 		prvCheckTasksWaitingTermination();
 110              		.loc 1 3409 3 view .LVU26
3410:FreeRTOS/src/tasks.c **** 
3411:FreeRTOS/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:FreeRTOS/src/tasks.c **** 		{
3413:FreeRTOS/src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:FreeRTOS/src/tasks.c **** 			see if any other task has become available.  If we are using
3415:FreeRTOS/src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:FreeRTOS/src/tasks.c **** 			will automatically get the processor anyway. */
3417:FreeRTOS/src/tasks.c **** 			taskYIELD();
3418:FreeRTOS/src/tasks.c **** 		}
3419:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:FreeRTOS/src/tasks.c **** 
3421:FreeRTOS/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 63


3422:FreeRTOS/src/tasks.c **** 		{
3423:FreeRTOS/src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:FreeRTOS/src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:FreeRTOS/src/tasks.c **** 			to run then the idle task should yield before the end of the
3426:FreeRTOS/src/tasks.c **** 			timeslice.
3427:FreeRTOS/src/tasks.c **** 
3428:FreeRTOS/src/tasks.c **** 			A critical region is not required here as we are just reading from
3429:FreeRTOS/src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:FreeRTOS/src/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:FreeRTOS/src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 111              		.loc 1 3432 4 view .LVU27
 112              		.loc 1 3432 8 is_stmt 0 view .LVU28
 113 0000 064B     		ldr	r3, .L12
 114 0002 1B68     		ldr	r3, [r3]
 115              		.loc 1 3432 6 view .LVU29
 116 0004 012B     		cmp	r3, #1
 117 0006 FBD9     		bls	.L10
3433:FreeRTOS/src/tasks.c **** 			{
3434:FreeRTOS/src/tasks.c **** 				taskYIELD();
 118              		.loc 1 3434 5 is_stmt 1 view .LVU30
 119 0008 054B     		ldr	r3, .L12+4
 120 000a 4FF08052 		mov	r2, #268435456
 121 000e 1A60     		str	r2, [r3]
 122              		.loc 1 3434 5 view .LVU31
 123              		.syntax unified
 124              	@ 3434 "FreeRTOS/src/tasks.c" 1
 125 0010 BFF34F8F 		dsb
 126              	@ 0 "" 2
 127              		.loc 1 3434 5 view .LVU32
 128              	@ 3434 "FreeRTOS/src/tasks.c" 1
 129 0014 BFF36F8F 		isb
 130              	@ 0 "" 2
 131              		.loc 1 3434 16 view .LVU33
 132              		.thumb
 133              		.syntax unified
 134 0018 F2E7     		b	.L10
 135              	.L13:
 136 001a 00BF     		.align	2
 137              	.L12:
 138 001c 00000000 		.word	.LANCHOR2
 139 0020 04ED00E0 		.word	-536810236
 140              		.cfi_endproc
 141              	.LFE36:
 143              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	prvResetNextTaskUnblockTime:
 151              	.LFB39:
3435:FreeRTOS/src/tasks.c **** 			}
3436:FreeRTOS/src/tasks.c **** 			else
3437:FreeRTOS/src/tasks.c **** 			{
3438:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:FreeRTOS/src/tasks.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 64


3440:FreeRTOS/src/tasks.c **** 		}
3441:FreeRTOS/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:FreeRTOS/src/tasks.c **** 
3443:FreeRTOS/src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:FreeRTOS/src/tasks.c **** 		{
3445:FreeRTOS/src/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:FreeRTOS/src/tasks.c **** 
3447:FreeRTOS/src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:FreeRTOS/src/tasks.c **** 			allows the application designer to add background functionality
3449:FreeRTOS/src/tasks.c **** 			without the overhead of a separate task.
3450:FreeRTOS/src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:FreeRTOS/src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:FreeRTOS/src/tasks.c **** 			vApplicationIdleHook();
3453:FreeRTOS/src/tasks.c **** 		}
3454:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:FreeRTOS/src/tasks.c **** 
3456:FreeRTOS/src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:FreeRTOS/src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:FreeRTOS/src/tasks.c **** 		user defined low power mode	implementations require
3459:FreeRTOS/src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:FreeRTOS/src/tasks.c **** 		{
3462:FreeRTOS/src/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:FreeRTOS/src/tasks.c **** 
3464:FreeRTOS/src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:FreeRTOS/src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:FreeRTOS/src/tasks.c **** 			test of the expected idle time is performed without the
3467:FreeRTOS/src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:FreeRTOS/src/tasks.c **** 			valid. */
3469:FreeRTOS/src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:FreeRTOS/src/tasks.c **** 
3471:FreeRTOS/src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:FreeRTOS/src/tasks.c **** 			{
3473:FreeRTOS/src/tasks.c **** 				vTaskSuspendAll();
3474:FreeRTOS/src/tasks.c **** 				{
3475:FreeRTOS/src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:FreeRTOS/src/tasks.c **** 					time can be sampled again, and this time its value can
3477:FreeRTOS/src/tasks.c **** 					be used. */
3478:FreeRTOS/src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:FreeRTOS/src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:FreeRTOS/src/tasks.c **** 
3481:FreeRTOS/src/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:FreeRTOS/src/tasks.c **** 					if the application does not want
3483:FreeRTOS/src/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:FreeRTOS/src/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:FreeRTOS/src/tasks.c **** 
3486:FreeRTOS/src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:FreeRTOS/src/tasks.c **** 					{
3488:FreeRTOS/src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:FreeRTOS/src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:FreeRTOS/src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:FreeRTOS/src/tasks.c **** 					}
3492:FreeRTOS/src/tasks.c **** 					else
3493:FreeRTOS/src/tasks.c **** 					{
3494:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:FreeRTOS/src/tasks.c **** 					}
3496:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 65


3497:FreeRTOS/src/tasks.c **** 				( void ) xTaskResumeAll();
3498:FreeRTOS/src/tasks.c **** 			}
3499:FreeRTOS/src/tasks.c **** 			else
3500:FreeRTOS/src/tasks.c **** 			{
3501:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:FreeRTOS/src/tasks.c **** 			}
3503:FreeRTOS/src/tasks.c **** 		}
3504:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:FreeRTOS/src/tasks.c **** 	}
3506:FreeRTOS/src/tasks.c **** }
3507:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3508:FreeRTOS/src/tasks.c **** 
3509:FreeRTOS/src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:FreeRTOS/src/tasks.c **** 
3511:FreeRTOS/src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:FreeRTOS/src/tasks.c **** 	{
3513:FreeRTOS/src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:FreeRTOS/src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:FreeRTOS/src/tasks.c **** 
3517:FreeRTOS/src/tasks.c **** 		/* This function must be called from a critical section. */
3518:FreeRTOS/src/tasks.c **** 
3519:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:FreeRTOS/src/tasks.c **** 		{
3521:FreeRTOS/src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:FreeRTOS/src/tasks.c **** 			eReturn = eAbortSleep;
3523:FreeRTOS/src/tasks.c **** 		}
3524:FreeRTOS/src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:FreeRTOS/src/tasks.c **** 		{
3526:FreeRTOS/src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:FreeRTOS/src/tasks.c **** 			eReturn = eAbortSleep;
3528:FreeRTOS/src/tasks.c **** 		}
3529:FreeRTOS/src/tasks.c **** 		else
3530:FreeRTOS/src/tasks.c **** 		{
3531:FreeRTOS/src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:FreeRTOS/src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:FreeRTOS/src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:FreeRTOS/src/tasks.c **** 			interrupts. */
3535:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:FreeRTOS/src/tasks.c **** 			{
3537:FreeRTOS/src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:FreeRTOS/src/tasks.c **** 			}
3539:FreeRTOS/src/tasks.c **** 			else
3540:FreeRTOS/src/tasks.c **** 			{
3541:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:FreeRTOS/src/tasks.c **** 			}
3543:FreeRTOS/src/tasks.c **** 		}
3544:FreeRTOS/src/tasks.c **** 
3545:FreeRTOS/src/tasks.c **** 		return eReturn;
3546:FreeRTOS/src/tasks.c **** 	}
3547:FreeRTOS/src/tasks.c **** 
3548:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3550:FreeRTOS/src/tasks.c **** 
3551:FreeRTOS/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:FreeRTOS/src/tasks.c **** 
3553:FreeRTOS/src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 66


3554:FreeRTOS/src/tasks.c **** 	{
3555:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3556:FreeRTOS/src/tasks.c **** 
3557:FreeRTOS/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:FreeRTOS/src/tasks.c **** 		{
3559:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:FreeRTOS/src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:FreeRTOS/src/tasks.c **** 		}
3563:FreeRTOS/src/tasks.c **** 	}
3564:FreeRTOS/src/tasks.c **** 
3565:FreeRTOS/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3567:FreeRTOS/src/tasks.c **** 
3568:FreeRTOS/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:FreeRTOS/src/tasks.c **** 
3570:FreeRTOS/src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:FreeRTOS/src/tasks.c **** 	{
3572:FreeRTOS/src/tasks.c **** 	void *pvReturn = NULL;
3573:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3574:FreeRTOS/src/tasks.c **** 
3575:FreeRTOS/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:FreeRTOS/src/tasks.c **** 		{
3577:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:FreeRTOS/src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:FreeRTOS/src/tasks.c **** 		}
3580:FreeRTOS/src/tasks.c **** 		else
3581:FreeRTOS/src/tasks.c **** 		{
3582:FreeRTOS/src/tasks.c **** 			pvReturn = NULL;
3583:FreeRTOS/src/tasks.c **** 		}
3584:FreeRTOS/src/tasks.c **** 
3585:FreeRTOS/src/tasks.c **** 		return pvReturn;
3586:FreeRTOS/src/tasks.c **** 	}
3587:FreeRTOS/src/tasks.c **** 
3588:FreeRTOS/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3590:FreeRTOS/src/tasks.c **** 
3591:FreeRTOS/src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:FreeRTOS/src/tasks.c **** 
3593:FreeRTOS/src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:FreeRTOS/src/tasks.c **** 	{
3595:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3596:FreeRTOS/src/tasks.c **** 
3597:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:FreeRTOS/src/tasks.c **** 		the calling task. */
3599:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:FreeRTOS/src/tasks.c **** 
3601:FreeRTOS/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:FreeRTOS/src/tasks.c **** 	}
3603:FreeRTOS/src/tasks.c **** 
3604:FreeRTOS/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3606:FreeRTOS/src/tasks.c **** 
3607:FreeRTOS/src/tasks.c **** static void prvInitialiseTaskLists( void )
3608:FreeRTOS/src/tasks.c **** {
3609:FreeRTOS/src/tasks.c **** UBaseType_t uxPriority;
3610:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 67


3611:FreeRTOS/src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:FreeRTOS/src/tasks.c **** 	{
3613:FreeRTOS/src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:FreeRTOS/src/tasks.c **** 	}
3615:FreeRTOS/src/tasks.c **** 
3616:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:FreeRTOS/src/tasks.c **** 
3620:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:FreeRTOS/src/tasks.c **** 	{
3622:FreeRTOS/src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:FreeRTOS/src/tasks.c **** 	}
3624:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:FreeRTOS/src/tasks.c **** 
3626:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:FreeRTOS/src/tasks.c **** 	{
3628:FreeRTOS/src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:FreeRTOS/src/tasks.c **** 	}
3630:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:FreeRTOS/src/tasks.c **** 
3632:FreeRTOS/src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:FreeRTOS/src/tasks.c **** 	using list2. */
3634:FreeRTOS/src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:FreeRTOS/src/tasks.c **** }
3637:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3638:FreeRTOS/src/tasks.c **** 
3639:FreeRTOS/src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:FreeRTOS/src/tasks.c **** {
3641:FreeRTOS/src/tasks.c **** 
3642:FreeRTOS/src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:FreeRTOS/src/tasks.c **** 
3644:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:FreeRTOS/src/tasks.c **** 	{
3646:FreeRTOS/src/tasks.c **** 		TCB_t *pxTCB;
3647:FreeRTOS/src/tasks.c **** 
3648:FreeRTOS/src/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:FreeRTOS/src/tasks.c **** 		being called too often in the idle task. */
3650:FreeRTOS/src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:FreeRTOS/src/tasks.c **** 		{
3652:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
3653:FreeRTOS/src/tasks.c **** 			{
3654:FreeRTOS/src/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:FreeRTOS/src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:FreeRTOS/src/tasks.c **** 			}
3659:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
3660:FreeRTOS/src/tasks.c **** 
3661:FreeRTOS/src/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:FreeRTOS/src/tasks.c **** 		}
3663:FreeRTOS/src/tasks.c **** 	}
3664:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:FreeRTOS/src/tasks.c **** }
3666:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3667:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 68


3668:FreeRTOS/src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:FreeRTOS/src/tasks.c **** 
3670:FreeRTOS/src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:FreeRTOS/src/tasks.c **** 	{
3672:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3673:FreeRTOS/src/tasks.c **** 
3674:FreeRTOS/src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:FreeRTOS/src/tasks.c **** 
3677:FreeRTOS/src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:FreeRTOS/src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:FreeRTOS/src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:FreeRTOS/src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:FreeRTOS/src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:FreeRTOS/src/tasks.c **** 
3683:FreeRTOS/src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:FreeRTOS/src/tasks.c **** 		{
3685:FreeRTOS/src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:FreeRTOS/src/tasks.c **** 		}
3687:FreeRTOS/src/tasks.c **** 		#else
3688:FreeRTOS/src/tasks.c **** 		{
3689:FreeRTOS/src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:FreeRTOS/src/tasks.c **** 		}
3691:FreeRTOS/src/tasks.c **** 		#endif
3692:FreeRTOS/src/tasks.c **** 
3693:FreeRTOS/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:FreeRTOS/src/tasks.c **** 		{
3695:FreeRTOS/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:FreeRTOS/src/tasks.c **** 		}
3697:FreeRTOS/src/tasks.c **** 		#else
3698:FreeRTOS/src/tasks.c **** 		{
3699:FreeRTOS/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:FreeRTOS/src/tasks.c **** 		}
3701:FreeRTOS/src/tasks.c **** 		#endif
3702:FreeRTOS/src/tasks.c **** 
3703:FreeRTOS/src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:FreeRTOS/src/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:FreeRTOS/src/tasks.c **** 		state is just set to whatever is passed in. */
3706:FreeRTOS/src/tasks.c **** 		if( eState != eInvalid )
3707:FreeRTOS/src/tasks.c **** 		{
3708:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:FreeRTOS/src/tasks.c **** 			{
3710:FreeRTOS/src/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:FreeRTOS/src/tasks.c **** 			}
3712:FreeRTOS/src/tasks.c **** 			else
3713:FreeRTOS/src/tasks.c **** 			{
3714:FreeRTOS/src/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:FreeRTOS/src/tasks.c **** 
3716:FreeRTOS/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:FreeRTOS/src/tasks.c **** 				{
3718:FreeRTOS/src/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:FreeRTOS/src/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:FreeRTOS/src/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:FreeRTOS/src/tasks.c **** 					if( eState == eSuspended )
3722:FreeRTOS/src/tasks.c **** 					{
3723:FreeRTOS/src/tasks.c **** 						vTaskSuspendAll();
3724:FreeRTOS/src/tasks.c **** 						{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 69


3725:FreeRTOS/src/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:FreeRTOS/src/tasks.c **** 							{
3727:FreeRTOS/src/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:FreeRTOS/src/tasks.c **** 							}
3729:FreeRTOS/src/tasks.c **** 						}
3730:FreeRTOS/src/tasks.c **** 						( void ) xTaskResumeAll();
3731:FreeRTOS/src/tasks.c **** 					}
3732:FreeRTOS/src/tasks.c **** 				}
3733:FreeRTOS/src/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:FreeRTOS/src/tasks.c **** 			}
3735:FreeRTOS/src/tasks.c **** 		}
3736:FreeRTOS/src/tasks.c **** 		else
3737:FreeRTOS/src/tasks.c **** 		{
3738:FreeRTOS/src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:FreeRTOS/src/tasks.c **** 		}
3740:FreeRTOS/src/tasks.c **** 
3741:FreeRTOS/src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:FreeRTOS/src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:FreeRTOS/src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:FreeRTOS/src/tasks.c **** 		{
3745:FreeRTOS/src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:FreeRTOS/src/tasks.c **** 			{
3747:FreeRTOS/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:FreeRTOS/src/tasks.c **** 			}
3749:FreeRTOS/src/tasks.c **** 			#else
3750:FreeRTOS/src/tasks.c **** 			{
3751:FreeRTOS/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:FreeRTOS/src/tasks.c **** 			}
3753:FreeRTOS/src/tasks.c **** 			#endif
3754:FreeRTOS/src/tasks.c **** 		}
3755:FreeRTOS/src/tasks.c **** 		else
3756:FreeRTOS/src/tasks.c **** 		{
3757:FreeRTOS/src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:FreeRTOS/src/tasks.c **** 		}
3759:FreeRTOS/src/tasks.c **** 	}
3760:FreeRTOS/src/tasks.c **** 
3761:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3763:FreeRTOS/src/tasks.c **** 
3764:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:FreeRTOS/src/tasks.c **** 
3766:FreeRTOS/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:FreeRTOS/src/tasks.c **** 	{
3768:FreeRTOS/src/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTask = 0;
3770:FreeRTOS/src/tasks.c **** 
3771:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:FreeRTOS/src/tasks.c **** 		{
3773:FreeRTOS/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:FreeRTOS/src/tasks.c **** 
3775:FreeRTOS/src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:FreeRTOS/src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:FreeRTOS/src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:FreeRTOS/src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:FreeRTOS/src/tasks.c **** 			do
3780:FreeRTOS/src/tasks.c **** 			{
3781:FreeRTOS/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 70


3782:FreeRTOS/src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:FreeRTOS/src/tasks.c **** 				uxTask++;
3784:FreeRTOS/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:FreeRTOS/src/tasks.c **** 		}
3786:FreeRTOS/src/tasks.c **** 		else
3787:FreeRTOS/src/tasks.c **** 		{
3788:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:FreeRTOS/src/tasks.c **** 		}
3790:FreeRTOS/src/tasks.c **** 
3791:FreeRTOS/src/tasks.c **** 		return uxTask;
3792:FreeRTOS/src/tasks.c **** 	}
3793:FreeRTOS/src/tasks.c **** 
3794:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3796:FreeRTOS/src/tasks.c **** 
3797:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:FreeRTOS/src/tasks.c **** 
3799:FreeRTOS/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:FreeRTOS/src/tasks.c **** 	{
3801:FreeRTOS/src/tasks.c **** 	uint32_t ulCount = 0U;
3802:FreeRTOS/src/tasks.c **** 
3803:FreeRTOS/src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:FreeRTOS/src/tasks.c **** 		{
3805:FreeRTOS/src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:FreeRTOS/src/tasks.c **** 			ulCount++;
3807:FreeRTOS/src/tasks.c **** 		}
3808:FreeRTOS/src/tasks.c **** 
3809:FreeRTOS/src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:FreeRTOS/src/tasks.c **** 
3811:FreeRTOS/src/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:FreeRTOS/src/tasks.c **** 	}
3813:FreeRTOS/src/tasks.c **** 
3814:FreeRTOS/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3816:FreeRTOS/src/tasks.c **** 
3817:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:FreeRTOS/src/tasks.c **** 
3819:FreeRTOS/src/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:FreeRTOS/src/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:FreeRTOS/src/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:FreeRTOS/src/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:FreeRTOS/src/tasks.c **** 	applications that expect an 8-bit return type. */
3824:FreeRTOS/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:FreeRTOS/src/tasks.c **** 	{
3826:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3827:FreeRTOS/src/tasks.c **** 	uint8_t *pucEndOfStack;
3828:FreeRTOS/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:FreeRTOS/src/tasks.c **** 
3830:FreeRTOS/src/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:FreeRTOS/src/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:FreeRTOS/src/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:FreeRTOS/src/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:FreeRTOS/src/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:FreeRTOS/src/tasks.c **** 		type. */
3836:FreeRTOS/src/tasks.c **** 
3837:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 71


3839:FreeRTOS/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:FreeRTOS/src/tasks.c **** 		{
3841:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:FreeRTOS/src/tasks.c **** 		}
3843:FreeRTOS/src/tasks.c **** 		#else
3844:FreeRTOS/src/tasks.c **** 		{
3845:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:FreeRTOS/src/tasks.c **** 		}
3847:FreeRTOS/src/tasks.c **** 		#endif
3848:FreeRTOS/src/tasks.c **** 
3849:FreeRTOS/src/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:FreeRTOS/src/tasks.c **** 
3851:FreeRTOS/src/tasks.c **** 		return uxReturn;
3852:FreeRTOS/src/tasks.c **** 	}
3853:FreeRTOS/src/tasks.c **** 
3854:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3856:FreeRTOS/src/tasks.c **** 
3857:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:FreeRTOS/src/tasks.c **** 
3859:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:FreeRTOS/src/tasks.c **** 	{
3861:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3862:FreeRTOS/src/tasks.c **** 	uint8_t *pucEndOfStack;
3863:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
3864:FreeRTOS/src/tasks.c **** 
3865:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:FreeRTOS/src/tasks.c **** 
3867:FreeRTOS/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:FreeRTOS/src/tasks.c **** 		{
3869:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:FreeRTOS/src/tasks.c **** 		}
3871:FreeRTOS/src/tasks.c **** 		#else
3872:FreeRTOS/src/tasks.c **** 		{
3873:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:FreeRTOS/src/tasks.c **** 		}
3875:FreeRTOS/src/tasks.c **** 		#endif
3876:FreeRTOS/src/tasks.c **** 
3877:FreeRTOS/src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:FreeRTOS/src/tasks.c **** 
3879:FreeRTOS/src/tasks.c **** 		return uxReturn;
3880:FreeRTOS/src/tasks.c **** 	}
3881:FreeRTOS/src/tasks.c **** 
3882:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3884:FreeRTOS/src/tasks.c **** 
3885:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:FreeRTOS/src/tasks.c **** 
3887:FreeRTOS/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:FreeRTOS/src/tasks.c **** 	{
3889:FreeRTOS/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:FreeRTOS/src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:FreeRTOS/src/tasks.c **** 		want to allocate and clean RAM statically. */
3892:FreeRTOS/src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:FreeRTOS/src/tasks.c **** 
3894:FreeRTOS/src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:FreeRTOS/src/tasks.c **** 		to the task to free any memory allocated at the application level.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 72


3896:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:FreeRTOS/src/tasks.c **** 		for additional information. */
3898:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:FreeRTOS/src/tasks.c **** 		{
3900:FreeRTOS/src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:FreeRTOS/src/tasks.c **** 		}
3902:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:FreeRTOS/src/tasks.c **** 
3904:FreeRTOS/src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:FreeRTOS/src/tasks.c **** 		{
3906:FreeRTOS/src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:FreeRTOS/src/tasks.c **** 			the stack and TCB. */
3908:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB );
3910:FreeRTOS/src/tasks.c **** 		}
3911:FreeRTOS/src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:FreeRTOS/src/tasks.c **** 		{
3913:FreeRTOS/src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:FreeRTOS/src/tasks.c **** 			check what was statically allocated before trying to free the
3915:FreeRTOS/src/tasks.c **** 			memory. */
3916:FreeRTOS/src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:FreeRTOS/src/tasks.c **** 			{
3918:FreeRTOS/src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:FreeRTOS/src/tasks.c **** 				must be freed. */
3920:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB );
3922:FreeRTOS/src/tasks.c **** 			}
3923:FreeRTOS/src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:FreeRTOS/src/tasks.c **** 			{
3925:FreeRTOS/src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:FreeRTOS/src/tasks.c **** 				only memory that must be freed. */
3927:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB );
3928:FreeRTOS/src/tasks.c **** 			}
3929:FreeRTOS/src/tasks.c **** 			else
3930:FreeRTOS/src/tasks.c **** 			{
3931:FreeRTOS/src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:FreeRTOS/src/tasks.c **** 				nothing needs to be freed. */
3933:FreeRTOS/src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:FreeRTOS/src/tasks.c **** 			}
3936:FreeRTOS/src/tasks.c **** 		}
3937:FreeRTOS/src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:FreeRTOS/src/tasks.c **** 	}
3939:FreeRTOS/src/tasks.c **** 
3940:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3942:FreeRTOS/src/tasks.c **** 
3943:FreeRTOS/src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:FreeRTOS/src/tasks.c **** {
 152              		.loc 1 3944 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
3945:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
 157              		.loc 1 3945 1 view .LVU35
3946:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 73


3947:FreeRTOS/src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 158              		.loc 1 3947 2 view .LVU36
 159              		.loc 1 3947 6 is_stmt 0 view .LVU37
 160 0000 084B     		ldr	r3, .L17
 161 0002 1B68     		ldr	r3, [r3]
 162 0004 1B68     		ldr	r3, [r3]
 163              		.loc 1 3947 4 view .LVU38
 164 0006 23B9     		cbnz	r3, .L15
3948:FreeRTOS/src/tasks.c **** 	{
3949:FreeRTOS/src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:FreeRTOS/src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:FreeRTOS/src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:FreeRTOS/src/tasks.c **** 		there is an item in the delayed list. */
3953:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 165              		.loc 1 3953 3 is_stmt 1 view .LVU39
 166              		.loc 1 3953 24 is_stmt 0 view .LVU40
 167 0008 074B     		ldr	r3, .L17+4
 168 000a 4FF0FF32 		mov	r2, #-1
 169 000e 1A60     		str	r2, [r3]
 170 0010 7047     		bx	lr
 171              	.L15:
3954:FreeRTOS/src/tasks.c **** 	}
3955:FreeRTOS/src/tasks.c **** 	else
3956:FreeRTOS/src/tasks.c **** 	{
3957:FreeRTOS/src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:FreeRTOS/src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:FreeRTOS/src/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:FreeRTOS/src/tasks.c **** 		from the Blocked state. */
3961:FreeRTOS/src/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 172              		.loc 1 3961 3 is_stmt 1 view .LVU41
 173              		.loc 1 3961 15 is_stmt 0 view .LVU42
 174 0012 044B     		ldr	r3, .L17
 175 0014 1B68     		ldr	r3, [r3]
 176 0016 DB68     		ldr	r3, [r3, #12]
 177              		.loc 1 3961 13 view .LVU43
 178 0018 DB68     		ldr	r3, [r3, #12]
 179              	.LVL9:
3962:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 180              		.loc 1 3962 3 is_stmt 1 view .LVU44
 181              		.loc 1 3962 26 is_stmt 0 view .LVU45
 182 001a 5A68     		ldr	r2, [r3, #4]
 183              		.loc 1 3962 24 view .LVU46
 184 001c 024B     		ldr	r3, .L17+4
 185              	.LVL10:
 186              		.loc 1 3962 24 view .LVU47
 187 001e 1A60     		str	r2, [r3]
3963:FreeRTOS/src/tasks.c **** 	}
3964:FreeRTOS/src/tasks.c **** }
 188              		.loc 1 3964 1 view .LVU48
 189 0020 7047     		bx	lr
 190              	.L18:
 191 0022 00BF     		.align	2
 192              	.L17:
 193 0024 00000000 		.word	.LANCHOR3
 194 0028 00000000 		.word	.LANCHOR4
 195              		.cfi_endproc
 196              	.LFE39:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 74


 198              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 199              		.align	1
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu fpv4-sp-d16
 205              	prvInitialiseNewTask:
 206              	.LVL11:
 207              	.LFB5:
 832:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 208              		.loc 1 832 1 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 16, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 832:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 212              		.loc 1 832 1 is_stmt 0 view .LVU50
 213 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 214              	.LCFI0:
 215              		.cfi_def_cfa_offset 32
 216              		.cfi_offset 4, -32
 217              		.cfi_offset 5, -28
 218              		.cfi_offset 6, -24
 219              		.cfi_offset 7, -20
 220              		.cfi_offset 8, -16
 221              		.cfi_offset 9, -12
 222              		.cfi_offset 10, -8
 223              		.cfi_offset 14, -4
 224 0004 8046     		mov	r8, r0
 225 0006 9946     		mov	r9, r3
 226 0008 089D     		ldr	r5, [sp, #32]
 227 000a 099F     		ldr	r7, [sp, #36]
 228 000c 0A9C     		ldr	r4, [sp, #40]
 833:FreeRTOS/src/tasks.c **** UBaseType_t x;
 229              		.loc 1 833 1 is_stmt 1 view .LVU51
 834:FreeRTOS/src/tasks.c **** 
 230              		.loc 1 834 1 view .LVU52
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 231              		.loc 1 864 3 view .LVU53
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 232              		.loc 1 864 29 is_stmt 0 view .LVU54
 233 000e 266B     		ldr	r6, [r4, #48]
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 234              		.loc 1 864 18 view .LVU55
 235 0010 02F18042 		add	r2, r2, #1073741824
 236              	.LVL12:
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 237              		.loc 1 864 18 view .LVU56
 238 0014 013A     		subs	r2, r2, #1
 239              	.LVL13:
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 240              		.loc 1 864 16 view .LVU57
 241 0016 06EB8206 		add	r6, r6, r2, lsl #2
 242              	.LVL14:
 865:FreeRTOS/src/tasks.c **** 
 243              		.loc 1 865 3 is_stmt 1 view .LVU58
 865:FreeRTOS/src/tasks.c **** 
 244              		.loc 1 865 81 is_stmt 0 view .LVU59
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 75


 245 001a 26F00706 		bic	r6, r6, #7
 246              	.LVL15:
 868:FreeRTOS/src/tasks.c **** 
 247              		.loc 1 868 124 is_stmt 1 view .LVU60
 892:FreeRTOS/src/tasks.c **** 	{
 248              		.loc 1 892 2 view .LVU61
 892:FreeRTOS/src/tasks.c **** 	{
 249              		.loc 1 892 4 is_stmt 0 view .LVU62
 250 001e 81B3     		cbz	r1, .L31
 251 0020 0846     		mov	r0, r1
 252              	.LVL16:
 894:FreeRTOS/src/tasks.c **** 		{
 253              		.loc 1 894 10 view .LVU63
 254 0022 0023     		movs	r3, #0
 255              	.LVL17:
 256              	.L20:
 894:FreeRTOS/src/tasks.c **** 		{
 257              		.loc 1 894 3 discriminator 1 view .LVU64
 258 0024 0F2B     		cmp	r3, #15
 259 0026 06D8     		bhi	.L22
 896:FreeRTOS/src/tasks.c **** 
 260              		.loc 1 896 4 is_stmt 1 view .LVU65
 896:FreeRTOS/src/tasks.c **** 
 261              		.loc 1 896 38 is_stmt 0 view .LVU66
 262 0028 C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 896:FreeRTOS/src/tasks.c **** 
 263              		.loc 1 896 30 view .LVU67
 264 002a E118     		adds	r1, r4, r3
 265 002c 81F83420 		strb	r2, [r1, #52]
 901:FreeRTOS/src/tasks.c **** 			{
 266              		.loc 1 901 4 is_stmt 1 view .LVU68
 901:FreeRTOS/src/tasks.c **** 			{
 267              		.loc 1 901 6 is_stmt 0 view .LVU69
 268 0030 0AB1     		cbz	r2, .L22
 907:FreeRTOS/src/tasks.c **** 			}
 269              		.loc 1 907 29 is_stmt 1 discriminator 2 view .LVU70
 894:FreeRTOS/src/tasks.c **** 		{
 270              		.loc 1 894 77 is_stmt 0 discriminator 2 view .LVU71
 271 0032 0133     		adds	r3, r3, #1
 272              	.LVL18:
 894:FreeRTOS/src/tasks.c **** 		{
 273              		.loc 1 894 77 discriminator 2 view .LVU72
 274 0034 F6E7     		b	.L20
 275              	.L22:
 913:FreeRTOS/src/tasks.c **** 	}
 276              		.loc 1 913 3 is_stmt 1 view .LVU73
 913:FreeRTOS/src/tasks.c **** 	}
 277              		.loc 1 913 55 is_stmt 0 view .LVU74
 278 0036 0023     		movs	r3, #0
 279              	.LVL19:
 913:FreeRTOS/src/tasks.c **** 	}
 280              		.loc 1 913 55 view .LVU75
 281 0038 84F84330 		strb	r3, [r4, #67]
 282              	.LVL20:
 283              	.L24:
 924:FreeRTOS/src/tasks.c **** 	{
 284              		.loc 1 924 2 is_stmt 1 view .LVU76
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 76


 924:FreeRTOS/src/tasks.c **** 	{
 285              		.loc 1 924 4 is_stmt 0 view .LVU77
 286 003c 042D     		cmp	r5, #4
 287 003e 00D9     		bls	.L25
 926:FreeRTOS/src/tasks.c **** 	}
 288              		.loc 1 926 14 view .LVU78
 289 0040 0425     		movs	r5, #4
 290              	.L25:
 291              	.LVL21:
 930:FreeRTOS/src/tasks.c **** 	}
 292              		.loc 1 930 27 is_stmt 1 view .LVU79
 933:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 293              		.loc 1 933 2 view .LVU80
 933:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 294              		.loc 1 933 23 is_stmt 0 view .LVU81
 295 0042 E562     		str	r5, [r4, #44]
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 296              		.loc 1 936 3 is_stmt 1 view .LVU82
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 297              		.loc 1 936 28 is_stmt 0 view .LVU83
 298 0044 6564     		str	r5, [r4, #68]
 937:FreeRTOS/src/tasks.c **** 	}
 299              		.loc 1 937 3 is_stmt 1 view .LVU84
 937:FreeRTOS/src/tasks.c **** 	}
 300              		.loc 1 937 27 is_stmt 0 view .LVU85
 301 0046 4FF0000A 		mov	r10, #0
 302 004a C4F848A0 		str	r10, [r4, #72]
 941:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 303              		.loc 1 941 2 is_stmt 1 view .LVU86
 304 004e 201D     		adds	r0, r4, #4
 305 0050 FFF7FEFF 		bl	vListInitialiseItem
 306              	.LVL22:
 942:FreeRTOS/src/tasks.c **** 
 307              		.loc 1 942 2 view .LVU87
 308 0054 04F11800 		add	r0, r4, #24
 309 0058 FFF7FEFF 		bl	vListInitialiseItem
 310              	.LVL23:
 946:FreeRTOS/src/tasks.c **** 
 311              		.loc 1 946 2 view .LVU88
 312 005c 2461     		str	r4, [r4, #16]
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 313              		.loc 1 949 2 view .LVU89
 314 005e C5F10505 		rsb	r5, r5, #5
 315              	.LVL24:
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 316              		.loc 1 949 2 is_stmt 0 view .LVU90
 317 0062 A561     		str	r5, [r4, #24]
 950:FreeRTOS/src/tasks.c **** 
 318              		.loc 1 950 2 is_stmt 1 view .LVU91
 319 0064 6462     		str	r4, [r4, #36]
 977:FreeRTOS/src/tasks.c **** 	}
 320              		.loc 1 977 3 view .LVU92
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 321              		.loc 1 992 3 view .LVU93
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 322              		.loc 1 992 29 is_stmt 0 view .LVU94
 323 0066 C4F84CA0 		str	r10, [r4, #76]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 77


 993:FreeRTOS/src/tasks.c **** 	}
 324              		.loc 1 993 3 is_stmt 1 view .LVU95
 993:FreeRTOS/src/tasks.c **** 	}
 325              		.loc 1 993 27 is_stmt 0 view .LVU96
 326 006a 84F850A0 		strb	r10, [r4, #80]
1058:FreeRTOS/src/tasks.c **** 		}
 327              		.loc 1 1058 4 is_stmt 1 view .LVU97
1058:FreeRTOS/src/tasks.c **** 		}
 328              		.loc 1 1058 29 is_stmt 0 view .LVU98
 329 006e 4A46     		mov	r2, r9
 330 0070 4146     		mov	r1, r8
 331 0072 3046     		mov	r0, r6
 332 0074 FFF7FEFF 		bl	pxPortInitialiseStack
 333              	.LVL25:
1058:FreeRTOS/src/tasks.c **** 		}
 334              		.loc 1 1058 27 view .LVU99
 335 0078 2060     		str	r0, [r4]
1064:FreeRTOS/src/tasks.c **** 	{
 336              		.loc 1 1064 2 is_stmt 1 view .LVU100
1064:FreeRTOS/src/tasks.c **** 	{
 337              		.loc 1 1064 4 is_stmt 0 view .LVU101
 338 007a 07B1     		cbz	r7, .L19
1068:FreeRTOS/src/tasks.c **** 	}
 339              		.loc 1 1068 3 is_stmt 1 view .LVU102
1068:FreeRTOS/src/tasks.c **** 	}
 340              		.loc 1 1068 18 is_stmt 0 view .LVU103
 341 007c 3C60     		str	r4, [r7]
1072:FreeRTOS/src/tasks.c **** 	}
 342              		.loc 1 1072 27 is_stmt 1 view .LVU104
 343              	.L19:
1074:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 344              		.loc 1 1074 1 is_stmt 0 view .LVU105
 345 007e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 346              	.LVL26:
 347              	.L31:
 919:FreeRTOS/src/tasks.c **** 	}
 348              		.loc 1 919 3 is_stmt 1 view .LVU106
 919:FreeRTOS/src/tasks.c **** 	}
 349              		.loc 1 919 29 is_stmt 0 view .LVU107
 350 0082 0023     		movs	r3, #0
 351              	.LVL27:
 919:FreeRTOS/src/tasks.c **** 	}
 352              		.loc 1 919 29 view .LVU108
 353 0084 84F83430 		strb	r3, [r4, #52]
 354 0088 D8E7     		b	.L24
 355              		.cfi_endproc
 356              	.LFE5:
 358              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 359              		.align	1
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 363              		.fpu fpv4-sp-d16
 365              	prvInitialiseTaskLists:
 366              	.LFB37:
3608:FreeRTOS/src/tasks.c **** UBaseType_t uxPriority;
 367              		.loc 1 3608 1 is_stmt 1 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 78


 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371 0000 38B5     		push	{r3, r4, r5, lr}
 372              	.LCFI1:
 373              		.cfi_def_cfa_offset 16
 374              		.cfi_offset 3, -16
 375              		.cfi_offset 4, -12
 376              		.cfi_offset 5, -8
 377              		.cfi_offset 14, -4
3609:FreeRTOS/src/tasks.c **** 
 378              		.loc 1 3609 1 view .LVU110
3611:FreeRTOS/src/tasks.c **** 	{
 379              		.loc 1 3611 2 view .LVU111
 380              	.LVL28:
3611:FreeRTOS/src/tasks.c **** 	{
 381              		.loc 1 3611 18 is_stmt 0 view .LVU112
 382 0002 0024     		movs	r4, #0
 383              	.LVL29:
 384              	.L33:
3611:FreeRTOS/src/tasks.c **** 	{
 385              		.loc 1 3611 2 discriminator 1 view .LVU113
 386 0004 042C     		cmp	r4, #4
 387 0006 08D8     		bhi	.L36
3613:FreeRTOS/src/tasks.c **** 	}
 388              		.loc 1 3613 3 is_stmt 1 discriminator 3 view .LVU114
 389 0008 04EB8402 		add	r2, r4, r4, lsl #2
 390 000c 9300     		lsls	r3, r2, #2
 391 000e 0C48     		ldr	r0, .L37
 392 0010 1844     		add	r0, r0, r3
 393 0012 FFF7FEFF 		bl	vListInitialise
 394              	.LVL30:
3611:FreeRTOS/src/tasks.c **** 	{
 395              		.loc 1 3611 101 is_stmt 0 discriminator 3 view .LVU115
 396 0016 0134     		adds	r4, r4, #1
 397              	.LVL31:
3611:FreeRTOS/src/tasks.c **** 	{
 398              		.loc 1 3611 101 discriminator 3 view .LVU116
 399 0018 F4E7     		b	.L33
 400              	.L36:
3616:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 401              		.loc 1 3616 2 is_stmt 1 view .LVU117
 402 001a 0A4D     		ldr	r5, .L37+4
 403 001c 2846     		mov	r0, r5
 404 001e FFF7FEFF 		bl	vListInitialise
 405              	.LVL32:
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 406              		.loc 1 3617 2 view .LVU118
 407 0022 094C     		ldr	r4, .L37+8
 408              	.LVL33:
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 409              		.loc 1 3617 2 is_stmt 0 view .LVU119
 410 0024 2046     		mov	r0, r4
 411 0026 FFF7FEFF 		bl	vListInitialise
 412              	.LVL34:
3618:FreeRTOS/src/tasks.c **** 
 413              		.loc 1 3618 2 is_stmt 1 view .LVU120
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 79


 414 002a 0848     		ldr	r0, .L37+12
 415 002c FFF7FEFF 		bl	vListInitialise
 416              	.LVL35:
3628:FreeRTOS/src/tasks.c **** 	}
 417              		.loc 1 3628 3 view .LVU121
 418 0030 0748     		ldr	r0, .L37+16
 419 0032 FFF7FEFF 		bl	vListInitialise
 420              	.LVL36:
3634:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 421              		.loc 1 3634 2 view .LVU122
3634:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 422              		.loc 1 3634 20 is_stmt 0 view .LVU123
 423 0036 074B     		ldr	r3, .L37+20
 424 0038 1D60     		str	r5, [r3]
3635:FreeRTOS/src/tasks.c **** }
 425              		.loc 1 3635 2 is_stmt 1 view .LVU124
3635:FreeRTOS/src/tasks.c **** }
 426              		.loc 1 3635 28 is_stmt 0 view .LVU125
 427 003a 074B     		ldr	r3, .L37+24
 428 003c 1C60     		str	r4, [r3]
3636:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 429              		.loc 1 3636 1 view .LVU126
 430 003e 38BD     		pop	{r3, r4, r5, pc}
 431              	.L38:
 432              		.align	2
 433              	.L37:
 434 0040 00000000 		.word	.LANCHOR2
 435 0044 00000000 		.word	.LANCHOR5
 436 0048 00000000 		.word	.LANCHOR6
 437 004c 00000000 		.word	.LANCHOR1
 438 0050 00000000 		.word	.LANCHOR0
 439 0054 00000000 		.word	.LANCHOR3
 440 0058 00000000 		.word	.LANCHOR7
 441              		.cfi_endproc
 442              	.LFE37:
 444              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv4-sp-d16
 451              	prvAddNewTaskToReadyList:
 452              	.LVL37:
 453              	.LFB6:
1078:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 454              		.loc 1 1078 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
1078:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 458              		.loc 1 1078 1 is_stmt 0 view .LVU128
 459 0000 10B5     		push	{r4, lr}
 460              	.LCFI2:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 4, -8
 463              		.cfi_offset 14, -4
 464 0002 0446     		mov	r4, r0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 80


1081:FreeRTOS/src/tasks.c **** 	{
 465              		.loc 1 1081 2 is_stmt 1 view .LVU129
 466 0004 FFF7FEFF 		bl	vPortEnterCritical
 467              	.LVL38:
1083:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 468              		.loc 1 1083 3 view .LVU130
1083:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 469              		.loc 1 1083 25 is_stmt 0 view .LVU131
 470 0008 204A     		ldr	r2, .L47
 471 000a 1368     		ldr	r3, [r2]
 472 000c 0133     		adds	r3, r3, #1
 473 000e 1360     		str	r3, [r2]
1084:FreeRTOS/src/tasks.c **** 		{
 474              		.loc 1 1084 3 is_stmt 1 view .LVU132
1084:FreeRTOS/src/tasks.c **** 		{
 475              		.loc 1 1084 20 is_stmt 0 view .LVU133
 476 0010 1F4B     		ldr	r3, .L47+4
 477 0012 1B68     		ldr	r3, [r3]
1084:FreeRTOS/src/tasks.c **** 		{
 478              		.loc 1 1084 5 view .LVU134
 479 0014 5BB1     		cbz	r3, .L45
1107:FreeRTOS/src/tasks.c **** 			{
 480              		.loc 1 1107 4 is_stmt 1 view .LVU135
1107:FreeRTOS/src/tasks.c **** 			{
 481              		.loc 1 1107 26 is_stmt 0 view .LVU136
 482 0016 1F4B     		ldr	r3, .L47+8
 483 0018 1B68     		ldr	r3, [r3]
1107:FreeRTOS/src/tasks.c **** 			{
 484              		.loc 1 1107 6 view .LVU137
 485 001a 6BB9     		cbnz	r3, .L41
1109:FreeRTOS/src/tasks.c **** 				{
 486              		.loc 1 1109 5 is_stmt 1 view .LVU138
1109:FreeRTOS/src/tasks.c **** 				{
 487              		.loc 1 1109 21 is_stmt 0 view .LVU139
 488 001c 1C4B     		ldr	r3, .L47+4
 489 001e 1B68     		ldr	r3, [r3]
 490 0020 DA6A     		ldr	r2, [r3, #44]
1109:FreeRTOS/src/tasks.c **** 				{
 491              		.loc 1 1109 45 view .LVU140
 492 0022 E36A     		ldr	r3, [r4, #44]
1109:FreeRTOS/src/tasks.c **** 				{
 493              		.loc 1 1109 7 view .LVU141
 494 0024 9A42     		cmp	r2, r3
 495 0026 07D8     		bhi	.L41
1111:FreeRTOS/src/tasks.c **** 				}
 496              		.loc 1 1111 6 is_stmt 1 view .LVU142
1111:FreeRTOS/src/tasks.c **** 				}
 497              		.loc 1 1111 19 is_stmt 0 view .LVU143
 498 0028 194B     		ldr	r3, .L47+4
 499 002a 1C60     		str	r4, [r3]
 500 002c 04E0     		b	.L41
 501              	.L45:
1088:FreeRTOS/src/tasks.c **** 
 502              		.loc 1 1088 4 is_stmt 1 view .LVU144
1088:FreeRTOS/src/tasks.c **** 
 503              		.loc 1 1088 17 is_stmt 0 view .LVU145
 504 002e 184B     		ldr	r3, .L47+4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 81


 505 0030 1C60     		str	r4, [r3]
1090:FreeRTOS/src/tasks.c **** 			{
 506              		.loc 1 1090 4 is_stmt 1 view .LVU146
1090:FreeRTOS/src/tasks.c **** 			{
 507              		.loc 1 1090 31 is_stmt 0 view .LVU147
 508 0032 1368     		ldr	r3, [r2]
1090:FreeRTOS/src/tasks.c **** 			{
 509              		.loc 1 1090 6 view .LVU148
 510 0034 012B     		cmp	r3, #1
 511 0036 26D0     		beq	.L46
 512              	.L41:
1120:FreeRTOS/src/tasks.c **** 			}
 513              		.loc 1 1120 29 is_stmt 1 view .LVU149
1124:FreeRTOS/src/tasks.c **** 
 514              		.loc 1 1124 3 view .LVU150
1124:FreeRTOS/src/tasks.c **** 
 515              		.loc 1 1124 15 is_stmt 0 view .LVU151
 516 0038 174A     		ldr	r2, .L47+12
 517 003a 1368     		ldr	r3, [r2]
 518 003c 0133     		adds	r3, r3, #1
 519 003e 1360     		str	r3, [r2]
1132:FreeRTOS/src/tasks.c **** 
 520              		.loc 1 1132 31 is_stmt 1 view .LVU152
1134:FreeRTOS/src/tasks.c **** 
 521              		.loc 1 1134 3 view .LVU153
1134:FreeRTOS/src/tasks.c **** 
 522              		.loc 1 1134 3 view .LVU154
 523 0040 E36A     		ldr	r3, [r4, #44]
 524 0042 164A     		ldr	r2, .L47+16
 525 0044 1268     		ldr	r2, [r2]
 526 0046 9342     		cmp	r3, r2
 527 0048 01D9     		bls	.L42
1134:FreeRTOS/src/tasks.c **** 
 528              		.loc 1 1134 3 discriminator 1 view .LVU155
 529 004a 144A     		ldr	r2, .L47+16
 530 004c 1360     		str	r3, [r2]
 531              	.L42:
1134:FreeRTOS/src/tasks.c **** 
 532              		.loc 1 1134 3 discriminator 3 view .LVU156
1134:FreeRTOS/src/tasks.c **** 
 533              		.loc 1 1134 3 discriminator 3 view .LVU157
 534 004e 03EB8303 		add	r3, r3, r3, lsl #2
 535 0052 9A00     		lsls	r2, r3, #2
 536 0054 211D     		adds	r1, r4, #4
 537 0056 1248     		ldr	r0, .L47+20
 538 0058 1044     		add	r0, r0, r2
 539 005a FFF7FEFF 		bl	vListInsertEnd
 540              	.LVL39:
1134:FreeRTOS/src/tasks.c **** 
 541              		.loc 1 1134 36 discriminator 3 view .LVU158
1136:FreeRTOS/src/tasks.c **** 	}
 542              		.loc 1 1136 3 discriminator 3 view .LVU159
1138:FreeRTOS/src/tasks.c **** 
 543              		.loc 1 1138 2 discriminator 3 view .LVU160
 544 005e FFF7FEFF 		bl	vPortExitCritical
 545              	.LVL40:
1140:FreeRTOS/src/tasks.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 82


 546              		.loc 1 1140 2 discriminator 3 view .LVU161
1140:FreeRTOS/src/tasks.c **** 	{
 547              		.loc 1 1140 24 is_stmt 0 discriminator 3 view .LVU162
 548 0062 0C4B     		ldr	r3, .L47+8
 549 0064 1B68     		ldr	r3, [r3]
1140:FreeRTOS/src/tasks.c **** 	{
 550              		.loc 1 1140 4 discriminator 3 view .LVU163
 551 0066 6BB1     		cbz	r3, .L39
1144:FreeRTOS/src/tasks.c **** 		{
 552              		.loc 1 1144 3 is_stmt 1 view .LVU164
1144:FreeRTOS/src/tasks.c **** 		{
 553              		.loc 1 1144 19 is_stmt 0 view .LVU165
 554 0068 094B     		ldr	r3, .L47+4
 555 006a 1B68     		ldr	r3, [r3]
 556 006c DA6A     		ldr	r2, [r3, #44]
1144:FreeRTOS/src/tasks.c **** 		{
 557              		.loc 1 1144 42 view .LVU166
 558 006e E36A     		ldr	r3, [r4, #44]
1144:FreeRTOS/src/tasks.c **** 		{
 559              		.loc 1 1144 5 view .LVU167
 560 0070 9A42     		cmp	r2, r3
 561 0072 07D2     		bcs	.L39
1146:FreeRTOS/src/tasks.c **** 		}
 562              		.loc 1 1146 4 is_stmt 1 view .LVU168
 563 0074 0B4B     		ldr	r3, .L47+24
 564 0076 4FF08052 		mov	r2, #268435456
 565 007a 1A60     		str	r2, [r3]
1146:FreeRTOS/src/tasks.c **** 		}
 566              		.loc 1 1146 4 view .LVU169
 567              		.syntax unified
 568              	@ 1146 "FreeRTOS/src/tasks.c" 1
 569 007c BFF34F8F 		dsb
 570              	@ 0 "" 2
1146:FreeRTOS/src/tasks.c **** 		}
 571              		.loc 1 1146 4 view .LVU170
 572              	@ 1146 "FreeRTOS/src/tasks.c" 1
 573 0080 BFF36F8F 		isb
 574              	@ 0 "" 2
1146:FreeRTOS/src/tasks.c **** 		}
 575              		.loc 1 1146 35 view .LVU171
1155:FreeRTOS/src/tasks.c **** 	}
 576              		.loc 1 1155 27 view .LVU172
 577              		.thumb
 578              		.syntax unified
 579              	.L39:
1157:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 580              		.loc 1 1157 1 is_stmt 0 view .LVU173
 581 0084 10BD     		pop	{r4, pc}
 582              	.LVL41:
 583              	.L46:
1095:FreeRTOS/src/tasks.c **** 			}
 584              		.loc 1 1095 5 is_stmt 1 view .LVU174
 585 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 586              	.LVL42:
 587 008a D5E7     		b	.L41
 588              	.L48:
 589              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 83


 590              	.L47:
 591 008c 00000000 		.word	.LANCHOR8
 592 0090 00000000 		.word	.LANCHOR9
 593 0094 00000000 		.word	.LANCHOR10
 594 0098 00000000 		.word	.LANCHOR11
 595 009c 00000000 		.word	.LANCHOR12
 596 00a0 00000000 		.word	.LANCHOR2
 597 00a4 04ED00E0 		.word	-536810236
 598              		.cfi_endproc
 599              	.LFE6:
 601              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 602              		.align	1
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	prvAddCurrentTaskToDelayedList:
 609              	.LVL43:
 610              	.LFB54:
3965:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3966:FreeRTOS/src/tasks.c **** 
3967:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:FreeRTOS/src/tasks.c **** 
3969:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:FreeRTOS/src/tasks.c **** 	{
3971:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
3972:FreeRTOS/src/tasks.c **** 
3973:FreeRTOS/src/tasks.c **** 		/* A critical section is not required as this is not called from
3974:FreeRTOS/src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:FreeRTOS/src/tasks.c **** 		individual execution thread. */
3976:FreeRTOS/src/tasks.c **** 		xReturn = pxCurrentTCB;
3977:FreeRTOS/src/tasks.c **** 
3978:FreeRTOS/src/tasks.c **** 		return xReturn;
3979:FreeRTOS/src/tasks.c **** 	}
3980:FreeRTOS/src/tasks.c **** 
3981:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3983:FreeRTOS/src/tasks.c **** 
3984:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:FreeRTOS/src/tasks.c **** 
3986:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:FreeRTOS/src/tasks.c **** 	{
3988:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
3989:FreeRTOS/src/tasks.c **** 
3990:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:FreeRTOS/src/tasks.c **** 		{
3992:FreeRTOS/src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:FreeRTOS/src/tasks.c **** 		}
3994:FreeRTOS/src/tasks.c **** 		else
3995:FreeRTOS/src/tasks.c **** 		{
3996:FreeRTOS/src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:FreeRTOS/src/tasks.c **** 			{
3998:FreeRTOS/src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:FreeRTOS/src/tasks.c **** 			}
4000:FreeRTOS/src/tasks.c **** 			else
4001:FreeRTOS/src/tasks.c **** 			{
4002:FreeRTOS/src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 84


4003:FreeRTOS/src/tasks.c **** 			}
4004:FreeRTOS/src/tasks.c **** 		}
4005:FreeRTOS/src/tasks.c **** 
4006:FreeRTOS/src/tasks.c **** 		return xReturn;
4007:FreeRTOS/src/tasks.c **** 	}
4008:FreeRTOS/src/tasks.c **** 
4009:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4011:FreeRTOS/src/tasks.c **** 
4012:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:FreeRTOS/src/tasks.c **** 
4014:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:FreeRTOS/src/tasks.c **** 	{
4016:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:FreeRTOS/src/tasks.c **** 
4019:FreeRTOS/src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:FreeRTOS/src/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:FreeRTOS/src/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4023:FreeRTOS/src/tasks.c **** 		{
4024:FreeRTOS/src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:FreeRTOS/src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:FreeRTOS/src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:FreeRTOS/src/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:FreeRTOS/src/tasks.c **** 			{
4029:FreeRTOS/src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:FreeRTOS/src/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:FreeRTOS/src/tasks.c **** 				not being used for anything else. */
4032:FreeRTOS/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:FreeRTOS/src/tasks.c **** 				{
4034:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:FreeRTOS/src/tasks.c **** 				}
4036:FreeRTOS/src/tasks.c **** 				else
4037:FreeRTOS/src/tasks.c **** 				{
4038:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:FreeRTOS/src/tasks.c **** 				}
4040:FreeRTOS/src/tasks.c **** 
4041:FreeRTOS/src/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:FreeRTOS/src/tasks.c **** 				to be moved into a new list. */
4043:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:FreeRTOS/src/tasks.c **** 				{
4045:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:FreeRTOS/src/tasks.c **** 					{
4047:FreeRTOS/src/tasks.c **** 						/* It is known that the task is in its ready list so
4048:FreeRTOS/src/tasks.c **** 						there is no need to check again and the port level
4049:FreeRTOS/src/tasks.c **** 						reset macro can be called directly. */
4050:FreeRTOS/src/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:FreeRTOS/src/tasks.c **** 					}
4052:FreeRTOS/src/tasks.c **** 					else
4053:FreeRTOS/src/tasks.c **** 					{
4054:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:FreeRTOS/src/tasks.c **** 					}
4056:FreeRTOS/src/tasks.c **** 
4057:FreeRTOS/src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:FreeRTOS/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 85


4060:FreeRTOS/src/tasks.c **** 				}
4061:FreeRTOS/src/tasks.c **** 				else
4062:FreeRTOS/src/tasks.c **** 				{
4063:FreeRTOS/src/tasks.c **** 					/* Just inherit the priority. */
4064:FreeRTOS/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:FreeRTOS/src/tasks.c **** 				}
4066:FreeRTOS/src/tasks.c **** 
4067:FreeRTOS/src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:FreeRTOS/src/tasks.c **** 
4069:FreeRTOS/src/tasks.c **** 				/* Inheritance occurred. */
4070:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
4071:FreeRTOS/src/tasks.c **** 			}
4072:FreeRTOS/src/tasks.c **** 			else
4073:FreeRTOS/src/tasks.c **** 			{
4074:FreeRTOS/src/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:FreeRTOS/src/tasks.c **** 				{
4076:FreeRTOS/src/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:FreeRTOS/src/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:FreeRTOS/src/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:FreeRTOS/src/tasks.c **** 					priority of the task attempting to take the mutex.
4080:FreeRTOS/src/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:FreeRTOS/src/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:FreeRTOS/src/tasks.c **** 					not been the case. */
4083:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
4084:FreeRTOS/src/tasks.c **** 				}
4085:FreeRTOS/src/tasks.c **** 				else
4086:FreeRTOS/src/tasks.c **** 				{
4087:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:FreeRTOS/src/tasks.c **** 				}
4089:FreeRTOS/src/tasks.c **** 			}
4090:FreeRTOS/src/tasks.c **** 		}
4091:FreeRTOS/src/tasks.c **** 		else
4092:FreeRTOS/src/tasks.c **** 		{
4093:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:FreeRTOS/src/tasks.c **** 		}
4095:FreeRTOS/src/tasks.c **** 
4096:FreeRTOS/src/tasks.c **** 		return xReturn;
4097:FreeRTOS/src/tasks.c **** 	}
4098:FreeRTOS/src/tasks.c **** 
4099:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4100:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4101:FreeRTOS/src/tasks.c **** 
4102:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:FreeRTOS/src/tasks.c **** 
4104:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:FreeRTOS/src/tasks.c **** 	{
4106:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:FreeRTOS/src/tasks.c **** 
4109:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4110:FreeRTOS/src/tasks.c **** 		{
4111:FreeRTOS/src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:FreeRTOS/src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:FreeRTOS/src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:FreeRTOS/src/tasks.c **** 			be the running state task. */
4115:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 86


4117:FreeRTOS/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:FreeRTOS/src/tasks.c **** 
4119:FreeRTOS/src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:FreeRTOS/src/tasks.c **** 			task? */
4121:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:FreeRTOS/src/tasks.c **** 			{
4123:FreeRTOS/src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:FreeRTOS/src/tasks.c **** 				{
4126:FreeRTOS/src/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:FreeRTOS/src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:FreeRTOS/src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:FreeRTOS/src/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:FreeRTOS/src/tasks.c **** 					the holding task from the ready/delayed list. */
4131:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:FreeRTOS/src/tasks.c **** 					{
4133:FreeRTOS/src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:FreeRTOS/src/tasks.c **** 					}
4135:FreeRTOS/src/tasks.c **** 					else
4136:FreeRTOS/src/tasks.c **** 					{
4137:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:FreeRTOS/src/tasks.c **** 					}
4139:FreeRTOS/src/tasks.c **** 
4140:FreeRTOS/src/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:FreeRTOS/src/tasks.c **** 					new	ready list. */
4142:FreeRTOS/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:FreeRTOS/src/tasks.c **** 
4145:FreeRTOS/src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:FreeRTOS/src/tasks.c **** 					any other purpose if this task is running, and it must be
4147:FreeRTOS/src/tasks.c **** 					running to give back the mutex. */
4148:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:FreeRTOS/src/tasks.c **** 
4151:FreeRTOS/src/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:FreeRTOS/src/tasks.c **** 					This is only actually required in the corner case whereby
4153:FreeRTOS/src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:FreeRTOS/src/tasks.c **** 					in an order different to that in which they were taken.
4155:FreeRTOS/src/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:FreeRTOS/src/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:FreeRTOS/src/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:FreeRTOS/src/tasks.c **** 					a task is waiting on it or not. */
4159:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
4160:FreeRTOS/src/tasks.c **** 				}
4161:FreeRTOS/src/tasks.c **** 				else
4162:FreeRTOS/src/tasks.c **** 				{
4163:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:FreeRTOS/src/tasks.c **** 				}
4165:FreeRTOS/src/tasks.c **** 			}
4166:FreeRTOS/src/tasks.c **** 			else
4167:FreeRTOS/src/tasks.c **** 			{
4168:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:FreeRTOS/src/tasks.c **** 			}
4170:FreeRTOS/src/tasks.c **** 		}
4171:FreeRTOS/src/tasks.c **** 		else
4172:FreeRTOS/src/tasks.c **** 		{
4173:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 87


4174:FreeRTOS/src/tasks.c **** 		}
4175:FreeRTOS/src/tasks.c **** 
4176:FreeRTOS/src/tasks.c **** 		return xReturn;
4177:FreeRTOS/src/tasks.c **** 	}
4178:FreeRTOS/src/tasks.c **** 
4179:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4180:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4181:FreeRTOS/src/tasks.c **** 
4182:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:FreeRTOS/src/tasks.c **** 
4184:FreeRTOS/src/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:FreeRTOS/src/tasks.c **** 	{
4186:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:FreeRTOS/src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:FreeRTOS/src/tasks.c **** 
4190:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4191:FreeRTOS/src/tasks.c **** 		{
4192:FreeRTOS/src/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:FreeRTOS/src/tasks.c **** 			one mutex. */
4194:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:FreeRTOS/src/tasks.c **** 
4196:FreeRTOS/src/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:FreeRTOS/src/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:FreeRTOS/src/tasks.c **** 			holding task's base priority and the priority of the highest
4199:FreeRTOS/src/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:FreeRTOS/src/tasks.c **** 			{
4202:FreeRTOS/src/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:FreeRTOS/src/tasks.c **** 			}
4204:FreeRTOS/src/tasks.c **** 			else
4205:FreeRTOS/src/tasks.c **** 			{
4206:FreeRTOS/src/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:FreeRTOS/src/tasks.c **** 			}
4208:FreeRTOS/src/tasks.c **** 
4209:FreeRTOS/src/tasks.c **** 			/* Does the priority need to change? */
4210:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:FreeRTOS/src/tasks.c **** 			{
4212:FreeRTOS/src/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:FreeRTOS/src/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:FreeRTOS/src/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:FreeRTOS/src/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:FreeRTOS/src/tasks.c **** 				{
4218:FreeRTOS/src/tasks.c **** 					/* If a task has timed out because it already holds the
4219:FreeRTOS/src/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:FreeRTOS/src/tasks.c **** 					its own priority. */
4221:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:FreeRTOS/src/tasks.c **** 
4223:FreeRTOS/src/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:FreeRTOS/src/tasks.c **** 					priority to facilitate determining the subject task's
4225:FreeRTOS/src/tasks.c **** 					state. */
4226:FreeRTOS/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:FreeRTOS/src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:FreeRTOS/src/tasks.c **** 
4230:FreeRTOS/src/tasks.c **** 					/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 88


4231:FreeRTOS/src/tasks.c **** 					being used for anything else. */
4232:FreeRTOS/src/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:FreeRTOS/src/tasks.c **** 					{
4234:FreeRTOS/src/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:FreeRTOS/src/tasks.c **** 					}
4236:FreeRTOS/src/tasks.c **** 					else
4237:FreeRTOS/src/tasks.c **** 					{
4238:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:FreeRTOS/src/tasks.c **** 					}
4240:FreeRTOS/src/tasks.c **** 
4241:FreeRTOS/src/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:FreeRTOS/src/tasks.c **** 					then the task that holds the mutex could be in either the
4243:FreeRTOS/src/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:FreeRTOS/src/tasks.c **** 					from its current state list if it is in the Ready state as
4245:FreeRTOS/src/tasks.c **** 					the task's priority is going to change and there is one
4246:FreeRTOS/src/tasks.c **** 					Ready list per priority. */
4247:FreeRTOS/src/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:FreeRTOS/src/tasks.c **** 					{
4249:FreeRTOS/src/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:FreeRTOS/src/tasks.c **** 						{
4251:FreeRTOS/src/tasks.c **** 							/* It is known that the task is in its ready list so
4252:FreeRTOS/src/tasks.c **** 							there is no need to check again and the port level
4253:FreeRTOS/src/tasks.c **** 							reset macro can be called directly. */
4254:FreeRTOS/src/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:FreeRTOS/src/tasks.c **** 						}
4256:FreeRTOS/src/tasks.c **** 						else
4257:FreeRTOS/src/tasks.c **** 						{
4258:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:FreeRTOS/src/tasks.c **** 						}
4260:FreeRTOS/src/tasks.c **** 
4261:FreeRTOS/src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:FreeRTOS/src/tasks.c **** 					}
4263:FreeRTOS/src/tasks.c **** 					else
4264:FreeRTOS/src/tasks.c **** 					{
4265:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:FreeRTOS/src/tasks.c **** 					}
4267:FreeRTOS/src/tasks.c **** 				}
4268:FreeRTOS/src/tasks.c **** 				else
4269:FreeRTOS/src/tasks.c **** 				{
4270:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:FreeRTOS/src/tasks.c **** 				}
4272:FreeRTOS/src/tasks.c **** 			}
4273:FreeRTOS/src/tasks.c **** 			else
4274:FreeRTOS/src/tasks.c **** 			{
4275:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:FreeRTOS/src/tasks.c **** 			}
4277:FreeRTOS/src/tasks.c **** 		}
4278:FreeRTOS/src/tasks.c **** 		else
4279:FreeRTOS/src/tasks.c **** 		{
4280:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:FreeRTOS/src/tasks.c **** 		}
4282:FreeRTOS/src/tasks.c **** 	}
4283:FreeRTOS/src/tasks.c **** 
4284:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4285:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4286:FreeRTOS/src/tasks.c **** 
4287:FreeRTOS/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 89


4288:FreeRTOS/src/tasks.c **** 
4289:FreeRTOS/src/tasks.c **** 	void vTaskEnterCritical( void )
4290:FreeRTOS/src/tasks.c **** 	{
4291:FreeRTOS/src/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:FreeRTOS/src/tasks.c **** 
4293:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:FreeRTOS/src/tasks.c **** 		{
4295:FreeRTOS/src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:FreeRTOS/src/tasks.c **** 
4297:FreeRTOS/src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:FreeRTOS/src/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:FreeRTOS/src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:FreeRTOS/src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:FreeRTOS/src/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:FreeRTOS/src/tasks.c **** 			critical section. */
4303:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:FreeRTOS/src/tasks.c **** 			{
4305:FreeRTOS/src/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:FreeRTOS/src/tasks.c **** 			}
4307:FreeRTOS/src/tasks.c **** 		}
4308:FreeRTOS/src/tasks.c **** 		else
4309:FreeRTOS/src/tasks.c **** 		{
4310:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:FreeRTOS/src/tasks.c **** 		}
4312:FreeRTOS/src/tasks.c **** 	}
4313:FreeRTOS/src/tasks.c **** 
4314:FreeRTOS/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4316:FreeRTOS/src/tasks.c **** 
4317:FreeRTOS/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:FreeRTOS/src/tasks.c **** 
4319:FreeRTOS/src/tasks.c **** 	void vTaskExitCritical( void )
4320:FreeRTOS/src/tasks.c **** 	{
4321:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:FreeRTOS/src/tasks.c **** 		{
4323:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:FreeRTOS/src/tasks.c **** 			{
4325:FreeRTOS/src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:FreeRTOS/src/tasks.c **** 
4327:FreeRTOS/src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:FreeRTOS/src/tasks.c **** 				{
4329:FreeRTOS/src/tasks.c **** 					portENABLE_INTERRUPTS();
4330:FreeRTOS/src/tasks.c **** 				}
4331:FreeRTOS/src/tasks.c **** 				else
4332:FreeRTOS/src/tasks.c **** 				{
4333:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:FreeRTOS/src/tasks.c **** 				}
4335:FreeRTOS/src/tasks.c **** 			}
4336:FreeRTOS/src/tasks.c **** 			else
4337:FreeRTOS/src/tasks.c **** 			{
4338:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:FreeRTOS/src/tasks.c **** 			}
4340:FreeRTOS/src/tasks.c **** 		}
4341:FreeRTOS/src/tasks.c **** 		else
4342:FreeRTOS/src/tasks.c **** 		{
4343:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 90


4345:FreeRTOS/src/tasks.c **** 	}
4346:FreeRTOS/src/tasks.c **** 
4347:FreeRTOS/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4349:FreeRTOS/src/tasks.c **** 
4350:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:FreeRTOS/src/tasks.c **** 
4352:FreeRTOS/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:FreeRTOS/src/tasks.c **** 	{
4354:FreeRTOS/src/tasks.c **** 	size_t x;
4355:FreeRTOS/src/tasks.c **** 
4356:FreeRTOS/src/tasks.c **** 		/* Start by copying the entire string. */
4357:FreeRTOS/src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:FreeRTOS/src/tasks.c **** 
4359:FreeRTOS/src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:FreeRTOS/src/tasks.c **** 		printed out. */
4361:FreeRTOS/src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:FreeRTOS/src/tasks.c **** 		{
4363:FreeRTOS/src/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:FreeRTOS/src/tasks.c **** 		}
4365:FreeRTOS/src/tasks.c **** 
4366:FreeRTOS/src/tasks.c **** 		/* Terminate. */
4367:FreeRTOS/src/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:FreeRTOS/src/tasks.c **** 
4369:FreeRTOS/src/tasks.c **** 		/* Return the new end of string. */
4370:FreeRTOS/src/tasks.c **** 		return &( pcBuffer[ x ] );
4371:FreeRTOS/src/tasks.c **** 	}
4372:FreeRTOS/src/tasks.c **** 
4373:FreeRTOS/src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4375:FreeRTOS/src/tasks.c **** 
4376:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:FreeRTOS/src/tasks.c **** 
4378:FreeRTOS/src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:FreeRTOS/src/tasks.c **** 	{
4380:FreeRTOS/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:FreeRTOS/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:FreeRTOS/src/tasks.c **** 	char cStatus;
4383:FreeRTOS/src/tasks.c **** 
4384:FreeRTOS/src/tasks.c **** 		/*
4385:FreeRTOS/src/tasks.c **** 		 * PLEASE NOTE:
4386:FreeRTOS/src/tasks.c **** 		 *
4387:FreeRTOS/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:FreeRTOS/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:FreeRTOS/src/tasks.c **** 		 * scheduler.
4390:FreeRTOS/src/tasks.c **** 		 *
4391:FreeRTOS/src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:FreeRTOS/src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:FreeRTOS/src/tasks.c **** 		 * displays task names, states and stack usage.
4394:FreeRTOS/src/tasks.c **** 		 *
4395:FreeRTOS/src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:FreeRTOS/src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:FreeRTOS/src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:FreeRTOS/src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:FreeRTOS/src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:FreeRTOS/src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:FreeRTOS/src/tasks.c **** 		 * snprintf() implementation!).
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 91


4402:FreeRTOS/src/tasks.c **** 		 *
4403:FreeRTOS/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:FreeRTOS/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:FreeRTOS/src/tasks.c **** 		 * through a call to vTaskList().
4406:FreeRTOS/src/tasks.c **** 		 */
4407:FreeRTOS/src/tasks.c **** 
4408:FreeRTOS/src/tasks.c **** 
4409:FreeRTOS/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:FreeRTOS/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:FreeRTOS/src/tasks.c **** 
4412:FreeRTOS/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:FreeRTOS/src/tasks.c **** 		function is executing. */
4414:FreeRTOS/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:FreeRTOS/src/tasks.c **** 
4416:FreeRTOS/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:FreeRTOS/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:FreeRTOS/src/tasks.c **** 		equate to NULL. */
4419:FreeRTOS/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:FreeRTOS/src/tasks.c **** 
4421:FreeRTOS/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:FreeRTOS/src/tasks.c **** 		{
4423:FreeRTOS/src/tasks.c **** 			/* Generate the (binary) data. */
4424:FreeRTOS/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:FreeRTOS/src/tasks.c **** 
4426:FreeRTOS/src/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:FreeRTOS/src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:FreeRTOS/src/tasks.c **** 			{
4429:FreeRTOS/src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:FreeRTOS/src/tasks.c **** 				{
4431:FreeRTOS/src/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:FreeRTOS/src/tasks.c **** 										break;
4433:FreeRTOS/src/tasks.c **** 
4434:FreeRTOS/src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:FreeRTOS/src/tasks.c **** 										break;
4436:FreeRTOS/src/tasks.c **** 
4437:FreeRTOS/src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:FreeRTOS/src/tasks.c **** 										break;
4439:FreeRTOS/src/tasks.c **** 
4440:FreeRTOS/src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:FreeRTOS/src/tasks.c **** 										break;
4442:FreeRTOS/src/tasks.c **** 
4443:FreeRTOS/src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:FreeRTOS/src/tasks.c **** 										break;
4445:FreeRTOS/src/tasks.c **** 
4446:FreeRTOS/src/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:FreeRTOS/src/tasks.c **** 					default:			/* Should not get here, but it is included
4448:FreeRTOS/src/tasks.c **** 										to prevent static checking errors. */
4449:FreeRTOS/src/tasks.c **** 										cStatus = ( char ) 0x00;
4450:FreeRTOS/src/tasks.c **** 										break;
4451:FreeRTOS/src/tasks.c **** 				}
4452:FreeRTOS/src/tasks.c **** 
4453:FreeRTOS/src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:FreeRTOS/src/tasks.c **** 				can be printed in tabular form more easily. */
4455:FreeRTOS/src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:FreeRTOS/src/tasks.c **** 
4457:FreeRTOS/src/tasks.c **** 				/* Write the rest of the string. */
4458:FreeRTOS/src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 92


4459:FreeRTOS/src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:FreeRTOS/src/tasks.c **** 			}
4461:FreeRTOS/src/tasks.c **** 
4462:FreeRTOS/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:FreeRTOS/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:FreeRTOS/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:FreeRTOS/src/tasks.c **** 		}
4466:FreeRTOS/src/tasks.c **** 		else
4467:FreeRTOS/src/tasks.c **** 		{
4468:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:FreeRTOS/src/tasks.c **** 		}
4470:FreeRTOS/src/tasks.c **** 	}
4471:FreeRTOS/src/tasks.c **** 
4472:FreeRTOS/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
4474:FreeRTOS/src/tasks.c **** 
4475:FreeRTOS/src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:FreeRTOS/src/tasks.c **** 
4477:FreeRTOS/src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:FreeRTOS/src/tasks.c **** 	{
4479:FreeRTOS/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:FreeRTOS/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:FreeRTOS/src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:FreeRTOS/src/tasks.c **** 
4483:FreeRTOS/src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:FreeRTOS/src/tasks.c **** 		{
4485:FreeRTOS/src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:FreeRTOS/src/tasks.c **** 		}
4487:FreeRTOS/src/tasks.c **** 		#endif
4488:FreeRTOS/src/tasks.c **** 
4489:FreeRTOS/src/tasks.c **** 		/*
4490:FreeRTOS/src/tasks.c **** 		 * PLEASE NOTE:
4491:FreeRTOS/src/tasks.c **** 		 *
4492:FreeRTOS/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:FreeRTOS/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:FreeRTOS/src/tasks.c **** 		 * scheduler.
4495:FreeRTOS/src/tasks.c **** 		 *
4496:FreeRTOS/src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:FreeRTOS/src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:FreeRTOS/src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:FreeRTOS/src/tasks.c **** 		 * in both absolute and percentage terms.
4500:FreeRTOS/src/tasks.c **** 		 *
4501:FreeRTOS/src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:FreeRTOS/src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:FreeRTOS/src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:FreeRTOS/src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:FreeRTOS/src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:FreeRTOS/src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:FreeRTOS/src/tasks.c **** 		 * a full snprintf() implementation!).
4508:FreeRTOS/src/tasks.c **** 		 *
4509:FreeRTOS/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:FreeRTOS/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:FreeRTOS/src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:FreeRTOS/src/tasks.c **** 		 */
4513:FreeRTOS/src/tasks.c **** 
4514:FreeRTOS/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:FreeRTOS/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 93


4516:FreeRTOS/src/tasks.c **** 
4517:FreeRTOS/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:FreeRTOS/src/tasks.c **** 		function is executing. */
4519:FreeRTOS/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:FreeRTOS/src/tasks.c **** 
4521:FreeRTOS/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:FreeRTOS/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:FreeRTOS/src/tasks.c **** 		equate to NULL. */
4524:FreeRTOS/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:FreeRTOS/src/tasks.c **** 
4526:FreeRTOS/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:FreeRTOS/src/tasks.c **** 		{
4528:FreeRTOS/src/tasks.c **** 			/* Generate the (binary) data. */
4529:FreeRTOS/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:FreeRTOS/src/tasks.c **** 
4531:FreeRTOS/src/tasks.c **** 			/* For percentage calculations. */
4532:FreeRTOS/src/tasks.c **** 			ulTotalTime /= 100UL;
4533:FreeRTOS/src/tasks.c **** 
4534:FreeRTOS/src/tasks.c **** 			/* Avoid divide by zero errors. */
4535:FreeRTOS/src/tasks.c **** 			if( ulTotalTime > 0UL )
4536:FreeRTOS/src/tasks.c **** 			{
4537:FreeRTOS/src/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:FreeRTOS/src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:FreeRTOS/src/tasks.c **** 				{
4540:FreeRTOS/src/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:FreeRTOS/src/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:FreeRTOS/src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:FreeRTOS/src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:FreeRTOS/src/tasks.c **** 
4545:FreeRTOS/src/tasks.c **** 					/* Write the task name to the string, padding with
4546:FreeRTOS/src/tasks.c **** 					spaces so it can be printed in tabular form more
4547:FreeRTOS/src/tasks.c **** 					easily. */
4548:FreeRTOS/src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:FreeRTOS/src/tasks.c **** 
4550:FreeRTOS/src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:FreeRTOS/src/tasks.c **** 					{
4552:FreeRTOS/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:FreeRTOS/src/tasks.c **** 						{
4554:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:FreeRTOS/src/tasks.c **** 						}
4556:FreeRTOS/src/tasks.c **** 						#else
4557:FreeRTOS/src/tasks.c **** 						{
4558:FreeRTOS/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:FreeRTOS/src/tasks.c **** 							printf() library can be used. */
4560:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:FreeRTOS/src/tasks.c **** 						}
4562:FreeRTOS/src/tasks.c **** 						#endif
4563:FreeRTOS/src/tasks.c **** 					}
4564:FreeRTOS/src/tasks.c **** 					else
4565:FreeRTOS/src/tasks.c **** 					{
4566:FreeRTOS/src/tasks.c **** 						/* If the percentage is zero here then the task has
4567:FreeRTOS/src/tasks.c **** 						consumed less than 1% of the total run time. */
4568:FreeRTOS/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:FreeRTOS/src/tasks.c **** 						{
4570:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:FreeRTOS/src/tasks.c **** 						}
4572:FreeRTOS/src/tasks.c **** 						#else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 94


4573:FreeRTOS/src/tasks.c **** 						{
4574:FreeRTOS/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:FreeRTOS/src/tasks.c **** 							printf() library can be used. */
4576:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:FreeRTOS/src/tasks.c **** 						}
4578:FreeRTOS/src/tasks.c **** 						#endif
4579:FreeRTOS/src/tasks.c **** 					}
4580:FreeRTOS/src/tasks.c **** 
4581:FreeRTOS/src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:FreeRTOS/src/tasks.c **** 				}
4583:FreeRTOS/src/tasks.c **** 			}
4584:FreeRTOS/src/tasks.c **** 			else
4585:FreeRTOS/src/tasks.c **** 			{
4586:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:FreeRTOS/src/tasks.c **** 			}
4588:FreeRTOS/src/tasks.c **** 
4589:FreeRTOS/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:FreeRTOS/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:FreeRTOS/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:FreeRTOS/src/tasks.c **** 		}
4593:FreeRTOS/src/tasks.c **** 		else
4594:FreeRTOS/src/tasks.c **** 		{
4595:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:FreeRTOS/src/tasks.c **** 		}
4597:FreeRTOS/src/tasks.c **** 	}
4598:FreeRTOS/src/tasks.c **** 
4599:FreeRTOS/src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4601:FreeRTOS/src/tasks.c **** 
4602:FreeRTOS/src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:FreeRTOS/src/tasks.c **** {
4604:FreeRTOS/src/tasks.c **** TickType_t uxReturn;
4605:FreeRTOS/src/tasks.c **** 
4606:FreeRTOS/src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:FreeRTOS/src/tasks.c **** 
4608:FreeRTOS/src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:FreeRTOS/src/tasks.c **** 	queues and semaphores. */
4610:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:FreeRTOS/src/tasks.c **** 
4612:FreeRTOS/src/tasks.c **** 	return uxReturn;
4613:FreeRTOS/src/tasks.c **** }
4614:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4615:FreeRTOS/src/tasks.c **** 
4616:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:FreeRTOS/src/tasks.c **** 
4618:FreeRTOS/src/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:FreeRTOS/src/tasks.c **** 	{
4620:FreeRTOS/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:FreeRTOS/src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:FreeRTOS/src/tasks.c **** 		{
4624:FreeRTOS/src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:FreeRTOS/src/tasks.c **** 		}
4626:FreeRTOS/src/tasks.c **** 
4627:FreeRTOS/src/tasks.c **** 		return pxCurrentTCB;
4628:FreeRTOS/src/tasks.c **** 	}
4629:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 95


4630:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4631:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4632:FreeRTOS/src/tasks.c **** 
4633:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:FreeRTOS/src/tasks.c **** 
4635:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:FreeRTOS/src/tasks.c **** 	{
4637:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
4638:FreeRTOS/src/tasks.c **** 
4639:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4640:FreeRTOS/src/tasks.c **** 		{
4641:FreeRTOS/src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:FreeRTOS/src/tasks.c **** 			{
4644:FreeRTOS/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:FreeRTOS/src/tasks.c **** 
4647:FreeRTOS/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:FreeRTOS/src/tasks.c **** 				{
4649:FreeRTOS/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:FreeRTOS/src/tasks.c **** 
4652:FreeRTOS/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:FreeRTOS/src/tasks.c **** 					section (some will yield immediately, others wait until the
4654:FreeRTOS/src/tasks.c **** 					critical section exits) - but it is not something that
4655:FreeRTOS/src/tasks.c **** 					application code should ever do. */
4656:FreeRTOS/src/tasks.c **** 					portYIELD_WITHIN_API();
4657:FreeRTOS/src/tasks.c **** 				}
4658:FreeRTOS/src/tasks.c **** 				else
4659:FreeRTOS/src/tasks.c **** 				{
4660:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:FreeRTOS/src/tasks.c **** 				}
4662:FreeRTOS/src/tasks.c **** 			}
4663:FreeRTOS/src/tasks.c **** 			else
4664:FreeRTOS/src/tasks.c **** 			{
4665:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:FreeRTOS/src/tasks.c **** 			}
4667:FreeRTOS/src/tasks.c **** 		}
4668:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4669:FreeRTOS/src/tasks.c **** 
4670:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4671:FreeRTOS/src/tasks.c **** 		{
4672:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:FreeRTOS/src/tasks.c **** 
4675:FreeRTOS/src/tasks.c **** 			if( ulReturn != 0UL )
4676:FreeRTOS/src/tasks.c **** 			{
4677:FreeRTOS/src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:FreeRTOS/src/tasks.c **** 				{
4679:FreeRTOS/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:FreeRTOS/src/tasks.c **** 				}
4681:FreeRTOS/src/tasks.c **** 				else
4682:FreeRTOS/src/tasks.c **** 				{
4683:FreeRTOS/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:FreeRTOS/src/tasks.c **** 				}
4685:FreeRTOS/src/tasks.c **** 			}
4686:FreeRTOS/src/tasks.c **** 			else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 96


4687:FreeRTOS/src/tasks.c **** 			{
4688:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:FreeRTOS/src/tasks.c **** 			}
4690:FreeRTOS/src/tasks.c **** 
4691:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:FreeRTOS/src/tasks.c **** 		}
4693:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4694:FreeRTOS/src/tasks.c **** 
4695:FreeRTOS/src/tasks.c **** 		return ulReturn;
4696:FreeRTOS/src/tasks.c **** 	}
4697:FreeRTOS/src/tasks.c **** 
4698:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4700:FreeRTOS/src/tasks.c **** 
4701:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:FreeRTOS/src/tasks.c **** 
4703:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:FreeRTOS/src/tasks.c **** 	{
4705:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
4706:FreeRTOS/src/tasks.c **** 
4707:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4708:FreeRTOS/src/tasks.c **** 		{
4709:FreeRTOS/src/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:FreeRTOS/src/tasks.c **** 			{
4712:FreeRTOS/src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:FreeRTOS/src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:FreeRTOS/src/tasks.c **** 				clear the value to zero. */
4715:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:FreeRTOS/src/tasks.c **** 
4717:FreeRTOS/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:FreeRTOS/src/tasks.c **** 
4720:FreeRTOS/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:FreeRTOS/src/tasks.c **** 				{
4722:FreeRTOS/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:FreeRTOS/src/tasks.c **** 
4725:FreeRTOS/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:FreeRTOS/src/tasks.c **** 					section (some will yield immediately, others wait until the
4727:FreeRTOS/src/tasks.c **** 					critical section exits) - but it is not something that
4728:FreeRTOS/src/tasks.c **** 					application code should ever do. */
4729:FreeRTOS/src/tasks.c **** 					portYIELD_WITHIN_API();
4730:FreeRTOS/src/tasks.c **** 				}
4731:FreeRTOS/src/tasks.c **** 				else
4732:FreeRTOS/src/tasks.c **** 				{
4733:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:FreeRTOS/src/tasks.c **** 				}
4735:FreeRTOS/src/tasks.c **** 			}
4736:FreeRTOS/src/tasks.c **** 			else
4737:FreeRTOS/src/tasks.c **** 			{
4738:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:FreeRTOS/src/tasks.c **** 			}
4740:FreeRTOS/src/tasks.c **** 		}
4741:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4742:FreeRTOS/src/tasks.c **** 
4743:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 97


4744:FreeRTOS/src/tasks.c **** 		{
4745:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:FreeRTOS/src/tasks.c **** 
4747:FreeRTOS/src/tasks.c **** 			if( pulNotificationValue != NULL )
4748:FreeRTOS/src/tasks.c **** 			{
4749:FreeRTOS/src/tasks.c **** 				/* Output the current notification value, which may or may not
4750:FreeRTOS/src/tasks.c **** 				have changed. */
4751:FreeRTOS/src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:FreeRTOS/src/tasks.c **** 			}
4753:FreeRTOS/src/tasks.c **** 
4754:FreeRTOS/src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:FreeRTOS/src/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:FreeRTOS/src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:FreeRTOS/src/tasks.c **** 			unblocked because of a timeout. */
4758:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:FreeRTOS/src/tasks.c **** 			{
4760:FreeRTOS/src/tasks.c **** 				/* A notification was not received. */
4761:FreeRTOS/src/tasks.c **** 				xReturn = pdFALSE;
4762:FreeRTOS/src/tasks.c **** 			}
4763:FreeRTOS/src/tasks.c **** 			else
4764:FreeRTOS/src/tasks.c **** 			{
4765:FreeRTOS/src/tasks.c **** 				/* A notification was already pending or a notification was
4766:FreeRTOS/src/tasks.c **** 				received while the task was waiting. */
4767:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
4769:FreeRTOS/src/tasks.c **** 			}
4770:FreeRTOS/src/tasks.c **** 
4771:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:FreeRTOS/src/tasks.c **** 		}
4773:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4774:FreeRTOS/src/tasks.c **** 
4775:FreeRTOS/src/tasks.c **** 		return xReturn;
4776:FreeRTOS/src/tasks.c **** 	}
4777:FreeRTOS/src/tasks.c **** 
4778:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4780:FreeRTOS/src/tasks.c **** 
4781:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:FreeRTOS/src/tasks.c **** 
4783:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:FreeRTOS/src/tasks.c **** 	{
4785:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
4786:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:FreeRTOS/src/tasks.c **** 
4789:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
4790:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
4791:FreeRTOS/src/tasks.c **** 
4792:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4793:FreeRTOS/src/tasks.c **** 		{
4794:FreeRTOS/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:FreeRTOS/src/tasks.c **** 			{
4796:FreeRTOS/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:FreeRTOS/src/tasks.c **** 			}
4798:FreeRTOS/src/tasks.c **** 
4799:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 98


4801:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:FreeRTOS/src/tasks.c **** 
4803:FreeRTOS/src/tasks.c **** 			switch( eAction )
4804:FreeRTOS/src/tasks.c **** 			{
4805:FreeRTOS/src/tasks.c **** 				case eSetBits	:
4806:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:FreeRTOS/src/tasks.c **** 					break;
4808:FreeRTOS/src/tasks.c **** 
4809:FreeRTOS/src/tasks.c **** 				case eIncrement	:
4810:FreeRTOS/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:FreeRTOS/src/tasks.c **** 					break;
4812:FreeRTOS/src/tasks.c **** 
4813:FreeRTOS/src/tasks.c **** 				case eSetValueWithOverwrite	:
4814:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:FreeRTOS/src/tasks.c **** 					break;
4816:FreeRTOS/src/tasks.c **** 
4817:FreeRTOS/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:FreeRTOS/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:FreeRTOS/src/tasks.c **** 					{
4820:FreeRTOS/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:FreeRTOS/src/tasks.c **** 					}
4822:FreeRTOS/src/tasks.c **** 					else
4823:FreeRTOS/src/tasks.c **** 					{
4824:FreeRTOS/src/tasks.c **** 						/* The value could not be written to the task. */
4825:FreeRTOS/src/tasks.c **** 						xReturn = pdFAIL;
4826:FreeRTOS/src/tasks.c **** 					}
4827:FreeRTOS/src/tasks.c **** 					break;
4828:FreeRTOS/src/tasks.c **** 
4829:FreeRTOS/src/tasks.c **** 				case eNoAction:
4830:FreeRTOS/src/tasks.c **** 					/* The task is being notified without its notify value being
4831:FreeRTOS/src/tasks.c **** 					updated. */
4832:FreeRTOS/src/tasks.c **** 					break;
4833:FreeRTOS/src/tasks.c **** 
4834:FreeRTOS/src/tasks.c **** 				default:
4835:FreeRTOS/src/tasks.c **** 					/* Should not get here if all enums are handled.
4836:FreeRTOS/src/tasks.c **** 					Artificially force an assert by testing a value the
4837:FreeRTOS/src/tasks.c **** 					compiler can't assume is const. */
4838:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:FreeRTOS/src/tasks.c **** 
4840:FreeRTOS/src/tasks.c **** 					break;
4841:FreeRTOS/src/tasks.c **** 			}
4842:FreeRTOS/src/tasks.c **** 
4843:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY();
4844:FreeRTOS/src/tasks.c **** 
4845:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
4847:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:FreeRTOS/src/tasks.c **** 			{
4849:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:FreeRTOS/src/tasks.c **** 
4852:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
4853:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:FreeRTOS/src/tasks.c **** 
4855:FreeRTOS/src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:FreeRTOS/src/tasks.c **** 				{
4857:FreeRTOS/src/tasks.c **** 					/* If a task is blocked waiting for a notification then
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 99


4858:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:FreeRTOS/src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:FreeRTOS/src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:FreeRTOS/src/tasks.c **** 					because it will automatically get reset to a new value when
4862:FreeRTOS/src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:FreeRTOS/src/tasks.c **** 					tickless idling is used it might be more important to enter
4864:FreeRTOS/src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:FreeRTOS/src/tasks.c **** 					earliest possible time. */
4867:FreeRTOS/src/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:FreeRTOS/src/tasks.c **** 				}
4869:FreeRTOS/src/tasks.c **** 				#endif
4870:FreeRTOS/src/tasks.c **** 
4871:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:FreeRTOS/src/tasks.c **** 				{
4873:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
4874:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
4875:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:FreeRTOS/src/tasks.c **** 				}
4877:FreeRTOS/src/tasks.c **** 				else
4878:FreeRTOS/src/tasks.c **** 				{
4879:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:FreeRTOS/src/tasks.c **** 				}
4881:FreeRTOS/src/tasks.c **** 			}
4882:FreeRTOS/src/tasks.c **** 			else
4883:FreeRTOS/src/tasks.c **** 			{
4884:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:FreeRTOS/src/tasks.c **** 			}
4886:FreeRTOS/src/tasks.c **** 		}
4887:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4888:FreeRTOS/src/tasks.c **** 
4889:FreeRTOS/src/tasks.c **** 		return xReturn;
4890:FreeRTOS/src/tasks.c **** 	}
4891:FreeRTOS/src/tasks.c **** 
4892:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4894:FreeRTOS/src/tasks.c **** 
4895:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:FreeRTOS/src/tasks.c **** 
4897:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:FreeRTOS/src/tasks.c **** 	{
4899:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
4900:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:FreeRTOS/src/tasks.c **** 
4904:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
4905:FreeRTOS/src/tasks.c **** 
4906:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 100


4915:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:FreeRTOS/src/tasks.c **** 		provided on the following link:
4921:FreeRTOS/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:FreeRTOS/src/tasks.c **** 
4924:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
4925:FreeRTOS/src/tasks.c **** 
4926:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:FreeRTOS/src/tasks.c **** 		{
4928:FreeRTOS/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:FreeRTOS/src/tasks.c **** 			{
4930:FreeRTOS/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:FreeRTOS/src/tasks.c **** 			}
4932:FreeRTOS/src/tasks.c **** 
4933:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:FreeRTOS/src/tasks.c **** 
4936:FreeRTOS/src/tasks.c **** 			switch( eAction )
4937:FreeRTOS/src/tasks.c **** 			{
4938:FreeRTOS/src/tasks.c **** 				case eSetBits	:
4939:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:FreeRTOS/src/tasks.c **** 					break;
4941:FreeRTOS/src/tasks.c **** 
4942:FreeRTOS/src/tasks.c **** 				case eIncrement	:
4943:FreeRTOS/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:FreeRTOS/src/tasks.c **** 					break;
4945:FreeRTOS/src/tasks.c **** 
4946:FreeRTOS/src/tasks.c **** 				case eSetValueWithOverwrite	:
4947:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:FreeRTOS/src/tasks.c **** 					break;
4949:FreeRTOS/src/tasks.c **** 
4950:FreeRTOS/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:FreeRTOS/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:FreeRTOS/src/tasks.c **** 					{
4953:FreeRTOS/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:FreeRTOS/src/tasks.c **** 					}
4955:FreeRTOS/src/tasks.c **** 					else
4956:FreeRTOS/src/tasks.c **** 					{
4957:FreeRTOS/src/tasks.c **** 						/* The value could not be written to the task. */
4958:FreeRTOS/src/tasks.c **** 						xReturn = pdFAIL;
4959:FreeRTOS/src/tasks.c **** 					}
4960:FreeRTOS/src/tasks.c **** 					break;
4961:FreeRTOS/src/tasks.c **** 
4962:FreeRTOS/src/tasks.c **** 				case eNoAction :
4963:FreeRTOS/src/tasks.c **** 					/* The task is being notified without its notify value being
4964:FreeRTOS/src/tasks.c **** 					updated. */
4965:FreeRTOS/src/tasks.c **** 					break;
4966:FreeRTOS/src/tasks.c **** 
4967:FreeRTOS/src/tasks.c **** 				default:
4968:FreeRTOS/src/tasks.c **** 					/* Should not get here if all enums are handled.
4969:FreeRTOS/src/tasks.c **** 					Artificially force an assert by testing a value the
4970:FreeRTOS/src/tasks.c **** 					compiler can't assume is const. */
4971:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 101


4972:FreeRTOS/src/tasks.c **** 					break;
4973:FreeRTOS/src/tasks.c **** 			}
4974:FreeRTOS/src/tasks.c **** 
4975:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:FreeRTOS/src/tasks.c **** 
4977:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
4979:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:FreeRTOS/src/tasks.c **** 			{
4981:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
4982:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:FreeRTOS/src/tasks.c **** 
4984:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:FreeRTOS/src/tasks.c **** 				{
4986:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:FreeRTOS/src/tasks.c **** 				}
4989:FreeRTOS/src/tasks.c **** 				else
4990:FreeRTOS/src/tasks.c **** 				{
4991:FreeRTOS/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:FreeRTOS/src/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:FreeRTOS/src/tasks.c **** 				}
4995:FreeRTOS/src/tasks.c **** 
4996:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:FreeRTOS/src/tasks.c **** 				{
4998:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
4999:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
5000:FreeRTOS/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:FreeRTOS/src/tasks.c **** 					{
5002:FreeRTOS/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:FreeRTOS/src/tasks.c **** 					}
5004:FreeRTOS/src/tasks.c **** 
5005:FreeRTOS/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:FreeRTOS/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:FreeRTOS/src/tasks.c **** 					safe FreeRTOS function. */
5008:FreeRTOS/src/tasks.c **** 					xYieldPending = pdTRUE;
5009:FreeRTOS/src/tasks.c **** 				}
5010:FreeRTOS/src/tasks.c **** 				else
5011:FreeRTOS/src/tasks.c **** 				{
5012:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:FreeRTOS/src/tasks.c **** 				}
5014:FreeRTOS/src/tasks.c **** 			}
5015:FreeRTOS/src/tasks.c **** 		}
5016:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:FreeRTOS/src/tasks.c **** 
5018:FreeRTOS/src/tasks.c **** 		return xReturn;
5019:FreeRTOS/src/tasks.c **** 	}
5020:FreeRTOS/src/tasks.c **** 
5021:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5023:FreeRTOS/src/tasks.c **** 
5024:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:FreeRTOS/src/tasks.c **** 
5026:FreeRTOS/src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:FreeRTOS/src/tasks.c **** 	{
5028:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 102


5029:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:FreeRTOS/src/tasks.c **** 
5032:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
5033:FreeRTOS/src/tasks.c **** 
5034:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:FreeRTOS/src/tasks.c **** 		provided on the following link:
5049:FreeRTOS/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:FreeRTOS/src/tasks.c **** 
5052:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
5053:FreeRTOS/src/tasks.c **** 
5054:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:FreeRTOS/src/tasks.c **** 		{
5056:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:FreeRTOS/src/tasks.c **** 
5059:FreeRTOS/src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:FreeRTOS/src/tasks.c **** 			semaphore. */
5061:FreeRTOS/src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:FreeRTOS/src/tasks.c **** 
5063:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:FreeRTOS/src/tasks.c **** 
5065:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
5067:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:FreeRTOS/src/tasks.c **** 			{
5069:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
5070:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:FreeRTOS/src/tasks.c **** 
5072:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:FreeRTOS/src/tasks.c **** 				{
5074:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:FreeRTOS/src/tasks.c **** 				}
5077:FreeRTOS/src/tasks.c **** 				else
5078:FreeRTOS/src/tasks.c **** 				{
5079:FreeRTOS/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:FreeRTOS/src/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:FreeRTOS/src/tasks.c **** 				}
5083:FreeRTOS/src/tasks.c **** 
5084:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 103


5086:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
5087:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
5088:FreeRTOS/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:FreeRTOS/src/tasks.c **** 					{
5090:FreeRTOS/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:FreeRTOS/src/tasks.c **** 					}
5092:FreeRTOS/src/tasks.c **** 
5093:FreeRTOS/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:FreeRTOS/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:FreeRTOS/src/tasks.c **** 					safe FreeRTOS function. */
5096:FreeRTOS/src/tasks.c **** 					xYieldPending = pdTRUE;
5097:FreeRTOS/src/tasks.c **** 				}
5098:FreeRTOS/src/tasks.c **** 				else
5099:FreeRTOS/src/tasks.c **** 				{
5100:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:FreeRTOS/src/tasks.c **** 				}
5102:FreeRTOS/src/tasks.c **** 			}
5103:FreeRTOS/src/tasks.c **** 		}
5104:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:FreeRTOS/src/tasks.c **** 	}
5106:FreeRTOS/src/tasks.c **** 
5107:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5109:FreeRTOS/src/tasks.c **** 
5110:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:FreeRTOS/src/tasks.c **** 
5112:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:FreeRTOS/src/tasks.c **** 	{
5114:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
5115:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
5116:FreeRTOS/src/tasks.c **** 
5117:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:FreeRTOS/src/tasks.c **** 		its notification state cleared. */
5119:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:FreeRTOS/src/tasks.c **** 
5121:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
5122:FreeRTOS/src/tasks.c **** 		{
5123:FreeRTOS/src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:FreeRTOS/src/tasks.c **** 			{
5125:FreeRTOS/src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
5127:FreeRTOS/src/tasks.c **** 			}
5128:FreeRTOS/src/tasks.c **** 			else
5129:FreeRTOS/src/tasks.c **** 			{
5130:FreeRTOS/src/tasks.c **** 				xReturn = pdFAIL;
5131:FreeRTOS/src/tasks.c **** 			}
5132:FreeRTOS/src/tasks.c **** 		}
5133:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
5134:FreeRTOS/src/tasks.c **** 
5135:FreeRTOS/src/tasks.c **** 		return xReturn;
5136:FreeRTOS/src/tasks.c **** 	}
5137:FreeRTOS/src/tasks.c **** 
5138:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5140:FreeRTOS/src/tasks.c **** 
5141:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 104


5143:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:FreeRTOS/src/tasks.c **** 	{
5145:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
5146:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
5147:FreeRTOS/src/tasks.c **** 
5148:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:FreeRTOS/src/tasks.c **** 		its notification state cleared. */
5150:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:FreeRTOS/src/tasks.c **** 
5152:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
5153:FreeRTOS/src/tasks.c **** 		{
5154:FreeRTOS/src/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:FreeRTOS/src/tasks.c **** 			then clear the bit mask. */
5156:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:FreeRTOS/src/tasks.c **** 		}
5159:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
5160:FreeRTOS/src/tasks.c **** 
5161:FreeRTOS/src/tasks.c **** 		return ulReturn;
5162:FreeRTOS/src/tasks.c **** 	}
5163:FreeRTOS/src/tasks.c **** 
5164:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5166:FreeRTOS/src/tasks.c **** 
5167:FreeRTOS/src/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:FreeRTOS/src/tasks.c **** 
5169:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:FreeRTOS/src/tasks.c **** 	{
5171:FreeRTOS/src/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:FreeRTOS/src/tasks.c **** 	}
5173:FreeRTOS/src/tasks.c **** 
5174:FreeRTOS/src/tasks.c **** #endif
5175:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5176:FreeRTOS/src/tasks.c **** 
5177:FreeRTOS/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:FreeRTOS/src/tasks.c **** {
 611              		.loc 1 5178 1 view -0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		.loc 1 5178 1 is_stmt 0 view .LVU176
 616 0000 70B5     		push	{r4, r5, r6, lr}
 617              	.LCFI3:
 618              		.cfi_def_cfa_offset 16
 619              		.cfi_offset 4, -16
 620              		.cfi_offset 5, -12
 621              		.cfi_offset 6, -8
 622              		.cfi_offset 14, -4
 623 0002 0446     		mov	r4, r0
 624 0004 0E46     		mov	r6, r1
5179:FreeRTOS/src/tasks.c **** TickType_t xTimeToWake;
 625              		.loc 1 5179 1 is_stmt 1 view .LVU177
5180:FreeRTOS/src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 626              		.loc 1 5180 1 view .LVU178
 627              		.loc 1 5180 18 is_stmt 0 view .LVU179
 628 0006 174B     		ldr	r3, .L55
 629 0008 1D68     		ldr	r5, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 105


 630              	.LVL44:
5181:FreeRTOS/src/tasks.c **** 
5182:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:FreeRTOS/src/tasks.c **** 	{
5184:FreeRTOS/src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:FreeRTOS/src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:FreeRTOS/src/tasks.c **** 		when the task leaves the Blocked state. */
5187:FreeRTOS/src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:FreeRTOS/src/tasks.c **** 	}
5189:FreeRTOS/src/tasks.c **** 	#endif
5190:FreeRTOS/src/tasks.c **** 
5191:FreeRTOS/src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:FreeRTOS/src/tasks.c **** 	as the same list item is used for both lists. */
5193:FreeRTOS/src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 631              		.loc 1 5193 2 is_stmt 1 view .LVU180
 632              		.loc 1 5193 35 is_stmt 0 view .LVU181
 633 000a 174B     		ldr	r3, .L55+4
 634 000c 1868     		ldr	r0, [r3]
 635              	.LVL45:
 636              		.loc 1 5193 6 view .LVU182
 637 000e 0430     		adds	r0, r0, #4
 638 0010 FFF7FEFF 		bl	uxListRemove
 639              	.LVL46:
5194:FreeRTOS/src/tasks.c **** 	{
5195:FreeRTOS/src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:FreeRTOS/src/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:FreeRTOS/src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:FreeRTOS/src/tasks.c **** 	}
5199:FreeRTOS/src/tasks.c **** 	else
5200:FreeRTOS/src/tasks.c **** 	{
5201:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 640              		.loc 1 5201 27 is_stmt 1 view .LVU183
5202:FreeRTOS/src/tasks.c **** 	}
5203:FreeRTOS/src/tasks.c **** 
5204:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:FreeRTOS/src/tasks.c **** 	{
5206:FreeRTOS/src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 641              		.loc 1 5206 3 view .LVU184
 642              		.loc 1 5206 5 is_stmt 0 view .LVU185
 643 0014 B4F1FF3F 		cmp	r4, #-1
 644 0018 0DD0     		beq	.L54
 645              	.L50:
5207:FreeRTOS/src/tasks.c **** 		{
5208:FreeRTOS/src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:FreeRTOS/src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:FreeRTOS/src/tasks.c **** 			indefinitely. */
5211:FreeRTOS/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:FreeRTOS/src/tasks.c **** 		}
5213:FreeRTOS/src/tasks.c **** 		else
5214:FreeRTOS/src/tasks.c **** 		{
5215:FreeRTOS/src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:FreeRTOS/src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:FreeRTOS/src/tasks.c **** 			kernel will manage it correctly. */
5218:FreeRTOS/src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 646              		.loc 1 5218 4 is_stmt 1 view .LVU186
 647              		.loc 1 5218 16 is_stmt 0 view .LVU187
 648 001a 2C44     		add	r4, r4, r5
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 106


 649              	.LVL47:
5219:FreeRTOS/src/tasks.c **** 
5220:FreeRTOS/src/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:FreeRTOS/src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 650              		.loc 1 5221 4 is_stmt 1 view .LVU188
 651 001c 124B     		ldr	r3, .L55+4
 652 001e 1B68     		ldr	r3, [r3]
 653 0020 5C60     		str	r4, [r3, #4]
5222:FreeRTOS/src/tasks.c **** 
5223:FreeRTOS/src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 654              		.loc 1 5223 4 view .LVU189
 655              		.loc 1 5223 6 is_stmt 0 view .LVU190
 656 0022 A542     		cmp	r5, r4
 657 0024 10D9     		bls	.L52
5224:FreeRTOS/src/tasks.c **** 			{
5225:FreeRTOS/src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:FreeRTOS/src/tasks.c **** 				list. */
5227:FreeRTOS/src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 658              		.loc 1 5227 5 is_stmt 1 view .LVU191
 659 0026 114B     		ldr	r3, .L55+8
 660 0028 1868     		ldr	r0, [r3]
 661              		.loc 1 5227 60 is_stmt 0 view .LVU192
 662 002a 0F4B     		ldr	r3, .L55+4
 663 002c 1968     		ldr	r1, [r3]
 664              		.loc 1 5227 5 view .LVU193
 665 002e 0431     		adds	r1, r1, #4
 666 0030 FFF7FEFF 		bl	vListInsert
 667              	.LVL48:
 668              	.L49:
5228:FreeRTOS/src/tasks.c **** 			}
5229:FreeRTOS/src/tasks.c **** 			else
5230:FreeRTOS/src/tasks.c **** 			{
5231:FreeRTOS/src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:FreeRTOS/src/tasks.c **** 				is used. */
5233:FreeRTOS/src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:FreeRTOS/src/tasks.c **** 
5235:FreeRTOS/src/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:FreeRTOS/src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:FreeRTOS/src/tasks.c **** 				needs to be updated too. */
5238:FreeRTOS/src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:FreeRTOS/src/tasks.c **** 				{
5240:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:FreeRTOS/src/tasks.c **** 				}
5242:FreeRTOS/src/tasks.c **** 				else
5243:FreeRTOS/src/tasks.c **** 				{
5244:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:FreeRTOS/src/tasks.c **** 				}
5246:FreeRTOS/src/tasks.c **** 			}
5247:FreeRTOS/src/tasks.c **** 		}
5248:FreeRTOS/src/tasks.c **** 	}
5249:FreeRTOS/src/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:FreeRTOS/src/tasks.c **** 	{
5251:FreeRTOS/src/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:FreeRTOS/src/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:FreeRTOS/src/tasks.c **** 		will manage it correctly. */
5254:FreeRTOS/src/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 107


5256:FreeRTOS/src/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:FreeRTOS/src/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:FreeRTOS/src/tasks.c **** 
5259:FreeRTOS/src/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:FreeRTOS/src/tasks.c **** 		{
5261:FreeRTOS/src/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:FreeRTOS/src/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:FreeRTOS/src/tasks.c **** 		}
5264:FreeRTOS/src/tasks.c **** 		else
5265:FreeRTOS/src/tasks.c **** 		{
5266:FreeRTOS/src/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:FreeRTOS/src/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:FreeRTOS/src/tasks.c **** 
5269:FreeRTOS/src/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:FreeRTOS/src/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:FreeRTOS/src/tasks.c **** 			too. */
5272:FreeRTOS/src/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:FreeRTOS/src/tasks.c **** 			{
5274:FreeRTOS/src/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:FreeRTOS/src/tasks.c **** 			}
5276:FreeRTOS/src/tasks.c **** 			else
5277:FreeRTOS/src/tasks.c **** 			{
5278:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:FreeRTOS/src/tasks.c **** 			}
5280:FreeRTOS/src/tasks.c **** 		}
5281:FreeRTOS/src/tasks.c **** 
5282:FreeRTOS/src/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:FreeRTOS/src/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:FreeRTOS/src/tasks.c **** 	}
5285:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:FreeRTOS/src/tasks.c **** }
 669              		.loc 1 5286 1 view .LVU194
 670 0034 70BD     		pop	{r4, r5, r6, pc}
 671              	.LVL49:
 672              	.L54:
5206:FreeRTOS/src/tasks.c **** 		{
 673              		.loc 1 5206 41 discriminator 1 view .LVU195
 674 0036 002E     		cmp	r6, #0
 675 0038 EFD0     		beq	.L50
5211:FreeRTOS/src/tasks.c **** 		}
 676              		.loc 1 5211 4 is_stmt 1 view .LVU196
5211:FreeRTOS/src/tasks.c **** 		}
 677              		.loc 1 5211 56 is_stmt 0 view .LVU197
 678 003a 0B4B     		ldr	r3, .L55+4
 679 003c 1968     		ldr	r1, [r3]
5211:FreeRTOS/src/tasks.c **** 		}
 680              		.loc 1 5211 4 view .LVU198
 681 003e 0431     		adds	r1, r1, #4
 682 0040 0B48     		ldr	r0, .L55+12
 683 0042 FFF7FEFF 		bl	vListInsertEnd
 684              	.LVL50:
 685 0046 F5E7     		b	.L49
 686              	.LVL51:
 687              	.L52:
5233:FreeRTOS/src/tasks.c **** 
 688              		.loc 1 5233 5 is_stmt 1 view .LVU199
 689 0048 0A4B     		ldr	r3, .L55+16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 108


 690 004a 1868     		ldr	r0, [r3]
5233:FreeRTOS/src/tasks.c **** 
 691              		.loc 1 5233 52 is_stmt 0 view .LVU200
 692 004c 064B     		ldr	r3, .L55+4
 693 004e 1968     		ldr	r1, [r3]
5233:FreeRTOS/src/tasks.c **** 
 694              		.loc 1 5233 5 view .LVU201
 695 0050 0431     		adds	r1, r1, #4
 696 0052 FFF7FEFF 		bl	vListInsert
 697              	.LVL52:
5238:FreeRTOS/src/tasks.c **** 				{
 698              		.loc 1 5238 5 is_stmt 1 view .LVU202
5238:FreeRTOS/src/tasks.c **** 				{
 699              		.loc 1 5238 21 is_stmt 0 view .LVU203
 700 0056 084B     		ldr	r3, .L55+20
 701 0058 1B68     		ldr	r3, [r3]
5238:FreeRTOS/src/tasks.c **** 				{
 702              		.loc 1 5238 7 view .LVU204
 703 005a A342     		cmp	r3, r4
 704 005c EAD9     		bls	.L49
5240:FreeRTOS/src/tasks.c **** 				}
 705              		.loc 1 5240 6 is_stmt 1 view .LVU205
5240:FreeRTOS/src/tasks.c **** 				}
 706              		.loc 1 5240 27 is_stmt 0 view .LVU206
 707 005e 064B     		ldr	r3, .L55+20
 708 0060 1C60     		str	r4, [r3]
5244:FreeRTOS/src/tasks.c **** 				}
 709              		.loc 1 5244 30 is_stmt 1 view .LVU207
 710              		.loc 1 5286 1 is_stmt 0 view .LVU208
 711 0062 E7E7     		b	.L49
 712              	.L56:
 713              		.align	2
 714              	.L55:
 715 0064 00000000 		.word	.LANCHOR13
 716 0068 00000000 		.word	.LANCHOR9
 717 006c 00000000 		.word	.LANCHOR7
 718 0070 00000000 		.word	.LANCHOR0
 719 0074 00000000 		.word	.LANCHOR3
 720 0078 00000000 		.word	.LANCHOR4
 721              		.cfi_endproc
 722              	.LFE54:
 724              		.section	.text.xTaskCreate,"ax",%progbits
 725              		.align	1
 726              		.global	xTaskCreate
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu fpv4-sp-d16
 732              	xTaskCreate:
 733              	.LVL53:
 734              	.LFB4:
 739:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 735              		.loc 1 739 2 is_stmt 1 view -0
 736              		.cfi_startproc
 737              		@ args = 8, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 109


 739              		.loc 1 739 2 is_stmt 0 view .LVU210
 740 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 741              	.LCFI4:
 742              		.cfi_def_cfa_offset 28
 743              		.cfi_offset 4, -28
 744              		.cfi_offset 5, -24
 745              		.cfi_offset 6, -20
 746              		.cfi_offset 7, -16
 747              		.cfi_offset 8, -12
 748              		.cfi_offset 9, -8
 749              		.cfi_offset 14, -4
 750 0004 85B0     		sub	sp, sp, #20
 751              	.LCFI5:
 752              		.cfi_def_cfa_offset 48
 753 0006 0746     		mov	r7, r0
 754 0008 8846     		mov	r8, r1
 755 000a 1446     		mov	r4, r2
 756 000c 9946     		mov	r9, r3
 740:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 757              		.loc 1 740 2 is_stmt 1 view .LVU211
 741:FreeRTOS/src/tasks.c **** 
 758              		.loc 1 741 2 view .LVU212
 759              	.LBB22:
 770:FreeRTOS/src/tasks.c **** 
 760              		.loc 1 770 3 view .LVU213
 773:FreeRTOS/src/tasks.c **** 
 761              		.loc 1 773 4 view .LVU214
 773:FreeRTOS/src/tasks.c **** 
 762              		.loc 1 773 14 is_stmt 0 view .LVU215
 763 000e 9000     		lsls	r0, r2, #2
 764              	.LVL54:
 773:FreeRTOS/src/tasks.c **** 
 765              		.loc 1 773 14 view .LVU216
 766 0010 FFF7FEFF 		bl	pvPortMalloc
 767              	.LVL55:
 775:FreeRTOS/src/tasks.c **** 			{
 768              		.loc 1 775 4 is_stmt 1 view .LVU217
 775:FreeRTOS/src/tasks.c **** 			{
 769              		.loc 1 775 6 is_stmt 0 view .LVU218
 770 0014 E8B1     		cbz	r0, .L61
 771 0016 0646     		mov	r6, r0
 778:FreeRTOS/src/tasks.c **** 
 772              		.loc 1 778 5 is_stmt 1 view .LVU219
 778:FreeRTOS/src/tasks.c **** 
 773              		.loc 1 778 28 is_stmt 0 view .LVU220
 774 0018 5420     		movs	r0, #84
 775              	.LVL56:
 778:FreeRTOS/src/tasks.c **** 
 776              		.loc 1 778 28 view .LVU221
 777 001a FFF7FEFF 		bl	pvPortMalloc
 778              	.LVL57:
 780:FreeRTOS/src/tasks.c **** 				{
 779              		.loc 1 780 5 is_stmt 1 view .LVU222
 780:FreeRTOS/src/tasks.c **** 				{
 780              		.loc 1 780 7 is_stmt 0 view .LVU223
 781 001e 0546     		mov	r5, r0
 782 0020 98B1     		cbz	r0, .L59
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 110


 783:FreeRTOS/src/tasks.c **** 				}
 783              		.loc 1 783 6 is_stmt 1 view .LVU224
 783:FreeRTOS/src/tasks.c **** 				}
 784              		.loc 1 783 24 is_stmt 0 view .LVU225
 785 0022 0663     		str	r6, [r0, #48]
 786              	.LVL58:
 787              	.L60:
 783:FreeRTOS/src/tasks.c **** 				}
 788              		.loc 1 783 24 view .LVU226
 789              	.LBE22:
 799:FreeRTOS/src/tasks.c **** 		{
 790              		.loc 1 799 3 is_stmt 1 view .LVU227
 799:FreeRTOS/src/tasks.c **** 		{
 791              		.loc 1 799 5 is_stmt 0 view .LVU228
 792 0024 D5B1     		cbz	r5, .L62
 809:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 793              		.loc 1 809 4 is_stmt 1 view .LVU229
 794 0026 0023     		movs	r3, #0
 795 0028 0393     		str	r3, [sp, #12]
 796 002a 0295     		str	r5, [sp, #8]
 797 002c 0D9B     		ldr	r3, [sp, #52]
 798 002e 0193     		str	r3, [sp, #4]
 799 0030 0C9B     		ldr	r3, [sp, #48]
 800 0032 0093     		str	r3, [sp]
 801 0034 4B46     		mov	r3, r9
 802 0036 2246     		mov	r2, r4
 803 0038 4146     		mov	r1, r8
 804 003a 3846     		mov	r0, r7
 805 003c FFF7FEFF 		bl	prvInitialiseNewTask
 806              	.LVL59:
 810:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 807              		.loc 1 810 4 view .LVU230
 808 0040 2846     		mov	r0, r5
 809 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 810              	.LVL60:
 811:FreeRTOS/src/tasks.c **** 		}
 811              		.loc 1 811 4 view .LVU231
 811:FreeRTOS/src/tasks.c **** 		}
 812              		.loc 1 811 12 is_stmt 0 view .LVU232
 813 0046 0120     		movs	r0, #1
 814 0048 05E0     		b	.L57
 815              	.LVL61:
 816              	.L59:
 817              	.LBB23:
 789:FreeRTOS/src/tasks.c **** 				}
 818              		.loc 1 789 6 is_stmt 1 view .LVU233
 819 004a 3046     		mov	r0, r6
 820              	.LVL62:
 789:FreeRTOS/src/tasks.c **** 				}
 821              		.loc 1 789 6 is_stmt 0 view .LVU234
 822 004c FFF7FEFF 		bl	vPortFree
 823              	.LVL63:
 824 0050 E8E7     		b	.L60
 825              	.LVL64:
 826              	.L61:
 789:FreeRTOS/src/tasks.c **** 				}
 827              		.loc 1 789 6 view .LVU235
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 111


 828              	.LBE23:
 815:FreeRTOS/src/tasks.c **** 		}
 829              		.loc 1 815 12 view .LVU236
 830 0052 4FF0FF30 		mov	r0, #-1
 831              	.LVL65:
 832              	.L57:
 819:FreeRTOS/src/tasks.c **** 
 833              		.loc 1 819 2 view .LVU237
 834 0056 05B0     		add	sp, sp, #20
 835              	.LCFI6:
 836              		.cfi_remember_state
 837              		.cfi_def_cfa_offset 28
 838              		@ sp needed
 839 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 840              	.LVL66:
 841              	.L62:
 842              	.LCFI7:
 843              		.cfi_restore_state
 815:FreeRTOS/src/tasks.c **** 		}
 844              		.loc 1 815 12 view .LVU238
 845 005c 4FF0FF30 		mov	r0, #-1
 846              	.LVL67:
 818:FreeRTOS/src/tasks.c **** 	}
 847              		.loc 1 818 3 is_stmt 1 view .LVU239
 818:FreeRTOS/src/tasks.c **** 	}
 848              		.loc 1 818 10 is_stmt 0 view .LVU240
 849 0060 F9E7     		b	.L57
 850              		.cfi_endproc
 851              	.LFE4:
 853              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 854              		.align	1
 855              		.global	uxTaskPriorityGet
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu fpv4-sp-d16
 861              	uxTaskPriorityGet:
 862              	.LVL68:
 863              	.LFB9:
1479:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 864              		.loc 1 1479 2 is_stmt 1 view -0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
1479:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 868              		.loc 1 1479 2 is_stmt 0 view .LVU242
 869 0000 10B5     		push	{r4, lr}
 870              	.LCFI8:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 4, -8
 873              		.cfi_offset 14, -4
 874 0002 0446     		mov	r4, r0
1480:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
 875              		.loc 1 1480 2 is_stmt 1 view .LVU243
1481:FreeRTOS/src/tasks.c **** 
 876              		.loc 1 1481 2 view .LVU244
1483:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 112


 877              		.loc 1 1483 3 view .LVU245
 878 0004 FFF7FEFF 		bl	vPortEnterCritical
 879              	.LVL69:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 880              		.loc 1 1487 4 view .LVU246
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 881              		.loc 1 1487 12 is_stmt 0 view .LVU247
 882 0008 24B1     		cbz	r4, .L67
 883              	.LVL70:
 884              	.L65:
1488:FreeRTOS/src/tasks.c **** 		}
 885              		.loc 1 1488 4 is_stmt 1 discriminator 4 view .LVU248
1488:FreeRTOS/src/tasks.c **** 		}
 886              		.loc 1 1488 13 is_stmt 0 discriminator 4 view .LVU249
 887 000a E46A     		ldr	r4, [r4, #44]
 888              	.LVL71:
1490:FreeRTOS/src/tasks.c **** 
 889              		.loc 1 1490 3 is_stmt 1 discriminator 4 view .LVU250
 890 000c FFF7FEFF 		bl	vPortExitCritical
 891              	.LVL72:
1492:FreeRTOS/src/tasks.c **** 	}
 892              		.loc 1 1492 3 discriminator 4 view .LVU251
1493:FreeRTOS/src/tasks.c **** 
 893              		.loc 1 1493 2 is_stmt 0 discriminator 4 view .LVU252
 894 0010 2046     		mov	r0, r4
 895 0012 10BD     		pop	{r4, pc}
 896              	.LVL73:
 897              	.L67:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 898              		.loc 1 1487 12 discriminator 1 view .LVU253
 899 0014 014B     		ldr	r3, .L68
 900 0016 1C68     		ldr	r4, [r3]
 901              	.LVL74:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 902              		.loc 1 1487 12 discriminator 1 view .LVU254
 903 0018 F7E7     		b	.L65
 904              	.L69:
 905 001a 00BF     		.align	2
 906              	.L68:
 907 001c 00000000 		.word	.LANCHOR9
 908              		.cfi_endproc
 909              	.LFE9:
 911              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 912              		.align	1
 913              		.global	uxTaskPriorityGetFromISR
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu fpv4-sp-d16
 919              	uxTaskPriorityGetFromISR:
 920              	.LVL75:
 921              	.LFB10:
1501:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 922              		.loc 1 1501 2 is_stmt 1 view -0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 113


 926              		@ link register save eliminated.
1502:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 927              		.loc 1 1502 2 view .LVU256
1503:FreeRTOS/src/tasks.c **** 
 928              		.loc 1 1503 2 view .LVU257
1521:FreeRTOS/src/tasks.c **** 
 929              		.loc 1 1521 45 view .LVU258
1523:FreeRTOS/src/tasks.c **** 		{
 930              		.loc 1 1523 3 view .LVU259
 931              	.LBB24:
 932              	.LBI24:
 933              		.file 2 "FreeRTOS/inc/portmacro.h"
   1:FreeRTOS/inc/portmacro.h **** /*
   2:FreeRTOS/inc/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/inc/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/inc/portmacro.h ****  *
   5:FreeRTOS/inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/inc/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/inc/portmacro.h ****  *
  12:FreeRTOS/inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/inc/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/inc/portmacro.h ****  *
  15:FreeRTOS/inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/inc/portmacro.h ****  *
  22:FreeRTOS/inc/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/inc/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/inc/portmacro.h ****  *
  25:FreeRTOS/inc/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/inc/portmacro.h ****  */
  27:FreeRTOS/inc/portmacro.h **** 
  28:FreeRTOS/inc/portmacro.h **** 
  29:FreeRTOS/inc/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/inc/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/inc/portmacro.h **** 
  32:FreeRTOS/inc/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/inc/portmacro.h **** extern "C" {
  34:FreeRTOS/inc/portmacro.h **** #endif
  35:FreeRTOS/inc/portmacro.h **** 
  36:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/inc/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/inc/portmacro.h ****  *
  39:FreeRTOS/inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/inc/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/inc/portmacro.h ****  *
  42:FreeRTOS/inc/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/inc/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/inc/portmacro.h ****  */
  45:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 114


  46:FreeRTOS/inc/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/inc/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/inc/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/inc/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/inc/portmacro.h **** #define portLONG		long
  51:FreeRTOS/inc/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/inc/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/inc/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/inc/portmacro.h **** 
  55:FreeRTOS/inc/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/inc/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/inc/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/inc/portmacro.h **** 
  59:FreeRTOS/inc/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/inc/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/inc/portmacro.h **** #else
  63:FreeRTOS/inc/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/inc/portmacro.h **** 
  66:FreeRTOS/inc/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/inc/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/inc/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/inc/portmacro.h **** #endif
  70:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/inc/portmacro.h **** 
  72:FreeRTOS/inc/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/inc/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/inc/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/inc/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/inc/portmacro.h **** 
  78:FreeRTOS/inc/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/inc/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/inc/portmacro.h **** {																				\
  81:FreeRTOS/inc/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/inc/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/inc/portmacro.h **** 																				\
  84:FreeRTOS/inc/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/inc/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/inc/portmacro.h **** }
  89:FreeRTOS/inc/portmacro.h **** 
  90:FreeRTOS/inc/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/inc/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/inc/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/inc/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/inc/portmacro.h **** 
  96:FreeRTOS/inc/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/inc/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/inc/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/inc/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/inc/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/inc/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/inc/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 115


 103:FreeRTOS/inc/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/inc/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/inc/portmacro.h **** 
 106:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/inc/portmacro.h **** 
 108:FreeRTOS/inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/inc/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/inc/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/inc/portmacro.h **** 
 115:FreeRTOS/inc/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/inc/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/inc/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/inc/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/inc/portmacro.h **** #endif
 120:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/inc/portmacro.h **** 
 122:FreeRTOS/inc/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/inc/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/inc/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/inc/portmacro.h **** #endif
 126:FreeRTOS/inc/portmacro.h **** 
 127:FreeRTOS/inc/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/inc/portmacro.h **** 
 129:FreeRTOS/inc/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/inc/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/inc/portmacro.h **** 	{
 132:FreeRTOS/inc/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/inc/portmacro.h **** 
 134:FreeRTOS/inc/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/inc/portmacro.h **** 	}
 137:FreeRTOS/inc/portmacro.h **** 
 138:FreeRTOS/inc/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/inc/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/inc/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/inc/portmacro.h **** 	#endif
 142:FreeRTOS/inc/portmacro.h **** 
 143:FreeRTOS/inc/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/inc/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/inc/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/inc/portmacro.h **** 
 147:FreeRTOS/inc/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/inc/portmacro.h **** 
 149:FreeRTOS/inc/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/inc/portmacro.h **** 
 151:FreeRTOS/inc/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/inc/portmacro.h **** 
 153:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/inc/portmacro.h **** 
 155:FreeRTOS/inc/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/inc/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/inc/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/inc/portmacro.h **** #endif
 159:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 116


 160:FreeRTOS/inc/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/inc/portmacro.h **** #define portNOP()
 162:FreeRTOS/inc/portmacro.h **** 
 163:FreeRTOS/inc/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/inc/portmacro.h **** 
 165:FreeRTOS/inc/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/inc/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/inc/portmacro.h **** #endif
 168:FreeRTOS/inc/portmacro.h **** 
 169:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:FreeRTOS/inc/portmacro.h **** {
 171:FreeRTOS/inc/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:FreeRTOS/inc/portmacro.h **** BaseType_t xReturn;
 173:FreeRTOS/inc/portmacro.h **** 
 174:FreeRTOS/inc/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:FreeRTOS/inc/portmacro.h **** 
 177:FreeRTOS/inc/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:FreeRTOS/inc/portmacro.h **** 	{
 179:FreeRTOS/inc/portmacro.h **** 		xReturn = pdFALSE;
 180:FreeRTOS/inc/portmacro.h **** 	}
 181:FreeRTOS/inc/portmacro.h **** 	else
 182:FreeRTOS/inc/portmacro.h **** 	{
 183:FreeRTOS/inc/portmacro.h **** 		xReturn = pdTRUE;
 184:FreeRTOS/inc/portmacro.h **** 	}
 185:FreeRTOS/inc/portmacro.h **** 
 186:FreeRTOS/inc/portmacro.h **** 	return xReturn;
 187:FreeRTOS/inc/portmacro.h **** }
 188:FreeRTOS/inc/portmacro.h **** 
 189:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 190:FreeRTOS/inc/portmacro.h **** 
 191:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:FreeRTOS/inc/portmacro.h **** {
 193:FreeRTOS/inc/portmacro.h **** uint32_t ulNewBASEPRI;
 194:FreeRTOS/inc/portmacro.h **** 
 195:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 196:FreeRTOS/inc/portmacro.h **** 	(
 197:FreeRTOS/inc/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 200:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 201:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:FreeRTOS/inc/portmacro.h **** 	);
 203:FreeRTOS/inc/portmacro.h **** }
 204:FreeRTOS/inc/portmacro.h **** 
 205:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 206:FreeRTOS/inc/portmacro.h **** 
 207:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 934              		.loc 2 207 34 view .LVU260
 935              	.LBB25:
 208:FreeRTOS/inc/portmacro.h **** {
 209:FreeRTOS/inc/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 936              		.loc 2 209 1 view .LVU261
 210:FreeRTOS/inc/portmacro.h **** 
 211:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 937              		.loc 2 211 2 view .LVU262
 938              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 117


 939              	@ 211 "FreeRTOS/inc/portmacro.h" 1
 940 0000 EFF31183 			mrs r3, basepri											
 941 0004 4FF0BF02 		mov r2, #191												
 942 0008 82F31188 		msr basepri, r2											
 943 000c BFF36F8F 		isb														
 944 0010 BFF34F8F 		dsb														
 945              	
 946              	@ 0 "" 2
 947              	.LVL76:
 212:FreeRTOS/inc/portmacro.h **** 	(
 213:FreeRTOS/inc/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:FreeRTOS/inc/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 217:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 218:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:FreeRTOS/inc/portmacro.h **** 	);
 220:FreeRTOS/inc/portmacro.h **** 
 221:FreeRTOS/inc/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:FreeRTOS/inc/portmacro.h **** 	warnings. */
 223:FreeRTOS/inc/portmacro.h **** 	return ulOriginalBASEPRI;
 948              		.loc 2 223 2 view .LVU263
 949              		.loc 2 223 2 is_stmt 0 view .LVU264
 950              		.thumb
 951              		.syntax unified
 952              	.LBE25:
 953              	.LBE24:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 954              		.loc 1 1527 4 is_stmt 1 view .LVU265
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 955              		.loc 1 1527 12 is_stmt 0 view .LVU266
 956 0014 18B1     		cbz	r0, .L72
 957              	.LVL77:
 958              	.L71:
1528:FreeRTOS/src/tasks.c **** 		}
 959              		.loc 1 1528 4 is_stmt 1 discriminator 4 view .LVU267
1528:FreeRTOS/src/tasks.c **** 		}
 960              		.loc 1 1528 13 is_stmt 0 discriminator 4 view .LVU268
 961 0016 C06A     		ldr	r0, [r0, #44]
 962              	.LVL78:
1530:FreeRTOS/src/tasks.c **** 
 963              		.loc 1 1530 3 is_stmt 1 discriminator 4 view .LVU269
 964              	.LBB26:
 965              	.LBI26:
 224:FreeRTOS/inc/portmacro.h **** }
 225:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 226:FreeRTOS/inc/portmacro.h **** 
 227:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 966              		.loc 2 227 30 discriminator 4 view .LVU270
 967              	.LBB27:
 228:FreeRTOS/inc/portmacro.h **** {
 229:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 968              		.loc 2 229 2 discriminator 4 view .LVU271
 969              		.syntax unified
 970              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 971 0018 83F31188 			msr basepri, r3	
 972              	@ 0 "" 2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 118


 973              	.LVL79:
 974              		.loc 2 229 2 is_stmt 0 discriminator 4 view .LVU272
 975              		.thumb
 976              		.syntax unified
 977              	.LBE27:
 978              	.LBE26:
1532:FreeRTOS/src/tasks.c **** 	}
 979              		.loc 1 1532 3 is_stmt 1 discriminator 4 view .LVU273
1533:FreeRTOS/src/tasks.c **** 
 980              		.loc 1 1533 2 is_stmt 0 discriminator 4 view .LVU274
 981 001c 7047     		bx	lr
 982              	.LVL80:
 983              	.L72:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 984              		.loc 1 1527 12 discriminator 1 view .LVU275
 985 001e 014A     		ldr	r2, .L73
 986 0020 1068     		ldr	r0, [r2]
 987              	.LVL81:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 988              		.loc 1 1527 12 discriminator 1 view .LVU276
 989 0022 F8E7     		b	.L71
 990              	.L74:
 991              		.align	2
 992              	.L73:
 993 0024 00000000 		.word	.LANCHOR9
 994              		.cfi_endproc
 995              	.LFE10:
 997              		.section	.text.vTaskPrioritySet,"ax",%progbits
 998              		.align	1
 999              		.global	vTaskPrioritySet
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1003              		.fpu fpv4-sp-d16
 1005              	vTaskPrioritySet:
 1006              	.LVL82:
 1007              	.LFB11:
1541:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1008              		.loc 1 1541 2 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
1541:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1012              		.loc 1 1541 2 is_stmt 0 view .LVU278
 1013 0000 70B5     		push	{r4, r5, r6, lr}
 1014              	.LCFI9:
 1015              		.cfi_def_cfa_offset 16
 1016              		.cfi_offset 4, -16
 1017              		.cfi_offset 5, -12
 1018              		.cfi_offset 6, -8
 1019              		.cfi_offset 14, -4
 1020 0002 0446     		mov	r4, r0
 1021 0004 0D46     		mov	r5, r1
1542:FreeRTOS/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1022              		.loc 1 1542 2 is_stmt 1 view .LVU279
1543:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1023              		.loc 1 1543 2 view .LVU280
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 119


1544:FreeRTOS/src/tasks.c **** 
 1024              		.loc 1 1544 2 view .LVU281
 1025              	.LVL83:
1546:FreeRTOS/src/tasks.c **** 
 1026              		.loc 1 1546 59 view .LVU282
1549:FreeRTOS/src/tasks.c **** 		{
 1027              		.loc 1 1549 3 view .LVU283
1549:FreeRTOS/src/tasks.c **** 		{
 1028              		.loc 1 1549 5 is_stmt 0 view .LVU284
 1029 0006 0429     		cmp	r1, #4
 1030 0008 00D9     		bls	.L76
1551:FreeRTOS/src/tasks.c **** 		}
 1031              		.loc 1 1551 18 view .LVU285
 1032 000a 0425     		movs	r5, #4
 1033              	.L76:
 1034              	.LVL84:
1555:FreeRTOS/src/tasks.c **** 		}
 1035              		.loc 1 1555 28 is_stmt 1 view .LVU286
1558:FreeRTOS/src/tasks.c **** 		{
 1036              		.loc 1 1558 3 view .LVU287
 1037 000c FFF7FEFF 		bl	vPortEnterCritical
 1038              	.LVL85:
1562:FreeRTOS/src/tasks.c **** 
 1039              		.loc 1 1562 4 view .LVU288
1562:FreeRTOS/src/tasks.c **** 
 1040              		.loc 1 1562 12 is_stmt 0 view .LVU289
 1041 0010 74B1     		cbz	r4, .L90
 1042              	.LVL86:
 1043              	.L77:
1564:FreeRTOS/src/tasks.c **** 
 1044              		.loc 1 1564 50 is_stmt 1 discriminator 4 view .LVU290
1568:FreeRTOS/src/tasks.c **** 			}
 1045              		.loc 1 1568 5 discriminator 4 view .LVU291
1568:FreeRTOS/src/tasks.c **** 			}
 1046              		.loc 1 1568 27 is_stmt 0 discriminator 4 view .LVU292
 1047 0012 626C     		ldr	r2, [r4, #68]
 1048              	.LVL87:
1576:FreeRTOS/src/tasks.c **** 			{
 1049              		.loc 1 1576 4 is_stmt 1 discriminator 4 view .LVU293
1576:FreeRTOS/src/tasks.c **** 			{
 1050              		.loc 1 1576 6 is_stmt 0 discriminator 4 view .LVU294
 1051 0014 9542     		cmp	r5, r2
 1052 0016 2ED0     		beq	.L78
1580:FreeRTOS/src/tasks.c **** 				{
 1053              		.loc 1 1580 5 is_stmt 1 view .LVU295
1580:FreeRTOS/src/tasks.c **** 				{
 1054              		.loc 1 1580 7 is_stmt 0 view .LVU296
 1055 0018 0DD9     		bls	.L79
1582:FreeRTOS/src/tasks.c **** 					{
 1056              		.loc 1 1582 6 is_stmt 1 view .LVU297
1582:FreeRTOS/src/tasks.c **** 					{
 1057              		.loc 1 1582 16 is_stmt 0 view .LVU298
 1058 001a 264B     		ldr	r3, .L93
 1059 001c 1B68     		ldr	r3, [r3]
1582:FreeRTOS/src/tasks.c **** 					{
 1060              		.loc 1 1582 8 view .LVU299
 1061 001e A342     		cmp	r3, r4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 120


 1062 0020 2CD0     		beq	.L86
1587:FreeRTOS/src/tasks.c **** 						{
 1063              		.loc 1 1587 7 is_stmt 1 view .LVU300
1587:FreeRTOS/src/tasks.c **** 						{
 1064              		.loc 1 1587 40 is_stmt 0 view .LVU301
 1065 0022 244B     		ldr	r3, .L93
 1066 0024 1B68     		ldr	r3, [r3]
 1067 0026 DB6A     		ldr	r3, [r3, #44]
1587:FreeRTOS/src/tasks.c **** 						{
 1068              		.loc 1 1587 9 view .LVU302
 1069 0028 AB42     		cmp	r3, r5
 1070 002a 29D9     		bls	.L87
1544:FreeRTOS/src/tasks.c **** 
 1071              		.loc 1 1544 13 view .LVU303
 1072 002c 0026     		movs	r6, #0
 1073 002e 07E0     		b	.L80
 1074              	.LVL88:
 1075              	.L90:
1562:FreeRTOS/src/tasks.c **** 
 1076              		.loc 1 1562 12 discriminator 1 view .LVU304
 1077 0030 204B     		ldr	r3, .L93
 1078 0032 1C68     		ldr	r4, [r3]
 1079              	.LVL89:
1562:FreeRTOS/src/tasks.c **** 
 1080              		.loc 1 1562 12 discriminator 1 view .LVU305
 1081 0034 EDE7     		b	.L77
 1082              	.LVL90:
 1083              	.L79:
1603:FreeRTOS/src/tasks.c **** 				{
 1084              		.loc 1 1603 10 is_stmt 1 view .LVU306
1603:FreeRTOS/src/tasks.c **** 				{
 1085              		.loc 1 1603 20 is_stmt 0 view .LVU307
 1086 0036 1F4B     		ldr	r3, .L93
 1087 0038 1B68     		ldr	r3, [r3]
1603:FreeRTOS/src/tasks.c **** 				{
 1088              		.loc 1 1603 12 view .LVU308
 1089 003a A342     		cmp	r3, r4
 1090 003c 22D0     		beq	.L88
1544:FreeRTOS/src/tasks.c **** 
 1091              		.loc 1 1544 13 view .LVU309
 1092 003e 0026     		movs	r6, #0
 1093              	.L80:
 1094              	.LVL91:
1615:FreeRTOS/src/tasks.c **** 
 1095              		.loc 1 1615 5 is_stmt 1 view .LVU310
1620:FreeRTOS/src/tasks.c **** 
 1096              		.loc 1 1620 5 view .LVU311
1620:FreeRTOS/src/tasks.c **** 
 1097              		.loc 1 1620 27 is_stmt 0 view .LVU312
 1098 0040 E36A     		ldr	r3, [r4, #44]
 1099              	.LVL92:
1626:FreeRTOS/src/tasks.c **** 					{
 1100              		.loc 1 1626 6 is_stmt 1 view .LVU313
1626:FreeRTOS/src/tasks.c **** 					{
 1101              		.loc 1 1626 8 is_stmt 0 view .LVU314
 1102 0042 9A42     		cmp	r2, r3
 1103 0044 20D0     		beq	.L91
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 121


 1104              	.L81:
1632:FreeRTOS/src/tasks.c **** 					}
 1105              		.loc 1 1632 31 is_stmt 1 view .LVU315
1636:FreeRTOS/src/tasks.c **** 				}
 1106              		.loc 1 1636 6 view .LVU316
1636:FreeRTOS/src/tasks.c **** 				}
 1107              		.loc 1 1636 28 is_stmt 0 view .LVU317
 1108 0046 6564     		str	r5, [r4, #68]
1646:FreeRTOS/src/tasks.c **** 				{
 1109              		.loc 1 1646 5 is_stmt 1 view .LVU318
1646:FreeRTOS/src/tasks.c **** 				{
 1110              		.loc 1 1646 11 is_stmt 0 view .LVU319
 1111 0048 A269     		ldr	r2, [r4, #24]
 1112              	.LVL93:
1646:FreeRTOS/src/tasks.c **** 				{
 1113              		.loc 1 1646 7 view .LVU320
 1114 004a 002A     		cmp	r2, #0
 1115 004c 02DB     		blt	.L82
1648:FreeRTOS/src/tasks.c **** 				}
 1116              		.loc 1 1648 6 is_stmt 1 view .LVU321
 1117 004e C5F10505 		rsb	r5, r5, #5
 1118              	.LVL94:
1648:FreeRTOS/src/tasks.c **** 				}
 1119              		.loc 1 1648 6 is_stmt 0 view .LVU322
 1120 0052 A561     		str	r5, [r4, #24]
 1121              	.L82:
1652:FreeRTOS/src/tasks.c **** 				}
 1122              		.loc 1 1652 30 is_stmt 1 view .LVU323
1659:FreeRTOS/src/tasks.c **** 				{
 1123              		.loc 1 1659 5 view .LVU324
1659:FreeRTOS/src/tasks.c **** 				{
 1124              		.loc 1 1659 9 is_stmt 0 view .LVU325
 1125 0054 6169     		ldr	r1, [r4, #20]
 1126 0056 03EB8303 		add	r3, r3, r3, lsl #2
 1127              	.LVL95:
1659:FreeRTOS/src/tasks.c **** 				{
 1128              		.loc 1 1659 9 view .LVU326
 1129 005a 9A00     		lsls	r2, r3, #2
 1130 005c 164B     		ldr	r3, .L93+4
 1131 005e 1344     		add	r3, r3, r2
1659:FreeRTOS/src/tasks.c **** 				{
 1132              		.loc 1 1659 7 view .LVU327
 1133 0060 9942     		cmp	r1, r3
 1134 0062 13D0     		beq	.L92
 1135              	.LVL96:
 1136              	.L83:
1679:FreeRTOS/src/tasks.c **** 				}
 1137              		.loc 1 1679 30 is_stmt 1 view .LVU328
1682:FreeRTOS/src/tasks.c **** 				{
 1138              		.loc 1 1682 5 view .LVU329
1682:FreeRTOS/src/tasks.c **** 				{
 1139              		.loc 1 1682 7 is_stmt 0 view .LVU330
 1140 0064 3EB1     		cbz	r6, .L78
1684:FreeRTOS/src/tasks.c **** 				}
 1141              		.loc 1 1684 6 is_stmt 1 view .LVU331
 1142 0066 154B     		ldr	r3, .L93+8
 1143 0068 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 122


 1144 006c 1A60     		str	r2, [r3]
1684:FreeRTOS/src/tasks.c **** 				}
 1145              		.loc 1 1684 6 view .LVU332
 1146              		.syntax unified
 1147              	@ 1684 "FreeRTOS/src/tasks.c" 1
 1148 006e BFF34F8F 		dsb
 1149              	@ 0 "" 2
1684:FreeRTOS/src/tasks.c **** 				}
 1150              		.loc 1 1684 6 view .LVU333
 1151              	@ 1684 "FreeRTOS/src/tasks.c" 1
 1152 0072 BFF36F8F 		isb
 1153              	@ 0 "" 2
1684:FreeRTOS/src/tasks.c **** 				}
 1154              		.loc 1 1684 37 view .LVU334
 1155              	.LVL97:
 1156              		.thumb
 1157              		.syntax unified
 1158              	.L78:
1688:FreeRTOS/src/tasks.c **** 				}
 1159              		.loc 1 1688 30 view .LVU335
1693:FreeRTOS/src/tasks.c **** 			}
 1160              		.loc 1 1693 5 view .LVU336
1696:FreeRTOS/src/tasks.c **** 	}
 1161              		.loc 1 1696 3 view .LVU337
 1162 0076 FFF7FEFF 		bl	vPortExitCritical
 1163              	.LVL98:
1697:FreeRTOS/src/tasks.c **** 
 1164              		.loc 1 1697 2 is_stmt 0 view .LVU338
 1165 007a 70BD     		pop	{r4, r5, r6, pc}
 1166              	.LVL99:
 1167              	.L86:
1544:FreeRTOS/src/tasks.c **** 
 1168              		.loc 1 1544 13 view .LVU339
 1169 007c 0026     		movs	r6, #0
 1170 007e DFE7     		b	.L80
 1171              	.L87:
1589:FreeRTOS/src/tasks.c **** 						}
 1172              		.loc 1 1589 23 view .LVU340
 1173 0080 0126     		movs	r6, #1
 1174 0082 DDE7     		b	.L80
 1175              	.L88:
1608:FreeRTOS/src/tasks.c **** 				}
 1176              		.loc 1 1608 21 view .LVU341
 1177 0084 0126     		movs	r6, #1
 1178 0086 DBE7     		b	.L80
 1179              	.LVL100:
 1180              	.L91:
1628:FreeRTOS/src/tasks.c **** 					}
 1181              		.loc 1 1628 7 is_stmt 1 view .LVU342
1628:FreeRTOS/src/tasks.c **** 					}
 1182              		.loc 1 1628 25 is_stmt 0 view .LVU343
 1183 0088 E562     		str	r5, [r4, #44]
 1184 008a DCE7     		b	.L81
 1185              	.LVL101:
 1186              	.L92:
1664:FreeRTOS/src/tasks.c **** 					{
 1187              		.loc 1 1664 6 is_stmt 1 view .LVU344
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 123


1664:FreeRTOS/src/tasks.c **** 					{
 1188              		.loc 1 1664 10 is_stmt 0 view .LVU345
 1189 008c 251D     		adds	r5, r4, #4
 1190 008e 2846     		mov	r0, r5
 1191 0090 FFF7FEFF 		bl	uxListRemove
 1192              	.LVL102:
1673:FreeRTOS/src/tasks.c **** 					}
 1193              		.loc 1 1673 31 is_stmt 1 view .LVU346
1675:FreeRTOS/src/tasks.c **** 				}
 1194              		.loc 1 1675 6 view .LVU347
1675:FreeRTOS/src/tasks.c **** 				}
 1195              		.loc 1 1675 6 view .LVU348
 1196 0094 E36A     		ldr	r3, [r4, #44]
 1197 0096 0A4A     		ldr	r2, .L93+12
 1198 0098 1268     		ldr	r2, [r2]
 1199 009a 9342     		cmp	r3, r2
 1200 009c 01D9     		bls	.L84
1675:FreeRTOS/src/tasks.c **** 				}
 1201              		.loc 1 1675 6 discriminator 1 view .LVU349
 1202 009e 084A     		ldr	r2, .L93+12
 1203 00a0 1360     		str	r3, [r2]
 1204              	.L84:
1675:FreeRTOS/src/tasks.c **** 				}
 1205              		.loc 1 1675 6 discriminator 3 view .LVU350
1675:FreeRTOS/src/tasks.c **** 				}
 1206              		.loc 1 1675 6 discriminator 3 view .LVU351
 1207 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 1208 00a6 9A00     		lsls	r2, r3, #2
 1209 00a8 2946     		mov	r1, r5
 1210 00aa 0348     		ldr	r0, .L93+4
 1211 00ac 1044     		add	r0, r0, r2
 1212 00ae FFF7FEFF 		bl	vListInsertEnd
 1213              	.LVL103:
1675:FreeRTOS/src/tasks.c **** 				}
 1214              		.loc 1 1675 36 discriminator 3 view .LVU352
 1215 00b2 D7E7     		b	.L83
 1216              	.L94:
 1217              		.align	2
 1218              	.L93:
 1219 00b4 00000000 		.word	.LANCHOR9
 1220 00b8 00000000 		.word	.LANCHOR2
 1221 00bc 04ED00E0 		.word	-536810236
 1222 00c0 00000000 		.word	.LANCHOR12
 1223              		.cfi_endproc
 1224              	.LFE11:
 1226              		.section	.text.vTaskResume,"ax",%progbits
 1227              		.align	1
 1228              		.global	vTaskResume
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	vTaskResume:
 1235              	.LVL104:
 1236              	.LFB14:
1852:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1237              		.loc 1 1852 2 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 124


 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
1852:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1241              		.loc 1 1852 2 is_stmt 0 view .LVU354
 1242 0000 38B5     		push	{r3, r4, r5, lr}
 1243              	.LCFI10:
 1244              		.cfi_def_cfa_offset 16
 1245              		.cfi_offset 3, -16
 1246              		.cfi_offset 4, -12
 1247              		.cfi_offset 5, -8
 1248              		.cfi_offset 14, -4
1853:FreeRTOS/src/tasks.c **** 
 1249              		.loc 1 1853 2 is_stmt 1 view .LVU355
 1250              	.LVL105:
1856:FreeRTOS/src/tasks.c **** 
 1251              		.loc 1 1856 32 view .LVU356
1860:FreeRTOS/src/tasks.c **** 		{
 1252              		.loc 1 1860 3 view .LVU357
1860:FreeRTOS/src/tasks.c **** 		{
 1253              		.loc 1 1860 15 is_stmt 0 view .LVU358
 1254 0002 184B     		ldr	r3, .L101
 1255 0004 1B68     		ldr	r3, [r3]
1860:FreeRTOS/src/tasks.c **** 		{
 1256              		.loc 1 1860 5 view .LVU359
 1257 0006 8342     		cmp	r3, r0
 1258 0008 09D0     		beq	.L95
1860:FreeRTOS/src/tasks.c **** 		{
 1259              		.loc 1 1860 33 discriminator 1 view .LVU360
 1260 000a 40B1     		cbz	r0, .L95
 1261 000c 0446     		mov	r4, r0
1862:FreeRTOS/src/tasks.c **** 			{
 1262              		.loc 1 1862 4 is_stmt 1 view .LVU361
 1263 000e FFF7FEFF 		bl	vPortEnterCritical
 1264              	.LVL106:
1864:FreeRTOS/src/tasks.c **** 				{
 1265              		.loc 1 1864 5 view .LVU362
1864:FreeRTOS/src/tasks.c **** 				{
 1266              		.loc 1 1864 9 is_stmt 0 view .LVU363
 1267 0012 2046     		mov	r0, r4
 1268 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1269              	.LVL107:
1864:FreeRTOS/src/tasks.c **** 				{
 1270              		.loc 1 1864 7 view .LVU364
 1271 0018 10B9     		cbnz	r0, .L100
 1272              	.L97:
1888:FreeRTOS/src/tasks.c **** 				}
 1273              		.loc 1 1888 30 is_stmt 1 view .LVU365
1891:FreeRTOS/src/tasks.c **** 		}
 1274              		.loc 1 1891 4 view .LVU366
 1275 001a FFF7FEFF 		bl	vPortExitCritical
 1276              	.LVL108:
1895:FreeRTOS/src/tasks.c **** 		}
 1277              		.loc 1 1895 28 view .LVU367
 1278              	.L95:
1897:FreeRTOS/src/tasks.c **** 
 1279              		.loc 1 1897 2 is_stmt 0 view .LVU368
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 125


 1280 001e 38BD     		pop	{r3, r4, r5, pc}
 1281              	.LVL109:
 1282              	.L100:
1866:FreeRTOS/src/tasks.c **** 
 1283              		.loc 1 1866 31 is_stmt 1 view .LVU369
1870:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1284              		.loc 1 1870 6 view .LVU370
1870:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1285              		.loc 1 1870 15 is_stmt 0 view .LVU371
 1286 0020 251D     		adds	r5, r4, #4
 1287 0022 2846     		mov	r0, r5
 1288 0024 FFF7FEFF 		bl	uxListRemove
 1289              	.LVL110:
1871:FreeRTOS/src/tasks.c **** 
 1290              		.loc 1 1871 6 is_stmt 1 view .LVU372
1871:FreeRTOS/src/tasks.c **** 
 1291              		.loc 1 1871 6 view .LVU373
 1292 0028 E36A     		ldr	r3, [r4, #44]
 1293 002a 0F4A     		ldr	r2, .L101+4
 1294 002c 1268     		ldr	r2, [r2]
 1295 002e 9342     		cmp	r3, r2
 1296 0030 01D9     		bls	.L98
1871:FreeRTOS/src/tasks.c **** 
 1297              		.loc 1 1871 6 discriminator 1 view .LVU374
 1298 0032 0D4A     		ldr	r2, .L101+4
 1299 0034 1360     		str	r3, [r2]
 1300              	.L98:
1871:FreeRTOS/src/tasks.c **** 
 1301              		.loc 1 1871 6 discriminator 3 view .LVU375
1871:FreeRTOS/src/tasks.c **** 
 1302              		.loc 1 1871 6 discriminator 3 view .LVU376
 1303 0036 03EB8303 		add	r3, r3, r3, lsl #2
 1304 003a 9A00     		lsls	r2, r3, #2
 1305 003c 2946     		mov	r1, r5
 1306 003e 0B48     		ldr	r0, .L101+8
 1307 0040 1044     		add	r0, r0, r2
 1308 0042 FFF7FEFF 		bl	vListInsertEnd
 1309              	.LVL111:
1871:FreeRTOS/src/tasks.c **** 
 1310              		.loc 1 1871 36 discriminator 3 view .LVU377
1874:FreeRTOS/src/tasks.c **** 					{
 1311              		.loc 1 1874 6 discriminator 3 view .LVU378
1874:FreeRTOS/src/tasks.c **** 					{
 1312              		.loc 1 1874 15 is_stmt 0 discriminator 3 view .LVU379
 1313 0046 E26A     		ldr	r2, [r4, #44]
1874:FreeRTOS/src/tasks.c **** 					{
 1314              		.loc 1 1874 43 discriminator 3 view .LVU380
 1315 0048 064B     		ldr	r3, .L101
 1316 004a 1B68     		ldr	r3, [r3]
 1317 004c DB6A     		ldr	r3, [r3, #44]
1874:FreeRTOS/src/tasks.c **** 					{
 1318              		.loc 1 1874 8 discriminator 3 view .LVU381
 1319 004e 9A42     		cmp	r2, r3
 1320 0050 E3D3     		bcc	.L97
1879:FreeRTOS/src/tasks.c **** 					}
 1321              		.loc 1 1879 7 is_stmt 1 view .LVU382
 1322 0052 074B     		ldr	r3, .L101+12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 126


 1323 0054 4FF08052 		mov	r2, #268435456
 1324 0058 1A60     		str	r2, [r3]
1879:FreeRTOS/src/tasks.c **** 					}
 1325              		.loc 1 1879 7 view .LVU383
 1326              		.syntax unified
 1327              	@ 1879 "FreeRTOS/src/tasks.c" 1
 1328 005a BFF34F8F 		dsb
 1329              	@ 0 "" 2
1879:FreeRTOS/src/tasks.c **** 					}
 1330              		.loc 1 1879 7 view .LVU384
 1331              	@ 1879 "FreeRTOS/src/tasks.c" 1
 1332 005e BFF36F8F 		isb
 1333              	@ 0 "" 2
1879:FreeRTOS/src/tasks.c **** 					}
 1334              		.loc 1 1879 38 view .LVU385
 1335              		.thumb
 1336              		.syntax unified
 1337 0062 DAE7     		b	.L97
 1338              	.L102:
 1339              		.align	2
 1340              	.L101:
 1341 0064 00000000 		.word	.LANCHOR9
 1342 0068 00000000 		.word	.LANCHOR12
 1343 006c 00000000 		.word	.LANCHOR2
 1344 0070 04ED00E0 		.word	-536810236
 1345              		.cfi_endproc
 1346              	.LFE14:
 1348              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1349              		.align	1
 1350              		.global	xTaskResumeFromISR
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu fpv4-sp-d16
 1356              	xTaskResumeFromISR:
 1357              	.LVL112:
 1358              	.LFB15:
1906:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1359              		.loc 1 1906 2 view -0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
1906:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1363              		.loc 1 1906 2 is_stmt 0 view .LVU387
 1364 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1365              	.LCFI11:
 1366              		.cfi_def_cfa_offset 24
 1367              		.cfi_offset 3, -24
 1368              		.cfi_offset 4, -20
 1369              		.cfi_offset 5, -16
 1370              		.cfi_offset 6, -12
 1371              		.cfi_offset 7, -8
 1372              		.cfi_offset 14, -4
 1373 0002 0446     		mov	r4, r0
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1374              		.loc 1 1907 2 is_stmt 1 view .LVU388
 1375              	.LVL113:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 127


1908:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1376              		.loc 1 1908 2 view .LVU389
1909:FreeRTOS/src/tasks.c **** 
 1377              		.loc 1 1909 2 view .LVU390
1911:FreeRTOS/src/tasks.c **** 
 1378              		.loc 1 1911 32 view .LVU391
1929:FreeRTOS/src/tasks.c **** 
 1379              		.loc 1 1929 45 view .LVU392
1931:FreeRTOS/src/tasks.c **** 		{
 1380              		.loc 1 1931 3 view .LVU393
 1381              	.LBB28:
 1382              	.LBI28:
 207:FreeRTOS/inc/portmacro.h **** {
 1383              		.loc 2 207 34 view .LVU394
 1384              	.LBB29:
 209:FreeRTOS/inc/portmacro.h **** 
 1385              		.loc 2 209 1 view .LVU395
 211:FreeRTOS/inc/portmacro.h **** 	(
 1386              		.loc 2 211 2 view .LVU396
 1387              		.syntax unified
 1388              	@ 211 "FreeRTOS/inc/portmacro.h" 1
 1389 0004 EFF31185 			mrs r5, basepri											
 1390 0008 4FF0BF03 		mov r3, #191												
 1391 000c 83F31188 		msr basepri, r3											
 1392 0010 BFF36F8F 		isb														
 1393 0014 BFF34F8F 		dsb														
 1394              	
 1395              	@ 0 "" 2
 1396              	.LVL114:
 223:FreeRTOS/inc/portmacro.h **** }
 1397              		.loc 2 223 2 view .LVU397
 223:FreeRTOS/inc/portmacro.h **** }
 1398              		.loc 2 223 2 is_stmt 0 view .LVU398
 1399              		.thumb
 1400              		.syntax unified
 1401              	.LBE29:
 1402              	.LBE28:
1933:FreeRTOS/src/tasks.c **** 			{
 1403              		.loc 1 1933 4 is_stmt 1 view .LVU399
1933:FreeRTOS/src/tasks.c **** 			{
 1404              		.loc 1 1933 8 is_stmt 0 view .LVU400
 1405 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1406              	.LVL115:
1933:FreeRTOS/src/tasks.c **** 			{
 1407              		.loc 1 1933 6 view .LVU401
 1408 001c 30B3     		cbz	r0, .L108
1935:FreeRTOS/src/tasks.c **** 
 1409              		.loc 1 1935 39 is_stmt 1 view .LVU402
1938:FreeRTOS/src/tasks.c **** 				{
 1410              		.loc 1 1938 5 view .LVU403
1938:FreeRTOS/src/tasks.c **** 				{
 1411              		.loc 1 1938 30 is_stmt 0 view .LVU404
 1412 001e 164B     		ldr	r3, .L111
 1413 0020 1B68     		ldr	r3, [r3]
1938:FreeRTOS/src/tasks.c **** 				{
 1414              		.loc 1 1938 7 view .LVU405
 1415 0022 E3B9     		cbnz	r3, .L105
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 128


1942:FreeRTOS/src/tasks.c **** 					{
 1416              		.loc 1 1942 6 is_stmt 1 view .LVU406
1942:FreeRTOS/src/tasks.c **** 					{
 1417              		.loc 1 1942 15 is_stmt 0 view .LVU407
 1418 0024 E26A     		ldr	r2, [r4, #44]
1942:FreeRTOS/src/tasks.c **** 					{
 1419              		.loc 1 1942 43 view .LVU408
 1420 0026 154B     		ldr	r3, .L111+4
 1421 0028 1B68     		ldr	r3, [r3]
 1422 002a DB6A     		ldr	r3, [r3, #44]
1942:FreeRTOS/src/tasks.c **** 					{
 1423              		.loc 1 1942 8 view .LVU409
 1424 002c 9A42     		cmp	r2, r3
 1425 002e 14D2     		bcs	.L109
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1426              		.loc 1 1907 13 view .LVU410
 1427 0030 0026     		movs	r6, #0
 1428              	.L106:
 1429              	.LVL116:
1948:FreeRTOS/src/tasks.c **** 					}
 1430              		.loc 1 1948 31 is_stmt 1 view .LVU411
1951:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1431              		.loc 1 1951 6 view .LVU412
1951:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1432              		.loc 1 1951 15 is_stmt 0 view .LVU413
 1433 0032 271D     		adds	r7, r4, #4
 1434 0034 3846     		mov	r0, r7
 1435 0036 FFF7FEFF 		bl	uxListRemove
 1436              	.LVL117:
1952:FreeRTOS/src/tasks.c **** 				}
 1437              		.loc 1 1952 6 is_stmt 1 view .LVU414
1952:FreeRTOS/src/tasks.c **** 				}
 1438              		.loc 1 1952 6 view .LVU415
 1439 003a E36A     		ldr	r3, [r4, #44]
 1440 003c 104A     		ldr	r2, .L111+8
 1441 003e 1268     		ldr	r2, [r2]
 1442 0040 9342     		cmp	r3, r2
 1443 0042 01D9     		bls	.L107
1952:FreeRTOS/src/tasks.c **** 				}
 1444              		.loc 1 1952 6 discriminator 1 view .LVU416
 1445 0044 0E4A     		ldr	r2, .L111+8
 1446 0046 1360     		str	r3, [r2]
 1447              	.L107:
1952:FreeRTOS/src/tasks.c **** 				}
 1448              		.loc 1 1952 6 discriminator 3 view .LVU417
1952:FreeRTOS/src/tasks.c **** 				}
 1449              		.loc 1 1952 6 discriminator 3 view .LVU418
 1450 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1451 004c 9A00     		lsls	r2, r3, #2
 1452 004e 3946     		mov	r1, r7
 1453 0050 0C48     		ldr	r0, .L111+12
 1454 0052 1044     		add	r0, r0, r2
 1455 0054 FFF7FEFF 		bl	vListInsertEnd
 1456              	.LVL118:
1952:FreeRTOS/src/tasks.c **** 				}
 1457              		.loc 1 1952 36 discriminator 3 view .LVU419
 1458 0058 09E0     		b	.L104
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 129


 1459              	.LVL119:
 1460              	.L109:
1944:FreeRTOS/src/tasks.c **** 					}
 1461              		.loc 1 1944 22 is_stmt 0 view .LVU420
 1462 005a 0126     		movs	r6, #1
 1463 005c E9E7     		b	.L106
 1464              	.L105:
1959:FreeRTOS/src/tasks.c **** 				}
 1465              		.loc 1 1959 6 is_stmt 1 view .LVU421
 1466 005e 04F11801 		add	r1, r4, #24
 1467 0062 0948     		ldr	r0, .L111+16
 1468 0064 FFF7FEFF 		bl	vListInsertEnd
 1469              	.LVL120:
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1470              		.loc 1 1907 13 is_stmt 0 view .LVU422
 1471 0068 0026     		movs	r6, #0
 1472 006a 00E0     		b	.L104
 1473              	.L108:
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1474              		.loc 1 1907 13 view .LVU423
 1475 006c 0026     		movs	r6, #0
 1476              	.LVL121:
 1477              	.L104:
1964:FreeRTOS/src/tasks.c **** 			}
 1478              		.loc 1 1964 29 is_stmt 1 view .LVU424
1967:FreeRTOS/src/tasks.c **** 
 1479              		.loc 1 1967 3 view .LVU425
 1480              	.LBB30:
 1481              	.LBI30:
 227:FreeRTOS/inc/portmacro.h **** {
 1482              		.loc 2 227 30 view .LVU426
 1483              	.LBB31:
 1484              		.loc 2 229 2 view .LVU427
 1485              		.syntax unified
 1486              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 1487 006e 85F31188 			msr basepri, r5	
 1488              	@ 0 "" 2
 1489              	.LVL122:
 1490              		.loc 2 229 2 is_stmt 0 view .LVU428
 1491              		.thumb
 1492              		.syntax unified
 1493              	.LBE31:
 1494              	.LBE30:
1969:FreeRTOS/src/tasks.c **** 	}
 1495              		.loc 1 1969 3 is_stmt 1 view .LVU429
1970:FreeRTOS/src/tasks.c **** 
 1496              		.loc 1 1970 2 is_stmt 0 view .LVU430
 1497 0072 3046     		mov	r0, r6
 1498 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1499              	.LVL123:
 1500              	.L112:
1970:FreeRTOS/src/tasks.c **** 
 1501              		.loc 1 1970 2 view .LVU431
 1502 0076 00BF     		.align	2
 1503              	.L111:
 1504 0078 00000000 		.word	.LANCHOR14
 1505 007c 00000000 		.word	.LANCHOR9
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 130


 1506 0080 00000000 		.word	.LANCHOR12
 1507 0084 00000000 		.word	.LANCHOR2
 1508 0088 00000000 		.word	.LANCHOR1
 1509              		.cfi_endproc
 1510              	.LFE15:
 1512              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1513              		.align	1
 1514              		.global	vTaskStartScheduler
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv4-sp-d16
 1520              	vTaskStartScheduler:
 1521              	.LFB16:
1976:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 1522              		.loc 1 1976 1 is_stmt 1 view -0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 0
 1525              		@ frame_needed = 0, uses_anonymous_args = 0
 1526 0000 00B5     		push	{lr}
 1527              	.LCFI12:
 1528              		.cfi_def_cfa_offset 4
 1529              		.cfi_offset 14, -4
 1530 0002 83B0     		sub	sp, sp, #12
 1531              	.LCFI13:
 1532              		.cfi_def_cfa_offset 16
1977:FreeRTOS/src/tasks.c **** 
 1533              		.loc 1 1977 1 view .LVU433
2009:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
 1534              		.loc 1 2009 3 view .LVU434
2009:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
 1535              		.loc 1 2009 13 is_stmt 0 view .LVU435
 1536 0004 134B     		ldr	r3, .L119
 1537 0006 0193     		str	r3, [sp, #4]
 1538 0008 0023     		movs	r3, #0
 1539 000a 0093     		str	r3, [sp]
 1540 000c 8022     		movs	r2, #128
 1541 000e 1249     		ldr	r1, .L119+4
 1542 0010 1248     		ldr	r0, .L119+8
 1543 0012 FFF7FEFF 		bl	xTaskCreate
 1544              	.LVL124:
2020:FreeRTOS/src/tasks.c **** 		{
 1545              		.loc 1 2020 3 is_stmt 1 view .LVU436
2020:FreeRTOS/src/tasks.c **** 		{
 1546              		.loc 1 2020 5 is_stmt 0 view .LVU437
 1547 0016 0128     		cmp	r0, #1
 1548 0018 04D0     		beq	.L117
 1549              	.L114:
2026:FreeRTOS/src/tasks.c **** 		}
 1550              		.loc 1 2026 28 is_stmt 1 view .LVU438
2031:FreeRTOS/src/tasks.c **** 	{
 1551              		.loc 1 2031 2 view .LVU439
2031:FreeRTOS/src/tasks.c **** 	{
 1552              		.loc 1 2031 4 is_stmt 0 view .LVU440
 1553 001a 0128     		cmp	r0, #1
 1554 001c 05D0     		beq	.L118
 1555              	.LVL125:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 131


 1556              	.L113:
2096:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1557              		.loc 1 2096 1 view .LVU441
 1558 001e 03B0     		add	sp, sp, #12
 1559              	.LCFI14:
 1560              		.cfi_remember_state
 1561              		.cfi_def_cfa_offset 4
 1562              		@ sp needed
 1563 0020 5DF804FB 		ldr	pc, [sp], #4
 1564              	.LVL126:
 1565              	.L117:
 1566              	.LCFI15:
 1567              		.cfi_restore_state
2022:FreeRTOS/src/tasks.c **** 		}
 1568              		.loc 1 2022 4 is_stmt 1 view .LVU442
2022:FreeRTOS/src/tasks.c **** 		}
 1569              		.loc 1 2022 14 is_stmt 0 view .LVU443
 1570 0024 FFF7FEFF 		bl	xTimerCreateTimerTask
 1571              	.LVL127:
2022:FreeRTOS/src/tasks.c **** 		}
 1572              		.loc 1 2022 14 view .LVU444
 1573 0028 F7E7     		b	.L114
 1574              	.L118:
2047:FreeRTOS/src/tasks.c **** 
 1575              		.loc 1 2047 3 is_stmt 1 view .LVU445
 1576              	.LBB32:
 1577              	.LBI32:
 191:FreeRTOS/inc/portmacro.h **** {
 1578              		.loc 2 191 30 view .LVU446
 1579              	.LBB33:
 193:FreeRTOS/inc/portmacro.h **** 
 1580              		.loc 2 193 1 view .LVU447
 195:FreeRTOS/inc/portmacro.h **** 	(
 1581              		.loc 2 195 2 view .LVU448
 1582              		.syntax unified
 1583              	@ 195 "FreeRTOS/inc/portmacro.h" 1
 1584 002a 4FF0BF03 			mov r3, #191												
 1585 002e 83F31188 		msr basepri, r3											
 1586 0032 BFF36F8F 		isb														
 1587 0036 BFF34F8F 		dsb														
 1588              	
 1589              	@ 0 "" 2
 1590              		.thumb
 1591              		.syntax unified
 1592              	.LBE33:
 1593              	.LBE32:
2059:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1594              		.loc 1 2059 3 view .LVU449
2059:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1595              		.loc 1 2059 24 is_stmt 0 view .LVU450
 1596 003a 094B     		ldr	r3, .L119+12
 1597 003c 4FF0FF32 		mov	r2, #-1
 1598 0040 1A60     		str	r2, [r3]
2060:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1599              		.loc 1 2060 3 is_stmt 1 view .LVU451
2060:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1600              		.loc 1 2060 21 is_stmt 0 view .LVU452
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 132


 1601 0042 084B     		ldr	r3, .L119+16
 1602 0044 0122     		movs	r2, #1
 1603 0046 1A60     		str	r2, [r3]
2061:FreeRTOS/src/tasks.c **** 
 1604              		.loc 1 2061 3 is_stmt 1 view .LVU453
2061:FreeRTOS/src/tasks.c **** 
 1605              		.loc 1 2061 14 is_stmt 0 view .LVU454
 1606 0048 074B     		ldr	r3, .L119+20
 1607 004a 0022     		movs	r2, #0
 1608 004c 1A60     		str	r2, [r3]
2069:FreeRTOS/src/tasks.c **** 
 1609              		.loc 1 2069 43 is_stmt 1 view .LVU455
2071:FreeRTOS/src/tasks.c **** 
 1610              		.loc 1 2071 26 view .LVU456
2075:FreeRTOS/src/tasks.c **** 		{
 1611              		.loc 1 2075 3 view .LVU457
2075:FreeRTOS/src/tasks.c **** 		{
 1612              		.loc 1 2075 7 is_stmt 0 view .LVU458
 1613 004e FFF7FEFF 		bl	xPortStartScheduler
 1614              	.LVL128:
2090:FreeRTOS/src/tasks.c **** 	}
 1615              		.loc 1 2090 67 is_stmt 1 view .LVU459
2095:FreeRTOS/src/tasks.c **** }
 1616              		.loc 1 2095 2 view .LVU460
2096:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1617              		.loc 1 2096 1 is_stmt 0 view .LVU461
 1618 0052 E4E7     		b	.L113
 1619              	.L120:
 1620              		.align	2
 1621              	.L119:
 1622 0054 00000000 		.word	.LANCHOR15
 1623 0058 00000000 		.word	.LC0
 1624 005c 00000000 		.word	prvIdleTask
 1625 0060 00000000 		.word	.LANCHOR4
 1626 0064 00000000 		.word	.LANCHOR10
 1627 0068 00000000 		.word	.LANCHOR13
 1628              		.cfi_endproc
 1629              	.LFE16:
 1631              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1632              		.align	1
 1633              		.global	vTaskEndScheduler
 1634              		.syntax unified
 1635              		.thumb
 1636              		.thumb_func
 1637              		.fpu fpv4-sp-d16
 1639              	vTaskEndScheduler:
 1640              	.LFB17:
2100:FreeRTOS/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1641              		.loc 1 2100 1 is_stmt 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645 0000 08B5     		push	{r3, lr}
 1646              	.LCFI16:
 1647              		.cfi_def_cfa_offset 8
 1648              		.cfi_offset 3, -8
 1649              		.cfi_offset 14, -4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 133


2104:FreeRTOS/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1650              		.loc 1 2104 2 view .LVU463
 1651              	.LBB34:
 1652              	.LBI34:
 191:FreeRTOS/inc/portmacro.h **** {
 1653              		.loc 2 191 30 view .LVU464
 1654              	.LBB35:
 193:FreeRTOS/inc/portmacro.h **** 
 1655              		.loc 2 193 1 view .LVU465
 195:FreeRTOS/inc/portmacro.h **** 	(
 1656              		.loc 2 195 2 view .LVU466
 1657              		.syntax unified
 1658              	@ 195 "FreeRTOS/inc/portmacro.h" 1
 1659 0002 4FF0BF03 			mov r3, #191												
 1660 0006 83F31188 		msr basepri, r3											
 1661 000a BFF36F8F 		isb														
 1662 000e BFF34F8F 		dsb														
 1663              	
 1664              	@ 0 "" 2
 1665              		.thumb
 1666              		.syntax unified
 1667              	.LBE35:
 1668              	.LBE34:
2105:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
 1669              		.loc 1 2105 2 view .LVU467
2105:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
 1670              		.loc 1 2105 20 is_stmt 0 view .LVU468
 1671 0012 034B     		ldr	r3, .L123
 1672 0014 0022     		movs	r2, #0
 1673 0016 1A60     		str	r2, [r3]
2106:FreeRTOS/src/tasks.c **** }
 1674              		.loc 1 2106 2 is_stmt 1 view .LVU469
 1675 0018 FFF7FEFF 		bl	vPortEndScheduler
 1676              	.LVL129:
2107:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 1677              		.loc 1 2107 1 is_stmt 0 view .LVU470
 1678 001c 08BD     		pop	{r3, pc}
 1679              	.L124:
 1680 001e 00BF     		.align	2
 1681              	.L123:
 1682 0020 00000000 		.word	.LANCHOR10
 1683              		.cfi_endproc
 1684              	.LFE17:
 1686              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1687              		.align	1
 1688              		.global	vTaskSuspendAll
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	vTaskSuspendAll:
 1695              	.LFB18:
2111:FreeRTOS/src/tasks.c **** 	/* A critical section is not required as the variable is of type
 1696              		.loc 1 2111 1 is_stmt 1 view -0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 134


 1700              		@ link register save eliminated.
2119:FreeRTOS/src/tasks.c **** 
 1701              		.loc 1 2119 24 view .LVU472
2123:FreeRTOS/src/tasks.c **** 
 1702              		.loc 1 2123 2 view .LVU473
 1703 0000 024A     		ldr	r2, .L126
 1704 0002 1368     		ldr	r3, [r2]
 1705 0004 0133     		adds	r3, r3, #1
 1706 0006 1360     		str	r3, [r2]
2127:FreeRTOS/src/tasks.c **** }
 1707              		.loc 1 2127 2 view .LVU474
2128:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 1708              		.loc 1 2128 1 is_stmt 0 view .LVU475
 1709 0008 7047     		bx	lr
 1710              	.L127:
 1711 000a 00BF     		.align	2
 1712              	.L126:
 1713 000c 00000000 		.word	.LANCHOR14
 1714              		.cfi_endproc
 1715              	.LFE18:
 1717              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1718              		.align	1
 1719              		.global	xTaskGetTickCount
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1723              		.fpu fpv4-sp-d16
 1725              	xTaskGetTickCount:
 1726              	.LFB20:
2305:FreeRTOS/src/tasks.c **** TickType_t xTicks;
 1727              		.loc 1 2305 1 is_stmt 1 view -0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
2306:FreeRTOS/src/tasks.c **** 
 1732              		.loc 1 2306 1 view .LVU477
2309:FreeRTOS/src/tasks.c **** 	{
 1733              		.loc 1 2309 32 view .LVU478
2311:FreeRTOS/src/tasks.c **** 	}
 1734              		.loc 1 2311 3 view .LVU479
2311:FreeRTOS/src/tasks.c **** 	}
 1735              		.loc 1 2311 10 is_stmt 0 view .LVU480
 1736 0000 014B     		ldr	r3, .L129
 1737 0002 1868     		ldr	r0, [r3]
 1738              	.LVL130:
2313:FreeRTOS/src/tasks.c **** 
 1739              		.loc 1 2313 31 is_stmt 1 view .LVU481
2315:FreeRTOS/src/tasks.c **** }
 1740              		.loc 1 2315 2 view .LVU482
2316:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1741              		.loc 1 2316 1 is_stmt 0 view .LVU483
 1742 0004 7047     		bx	lr
 1743              	.L130:
 1744 0006 00BF     		.align	2
 1745              	.L129:
 1746 0008 00000000 		.word	.LANCHOR13
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 135


 1747              		.cfi_endproc
 1748              	.LFE20:
 1750              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1751              		.align	1
 1752              		.global	xTaskGetTickCountFromISR
 1753              		.syntax unified
 1754              		.thumb
 1755              		.thumb_func
 1756              		.fpu fpv4-sp-d16
 1758              	xTaskGetTickCountFromISR:
 1759              	.LFB21:
2320:FreeRTOS/src/tasks.c **** TickType_t xReturn;
 1760              		.loc 1 2320 1 is_stmt 1 view -0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 0
 1763              		@ frame_needed = 0, uses_anonymous_args = 0
 1764              		@ link register save eliminated.
2321:FreeRTOS/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 1765              		.loc 1 2321 1 view .LVU485
2322:FreeRTOS/src/tasks.c **** 
 1766              		.loc 1 2322 1 view .LVU486
2338:FreeRTOS/src/tasks.c **** 
 1767              		.loc 1 2338 44 view .LVU487
2340:FreeRTOS/src/tasks.c **** 	{
 1768              		.loc 1 2340 2 view .LVU488
 1769              	.LVL131:
2342:FreeRTOS/src/tasks.c **** 	}
 1770              		.loc 1 2342 3 view .LVU489
2342:FreeRTOS/src/tasks.c **** 	}
 1771              		.loc 1 2342 11 is_stmt 0 view .LVU490
 1772 0000 014B     		ldr	r3, .L132
 1773 0002 1868     		ldr	r0, [r3]
 1774              	.LVL132:
2344:FreeRTOS/src/tasks.c **** 
 1775              		.loc 1 2344 2 is_stmt 1 view .LVU491
2346:FreeRTOS/src/tasks.c **** }
 1776              		.loc 1 2346 2 view .LVU492
2347:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1777              		.loc 1 2347 1 is_stmt 0 view .LVU493
 1778 0004 7047     		bx	lr
 1779              	.L133:
 1780 0006 00BF     		.align	2
 1781              	.L132:
 1782 0008 00000000 		.word	.LANCHOR13
 1783              		.cfi_endproc
 1784              	.LFE21:
 1786              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1787              		.align	1
 1788              		.global	uxTaskGetNumberOfTasks
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	uxTaskGetNumberOfTasks:
 1795              	.LFB22:
2351:FreeRTOS/src/tasks.c **** 	/* A critical section is not required because the variables are of type
 1796              		.loc 1 2351 1 is_stmt 1 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 136


 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
2354:FreeRTOS/src/tasks.c **** }
 1801              		.loc 1 2354 2 view .LVU495
2354:FreeRTOS/src/tasks.c **** }
 1802              		.loc 1 2354 9 is_stmt 0 view .LVU496
 1803 0000 014B     		ldr	r3, .L135
 1804 0002 1868     		ldr	r0, [r3]
2355:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1805              		.loc 1 2355 1 view .LVU497
 1806 0004 7047     		bx	lr
 1807              	.L136:
 1808 0006 00BF     		.align	2
 1809              	.L135:
 1810 0008 00000000 		.word	.LANCHOR8
 1811              		.cfi_endproc
 1812              	.LFE22:
 1814              		.section	.text.pcTaskGetName,"ax",%progbits
 1815              		.align	1
 1816              		.global	pcTaskGetName
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	pcTaskGetName:
 1823              	.LVL133:
 1824              	.LFB23:
2359:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
 1825              		.loc 1 2359 1 is_stmt 1 view -0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
2360:FreeRTOS/src/tasks.c **** 
 1830              		.loc 1 2360 1 view .LVU499
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 1831              		.loc 1 2364 2 view .LVU500
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 1832              		.loc 1 2364 10 is_stmt 0 view .LVU501
 1833 0000 0346     		mov	r3, r0
 1834 0002 10B1     		cbz	r0, .L139
 1835              	.LVL134:
 1836              	.L138:
2365:FreeRTOS/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1837              		.loc 1 2365 23 is_stmt 1 discriminator 4 view .LVU502
2366:FreeRTOS/src/tasks.c **** }
 1838              		.loc 1 2366 2 discriminator 4 view .LVU503
2367:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1839              		.loc 1 2367 1 is_stmt 0 discriminator 4 view .LVU504
 1840 0004 03F13400 		add	r0, r3, #52
 1841 0008 7047     		bx	lr
 1842              	.LVL135:
 1843              	.L139:
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 1844              		.loc 1 2364 10 discriminator 1 view .LVU505
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 137


 1845 000a 014B     		ldr	r3, .L140
 1846 000c 1B68     		ldr	r3, [r3]
 1847              	.LVL136:
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 1848              		.loc 1 2364 10 discriminator 1 view .LVU506
 1849 000e F9E7     		b	.L138
 1850              	.L141:
 1851              		.align	2
 1852              	.L140:
 1853 0010 00000000 		.word	.LANCHOR9
 1854              		.cfi_endproc
 1855              	.LFE23:
 1857              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1858              		.align	1
 1859              		.global	xTaskIncrementTick
 1860              		.syntax unified
 1861              		.thumb
 1862              		.thumb_func
 1863              		.fpu fpv4-sp-d16
 1865              	xTaskIncrementTick:
 1866              	.LFB25:
2708:FreeRTOS/src/tasks.c **** TCB_t * pxTCB;
 1867              		.loc 1 2708 1 is_stmt 1 view -0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1872              	.LCFI17:
 1873              		.cfi_def_cfa_offset 24
 1874              		.cfi_offset 3, -24
 1875              		.cfi_offset 4, -20
 1876              		.cfi_offset 5, -16
 1877              		.cfi_offset 6, -12
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
2709:FreeRTOS/src/tasks.c **** TickType_t xItemValue;
 1880              		.loc 1 2709 1 view .LVU508
2710:FreeRTOS/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 1881              		.loc 1 2710 1 view .LVU509
2711:FreeRTOS/src/tasks.c **** 
 1882              		.loc 1 2711 1 view .LVU510
 1883              	.LVL137:
2716:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1884              		.loc 1 2716 40 view .LVU511
2717:FreeRTOS/src/tasks.c **** 	{
 1885              		.loc 1 2717 2 view .LVU512
2717:FreeRTOS/src/tasks.c **** 	{
 1886              		.loc 1 2717 27 is_stmt 0 view .LVU513
 1887 0002 2F4B     		ldr	r3, .L161
 1888 0004 1B68     		ldr	r3, [r3]
2717:FreeRTOS/src/tasks.c **** 	{
 1889              		.loc 1 2717 4 view .LVU514
 1890 0006 002B     		cmp	r3, #0
 1891 0008 52D1     		bne	.L143
 1892              	.LBB36:
2721:FreeRTOS/src/tasks.c **** 
 1893              		.loc 1 2721 3 is_stmt 1 view .LVU515
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 138


2721:FreeRTOS/src/tasks.c **** 
 1894              		.loc 1 2721 49 is_stmt 0 view .LVU516
 1895 000a 2E4B     		ldr	r3, .L161+4
 1896 000c 1E68     		ldr	r6, [r3]
2721:FreeRTOS/src/tasks.c **** 
 1897              		.loc 1 2721 20 view .LVU517
 1898 000e 0136     		adds	r6, r6, #1
 1899              	.LVL138:
2725:FreeRTOS/src/tasks.c **** 
 1900              		.loc 1 2725 3 is_stmt 1 view .LVU518
2725:FreeRTOS/src/tasks.c **** 
 1901              		.loc 1 2725 14 is_stmt 0 view .LVU519
 1902 0010 1E60     		str	r6, [r3]
2727:FreeRTOS/src/tasks.c **** 		{
 1903              		.loc 1 2727 3 is_stmt 1 view .LVU520
2727:FreeRTOS/src/tasks.c **** 		{
 1904              		.loc 1 2727 5 is_stmt 0 view .LVU521
 1905 0012 56B1     		cbz	r6, .L158
 1906              	.L144:
2733:FreeRTOS/src/tasks.c **** 		}
 1907              		.loc 1 2733 28 is_stmt 1 view .LVU522
2740:FreeRTOS/src/tasks.c **** 		{
 1908              		.loc 1 2740 3 view .LVU523
2740:FreeRTOS/src/tasks.c **** 		{
 1909              		.loc 1 2740 23 is_stmt 0 view .LVU524
 1910 0014 2C4B     		ldr	r3, .L161+8
 1911 0016 1B68     		ldr	r3, [r3]
2740:FreeRTOS/src/tasks.c **** 		{
 1912              		.loc 1 2740 5 view .LVU525
 1913 0018 B342     		cmp	r3, r6
 1914 001a 3FD9     		bls	.L154
 1915              	.LBE36:
2711:FreeRTOS/src/tasks.c **** 
 1916              		.loc 1 2711 12 view .LVU526
 1917 001c 0027     		movs	r7, #0
 1918              	.LVL139:
 1919              	.L146:
 1920              	.LBB38:
2851:FreeRTOS/src/tasks.c **** 			{
 1921              		.loc 1 2851 4 is_stmt 1 view .LVU527
2851:FreeRTOS/src/tasks.c **** 			{
 1922              		.loc 1 2851 22 is_stmt 0 view .LVU528
 1923 001e 2B4B     		ldr	r3, .L161+12
 1924 0020 1B68     		ldr	r3, [r3]
2851:FreeRTOS/src/tasks.c **** 			{
 1925              		.loc 1 2851 6 view .LVU529
 1926 0022 002B     		cmp	r3, #0
 1927 0024 49D0     		beq	.L142
2853:FreeRTOS/src/tasks.c **** 			}
 1928              		.loc 1 2853 21 view .LVU530
 1929 0026 0127     		movs	r7, #1
 1930              	.LVL140:
2853:FreeRTOS/src/tasks.c **** 			}
 1931              		.loc 1 2853 21 view .LVU531
 1932              	.LBE38:
2875:FreeRTOS/src/tasks.c **** }
 1933              		.loc 1 2875 2 is_stmt 1 view .LVU532
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 139


2875:FreeRTOS/src/tasks.c **** }
 1934              		.loc 1 2875 9 is_stmt 0 view .LVU533
 1935 0028 47E0     		b	.L142
 1936              	.LVL141:
 1937              	.L158:
 1938              	.LBB39:
 1939              	.LBB37:
2729:FreeRTOS/src/tasks.c **** 		}
 1940              		.loc 1 2729 4 is_stmt 1 view .LVU534
2729:FreeRTOS/src/tasks.c **** 		}
 1941              		.loc 1 2729 4 view .LVU535
2729:FreeRTOS/src/tasks.c **** 		}
 1942              		.loc 1 2729 4 view .LVU536
 1943 002a 294A     		ldr	r2, .L161+16
 1944 002c 1168     		ldr	r1, [r2]
 1945              	.LVL142:
2729:FreeRTOS/src/tasks.c **** 		}
 1946              		.loc 1 2729 4 view .LVU537
 1947 002e 294B     		ldr	r3, .L161+20
 1948 0030 1868     		ldr	r0, [r3]
 1949 0032 1060     		str	r0, [r2]
2729:FreeRTOS/src/tasks.c **** 		}
 1950              		.loc 1 2729 4 view .LVU538
 1951 0034 1960     		str	r1, [r3]
2729:FreeRTOS/src/tasks.c **** 		}
 1952              		.loc 1 2729 4 view .LVU539
 1953 0036 284A     		ldr	r2, .L161+24
 1954 0038 1368     		ldr	r3, [r2]
 1955 003a 0133     		adds	r3, r3, #1
 1956 003c 1360     		str	r3, [r2]
2729:FreeRTOS/src/tasks.c **** 		}
 1957              		.loc 1 2729 4 view .LVU540
 1958 003e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1959              	.LVL143:
2729:FreeRTOS/src/tasks.c **** 		}
 1960              		.loc 1 2729 4 is_stmt 0 view .LVU541
 1961              	.LBE37:
2729:FreeRTOS/src/tasks.c **** 		}
 1962              		.loc 1 2729 30 is_stmt 1 view .LVU542
 1963 0042 E7E7     		b	.L144
 1964              	.LVL144:
 1965              	.L155:
2806:FreeRTOS/src/tasks.c **** 						}
 1966              		.loc 1 2806 24 is_stmt 0 view .LVU543
 1967 0044 0127     		movs	r7, #1
 1968              	.LVL145:
 1969              	.L145:
2742:FreeRTOS/src/tasks.c **** 			{
 1970              		.loc 1 2742 4 is_stmt 1 view .LVU544
2744:FreeRTOS/src/tasks.c **** 				{
 1971              		.loc 1 2744 5 view .LVU545
2744:FreeRTOS/src/tasks.c **** 				{
 1972              		.loc 1 2744 9 is_stmt 0 view .LVU546
 1973 0046 224B     		ldr	r3, .L161+16
 1974 0048 1B68     		ldr	r3, [r3]
 1975 004a 1B68     		ldr	r3, [r3]
2744:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 140


 1976              		.loc 1 2744 7 view .LVU547
 1977 004c 43B3     		cbz	r3, .L159
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1978              		.loc 1 2760 6 is_stmt 1 view .LVU548
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1979              		.loc 1 2760 14 is_stmt 0 view .LVU549
 1980 004e 204B     		ldr	r3, .L161+16
 1981 0050 1B68     		ldr	r3, [r3]
 1982 0052 DB68     		ldr	r3, [r3, #12]
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1983              		.loc 1 2760 12 view .LVU550
 1984 0054 DC68     		ldr	r4, [r3, #12]
 1985              	.LVL146:
2761:FreeRTOS/src/tasks.c **** 
 1986              		.loc 1 2761 6 is_stmt 1 view .LVU551
2761:FreeRTOS/src/tasks.c **** 
 1987              		.loc 1 2761 17 is_stmt 0 view .LVU552
 1988 0056 6368     		ldr	r3, [r4, #4]
 1989              	.LVL147:
2763:FreeRTOS/src/tasks.c **** 					{
 1990              		.loc 1 2763 6 is_stmt 1 view .LVU553
2763:FreeRTOS/src/tasks.c **** 					{
 1991              		.loc 1 2763 8 is_stmt 0 view .LVU554
 1992 0058 9E42     		cmp	r6, r3
 1993 005a 26D3     		bcc	.L160
2775:FreeRTOS/src/tasks.c **** 					}
 1994              		.loc 1 2775 31 is_stmt 1 view .LVU555
2779:FreeRTOS/src/tasks.c **** 
 1995              		.loc 1 2779 6 view .LVU556
2779:FreeRTOS/src/tasks.c **** 
 1996              		.loc 1 2779 15 is_stmt 0 view .LVU557
 1997 005c 251D     		adds	r5, r4, #4
 1998 005e 2846     		mov	r0, r5
 1999 0060 FFF7FEFF 		bl	uxListRemove
 2000              	.LVL148:
2783:FreeRTOS/src/tasks.c **** 					{
 2001              		.loc 1 2783 6 is_stmt 1 view .LVU558
2783:FreeRTOS/src/tasks.c **** 					{
 2002              		.loc 1 2783 10 is_stmt 0 view .LVU559
 2003 0064 A36A     		ldr	r3, [r4, #40]
2783:FreeRTOS/src/tasks.c **** 					{
 2004              		.loc 1 2783 8 view .LVU560
 2005 0066 1BB1     		cbz	r3, .L149
2785:FreeRTOS/src/tasks.c **** 					}
 2006              		.loc 1 2785 7 is_stmt 1 view .LVU561
2785:FreeRTOS/src/tasks.c **** 					}
 2007              		.loc 1 2785 16 is_stmt 0 view .LVU562
 2008 0068 04F11800 		add	r0, r4, #24
 2009 006c FFF7FEFF 		bl	uxListRemove
 2010              	.LVL149:
 2011              	.L149:
2789:FreeRTOS/src/tasks.c **** 					}
 2012              		.loc 1 2789 31 is_stmt 1 view .LVU563
2794:FreeRTOS/src/tasks.c **** 
 2013              		.loc 1 2794 6 view .LVU564
2794:FreeRTOS/src/tasks.c **** 
 2014              		.loc 1 2794 6 view .LVU565
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 141


 2015 0070 E36A     		ldr	r3, [r4, #44]
 2016 0072 1A4A     		ldr	r2, .L161+28
 2017 0074 1268     		ldr	r2, [r2]
 2018 0076 9342     		cmp	r3, r2
 2019 0078 01D9     		bls	.L150
2794:FreeRTOS/src/tasks.c **** 
 2020              		.loc 1 2794 6 discriminator 1 view .LVU566
 2021 007a 184A     		ldr	r2, .L161+28
 2022 007c 1360     		str	r3, [r2]
 2023              	.L150:
2794:FreeRTOS/src/tasks.c **** 
 2024              		.loc 1 2794 6 discriminator 3 view .LVU567
2794:FreeRTOS/src/tasks.c **** 
 2025              		.loc 1 2794 6 discriminator 3 view .LVU568
 2026 007e 03EB8303 		add	r3, r3, r3, lsl #2
 2027 0082 9A00     		lsls	r2, r3, #2
 2028 0084 2946     		mov	r1, r5
 2029 0086 1648     		ldr	r0, .L161+32
 2030 0088 1044     		add	r0, r0, r2
 2031 008a FFF7FEFF 		bl	vListInsertEnd
 2032              	.LVL150:
2794:FreeRTOS/src/tasks.c **** 
 2033              		.loc 1 2794 36 discriminator 3 view .LVU569
2804:FreeRTOS/src/tasks.c **** 						{
 2034              		.loc 1 2804 7 discriminator 3 view .LVU570
2804:FreeRTOS/src/tasks.c **** 						{
 2035              		.loc 1 2804 16 is_stmt 0 discriminator 3 view .LVU571
 2036 008e E26A     		ldr	r2, [r4, #44]
2804:FreeRTOS/src/tasks.c **** 						{
 2037              		.loc 1 2804 44 discriminator 3 view .LVU572
 2038 0090 144B     		ldr	r3, .L161+36
 2039 0092 1B68     		ldr	r3, [r3]
 2040 0094 DB6A     		ldr	r3, [r3, #44]
2804:FreeRTOS/src/tasks.c **** 						{
 2041              		.loc 1 2804 9 discriminator 3 view .LVU573
 2042 0096 9A42     		cmp	r2, r3
 2043 0098 D4D2     		bcs	.L155
 2044 009a D4E7     		b	.L145
 2045              	.LVL151:
 2046              	.L154:
2804:FreeRTOS/src/tasks.c **** 						{
 2047              		.loc 1 2804 9 discriminator 3 view .LVU574
 2048              	.LBE39:
2711:FreeRTOS/src/tasks.c **** 
 2049              		.loc 1 2711 12 view .LVU575
 2050 009c 0027     		movs	r7, #0
 2051 009e D2E7     		b	.L145
 2052              	.LVL152:
 2053              	.L159:
 2054              	.LBB40:
2751:FreeRTOS/src/tasks.c **** 					break;
 2055              		.loc 1 2751 6 is_stmt 1 view .LVU576
2751:FreeRTOS/src/tasks.c **** 					break;
 2056              		.loc 1 2751 27 is_stmt 0 view .LVU577
 2057 00a0 094B     		ldr	r3, .L161+8
 2058 00a2 4FF0FF32 		mov	r2, #-1
 2059 00a6 1A60     		str	r2, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 142


2752:FreeRTOS/src/tasks.c **** 				}
 2060              		.loc 1 2752 6 is_stmt 1 view .LVU578
 2061 00a8 B9E7     		b	.L146
 2062              	.LVL153:
 2063              	.L160:
2770:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2064              		.loc 1 2770 7 view .LVU579
2770:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2065              		.loc 1 2770 28 is_stmt 0 view .LVU580
 2066 00aa 074A     		ldr	r2, .L161+8
 2067 00ac 1360     		str	r3, [r2]
2771:FreeRTOS/src/tasks.c **** 					}
 2068              		.loc 1 2771 7 is_stmt 1 view .LVU581
 2069 00ae B6E7     		b	.L146
 2070              	.LVL154:
 2071              	.L143:
2771:FreeRTOS/src/tasks.c **** 					}
 2072              		.loc 1 2771 7 is_stmt 0 view .LVU582
 2073              	.LBE40:
2864:FreeRTOS/src/tasks.c **** 
 2074              		.loc 1 2864 3 is_stmt 1 view .LVU583
 2075 00b0 0D4A     		ldr	r2, .L161+40
 2076 00b2 1368     		ldr	r3, [r2]
 2077 00b4 0133     		adds	r3, r3, #1
 2078 00b6 1360     		str	r3, [r2]
2711:FreeRTOS/src/tasks.c **** 
 2079              		.loc 1 2711 12 is_stmt 0 view .LVU584
 2080 00b8 0027     		movs	r7, #0
 2081              	.LVL155:
 2082              	.L142:
2876:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2083              		.loc 1 2876 1 view .LVU585
 2084 00ba 3846     		mov	r0, r7
 2085 00bc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2086              	.L162:
 2087 00be 00BF     		.align	2
 2088              	.L161:
 2089 00c0 00000000 		.word	.LANCHOR14
 2090 00c4 00000000 		.word	.LANCHOR13
 2091 00c8 00000000 		.word	.LANCHOR4
 2092 00cc 00000000 		.word	.LANCHOR17
 2093 00d0 00000000 		.word	.LANCHOR3
 2094 00d4 00000000 		.word	.LANCHOR7
 2095 00d8 00000000 		.word	.LANCHOR16
 2096 00dc 00000000 		.word	.LANCHOR12
 2097 00e0 00000000 		.word	.LANCHOR2
 2098 00e4 00000000 		.word	.LANCHOR9
 2099 00e8 00000000 		.word	.LANCHOR18
 2100              		.cfi_endproc
 2101              	.LFE25:
 2103              		.section	.text.xTaskResumeAll,"ax",%progbits
 2104              		.align	1
 2105              		.global	xTaskResumeAll
 2106              		.syntax unified
 2107              		.thumb
 2108              		.thumb_func
 2109              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 143


 2111              	xTaskResumeAll:
 2112              	.LFB19:
2195:FreeRTOS/src/tasks.c **** TCB_t *pxTCB = NULL;
 2113              		.loc 1 2195 1 is_stmt 1 view -0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 0
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 2117 0000 38B5     		push	{r3, r4, r5, lr}
 2118              	.LCFI18:
 2119              		.cfi_def_cfa_offset 16
 2120              		.cfi_offset 3, -16
 2121              		.cfi_offset 4, -12
 2122              		.cfi_offset 5, -8
 2123              		.cfi_offset 14, -4
2196:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2124              		.loc 1 2196 1 view .LVU587
 2125              	.LVL156:
2197:FreeRTOS/src/tasks.c **** 
 2126              		.loc 1 2197 1 view .LVU588
2201:FreeRTOS/src/tasks.c **** 
 2127              		.loc 1 2201 38 view .LVU589
2208:FreeRTOS/src/tasks.c **** 	{
 2128              		.loc 1 2208 2 view .LVU590
 2129 0002 FFF7FEFF 		bl	vPortEnterCritical
 2130              	.LVL157:
2210:FreeRTOS/src/tasks.c **** 
 2131              		.loc 1 2210 3 view .LVU591
 2132 0006 2E4B     		ldr	r3, .L179
 2133 0008 1A68     		ldr	r2, [r3]
 2134 000a 013A     		subs	r2, r2, #1
 2135 000c 1A60     		str	r2, [r3]
2212:FreeRTOS/src/tasks.c **** 		{
 2136              		.loc 1 2212 3 view .LVU592
2212:FreeRTOS/src/tasks.c **** 		{
 2137              		.loc 1 2212 28 is_stmt 0 view .LVU593
 2138 000e 1B68     		ldr	r3, [r3]
2212:FreeRTOS/src/tasks.c **** 		{
 2139              		.loc 1 2212 5 view .LVU594
 2140 0010 002B     		cmp	r3, #0
 2141 0012 4DD1     		bne	.L173
2214:FreeRTOS/src/tasks.c **** 			{
 2142              		.loc 1 2214 4 is_stmt 1 view .LVU595
2214:FreeRTOS/src/tasks.c **** 			{
 2143              		.loc 1 2214 31 is_stmt 0 view .LVU596
 2144 0014 2B4B     		ldr	r3, .L179+4
 2145 0016 1B68     		ldr	r3, [r3]
2214:FreeRTOS/src/tasks.c **** 			{
 2146              		.loc 1 2214 6 view .LVU597
 2147 0018 0BB9     		cbnz	r3, .L174
2197:FreeRTOS/src/tasks.c **** 
 2148              		.loc 1 2197 12 view .LVU598
 2149 001a 0024     		movs	r4, #0
 2150 001c 49E0     		b	.L164
 2151              	.L174:
2196:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2152              		.loc 1 2196 8 view .LVU599
 2153 001e 0024     		movs	r4, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 144


 2154              	.LVL158:
 2155              	.L165:
2233:FreeRTOS/src/tasks.c **** 					}
 2156              		.loc 1 2233 31 is_stmt 1 view .LVU600
2218:FreeRTOS/src/tasks.c **** 				{
 2157              		.loc 1 2218 12 is_stmt 0 view .LVU601
 2158 0020 294B     		ldr	r3, .L179+8
 2159 0022 1B68     		ldr	r3, [r3]
2218:FreeRTOS/src/tasks.c **** 				{
 2160              		.loc 1 2218 10 view .LVU602
 2161 0024 1BB3     		cbz	r3, .L177
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2162              		.loc 1 2220 6 is_stmt 1 view .LVU603
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2163              		.loc 1 2220 14 is_stmt 0 view .LVU604
 2164 0026 284B     		ldr	r3, .L179+8
 2165 0028 DB68     		ldr	r3, [r3, #12]
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2166              		.loc 1 2220 12 view .LVU605
 2167 002a DC68     		ldr	r4, [r3, #12]
 2168              	.LVL159:
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2169              		.loc 1 2221 6 is_stmt 1 view .LVU606
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2170              		.loc 1 2221 15 is_stmt 0 view .LVU607
 2171 002c 04F11800 		add	r0, r4, #24
 2172 0030 FFF7FEFF 		bl	uxListRemove
 2173              	.LVL160:
2222:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2174              		.loc 1 2222 6 is_stmt 1 view .LVU608
2222:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2175              		.loc 1 2222 15 is_stmt 0 view .LVU609
 2176 0034 251D     		adds	r5, r4, #4
 2177 0036 2846     		mov	r0, r5
 2178 0038 FFF7FEFF 		bl	uxListRemove
 2179              	.LVL161:
2223:FreeRTOS/src/tasks.c **** 
 2180              		.loc 1 2223 6 is_stmt 1 view .LVU610
2223:FreeRTOS/src/tasks.c **** 
 2181              		.loc 1 2223 6 view .LVU611
 2182 003c E36A     		ldr	r3, [r4, #44]
 2183 003e 234A     		ldr	r2, .L179+12
 2184 0040 1268     		ldr	r2, [r2]
 2185 0042 9342     		cmp	r3, r2
 2186 0044 01D9     		bls	.L166
2223:FreeRTOS/src/tasks.c **** 
 2187              		.loc 1 2223 6 discriminator 1 view .LVU612
 2188 0046 214A     		ldr	r2, .L179+12
 2189 0048 1360     		str	r3, [r2]
 2190              	.L166:
2223:FreeRTOS/src/tasks.c **** 
 2191              		.loc 1 2223 6 discriminator 3 view .LVU613
2223:FreeRTOS/src/tasks.c **** 
 2192              		.loc 1 2223 6 discriminator 3 view .LVU614
 2193 004a 03EB8303 		add	r3, r3, r3, lsl #2
 2194 004e 9A00     		lsls	r2, r3, #2
 2195 0050 2946     		mov	r1, r5
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 145


 2196 0052 1F48     		ldr	r0, .L179+16
 2197 0054 1044     		add	r0, r0, r2
 2198 0056 FFF7FEFF 		bl	vListInsertEnd
 2199              	.LVL162:
2223:FreeRTOS/src/tasks.c **** 
 2200              		.loc 1 2223 36 discriminator 3 view .LVU615
2227:FreeRTOS/src/tasks.c **** 					{
 2201              		.loc 1 2227 6 discriminator 3 view .LVU616
2227:FreeRTOS/src/tasks.c **** 					{
 2202              		.loc 1 2227 15 is_stmt 0 discriminator 3 view .LVU617
 2203 005a E26A     		ldr	r2, [r4, #44]
2227:FreeRTOS/src/tasks.c **** 					{
 2204              		.loc 1 2227 43 discriminator 3 view .LVU618
 2205 005c 1D4B     		ldr	r3, .L179+20
 2206 005e 1B68     		ldr	r3, [r3]
 2207 0060 DB6A     		ldr	r3, [r3, #44]
2227:FreeRTOS/src/tasks.c **** 					{
 2208              		.loc 1 2227 8 discriminator 3 view .LVU619
 2209 0062 9A42     		cmp	r2, r3
 2210 0064 DCD3     		bcc	.L165
2229:FreeRTOS/src/tasks.c **** 					}
 2211              		.loc 1 2229 7 is_stmt 1 view .LVU620
2229:FreeRTOS/src/tasks.c **** 					}
 2212              		.loc 1 2229 21 is_stmt 0 view .LVU621
 2213 0066 1C4B     		ldr	r3, .L179+24
 2214 0068 0122     		movs	r2, #1
 2215 006a 1A60     		str	r2, [r3]
 2216 006c D8E7     		b	.L165
 2217              	.L177:
2237:FreeRTOS/src/tasks.c **** 				{
 2218              		.loc 1 2237 5 is_stmt 1 view .LVU622
2237:FreeRTOS/src/tasks.c **** 				{
 2219              		.loc 1 2237 7 is_stmt 0 view .LVU623
 2220 006e 0CB1     		cbz	r4, .L169
2245:FreeRTOS/src/tasks.c **** 				}
 2221              		.loc 1 2245 6 is_stmt 1 view .LVU624
 2222 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2223              	.LVL163:
 2224              	.L169:
 2225              	.LBB41:
2253:FreeRTOS/src/tasks.c **** 
 2226              		.loc 1 2253 6 view .LVU625
2253:FreeRTOS/src/tasks.c **** 
 2227              		.loc 1 2253 17 is_stmt 0 view .LVU626
 2228 0074 194B     		ldr	r3, .L179+28
 2229 0076 1C68     		ldr	r4, [r3]
 2230              	.LVL164:
2255:FreeRTOS/src/tasks.c **** 					{
 2231              		.loc 1 2255 6 is_stmt 1 view .LVU627
2255:FreeRTOS/src/tasks.c **** 					{
 2232              		.loc 1 2255 8 is_stmt 0 view .LVU628
 2233 0078 74B9     		cbnz	r4, .L172
 2234              	.L170:
2274:FreeRTOS/src/tasks.c **** 					}
 2235              		.loc 1 2274 31 is_stmt 1 view .LVU629
 2236              	.LBE41:
2278:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 146


 2237              		.loc 1 2278 5 view .LVU630
2278:FreeRTOS/src/tasks.c **** 				{
 2238              		.loc 1 2278 23 is_stmt 0 view .LVU631
 2239 007a 174B     		ldr	r3, .L179+24
 2240 007c 1B68     		ldr	r3, [r3]
2278:FreeRTOS/src/tasks.c **** 				{
 2241              		.loc 1 2278 7 view .LVU632
 2242 007e E3B1     		cbz	r3, .L175
2282:FreeRTOS/src/tasks.c **** 					}
 2243              		.loc 1 2282 7 is_stmt 1 view .LVU633
 2244              	.LVL165:
2285:FreeRTOS/src/tasks.c **** 				}
 2245              		.loc 1 2285 6 view .LVU634
 2246 0080 174B     		ldr	r3, .L179+32
 2247 0082 4FF08052 		mov	r2, #268435456
 2248 0086 1A60     		str	r2, [r3]
2285:FreeRTOS/src/tasks.c **** 				}
 2249              		.loc 1 2285 6 view .LVU635
 2250              		.syntax unified
 2251              	@ 2285 "FreeRTOS/src/tasks.c" 1
 2252 0088 BFF34F8F 		dsb
 2253              	@ 0 "" 2
2285:FreeRTOS/src/tasks.c **** 				}
 2254              		.loc 1 2285 6 view .LVU636
 2255              	@ 2285 "FreeRTOS/src/tasks.c" 1
 2256 008c BFF36F8F 		isb
 2257              	@ 0 "" 2
2285:FreeRTOS/src/tasks.c **** 				}
 2258              		.loc 1 2285 37 view .LVU637
2282:FreeRTOS/src/tasks.c **** 					}
 2259              		.loc 1 2282 23 is_stmt 0 view .LVU638
 2260              		.thumb
 2261              		.syntax unified
 2262 0090 0124     		movs	r4, #1
 2263              	.LVL166:
2282:FreeRTOS/src/tasks.c **** 					}
 2264              		.loc 1 2282 23 view .LVU639
 2265 0092 0EE0     		b	.L164
 2266              	.LVL167:
 2267              	.L171:
 2268              	.LBB42:
2265:FreeRTOS/src/tasks.c **** 							}
 2269              		.loc 1 2265 33 is_stmt 1 view .LVU640
2267:FreeRTOS/src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2270              		.loc 1 2267 8 view .LVU641
2268:FreeRTOS/src/tasks.c **** 
 2271              		.loc 1 2268 7 is_stmt 0 view .LVU642
 2272 0094 013C     		subs	r4, r4, #1
 2273              	.LVL168:
2268:FreeRTOS/src/tasks.c **** 
 2274              		.loc 1 2268 7 view .LVU643
 2275 0096 07D0     		beq	.L178
 2276              	.L172:
2257:FreeRTOS/src/tasks.c **** 						{
 2277              		.loc 1 2257 7 is_stmt 1 view .LVU644
2259:FreeRTOS/src/tasks.c **** 							{
 2278              		.loc 1 2259 8 view .LVU645
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 147


2259:FreeRTOS/src/tasks.c **** 							{
 2279              		.loc 1 2259 12 is_stmt 0 view .LVU646
 2280 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2281              	.LVL169:
2259:FreeRTOS/src/tasks.c **** 							{
 2282              		.loc 1 2259 10 view .LVU647
 2283 009c 0028     		cmp	r0, #0
 2284 009e F9D0     		beq	.L171
2261:FreeRTOS/src/tasks.c **** 							}
 2285              		.loc 1 2261 9 is_stmt 1 view .LVU648
2261:FreeRTOS/src/tasks.c **** 							}
 2286              		.loc 1 2261 23 is_stmt 0 view .LVU649
 2287 00a0 0D4B     		ldr	r3, .L179+24
 2288 00a2 0122     		movs	r2, #1
 2289 00a4 1A60     		str	r2, [r3]
 2290 00a6 F5E7     		b	.L171
 2291              	.L178:
2270:FreeRTOS/src/tasks.c **** 					}
 2292              		.loc 1 2270 7 is_stmt 1 view .LVU650
2270:FreeRTOS/src/tasks.c **** 					}
 2293              		.loc 1 2270 20 is_stmt 0 view .LVU651
 2294 00a8 0C4B     		ldr	r3, .L179+28
 2295 00aa 0022     		movs	r2, #0
 2296 00ac 1A60     		str	r2, [r3]
 2297 00ae E4E7     		b	.L170
 2298              	.LVL170:
 2299              	.L173:
2270:FreeRTOS/src/tasks.c **** 					}
 2300              		.loc 1 2270 20 view .LVU652
 2301              	.LBE42:
2197:FreeRTOS/src/tasks.c **** 
 2302              		.loc 1 2197 12 view .LVU653
 2303 00b0 0024     		movs	r4, #0
 2304              	.LVL171:
 2305              	.L164:
2295:FreeRTOS/src/tasks.c **** 		}
 2306              		.loc 1 2295 28 is_stmt 1 view .LVU654
2298:FreeRTOS/src/tasks.c **** 
 2307              		.loc 1 2298 2 view .LVU655
 2308 00b2 FFF7FEFF 		bl	vPortExitCritical
 2309              	.LVL172:
2300:FreeRTOS/src/tasks.c **** }
 2310              		.loc 1 2300 2 view .LVU656
2301:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2311              		.loc 1 2301 1 is_stmt 0 view .LVU657
 2312 00b6 2046     		mov	r0, r4
 2313 00b8 38BD     		pop	{r3, r4, r5, pc}
 2314              	.LVL173:
 2315              	.L175:
2197:FreeRTOS/src/tasks.c **** 
 2316              		.loc 1 2197 12 view .LVU658
 2317 00ba 0024     		movs	r4, #0
 2318              	.LVL174:
2197:FreeRTOS/src/tasks.c **** 
 2319              		.loc 1 2197 12 view .LVU659
 2320 00bc F9E7     		b	.L164
 2321              	.L180:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 148


 2322 00be 00BF     		.align	2
 2323              	.L179:
 2324 00c0 00000000 		.word	.LANCHOR14
 2325 00c4 00000000 		.word	.LANCHOR8
 2326 00c8 00000000 		.word	.LANCHOR1
 2327 00cc 00000000 		.word	.LANCHOR12
 2328 00d0 00000000 		.word	.LANCHOR2
 2329 00d4 00000000 		.word	.LANCHOR9
 2330 00d8 00000000 		.word	.LANCHOR17
 2331 00dc 00000000 		.word	.LANCHOR18
 2332 00e0 04ED00E0 		.word	-536810236
 2333              		.cfi_endproc
 2334              	.LFE19:
 2336              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2337              		.align	1
 2338              		.global	vTaskDelayUntil
 2339              		.syntax unified
 2340              		.thumb
 2341              		.thumb_func
 2342              		.fpu fpv4-sp-d16
 2344              	vTaskDelayUntil:
 2345              	.LVL175:
 2346              	.LFB7:
1258:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
 2347              		.loc 1 1258 2 is_stmt 1 view -0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
1258:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
 2351              		.loc 1 1258 2 is_stmt 0 view .LVU661
 2352 0000 38B5     		push	{r3, r4, r5, lr}
 2353              	.LCFI19:
 2354              		.cfi_def_cfa_offset 16
 2355              		.cfi_offset 3, -16
 2356              		.cfi_offset 4, -12
 2357              		.cfi_offset 5, -8
 2358              		.cfi_offset 14, -4
 2359 0002 0546     		mov	r5, r0
 2360 0004 0C46     		mov	r4, r1
1259:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2361              		.loc 1 1259 2 is_stmt 1 view .LVU662
1260:FreeRTOS/src/tasks.c **** 
 2362              		.loc 1 1260 2 view .LVU663
 2363              	.LVL176:
1262:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2364              		.loc 1 1262 37 view .LVU664
1263:FreeRTOS/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2365              		.loc 1 1263 42 view .LVU665
1264:FreeRTOS/src/tasks.c **** 
 2366              		.loc 1 1264 44 view .LVU666
1266:FreeRTOS/src/tasks.c **** 		{
 2367              		.loc 1 1266 3 view .LVU667
 2368 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2369              	.LVL177:
 2370              	.LBB43:
1270:FreeRTOS/src/tasks.c **** 
 2371              		.loc 1 1270 4 view .LVU668
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 149


1270:FreeRTOS/src/tasks.c **** 
 2372              		.loc 1 1270 21 is_stmt 0 view .LVU669
 2373 000a 134B     		ldr	r3, .L191
 2374 000c 1868     		ldr	r0, [r3]
 2375              	.LVL178:
1273:FreeRTOS/src/tasks.c **** 
 2376              		.loc 1 1273 4 is_stmt 1 view .LVU670
1273:FreeRTOS/src/tasks.c **** 
 2377              		.loc 1 1273 18 is_stmt 0 view .LVU671
 2378 000e 2A68     		ldr	r2, [r5]
1273:FreeRTOS/src/tasks.c **** 
 2379              		.loc 1 1273 16 view .LVU672
 2380 0010 1444     		add	r4, r4, r2
 2381              	.LVL179:
1275:FreeRTOS/src/tasks.c **** 			{
 2382              		.loc 1 1275 4 is_stmt 1 view .LVU673
1275:FreeRTOS/src/tasks.c **** 			{
 2383              		.loc 1 1275 6 is_stmt 0 view .LVU674
 2384 0012 8242     		cmp	r2, r0
 2385 0014 09D9     		bls	.L182
1282:FreeRTOS/src/tasks.c **** 				{
 2386              		.loc 1 1282 5 is_stmt 1 view .LVU675
1282:FreeRTOS/src/tasks.c **** 				{
 2387              		.loc 1 1282 7 is_stmt 0 view .LVU676
 2388 0016 A242     		cmp	r2, r4
 2389 0018 01D8     		bhi	.L183
1307:FreeRTOS/src/tasks.c **** 
 2390              		.loc 1 1307 4 is_stmt 1 view .LVU677
1307:FreeRTOS/src/tasks.c **** 
 2391              		.loc 1 1307 24 is_stmt 0 view .LVU678
 2392 001a 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2393              		.loc 1 1309 4 is_stmt 1 view .LVU679
 2394 001c 0EE0     		b	.L184
 2395              	.L183:
1282:FreeRTOS/src/tasks.c **** 				{
 2396              		.loc 1 1282 47 is_stmt 0 discriminator 1 view .LVU680
 2397 001e A042     		cmp	r0, r4
 2398 0020 01D3     		bcc	.L185
1307:FreeRTOS/src/tasks.c **** 
 2399              		.loc 1 1307 4 is_stmt 1 view .LVU681
1307:FreeRTOS/src/tasks.c **** 
 2400              		.loc 1 1307 24 is_stmt 0 view .LVU682
 2401 0022 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2402              		.loc 1 1309 4 is_stmt 1 view .LVU683
 2403 0024 0AE0     		b	.L184
 2404              	.L185:
1284:FreeRTOS/src/tasks.c **** 				}
 2405              		.loc 1 1284 6 view .LVU684
 2406              	.LVL180:
1307:FreeRTOS/src/tasks.c **** 
 2407              		.loc 1 1307 4 view .LVU685
1307:FreeRTOS/src/tasks.c **** 
 2408              		.loc 1 1307 24 is_stmt 0 view .LVU686
 2409 0026 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 150


 2410              		.loc 1 1309 4 is_stmt 1 view .LVU687
 2411 0028 04E0     		b	.L186
 2412              	.LVL181:
 2413              	.L182:
1296:FreeRTOS/src/tasks.c **** 				{
 2414              		.loc 1 1296 5 view .LVU688
1296:FreeRTOS/src/tasks.c **** 				{
 2415              		.loc 1 1296 7 is_stmt 0 view .LVU689
 2416 002a A242     		cmp	r2, r4
 2417 002c 01D8     		bhi	.L187
1296:FreeRTOS/src/tasks.c **** 				{
 2418              		.loc 1 1296 47 discriminator 1 view .LVU690
 2419 002e A042     		cmp	r0, r4
 2420 0030 10D2     		bcs	.L188
 2421              	.L187:
1298:FreeRTOS/src/tasks.c **** 				}
 2422              		.loc 1 1298 6 is_stmt 1 view .LVU691
 2423              	.LVL182:
1307:FreeRTOS/src/tasks.c **** 
 2424              		.loc 1 1307 4 view .LVU692
1307:FreeRTOS/src/tasks.c **** 
 2425              		.loc 1 1307 24 is_stmt 0 view .LVU693
 2426 0032 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2427              		.loc 1 1309 4 is_stmt 1 view .LVU694
 2428              	.L186:
1311:FreeRTOS/src/tasks.c **** 
 2429              		.loc 1 1311 41 view .LVU695
1315:FreeRTOS/src/tasks.c **** 			}
 2430              		.loc 1 1315 5 view .LVU696
 2431 0034 0021     		movs	r1, #0
 2432 0036 201A     		subs	r0, r4, r0
 2433              	.LVL183:
1315:FreeRTOS/src/tasks.c **** 			}
 2434              		.loc 1 1315 5 is_stmt 0 view .LVU697
 2435 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2436              	.LVL184:
 2437              	.L184:
1319:FreeRTOS/src/tasks.c **** 			}
 2438              		.loc 1 1319 29 is_stmt 1 view .LVU698
 2439              	.LBE43:
1322:FreeRTOS/src/tasks.c **** 
 2440              		.loc 1 1322 3 view .LVU699
1322:FreeRTOS/src/tasks.c **** 
 2441              		.loc 1 1322 21 is_stmt 0 view .LVU700
 2442 003c FFF7FEFF 		bl	xTaskResumeAll
 2443              	.LVL185:
1326:FreeRTOS/src/tasks.c **** 		{
 2444              		.loc 1 1326 3 is_stmt 1 view .LVU701
1326:FreeRTOS/src/tasks.c **** 		{
 2445              		.loc 1 1326 5 is_stmt 0 view .LVU702
 2446 0040 38B9     		cbnz	r0, .L181
1328:FreeRTOS/src/tasks.c **** 		}
 2447              		.loc 1 1328 4 is_stmt 1 view .LVU703
 2448 0042 064B     		ldr	r3, .L191+4
 2449 0044 4FF08052 		mov	r2, #268435456
 2450 0048 1A60     		str	r2, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 151


1328:FreeRTOS/src/tasks.c **** 		}
 2451              		.loc 1 1328 4 view .LVU704
 2452              		.syntax unified
 2453              	@ 1328 "FreeRTOS/src/tasks.c" 1
 2454 004a BFF34F8F 		dsb
 2455              	@ 0 "" 2
1328:FreeRTOS/src/tasks.c **** 		}
 2456              		.loc 1 1328 4 view .LVU705
 2457              	@ 1328 "FreeRTOS/src/tasks.c" 1
 2458 004e BFF36F8F 		isb
 2459              	@ 0 "" 2
1328:FreeRTOS/src/tasks.c **** 		}
 2460              		.loc 1 1328 26 view .LVU706
1332:FreeRTOS/src/tasks.c **** 		}
 2461              		.loc 1 1332 28 view .LVU707
 2462              		.thumb
 2463              		.syntax unified
 2464              	.L181:
1334:FreeRTOS/src/tasks.c **** 
 2465              		.loc 1 1334 2 is_stmt 0 view .LVU708
 2466 0052 38BD     		pop	{r3, r4, r5, pc}
 2467              	.LVL186:
 2468              	.L188:
 2469              	.LBB44:
1307:FreeRTOS/src/tasks.c **** 
 2470              		.loc 1 1307 4 is_stmt 1 view .LVU709
1307:FreeRTOS/src/tasks.c **** 
 2471              		.loc 1 1307 24 is_stmt 0 view .LVU710
 2472 0054 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2473              		.loc 1 1309 4 is_stmt 1 view .LVU711
 2474 0056 F1E7     		b	.L184
 2475              	.L192:
 2476              		.align	2
 2477              	.L191:
 2478 0058 00000000 		.word	.LANCHOR13
 2479 005c 04ED00E0 		.word	-536810236
 2480              	.LBE44:
 2481              		.cfi_endproc
 2482              	.LFE7:
 2484              		.section	.text.vTaskDelay,"ax",%progbits
 2485              		.align	1
 2486              		.global	vTaskDelay
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2490              		.fpu fpv4-sp-d16
 2492              	vTaskDelay:
 2493              	.LVL187:
 2494              	.LFB8:
1342:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2495              		.loc 1 1342 2 view -0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 0
 2498              		@ frame_needed = 0, uses_anonymous_args = 0
1342:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2499              		.loc 1 1342 2 is_stmt 0 view .LVU713
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 152


 2500 0000 10B5     		push	{r4, lr}
 2501              	.LCFI20:
 2502              		.cfi_def_cfa_offset 8
 2503              		.cfi_offset 4, -8
 2504              		.cfi_offset 14, -4
1343:FreeRTOS/src/tasks.c **** 
 2505              		.loc 1 1343 2 is_stmt 1 view .LVU714
 2506              	.LVL188:
1346:FreeRTOS/src/tasks.c **** 		{
 2507              		.loc 1 1346 3 view .LVU715
1346:FreeRTOS/src/tasks.c **** 		{
 2508              		.loc 1 1346 5 is_stmt 0 view .LVU716
 2509 0002 40B9     		cbnz	r0, .L197
 2510              	.LVL189:
 2511              	.L194:
1373:FreeRTOS/src/tasks.c **** 		}
 2512              		.loc 1 1373 4 is_stmt 1 view .LVU717
 2513 0004 0A4B     		ldr	r3, .L198
 2514 0006 4FF08052 		mov	r2, #268435456
 2515 000a 1A60     		str	r2, [r3]
1373:FreeRTOS/src/tasks.c **** 		}
 2516              		.loc 1 1373 4 view .LVU718
 2517              		.syntax unified
 2518              	@ 1373 "FreeRTOS/src/tasks.c" 1
 2519 000c BFF34F8F 		dsb
 2520              	@ 0 "" 2
1373:FreeRTOS/src/tasks.c **** 		}
 2521              		.loc 1 1373 4 view .LVU719
 2522              	@ 1373 "FreeRTOS/src/tasks.c" 1
 2523 0010 BFF36F8F 		isb
 2524              	@ 0 "" 2
1373:FreeRTOS/src/tasks.c **** 		}
 2525              		.loc 1 1373 26 view .LVU720
1377:FreeRTOS/src/tasks.c **** 		}
 2526              		.loc 1 1377 28 view .LVU721
 2527              		.thumb
 2528              		.syntax unified
 2529              	.L193:
1379:FreeRTOS/src/tasks.c **** 
 2530              		.loc 1 1379 2 is_stmt 0 view .LVU722
 2531 0014 10BD     		pop	{r4, pc}
 2532              	.LVL190:
 2533              	.L197:
1379:FreeRTOS/src/tasks.c **** 
 2534              		.loc 1 1379 2 view .LVU723
 2535 0016 0446     		mov	r4, r0
1348:FreeRTOS/src/tasks.c **** 			vTaskSuspendAll();
 2536              		.loc 1 1348 45 is_stmt 1 view .LVU724
1349:FreeRTOS/src/tasks.c **** 			{
 2537              		.loc 1 1349 4 view .LVU725
 2538 0018 FFF7FEFF 		bl	vTaskSuspendAll
 2539              	.LVL191:
1351:FreeRTOS/src/tasks.c **** 
 2540              		.loc 1 1351 22 view .LVU726
1360:FreeRTOS/src/tasks.c **** 			}
 2541              		.loc 1 1360 5 view .LVU727
 2542 001c 0021     		movs	r1, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 153


 2543 001e 2046     		mov	r0, r4
 2544 0020 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2545              	.LVL192:
1362:FreeRTOS/src/tasks.c **** 		}
 2546              		.loc 1 1362 4 view .LVU728
1362:FreeRTOS/src/tasks.c **** 		}
 2547              		.loc 1 1362 22 is_stmt 0 view .LVU729
 2548 0024 FFF7FEFF 		bl	xTaskResumeAll
 2549              	.LVL193:
1366:FreeRTOS/src/tasks.c **** 		}
 2550              		.loc 1 1366 28 is_stmt 1 view .LVU730
1371:FreeRTOS/src/tasks.c **** 		{
 2551              		.loc 1 1371 3 view .LVU731
1371:FreeRTOS/src/tasks.c **** 		{
 2552              		.loc 1 1371 5 is_stmt 0 view .LVU732
 2553 0028 0028     		cmp	r0, #0
 2554 002a F3D1     		bne	.L193
1371:FreeRTOS/src/tasks.c **** 		{
 2555              		.loc 1 1371 5 view .LVU733
 2556 002c EAE7     		b	.L194
 2557              	.L199:
 2558 002e 00BF     		.align	2
 2559              	.L198:
 2560 0030 04ED00E0 		.word	-536810236
 2561              		.cfi_endproc
 2562              	.LFE8:
 2564              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2565              		.align	1
 2566              		.global	xTaskCatchUpTicks
 2567              		.syntax unified
 2568              		.thumb
 2569              		.thumb_func
 2570              		.fpu fpv4-sp-d16
 2572              	xTaskCatchUpTicks:
 2573              	.LVL194:
 2574              	.LFB24:
2610:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2575              		.loc 1 2610 1 is_stmt 1 view -0
 2576              		.cfi_startproc
 2577              		@ args = 0, pretend = 0, frame = 0
 2578              		@ frame_needed = 0, uses_anonymous_args = 0
2610:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2579              		.loc 1 2610 1 is_stmt 0 view .LVU735
 2580 0000 10B5     		push	{r4, lr}
 2581              	.LCFI21:
 2582              		.cfi_def_cfa_offset 8
 2583              		.cfi_offset 4, -8
 2584              		.cfi_offset 14, -4
 2585 0002 0446     		mov	r4, r0
2611:FreeRTOS/src/tasks.c **** 
 2586              		.loc 1 2611 1 is_stmt 1 view .LVU736
 2587              	.LVL195:
2615:FreeRTOS/src/tasks.c **** 
 2588              		.loc 1 2615 43 view .LVU737
2619:FreeRTOS/src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2589              		.loc 1 2619 2 view .LVU738
 2590 0004 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 154


 2591              	.LVL196:
2620:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2592              		.loc 1 2620 2 view .LVU739
2620:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2593              		.loc 1 2620 15 is_stmt 0 view .LVU740
 2594 0008 034B     		ldr	r3, .L202
 2595 000a 1868     		ldr	r0, [r3]
 2596 000c 2044     		add	r0, r0, r4
 2597 000e 1860     		str	r0, [r3]
2621:FreeRTOS/src/tasks.c **** 
 2598              		.loc 1 2621 2 is_stmt 1 view .LVU741
2621:FreeRTOS/src/tasks.c **** 
 2599              		.loc 1 2621 19 is_stmt 0 view .LVU742
 2600 0010 FFF7FEFF 		bl	xTaskResumeAll
 2601              	.LVL197:
2623:FreeRTOS/src/tasks.c **** }
 2602              		.loc 1 2623 2 is_stmt 1 view .LVU743
2624:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 2603              		.loc 1 2624 1 is_stmt 0 view .LVU744
 2604 0014 10BD     		pop	{r4, pc}
 2605              	.LVL198:
 2606              	.L203:
2624:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 2607              		.loc 1 2624 1 view .LVU745
 2608 0016 00BF     		.align	2
 2609              	.L202:
 2610 0018 00000000 		.word	.LANCHOR18
 2611              		.cfi_endproc
 2612              	.LFE24:
 2614              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2615              		.align	1
 2616              		.global	vTaskSwitchContext
 2617              		.syntax unified
 2618              		.thumb
 2619              		.thumb_func
 2620              		.fpu fpv4-sp-d16
 2622              	vTaskSwitchContext:
 2623              	.LFB26:
2990:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2624              		.loc 1 2990 1 is_stmt 1 view -0
 2625              		.cfi_startproc
 2626              		@ args = 0, pretend = 0, frame = 0
 2627              		@ frame_needed = 0, uses_anonymous_args = 0
 2628              		@ link register save eliminated.
2991:FreeRTOS/src/tasks.c **** 	{
 2629              		.loc 1 2991 2 view .LVU747
2991:FreeRTOS/src/tasks.c **** 	{
 2630              		.loc 1 2991 27 is_stmt 0 view .LVU748
 2631 0000 1C4B     		ldr	r3, .L214
 2632 0002 1B68     		ldr	r3, [r3]
2991:FreeRTOS/src/tasks.c **** 	{
 2633              		.loc 1 2991 4 view .LVU749
 2634 0004 1BB1     		cbz	r3, .L205
2995:FreeRTOS/src/tasks.c **** 	}
 2635              		.loc 1 2995 3 is_stmt 1 view .LVU750
2995:FreeRTOS/src/tasks.c **** 	}
 2636              		.loc 1 2995 17 is_stmt 0 view .LVU751
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 155


 2637 0006 1C4B     		ldr	r3, .L214+4
 2638 0008 0122     		movs	r2, #1
 2639 000a 1A60     		str	r2, [r3]
 2640 000c 7047     		bx	lr
 2641              	.L205:
2990:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2642              		.loc 1 2990 1 view .LVU752
 2643 000e 10B4     		push	{r4}
 2644              	.LCFI22:
 2645              		.cfi_def_cfa_offset 4
 2646              		.cfi_offset 4, -4
2999:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2647              		.loc 1 2999 3 is_stmt 1 view .LVU753
2999:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2648              		.loc 1 2999 17 is_stmt 0 view .LVU754
 2649 0010 194B     		ldr	r3, .L214+4
 2650 0012 0022     		movs	r2, #0
 2651 0014 1A60     		str	r2, [r3]
3000:FreeRTOS/src/tasks.c **** 
 2652              		.loc 1 3000 27 is_stmt 1 view .LVU755
3030:FreeRTOS/src/tasks.c **** 
 2653              		.loc 1 3030 33 view .LVU756
 2654              	.LBB45:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2655              		.loc 1 3041 3 view .LVU757
 2656 0016 194B     		ldr	r3, .L214+8
 2657 0018 1B68     		ldr	r3, [r3]
 2658              	.LVL199:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2659              		.loc 1 3041 3 view .LVU758
 2660 001a 00E0     		b	.L207
 2661              	.L208:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2662              		.loc 1 3041 3 discriminator 3 view .LVU759
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2663              		.loc 1 3041 3 discriminator 3 view .LVU760
 2664 001c 013B     		subs	r3, r3, #1
 2665              	.LVL200:
 2666              	.L207:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2667              		.loc 1 3041 3 is_stmt 0 discriminator 1 view .LVU761
 2668 001e 03EB8301 		add	r1, r3, r3, lsl #2
 2669 0022 8A00     		lsls	r2, r1, #2
 2670 0024 1649     		ldr	r1, .L214+12
 2671 0026 8A58     		ldr	r2, [r1, r2]
 2672 0028 002A     		cmp	r2, #0
 2673 002a F7D0     		beq	.L208
 2674              	.LBB46:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2675              		.loc 1 3041 3 is_stmt 1 discriminator 4 view .LVU762
 2676              	.LVL201:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2677              		.loc 1 3041 3 discriminator 4 view .LVU763
 2678 002c 0846     		mov	r0, r1
 2679 002e 9A00     		lsls	r2, r3, #2
 2680 0030 D418     		adds	r4, r2, r3
 2681 0032 A100     		lsls	r1, r4, #2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 156


 2682 0034 0144     		add	r1, r1, r0
 2683 0036 4C68     		ldr	r4, [r1, #4]
 2684 0038 6468     		ldr	r4, [r4, #4]
 2685 003a 4C60     		str	r4, [r1, #4]
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2686              		.loc 1 3041 3 discriminator 4 view .LVU764
 2687 003c 1A44     		add	r2, r2, r3
 2688 003e 9100     		lsls	r1, r2, #2
 2689 0040 0831     		adds	r1, r1, #8
 2690 0042 0844     		add	r0, r0, r1
 2691 0044 8442     		cmp	r4, r0
 2692 0046 0DD0     		beq	.L213
 2693              	.L209:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2694              		.loc 1 3041 3 discriminator 7 view .LVU765
 2695 0048 03EB8302 		add	r2, r3, r3, lsl #2
 2696 004c 9100     		lsls	r1, r2, #2
 2697 004e 0C4A     		ldr	r2, .L214+12
 2698 0050 0A44     		add	r2, r2, r1
 2699 0052 5268     		ldr	r2, [r2, #4]
 2700 0054 D168     		ldr	r1, [r2, #12]
 2701 0056 0B4A     		ldr	r2, .L214+16
 2702 0058 1160     		str	r1, [r2]
 2703              	.LBE46:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2704              		.loc 1 3041 3 discriminator 7 view .LVU766
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2705              		.loc 1 3041 3 discriminator 7 view .LVU767
 2706 005a 084A     		ldr	r2, .L214+8
 2707 005c 1360     		str	r3, [r2]
 2708              	.LBE45:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2709              		.loc 1 3041 37 discriminator 7 view .LVU768
3042:FreeRTOS/src/tasks.c **** 
 2710              		.loc 1 3042 26 discriminator 7 view .LVU769
3061:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2711              		.loc 1 3061 1 is_stmt 0 discriminator 7 view .LVU770
 2712 005e 5DF8044B 		ldr	r4, [sp], #4
 2713              	.LCFI23:
 2714              		.cfi_remember_state
 2715              		.cfi_restore 4
 2716              		.cfi_def_cfa_offset 0
 2717 0062 7047     		bx	lr
 2718              	.L213:
 2719              	.LCFI24:
 2720              		.cfi_restore_state
 2721              	.LBB48:
 2722              	.LBB47:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2723              		.loc 1 3041 3 is_stmt 1 discriminator 5 view .LVU771
 2724 0064 6068     		ldr	r0, [r4, #4]
 2725 0066 03EB8302 		add	r2, r3, r3, lsl #2
 2726 006a 9100     		lsls	r1, r2, #2
 2727 006c 044A     		ldr	r2, .L214+12
 2728 006e 0A44     		add	r2, r2, r1
 2729 0070 5060     		str	r0, [r2, #4]
 2730 0072 E9E7     		b	.L209
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 157


 2731              	.L215:
 2732              		.align	2
 2733              	.L214:
 2734 0074 00000000 		.word	.LANCHOR14
 2735 0078 00000000 		.word	.LANCHOR17
 2736 007c 00000000 		.word	.LANCHOR12
 2737 0080 00000000 		.word	.LANCHOR2
 2738 0084 00000000 		.word	.LANCHOR9
 2739              	.LBE47:
 2740              	.LBE48:
 2741              		.cfi_endproc
 2742              	.LFE26:
 2744              		.section	.text.vTaskSuspend,"ax",%progbits
 2745              		.align	1
 2746              		.global	vTaskSuspend
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2750              		.fpu fpv4-sp-d16
 2752              	vTaskSuspend:
 2753              	.LVL202:
 2754              	.LFB12:
1705:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 2755              		.loc 1 1705 2 view -0
 2756              		.cfi_startproc
 2757              		@ args = 0, pretend = 0, frame = 0
 2758              		@ frame_needed = 0, uses_anonymous_args = 0
1705:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 2759              		.loc 1 1705 2 is_stmt 0 view .LVU773
 2760 0000 38B5     		push	{r3, r4, r5, lr}
 2761              	.LCFI25:
 2762              		.cfi_def_cfa_offset 16
 2763              		.cfi_offset 3, -16
 2764              		.cfi_offset 4, -12
 2765              		.cfi_offset 5, -8
 2766              		.cfi_offset 14, -4
 2767 0002 0446     		mov	r4, r0
1706:FreeRTOS/src/tasks.c **** 
 2768              		.loc 1 1706 2 is_stmt 1 view .LVU774
1708:FreeRTOS/src/tasks.c **** 		{
 2769              		.loc 1 1708 3 view .LVU775
 2770 0004 FFF7FEFF 		bl	vPortEnterCritical
 2771              	.LVL203:
1712:FreeRTOS/src/tasks.c **** 
 2772              		.loc 1 1712 4 view .LVU776
1712:FreeRTOS/src/tasks.c **** 
 2773              		.loc 1 1712 12 is_stmt 0 view .LVU777
 2774 0008 E4B1     		cbz	r4, .L225
 2775              	.LVL204:
 2776              	.L217:
1714:FreeRTOS/src/tasks.c **** 
 2777              		.loc 1 1714 30 is_stmt 1 discriminator 4 view .LVU778
1718:FreeRTOS/src/tasks.c **** 			{
 2778              		.loc 1 1718 4 discriminator 4 view .LVU779
1718:FreeRTOS/src/tasks.c **** 			{
 2779              		.loc 1 1718 8 is_stmt 0 discriminator 4 view .LVU780
 2780 000a 251D     		adds	r5, r4, #4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 158


 2781 000c 2846     		mov	r0, r5
 2782 000e FFF7FEFF 		bl	uxListRemove
 2783              	.LVL205:
1724:FreeRTOS/src/tasks.c **** 			}
 2784              		.loc 1 1724 29 is_stmt 1 discriminator 4 view .LVU781
1728:FreeRTOS/src/tasks.c **** 			{
 2785              		.loc 1 1728 4 discriminator 4 view .LVU782
1728:FreeRTOS/src/tasks.c **** 			{
 2786              		.loc 1 1728 8 is_stmt 0 discriminator 4 view .LVU783
 2787 0012 A36A     		ldr	r3, [r4, #40]
1728:FreeRTOS/src/tasks.c **** 			{
 2788              		.loc 1 1728 6 discriminator 4 view .LVU784
 2789 0014 1BB1     		cbz	r3, .L218
1730:FreeRTOS/src/tasks.c **** 			}
 2790              		.loc 1 1730 5 is_stmt 1 view .LVU785
1730:FreeRTOS/src/tasks.c **** 			}
 2791              		.loc 1 1730 14 is_stmt 0 view .LVU786
 2792 0016 04F11800 		add	r0, r4, #24
 2793 001a FFF7FEFF 		bl	uxListRemove
 2794              	.LVL206:
 2795              	.L218:
1734:FreeRTOS/src/tasks.c **** 			}
 2796              		.loc 1 1734 29 is_stmt 1 view .LVU787
1737:FreeRTOS/src/tasks.c **** 
 2797              		.loc 1 1737 4 view .LVU788
 2798 001e 2946     		mov	r1, r5
 2799 0020 1C48     		ldr	r0, .L229
 2800 0022 FFF7FEFF 		bl	vListInsertEnd
 2801              	.LVL207:
1741:FreeRTOS/src/tasks.c **** 				{
 2802              		.loc 1 1741 5 view .LVU789
1741:FreeRTOS/src/tasks.c **** 				{
 2803              		.loc 1 1741 14 is_stmt 0 view .LVU790
 2804 0026 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2805 002a DBB2     		uxtb	r3, r3
1741:FreeRTOS/src/tasks.c **** 				{
 2806              		.loc 1 1741 7 view .LVU791
 2807 002c 012B     		cmp	r3, #1
 2808 002e 0CD0     		beq	.L226
 2809              	.L219:
1750:FreeRTOS/src/tasks.c **** 
 2810              		.loc 1 1750 3 is_stmt 1 view .LVU792
 2811 0030 FFF7FEFF 		bl	vPortExitCritical
 2812              	.LVL208:
1752:FreeRTOS/src/tasks.c **** 		{
 2813              		.loc 1 1752 3 view .LVU793
1752:FreeRTOS/src/tasks.c **** 		{
 2814              		.loc 1 1752 25 is_stmt 0 view .LVU794
 2815 0034 184B     		ldr	r3, .L229+4
 2816 0036 1B68     		ldr	r3, [r3]
1752:FreeRTOS/src/tasks.c **** 		{
 2817              		.loc 1 1752 5 view .LVU795
 2818 0038 5BB9     		cbnz	r3, .L227
 2819              	.L220:
1764:FreeRTOS/src/tasks.c **** 		}
 2820              		.loc 1 1764 28 is_stmt 1 view .LVU796
1767:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 159


 2821              		.loc 1 1767 3 view .LVU797
1767:FreeRTOS/src/tasks.c **** 		{
 2822              		.loc 1 1767 13 is_stmt 0 view .LVU798
 2823 003a 184B     		ldr	r3, .L229+8
 2824 003c 1B68     		ldr	r3, [r3]
1767:FreeRTOS/src/tasks.c **** 		{
 2825              		.loc 1 1767 5 view .LVU799
 2826 003e A342     		cmp	r3, r4
 2827 0040 0ED0     		beq	.L228
 2828              	.L216:
1798:FreeRTOS/src/tasks.c **** 
 2829              		.loc 1 1798 2 view .LVU800
 2830 0042 38BD     		pop	{r3, r4, r5, pc}
 2831              	.LVL209:
 2832              	.L225:
1712:FreeRTOS/src/tasks.c **** 
 2833              		.loc 1 1712 12 discriminator 1 view .LVU801
 2834 0044 154B     		ldr	r3, .L229+8
 2835 0046 1C68     		ldr	r4, [r3]
 2836              	.LVL210:
1712:FreeRTOS/src/tasks.c **** 
 2837              		.loc 1 1712 12 discriminator 1 view .LVU802
 2838 0048 DFE7     		b	.L217
 2839              	.LVL211:
 2840              	.L226:
1745:FreeRTOS/src/tasks.c **** 				}
 2841              		.loc 1 1745 6 is_stmt 1 view .LVU803
1745:FreeRTOS/src/tasks.c **** 				}
 2842              		.loc 1 1745 27 is_stmt 0 view .LVU804
 2843 004a 0023     		movs	r3, #0
 2844 004c 84F85030 		strb	r3, [r4, #80]
 2845 0050 EEE7     		b	.L219
 2846              	.L227:
1756:FreeRTOS/src/tasks.c **** 			{
 2847              		.loc 1 1756 4 is_stmt 1 view .LVU805
 2848 0052 FFF7FEFF 		bl	vPortEnterCritical
 2849              	.LVL212:
1758:FreeRTOS/src/tasks.c **** 			}
 2850              		.loc 1 1758 5 view .LVU806
 2851 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2852              	.LVL213:
1760:FreeRTOS/src/tasks.c **** 		}
 2853              		.loc 1 1760 4 view .LVU807
 2854 005a FFF7FEFF 		bl	vPortExitCritical
 2855              	.LVL214:
 2856 005e ECE7     		b	.L220
 2857              	.L228:
1769:FreeRTOS/src/tasks.c **** 			{
 2858              		.loc 1 1769 4 view .LVU808
1769:FreeRTOS/src/tasks.c **** 			{
 2859              		.loc 1 1769 26 is_stmt 0 view .LVU809
 2860 0060 0D4B     		ldr	r3, .L229+4
 2861 0062 1B68     		ldr	r3, [r3]
1769:FreeRTOS/src/tasks.c **** 			{
 2862              		.loc 1 1769 6 view .LVU810
 2863 0064 43B1     		cbz	r3, .L222
1772:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 160


 2864              		.loc 1 1772 46 is_stmt 1 view .LVU811
1773:FreeRTOS/src/tasks.c **** 			}
 2865              		.loc 1 1773 5 view .LVU812
 2866 0066 0E4B     		ldr	r3, .L229+12
 2867 0068 4FF08052 		mov	r2, #268435456
 2868 006c 1A60     		str	r2, [r3]
1773:FreeRTOS/src/tasks.c **** 			}
 2869              		.loc 1 1773 5 view .LVU813
 2870              		.syntax unified
 2871              	@ 1773 "FreeRTOS/src/tasks.c" 1
 2872 006e BFF34F8F 		dsb
 2873              	@ 0 "" 2
1773:FreeRTOS/src/tasks.c **** 			}
 2874              		.loc 1 1773 5 view .LVU814
 2875              	@ 1773 "FreeRTOS/src/tasks.c" 1
 2876 0072 BFF36F8F 		isb
 2877              	@ 0 "" 2
1773:FreeRTOS/src/tasks.c **** 			}
 2878              		.loc 1 1773 27 view .LVU815
 2879              		.thumb
 2880              		.syntax unified
 2881 0076 E4E7     		b	.L216
 2882              	.L222:
1780:FreeRTOS/src/tasks.c **** 				{
 2883              		.loc 1 1780 5 view .LVU816
1780:FreeRTOS/src/tasks.c **** 				{
 2884              		.loc 1 1780 9 is_stmt 0 view .LVU817
 2885 0078 064B     		ldr	r3, .L229
 2886 007a 1A68     		ldr	r2, [r3]
1780:FreeRTOS/src/tasks.c **** 				{
 2887              		.loc 1 1780 56 view .LVU818
 2888 007c 094B     		ldr	r3, .L229+16
 2889 007e 1B68     		ldr	r3, [r3]
1780:FreeRTOS/src/tasks.c **** 				{
 2890              		.loc 1 1780 7 view .LVU819
 2891 0080 9A42     		cmp	r2, r3
 2892 0082 03D1     		bne	.L223
1786:FreeRTOS/src/tasks.c **** 				}
 2893              		.loc 1 1786 6 is_stmt 1 view .LVU820
1786:FreeRTOS/src/tasks.c **** 				}
 2894              		.loc 1 1786 19 is_stmt 0 view .LVU821
 2895 0084 054B     		ldr	r3, .L229+8
 2896 0086 0022     		movs	r2, #0
 2897 0088 1A60     		str	r2, [r3]
 2898 008a DAE7     		b	.L216
 2899              	.L223:
1790:FreeRTOS/src/tasks.c **** 				}
 2900              		.loc 1 1790 6 is_stmt 1 view .LVU822
 2901 008c FFF7FEFF 		bl	vTaskSwitchContext
 2902              	.LVL215:
1796:FreeRTOS/src/tasks.c **** 		}
 2903              		.loc 1 1796 28 view .LVU823
1798:FreeRTOS/src/tasks.c **** 
 2904              		.loc 1 1798 2 is_stmt 0 view .LVU824
 2905 0090 D7E7     		b	.L216
 2906              	.L230:
 2907 0092 00BF     		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 161


 2908              	.L229:
 2909 0094 00000000 		.word	.LANCHOR0
 2910 0098 00000000 		.word	.LANCHOR10
 2911 009c 00000000 		.word	.LANCHOR9
 2912 00a0 04ED00E0 		.word	-536810236
 2913 00a4 00000000 		.word	.LANCHOR8
 2914              		.cfi_endproc
 2915              	.LFE12:
 2917              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2918              		.align	1
 2919              		.global	vTaskPlaceOnEventList
 2920              		.syntax unified
 2921              		.thumb
 2922              		.thumb_func
 2923              		.fpu fpv4-sp-d16
 2925              	vTaskPlaceOnEventList:
 2926              	.LVL216:
 2927              	.LFB27:
3065:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 2928              		.loc 1 3065 1 is_stmt 1 view -0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 0
 2931              		@ frame_needed = 0, uses_anonymous_args = 0
3065:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 2932              		.loc 1 3065 1 is_stmt 0 view .LVU826
 2933 0000 10B5     		push	{r4, lr}
 2934              	.LCFI26:
 2935              		.cfi_def_cfa_offset 8
 2936              		.cfi_offset 4, -8
 2937              		.cfi_offset 14, -4
 2938 0002 0C46     		mov	r4, r1
3066:FreeRTOS/src/tasks.c **** 
 2939              		.loc 1 3066 29 is_stmt 1 view .LVU827
3075:FreeRTOS/src/tasks.c **** 
 2940              		.loc 1 3075 2 view .LVU828
3075:FreeRTOS/src/tasks.c **** 
 2941              		.loc 1 3075 43 is_stmt 0 view .LVU829
 2942 0004 044B     		ldr	r3, .L233
 2943 0006 1968     		ldr	r1, [r3]
 2944              	.LVL217:
3075:FreeRTOS/src/tasks.c **** 
 2945              		.loc 1 3075 2 view .LVU830
 2946 0008 1831     		adds	r1, r1, #24
 2947 000a FFF7FEFF 		bl	vListInsert
 2948              	.LVL218:
3077:FreeRTOS/src/tasks.c **** }
 2949              		.loc 1 3077 2 is_stmt 1 view .LVU831
 2950 000e 0121     		movs	r1, #1
 2951 0010 2046     		mov	r0, r4
 2952 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2953              	.LVL219:
3078:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2954              		.loc 1 3078 1 is_stmt 0 view .LVU832
 2955 0016 10BD     		pop	{r4, pc}
 2956              	.LVL220:
 2957              	.L234:
3078:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 162


 2958              		.loc 1 3078 1 view .LVU833
 2959              		.align	2
 2960              	.L233:
 2961 0018 00000000 		.word	.LANCHOR9
 2962              		.cfi_endproc
 2963              	.LFE27:
 2965              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2966              		.align	1
 2967              		.global	vTaskPlaceOnUnorderedEventList
 2968              		.syntax unified
 2969              		.thumb
 2970              		.thumb_func
 2971              		.fpu fpv4-sp-d16
 2973              	vTaskPlaceOnUnorderedEventList:
 2974              	.LVL221:
 2975              	.LFB28:
3082:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 2976              		.loc 1 3082 1 is_stmt 1 view -0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 0, uses_anonymous_args = 0
3082:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 2980              		.loc 1 3082 1 is_stmt 0 view .LVU835
 2981 0000 10B5     		push	{r4, lr}
 2982              	.LCFI27:
 2983              		.cfi_def_cfa_offset 8
 2984              		.cfi_offset 4, -8
 2985              		.cfi_offset 14, -4
 2986 0002 1446     		mov	r4, r2
3083:FreeRTOS/src/tasks.c **** 
 2987              		.loc 1 3083 29 is_stmt 1 view .LVU836
3087:FreeRTOS/src/tasks.c **** 
 2988              		.loc 1 3087 43 view .LVU837
3092:FreeRTOS/src/tasks.c **** 
 2989              		.loc 1 3092 2 view .LVU838
 2990 0004 064B     		ldr	r3, .L237
 2991 0006 1A68     		ldr	r2, [r3]
 2992              	.LVL222:
3092:FreeRTOS/src/tasks.c **** 
 2993              		.loc 1 3092 2 is_stmt 0 view .LVU839
 2994 0008 41F00041 		orr	r1, r1, #-2147483648
 2995              	.LVL223:
3092:FreeRTOS/src/tasks.c **** 
 2996              		.loc 1 3092 2 view .LVU840
 2997 000c 9161     		str	r1, [r2, #24]
3099:FreeRTOS/src/tasks.c **** 
 2998              		.loc 1 3099 2 is_stmt 1 view .LVU841
3099:FreeRTOS/src/tasks.c **** 
 2999              		.loc 1 3099 46 is_stmt 0 view .LVU842
 3000 000e 1968     		ldr	r1, [r3]
3099:FreeRTOS/src/tasks.c **** 
 3001              		.loc 1 3099 2 view .LVU843
 3002 0010 1831     		adds	r1, r1, #24
 3003 0012 FFF7FEFF 		bl	vListInsertEnd
 3004              	.LVL224:
3101:FreeRTOS/src/tasks.c **** }
 3005              		.loc 1 3101 2 is_stmt 1 view .LVU844
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 163


 3006 0016 0121     		movs	r1, #1
 3007 0018 2046     		mov	r0, r4
 3008 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3009              	.LVL225:
3102:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3010              		.loc 1 3102 1 is_stmt 0 view .LVU845
 3011 001e 10BD     		pop	{r4, pc}
 3012              	.LVL226:
 3013              	.L238:
3102:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3014              		.loc 1 3102 1 view .LVU846
 3015              		.align	2
 3016              	.L237:
 3017 0020 00000000 		.word	.LANCHOR9
 3018              		.cfi_endproc
 3019              	.LFE28:
 3021              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3022              		.align	1
 3023              		.global	vTaskPlaceOnEventListRestricted
 3024              		.syntax unified
 3025              		.thumb
 3026              		.thumb_func
 3027              		.fpu fpv4-sp-d16
 3029              	vTaskPlaceOnEventListRestricted:
 3030              	.LVL227:
 3031              	.LFB29:
3108:FreeRTOS/src/tasks.c **** 		configASSERT( pxEventList );
 3032              		.loc 1 3108 2 is_stmt 1 view -0
 3033              		.cfi_startproc
 3034              		@ args = 0, pretend = 0, frame = 0
 3035              		@ frame_needed = 0, uses_anonymous_args = 0
3108:FreeRTOS/src/tasks.c **** 		configASSERT( pxEventList );
 3036              		.loc 1 3108 2 is_stmt 0 view .LVU848
 3037 0000 38B5     		push	{r3, r4, r5, lr}
 3038              	.LCFI28:
 3039              		.cfi_def_cfa_offset 16
 3040              		.cfi_offset 3, -16
 3041              		.cfi_offset 4, -12
 3042              		.cfi_offset 5, -8
 3043              		.cfi_offset 14, -4
 3044 0002 0D46     		mov	r5, r1
 3045 0004 1446     		mov	r4, r2
3109:FreeRTOS/src/tasks.c **** 
 3046              		.loc 1 3109 30 is_stmt 1 view .LVU849
3121:FreeRTOS/src/tasks.c **** 
 3047              		.loc 1 3121 3 view .LVU850
3121:FreeRTOS/src/tasks.c **** 
 3048              		.loc 1 3121 47 is_stmt 0 view .LVU851
 3049 0006 064B     		ldr	r3, .L243
 3050 0008 1968     		ldr	r1, [r3]
 3051              	.LVL228:
3121:FreeRTOS/src/tasks.c **** 
 3052              		.loc 1 3121 3 view .LVU852
 3053 000a 1831     		adds	r1, r1, #24
 3054 000c FFF7FEFF 		bl	vListInsertEnd
 3055              	.LVL229:
3126:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 164


 3056              		.loc 1 3126 3 is_stmt 1 view .LVU853
3126:FreeRTOS/src/tasks.c **** 		{
 3057              		.loc 1 3126 5 is_stmt 0 view .LVU854
 3058 0010 0CB1     		cbz	r4, .L240
3128:FreeRTOS/src/tasks.c **** 		}
 3059              		.loc 1 3128 17 view .LVU855
 3060 0012 4FF0FF35 		mov	r5, #-1
 3061              	.LVL230:
 3062              	.L240:
3131:FreeRTOS/src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3063              		.loc 1 3131 57 is_stmt 1 view .LVU856
3132:FreeRTOS/src/tasks.c **** 	}
 3064              		.loc 1 3132 3 view .LVU857
 3065 0016 2146     		mov	r1, r4
 3066 0018 2846     		mov	r0, r5
 3067 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3068              	.LVL231:
3133:FreeRTOS/src/tasks.c **** 
 3069              		.loc 1 3133 2 is_stmt 0 view .LVU858
 3070 001e 38BD     		pop	{r3, r4, r5, pc}
 3071              	.LVL232:
 3072              	.L244:
3133:FreeRTOS/src/tasks.c **** 
 3073              		.loc 1 3133 2 view .LVU859
 3074              		.align	2
 3075              	.L243:
 3076 0020 00000000 		.word	.LANCHOR9
 3077              		.cfi_endproc
 3078              	.LFE29:
 3080              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3081              		.align	1
 3082              		.global	xTaskRemoveFromEventList
 3083              		.syntax unified
 3084              		.thumb
 3085              		.thumb_func
 3086              		.fpu fpv4-sp-d16
 3088              	xTaskRemoveFromEventList:
 3089              	.LVL233:
 3090              	.LFB30:
3139:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3091              		.loc 1 3139 1 is_stmt 1 view -0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 0
 3094              		@ frame_needed = 0, uses_anonymous_args = 0
3139:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3095              		.loc 1 3139 1 is_stmt 0 view .LVU861
 3096 0000 38B5     		push	{r3, r4, r5, lr}
 3097              	.LCFI29:
 3098              		.cfi_def_cfa_offset 16
 3099              		.cfi_offset 3, -16
 3100              		.cfi_offset 4, -12
 3101              		.cfi_offset 5, -8
 3102              		.cfi_offset 14, -4
3140:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3103              		.loc 1 3140 1 is_stmt 1 view .LVU862
3141:FreeRTOS/src/tasks.c **** 
 3104              		.loc 1 3141 1 view .LVU863
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 165


3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3105              		.loc 1 3156 2 view .LVU864
3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3106              		.loc 1 3156 19 is_stmt 0 view .LVU865
 3107 0002 C368     		ldr	r3, [r0, #12]
3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3108              		.loc 1 3156 17 view .LVU866
 3109 0004 DC68     		ldr	r4, [r3, #12]
 3110              	.LVL234:
3157:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3111              		.loc 1 3157 32 is_stmt 1 view .LVU867
3158:FreeRTOS/src/tasks.c **** 
 3112              		.loc 1 3158 2 view .LVU868
3158:FreeRTOS/src/tasks.c **** 
 3113              		.loc 1 3158 11 is_stmt 0 view .LVU869
 3114 0006 04F11805 		add	r5, r4, #24
 3115 000a 2846     		mov	r0, r5
 3116              	.LVL235:
3158:FreeRTOS/src/tasks.c **** 
 3117              		.loc 1 3158 11 view .LVU870
 3118 000c FFF7FEFF 		bl	uxListRemove
 3119              	.LVL236:
3160:FreeRTOS/src/tasks.c **** 	{
 3120              		.loc 1 3160 2 is_stmt 1 view .LVU871
3160:FreeRTOS/src/tasks.c **** 	{
 3121              		.loc 1 3160 27 is_stmt 0 view .LVU872
 3122 0010 134B     		ldr	r3, .L252
 3123 0012 1B68     		ldr	r3, [r3]
3160:FreeRTOS/src/tasks.c **** 	{
 3124              		.loc 1 3160 4 view .LVU873
 3125 0014 E3B9     		cbnz	r3, .L246
3162:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3126              		.loc 1 3162 3 is_stmt 1 view .LVU874
3162:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3127              		.loc 1 3162 12 is_stmt 0 view .LVU875
 3128 0016 251D     		adds	r5, r4, #4
 3129 0018 2846     		mov	r0, r5
 3130 001a FFF7FEFF 		bl	uxListRemove
 3131              	.LVL237:
3163:FreeRTOS/src/tasks.c **** 
 3132              		.loc 1 3163 3 is_stmt 1 view .LVU876
3163:FreeRTOS/src/tasks.c **** 
 3133              		.loc 1 3163 3 view .LVU877
 3134 001e E36A     		ldr	r3, [r4, #44]
 3135 0020 104A     		ldr	r2, .L252+4
 3136 0022 1268     		ldr	r2, [r2]
 3137 0024 9342     		cmp	r3, r2
 3138 0026 01D9     		bls	.L247
3163:FreeRTOS/src/tasks.c **** 
 3139              		.loc 1 3163 3 discriminator 1 view .LVU878
 3140 0028 0E4A     		ldr	r2, .L252+4
 3141 002a 1360     		str	r3, [r2]
 3142              	.L247:
3163:FreeRTOS/src/tasks.c **** 
 3143              		.loc 1 3163 3 discriminator 3 view .LVU879
3163:FreeRTOS/src/tasks.c **** 
 3144              		.loc 1 3163 3 discriminator 3 view .LVU880
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 166


 3145 002c 03EB8303 		add	r3, r3, r3, lsl #2
 3146 0030 9A00     		lsls	r2, r3, #2
 3147 0032 2946     		mov	r1, r5
 3148 0034 0C48     		ldr	r0, .L252+8
 3149 0036 1044     		add	r0, r0, r2
 3150 0038 FFF7FEFF 		bl	vListInsertEnd
 3151              	.LVL238:
3163:FreeRTOS/src/tasks.c **** 
 3152              		.loc 1 3163 42 discriminator 3 view .LVU881
 3153              	.L248:
3186:FreeRTOS/src/tasks.c **** 	{
 3154              		.loc 1 3186 2 view .LVU882
3186:FreeRTOS/src/tasks.c **** 	{
 3155              		.loc 1 3186 20 is_stmt 0 view .LVU883
 3156 003c E26A     		ldr	r2, [r4, #44]
3186:FreeRTOS/src/tasks.c **** 	{
 3157              		.loc 1 3186 47 view .LVU884
 3158 003e 0B4B     		ldr	r3, .L252+12
 3159 0040 1B68     		ldr	r3, [r3]
 3160 0042 DB6A     		ldr	r3, [r3, #44]
3186:FreeRTOS/src/tasks.c **** 	{
 3161              		.loc 1 3186 4 view .LVU885
 3162 0044 9A42     		cmp	r2, r3
 3163 0046 08D9     		bls	.L250
3191:FreeRTOS/src/tasks.c **** 
 3164              		.loc 1 3191 3 is_stmt 1 view .LVU886
 3165              	.LVL239:
3195:FreeRTOS/src/tasks.c **** 	}
 3166              		.loc 1 3195 3 view .LVU887
3195:FreeRTOS/src/tasks.c **** 	}
 3167              		.loc 1 3195 17 is_stmt 0 view .LVU888
 3168 0048 0120     		movs	r0, #1
 3169 004a 094B     		ldr	r3, .L252+16
 3170 004c 1860     		str	r0, [r3]
 3171 004e 05E0     		b	.L245
 3172              	.LVL240:
 3173              	.L246:
3183:FreeRTOS/src/tasks.c **** 	}
 3174              		.loc 1 3183 3 is_stmt 1 view .LVU889
 3175 0050 2946     		mov	r1, r5
 3176 0052 0848     		ldr	r0, .L252+20
 3177 0054 FFF7FEFF 		bl	vListInsertEnd
 3178              	.LVL241:
 3179 0058 F0E7     		b	.L248
 3180              	.L250:
3199:FreeRTOS/src/tasks.c **** 	}
 3181              		.loc 1 3199 11 is_stmt 0 view .LVU890
 3182 005a 0020     		movs	r0, #0
 3183              	.LVL242:
3202:FreeRTOS/src/tasks.c **** }
 3184              		.loc 1 3202 2 is_stmt 1 view .LVU891
 3185              	.L245:
3203:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3186              		.loc 1 3203 1 is_stmt 0 view .LVU892
 3187 005c 38BD     		pop	{r3, r4, r5, pc}
 3188              	.LVL243:
 3189              	.L253:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 167


3203:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3190              		.loc 1 3203 1 view .LVU893
 3191 005e 00BF     		.align	2
 3192              	.L252:
 3193 0060 00000000 		.word	.LANCHOR14
 3194 0064 00000000 		.word	.LANCHOR12
 3195 0068 00000000 		.word	.LANCHOR2
 3196 006c 00000000 		.word	.LANCHOR9
 3197 0070 00000000 		.word	.LANCHOR17
 3198 0074 00000000 		.word	.LANCHOR1
 3199              		.cfi_endproc
 3200              	.LFE30:
 3202              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3203              		.align	1
 3204              		.global	vTaskRemoveFromUnorderedEventList
 3205              		.syntax unified
 3206              		.thumb
 3207              		.thumb_func
 3208              		.fpu fpv4-sp-d16
 3210              	vTaskRemoveFromUnorderedEventList:
 3211              	.LVL244:
 3212              	.LFB31:
3207:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3213              		.loc 1 3207 1 is_stmt 1 view -0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
3207:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3217              		.loc 1 3207 1 is_stmt 0 view .LVU895
 3218 0000 38B5     		push	{r3, r4, r5, lr}
 3219              	.LCFI30:
 3220              		.cfi_def_cfa_offset 16
 3221              		.cfi_offset 3, -16
 3222              		.cfi_offset 4, -12
 3223              		.cfi_offset 5, -8
 3224              		.cfi_offset 14, -4
3208:FreeRTOS/src/tasks.c **** 
 3225              		.loc 1 3208 1 is_stmt 1 view .LVU896
3212:FreeRTOS/src/tasks.c **** 
 3226              		.loc 1 3212 49 view .LVU897
3215:FreeRTOS/src/tasks.c **** 
 3227              		.loc 1 3215 2 view .LVU898
 3228 0002 41F00041 		orr	r1, r1, #-2147483648
 3229              	.LVL245:
3215:FreeRTOS/src/tasks.c **** 
 3230              		.loc 1 3215 2 is_stmt 0 view .LVU899
 3231 0006 0160     		str	r1, [r0]
3219:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3232              		.loc 1 3219 2 is_stmt 1 view .LVU900
3219:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3233              		.loc 1 3219 17 is_stmt 0 view .LVU901
 3234 0008 C468     		ldr	r4, [r0, #12]
 3235              	.LVL246:
3220:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3236              		.loc 1 3220 32 is_stmt 1 view .LVU902
3221:FreeRTOS/src/tasks.c **** 
 3237              		.loc 1 3221 2 view .LVU903
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 168


3221:FreeRTOS/src/tasks.c **** 
 3238              		.loc 1 3221 11 is_stmt 0 view .LVU904
 3239 000a FFF7FEFF 		bl	uxListRemove
 3240              	.LVL247:
3240:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3241              		.loc 1 3240 2 is_stmt 1 view .LVU905
3240:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3242              		.loc 1 3240 11 is_stmt 0 view .LVU906
 3243 000e 251D     		adds	r5, r4, #4
 3244 0010 2846     		mov	r0, r5
 3245 0012 FFF7FEFF 		bl	uxListRemove
 3246              	.LVL248:
3241:FreeRTOS/src/tasks.c **** 
 3247              		.loc 1 3241 2 is_stmt 1 view .LVU907
3241:FreeRTOS/src/tasks.c **** 
 3248              		.loc 1 3241 2 view .LVU908
 3249 0016 E36A     		ldr	r3, [r4, #44]
 3250 0018 0B4A     		ldr	r2, .L258
 3251 001a 1268     		ldr	r2, [r2]
 3252 001c 9342     		cmp	r3, r2
 3253 001e 01D9     		bls	.L255
3241:FreeRTOS/src/tasks.c **** 
 3254              		.loc 1 3241 2 discriminator 1 view .LVU909
 3255 0020 094A     		ldr	r2, .L258
 3256 0022 1360     		str	r3, [r2]
 3257              	.L255:
3241:FreeRTOS/src/tasks.c **** 
 3258              		.loc 1 3241 2 discriminator 3 view .LVU910
3241:FreeRTOS/src/tasks.c **** 
 3259              		.loc 1 3241 2 discriminator 3 view .LVU911
 3260 0024 03EB8303 		add	r3, r3, r3, lsl #2
 3261 0028 9A00     		lsls	r2, r3, #2
 3262 002a 2946     		mov	r1, r5
 3263 002c 0748     		ldr	r0, .L258+4
 3264 002e 1044     		add	r0, r0, r2
 3265 0030 FFF7FEFF 		bl	vListInsertEnd
 3266              	.LVL249:
3241:FreeRTOS/src/tasks.c **** 
 3267              		.loc 1 3241 41 discriminator 3 view .LVU912
3243:FreeRTOS/src/tasks.c **** 	{
 3268              		.loc 1 3243 2 discriminator 3 view .LVU913
3243:FreeRTOS/src/tasks.c **** 	{
 3269              		.loc 1 3243 20 is_stmt 0 discriminator 3 view .LVU914
 3270 0034 E26A     		ldr	r2, [r4, #44]
3243:FreeRTOS/src/tasks.c **** 	{
 3271              		.loc 1 3243 47 discriminator 3 view .LVU915
 3272 0036 064B     		ldr	r3, .L258+8
 3273 0038 1B68     		ldr	r3, [r3]
 3274 003a DB6A     		ldr	r3, [r3, #44]
3243:FreeRTOS/src/tasks.c **** 	{
 3275              		.loc 1 3243 4 discriminator 3 view .LVU916
 3276 003c 9A42     		cmp	r2, r3
 3277 003e 02D9     		bls	.L254
3249:FreeRTOS/src/tasks.c **** 	}
 3278              		.loc 1 3249 3 is_stmt 1 view .LVU917
3249:FreeRTOS/src/tasks.c **** 	}
 3279              		.loc 1 3249 17 is_stmt 0 view .LVU918
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 169


 3280 0040 044B     		ldr	r3, .L258+12
 3281 0042 0122     		movs	r2, #1
 3282 0044 1A60     		str	r2, [r3]
 3283              	.L254:
3251:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3284              		.loc 1 3251 1 view .LVU919
 3285 0046 38BD     		pop	{r3, r4, r5, pc}
 3286              	.LVL250:
 3287              	.L259:
3251:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3288              		.loc 1 3251 1 view .LVU920
 3289              		.align	2
 3290              	.L258:
 3291 0048 00000000 		.word	.LANCHOR12
 3292 004c 00000000 		.word	.LANCHOR2
 3293 0050 00000000 		.word	.LANCHOR9
 3294 0054 00000000 		.word	.LANCHOR17
 3295              		.cfi_endproc
 3296              	.LFE31:
 3298              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3299              		.align	1
 3300              		.global	vTaskSetTimeOutState
 3301              		.syntax unified
 3302              		.thumb
 3303              		.thumb_func
 3304              		.fpu fpv4-sp-d16
 3306              	vTaskSetTimeOutState:
 3307              	.LVL251:
 3308              	.LFB32:
3255:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
 3309              		.loc 1 3255 1 is_stmt 1 view -0
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 0
 3312              		@ frame_needed = 0, uses_anonymous_args = 0
3255:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
 3313              		.loc 1 3255 1 is_stmt 0 view .LVU922
 3314 0000 10B5     		push	{r4, lr}
 3315              	.LCFI31:
 3316              		.cfi_def_cfa_offset 8
 3317              		.cfi_offset 4, -8
 3318              		.cfi_offset 14, -4
 3319 0002 0446     		mov	r4, r0
3256:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
 3320              		.loc 1 3256 27 is_stmt 1 view .LVU923
3257:FreeRTOS/src/tasks.c **** 	{
 3321              		.loc 1 3257 2 view .LVU924
 3322 0004 FFF7FEFF 		bl	vPortEnterCritical
 3323              	.LVL252:
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3324              		.loc 1 3259 3 view .LVU925
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3325              		.loc 1 3259 29 is_stmt 0 view .LVU926
 3326 0008 044B     		ldr	r3, .L262
 3327 000a 1B68     		ldr	r3, [r3]
 3328 000c 2360     		str	r3, [r4]
3260:FreeRTOS/src/tasks.c **** 	}
 3329              		.loc 1 3260 3 is_stmt 1 view .LVU927
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 170


3260:FreeRTOS/src/tasks.c **** 	}
 3330              		.loc 1 3260 30 is_stmt 0 view .LVU928
 3331 000e 044B     		ldr	r3, .L262+4
 3332 0010 1B68     		ldr	r3, [r3]
 3333 0012 6360     		str	r3, [r4, #4]
3262:FreeRTOS/src/tasks.c **** }
 3334              		.loc 1 3262 2 is_stmt 1 view .LVU929
 3335 0014 FFF7FEFF 		bl	vPortExitCritical
 3336              	.LVL253:
3263:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3337              		.loc 1 3263 1 is_stmt 0 view .LVU930
 3338 0018 10BD     		pop	{r4, pc}
 3339              	.LVL254:
 3340              	.L263:
3263:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3341              		.loc 1 3263 1 view .LVU931
 3342 001a 00BF     		.align	2
 3343              	.L262:
 3344 001c 00000000 		.word	.LANCHOR16
 3345 0020 00000000 		.word	.LANCHOR13
 3346              		.cfi_endproc
 3347              	.LFE32:
 3349              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3350              		.align	1
 3351              		.global	vTaskInternalSetTimeOutState
 3352              		.syntax unified
 3353              		.thumb
 3354              		.thumb_func
 3355              		.fpu fpv4-sp-d16
 3357              	vTaskInternalSetTimeOutState:
 3358              	.LVL255:
 3359              	.LFB33:
3267:FreeRTOS/src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3360              		.loc 1 3267 1 is_stmt 1 view -0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 0
 3363              		@ frame_needed = 0, uses_anonymous_args = 0
 3364              		@ link register save eliminated.
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3365              		.loc 1 3269 2 view .LVU933
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3366              		.loc 1 3269 28 is_stmt 0 view .LVU934
 3367 0000 034B     		ldr	r3, .L265
 3368 0002 1B68     		ldr	r3, [r3]
 3369 0004 0360     		str	r3, [r0]
3270:FreeRTOS/src/tasks.c **** }
 3370              		.loc 1 3270 2 is_stmt 1 view .LVU935
3270:FreeRTOS/src/tasks.c **** }
 3371              		.loc 1 3270 29 is_stmt 0 view .LVU936
 3372 0006 034B     		ldr	r3, .L265+4
 3373 0008 1B68     		ldr	r3, [r3]
 3374 000a 4360     		str	r3, [r0, #4]
3271:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3375              		.loc 1 3271 1 view .LVU937
 3376 000c 7047     		bx	lr
 3377              	.L266:
 3378 000e 00BF     		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 171


 3379              	.L265:
 3380 0010 00000000 		.word	.LANCHOR16
 3381 0014 00000000 		.word	.LANCHOR13
 3382              		.cfi_endproc
 3383              	.LFE33:
 3385              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3386              		.align	1
 3387              		.global	xTaskCheckForTimeOut
 3388              		.syntax unified
 3389              		.thumb
 3390              		.thumb_func
 3391              		.fpu fpv4-sp-d16
 3393              	xTaskCheckForTimeOut:
 3394              	.LVL256:
 3395              	.LFB34:
3275:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3396              		.loc 1 3275 1 is_stmt 1 view -0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
3275:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3400              		.loc 1 3275 1 is_stmt 0 view .LVU939
 3401 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3402              	.LCFI32:
 3403              		.cfi_def_cfa_offset 24
 3404              		.cfi_offset 3, -24
 3405              		.cfi_offset 4, -20
 3406              		.cfi_offset 5, -16
 3407              		.cfi_offset 6, -12
 3408              		.cfi_offset 7, -8
 3409              		.cfi_offset 14, -4
 3410 0002 0446     		mov	r4, r0
 3411 0004 0D46     		mov	r5, r1
3276:FreeRTOS/src/tasks.c **** 
 3412              		.loc 1 3276 1 is_stmt 1 view .LVU940
3278:FreeRTOS/src/tasks.c **** 	configASSERT( pxTicksToWait );
 3413              		.loc 1 3278 27 view .LVU941
3279:FreeRTOS/src/tasks.c **** 
 3414              		.loc 1 3279 31 view .LVU942
3281:FreeRTOS/src/tasks.c **** 	{
 3415              		.loc 1 3281 2 view .LVU943
 3416 0006 FFF7FEFF 		bl	vPortEnterCritical
 3417              	.LVL257:
 3418              	.LBB49:
3284:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3419              		.loc 1 3284 3 view .LVU944
3284:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3420              		.loc 1 3284 20 is_stmt 0 view .LVU945
 3421 000a 124B     		ldr	r3, .L275
 3422 000c 1968     		ldr	r1, [r3]
 3423              	.LVL258:
3285:FreeRTOS/src/tasks.c **** 
 3424              		.loc 1 3285 3 is_stmt 1 view .LVU946
3285:FreeRTOS/src/tasks.c **** 
 3425              		.loc 1 3285 62 is_stmt 0 view .LVU947
 3426 000e 6368     		ldr	r3, [r4, #4]
3285:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 172


 3427              		.loc 1 3285 20 view .LVU948
 3428 0010 C81A     		subs	r0, r1, r3
 3429              	.LVL259:
3299:FreeRTOS/src/tasks.c **** 			{
 3430              		.loc 1 3299 4 is_stmt 1 view .LVU949
3299:FreeRTOS/src/tasks.c **** 			{
 3431              		.loc 1 3299 8 is_stmt 0 view .LVU950
 3432 0012 2A68     		ldr	r2, [r5]
3299:FreeRTOS/src/tasks.c **** 			{
 3433              		.loc 1 3299 6 view .LVU951
 3434 0014 B2F1FF3F 		cmp	r2, #-1
 3435 0018 14D0     		beq	.L271
3309:FreeRTOS/src/tasks.c **** 		{
 3436              		.loc 1 3309 3 is_stmt 1 view .LVU952
3309:FreeRTOS/src/tasks.c **** 		{
 3437              		.loc 1 3309 37 is_stmt 0 view .LVU953
 3438 001a 2768     		ldr	r7, [r4]
3309:FreeRTOS/src/tasks.c **** 		{
 3439              		.loc 1 3309 25 view .LVU954
 3440 001c 0E4E     		ldr	r6, .L275+4
 3441 001e 3668     		ldr	r6, [r6]
3309:FreeRTOS/src/tasks.c **** 		{
 3442              		.loc 1 3309 5 view .LVU955
 3443 0020 B742     		cmp	r7, r6
 3444 0022 01D0     		beq	.L269
3309:FreeRTOS/src/tasks.c **** 		{
 3445              		.loc 1 3309 56 discriminator 1 view .LVU956
 3446 0024 8B42     		cmp	r3, r1
 3447 0026 12D9     		bls	.L272
 3448              	.L269:
3318:FreeRTOS/src/tasks.c **** 		{
 3449              		.loc 1 3318 8 is_stmt 1 view .LVU957
3318:FreeRTOS/src/tasks.c **** 		{
 3450              		.loc 1 3318 10 is_stmt 0 view .LVU958
 3451 0028 8242     		cmp	r2, r0
 3452 002a 03D8     		bhi	.L274
3327:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
 3453              		.loc 1 3327 4 is_stmt 1 view .LVU959
3327:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
 3454              		.loc 1 3327 19 is_stmt 0 view .LVU960
 3455 002c 0023     		movs	r3, #0
 3456 002e 2B60     		str	r3, [r5]
3328:FreeRTOS/src/tasks.c **** 		}
 3457              		.loc 1 3328 4 is_stmt 1 view .LVU961
 3458              	.LVL260:
3328:FreeRTOS/src/tasks.c **** 		}
 3459              		.loc 1 3328 12 is_stmt 0 view .LVU962
 3460 0030 0124     		movs	r4, #1
 3461              	.LVL261:
3328:FreeRTOS/src/tasks.c **** 		}
 3462              		.loc 1 3328 12 view .LVU963
 3463 0032 08E0     		b	.L268
 3464              	.LVL262:
 3465              	.L274:
3321:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3466              		.loc 1 3321 4 is_stmt 1 view .LVU964
3321:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 173


 3467              		.loc 1 3321 19 is_stmt 0 view .LVU965
 3468 0034 5B1A     		subs	r3, r3, r1
 3469 0036 1344     		add	r3, r3, r2
 3470 0038 2B60     		str	r3, [r5]
3322:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
 3471              		.loc 1 3322 4 is_stmt 1 view .LVU966
 3472 003a 2046     		mov	r0, r4
 3473              	.LVL263:
3322:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
 3474              		.loc 1 3322 4 is_stmt 0 view .LVU967
 3475 003c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3476              	.LVL264:
3323:FreeRTOS/src/tasks.c **** 		}
 3477              		.loc 1 3323 4 is_stmt 1 view .LVU968
3323:FreeRTOS/src/tasks.c **** 		}
 3478              		.loc 1 3323 12 is_stmt 0 view .LVU969
 3479 0040 0024     		movs	r4, #0
 3480              	.LVL265:
3323:FreeRTOS/src/tasks.c **** 		}
 3481              		.loc 1 3323 12 view .LVU970
 3482 0042 00E0     		b	.L268
 3483              	.LVL266:
 3484              	.L271:
3304:FreeRTOS/src/tasks.c **** 			}
 3485              		.loc 1 3304 13 view .LVU971
 3486 0044 0024     		movs	r4, #0
 3487              	.LVL267:
 3488              	.L268:
3304:FreeRTOS/src/tasks.c **** 			}
 3489              		.loc 1 3304 13 view .LVU972
 3490              	.LBE49:
3331:FreeRTOS/src/tasks.c **** 
 3491              		.loc 1 3331 2 is_stmt 1 view .LVU973
 3492 0046 FFF7FEFF 		bl	vPortExitCritical
 3493              	.LVL268:
3333:FreeRTOS/src/tasks.c **** }
 3494              		.loc 1 3333 2 view .LVU974
3334:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3495              		.loc 1 3334 1 is_stmt 0 view .LVU975
 3496 004a 2046     		mov	r0, r4
 3497 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3498              	.LVL269:
 3499              	.L272:
 3500              	.LBB50:
3316:FreeRTOS/src/tasks.c **** 		}
 3501              		.loc 1 3316 12 view .LVU976
 3502 004e 0124     		movs	r4, #1
 3503              	.LVL270:
3316:FreeRTOS/src/tasks.c **** 		}
 3504              		.loc 1 3316 12 view .LVU977
 3505 0050 F9E7     		b	.L268
 3506              	.L276:
 3507 0052 00BF     		.align	2
 3508              	.L275:
 3509 0054 00000000 		.word	.LANCHOR13
 3510 0058 00000000 		.word	.LANCHOR16
 3511              	.LBE50:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 174


 3512              		.cfi_endproc
 3513              	.LFE34:
 3515              		.section	.text.vTaskMissedYield,"ax",%progbits
 3516              		.align	1
 3517              		.global	vTaskMissedYield
 3518              		.syntax unified
 3519              		.thumb
 3520              		.thumb_func
 3521              		.fpu fpv4-sp-d16
 3523              	vTaskMissedYield:
 3524              	.LFB35:
3338:FreeRTOS/src/tasks.c **** 	xYieldPending = pdTRUE;
 3525              		.loc 1 3338 1 is_stmt 1 view -0
 3526              		.cfi_startproc
 3527              		@ args = 0, pretend = 0, frame = 0
 3528              		@ frame_needed = 0, uses_anonymous_args = 0
 3529              		@ link register save eliminated.
3339:FreeRTOS/src/tasks.c **** }
 3530              		.loc 1 3339 2 view .LVU979
3339:FreeRTOS/src/tasks.c **** }
 3531              		.loc 1 3339 16 is_stmt 0 view .LVU980
 3532 0000 014B     		ldr	r3, .L278
 3533 0002 0122     		movs	r2, #1
 3534 0004 1A60     		str	r2, [r3]
3340:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3535              		.loc 1 3340 1 view .LVU981
 3536 0006 7047     		bx	lr
 3537              	.L279:
 3538              		.align	2
 3539              	.L278:
 3540 0008 00000000 		.word	.LANCHOR17
 3541              		.cfi_endproc
 3542              	.LFE35:
 3544              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3545              		.align	1
 3546              		.global	xTaskGetCurrentTaskHandle
 3547              		.syntax unified
 3548              		.thumb
 3549              		.thumb_func
 3550              		.fpu fpv4-sp-d16
 3552              	xTaskGetCurrentTaskHandle:
 3553              	.LFB40:
3970:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
 3554              		.loc 1 3970 2 is_stmt 1 view -0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 0
 3557              		@ frame_needed = 0, uses_anonymous_args = 0
 3558              		@ link register save eliminated.
3971:FreeRTOS/src/tasks.c **** 
 3559              		.loc 1 3971 2 view .LVU983
3976:FreeRTOS/src/tasks.c **** 
 3560              		.loc 1 3976 3 view .LVU984
3976:FreeRTOS/src/tasks.c **** 
 3561              		.loc 1 3976 11 is_stmt 0 view .LVU985
 3562 0000 014B     		ldr	r3, .L281
 3563 0002 1868     		ldr	r0, [r3]
 3564              	.LVL271:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 175


3978:FreeRTOS/src/tasks.c **** 	}
 3565              		.loc 1 3978 3 is_stmt 1 view .LVU986
3979:FreeRTOS/src/tasks.c **** 
 3566              		.loc 1 3979 2 is_stmt 0 view .LVU987
 3567 0004 7047     		bx	lr
 3568              	.L282:
 3569 0006 00BF     		.align	2
 3570              	.L281:
 3571 0008 00000000 		.word	.LANCHOR9
 3572              		.cfi_endproc
 3573              	.LFE40:
 3575              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3576              		.align	1
 3577              		.global	xTaskGetSchedulerState
 3578              		.syntax unified
 3579              		.thumb
 3580              		.thumb_func
 3581              		.fpu fpv4-sp-d16
 3583              	xTaskGetSchedulerState:
 3584              	.LFB41:
3987:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 3585              		.loc 1 3987 2 is_stmt 1 view -0
 3586              		.cfi_startproc
 3587              		@ args = 0, pretend = 0, frame = 0
 3588              		@ frame_needed = 0, uses_anonymous_args = 0
 3589              		@ link register save eliminated.
3988:FreeRTOS/src/tasks.c **** 
 3590              		.loc 1 3988 2 view .LVU989
3990:FreeRTOS/src/tasks.c **** 		{
 3591              		.loc 1 3990 3 view .LVU990
3990:FreeRTOS/src/tasks.c **** 		{
 3592              		.loc 1 3990 25 is_stmt 0 view .LVU991
 3593 0000 054B     		ldr	r3, .L288
 3594 0002 1B68     		ldr	r3, [r3]
3990:FreeRTOS/src/tasks.c **** 		{
 3595              		.loc 1 3990 5 view .LVU992
 3596 0004 33B1     		cbz	r3, .L285
3996:FreeRTOS/src/tasks.c **** 			{
 3597              		.loc 1 3996 4 is_stmt 1 view .LVU993
3996:FreeRTOS/src/tasks.c **** 			{
 3598              		.loc 1 3996 29 is_stmt 0 view .LVU994
 3599 0006 054B     		ldr	r3, .L288+4
 3600 0008 1B68     		ldr	r3, [r3]
3996:FreeRTOS/src/tasks.c **** 			{
 3601              		.loc 1 3996 6 view .LVU995
 3602 000a 0BB1     		cbz	r3, .L287
4002:FreeRTOS/src/tasks.c **** 			}
 3603              		.loc 1 4002 13 view .LVU996
 3604 000c 0020     		movs	r0, #0
 3605              	.LVL272:
4006:FreeRTOS/src/tasks.c **** 	}
 3606              		.loc 1 4006 3 is_stmt 1 view .LVU997
4007:FreeRTOS/src/tasks.c **** 
 3607              		.loc 1 4007 2 is_stmt 0 view .LVU998
 3608 000e 7047     		bx	lr
 3609              	.LVL273:
 3610              	.L287:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 176


3998:FreeRTOS/src/tasks.c **** 			}
 3611              		.loc 1 3998 13 view .LVU999
 3612 0010 0220     		movs	r0, #2
 3613 0012 7047     		bx	lr
 3614              	.L285:
3992:FreeRTOS/src/tasks.c **** 		}
 3615              		.loc 1 3992 12 view .LVU1000
 3616 0014 0120     		movs	r0, #1
 3617 0016 7047     		bx	lr
 3618              	.L289:
 3619              		.align	2
 3620              	.L288:
 3621 0018 00000000 		.word	.LANCHOR10
 3622 001c 00000000 		.word	.LANCHOR14
 3623              		.cfi_endproc
 3624              	.LFE41:
 3626              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3627              		.align	1
 3628              		.global	xTaskPriorityInherit
 3629              		.syntax unified
 3630              		.thumb
 3631              		.thumb_func
 3632              		.fpu fpv4-sp-d16
 3634              	xTaskPriorityInherit:
 3635              	.LVL274:
 3636              	.LFB42:
4015:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3637              		.loc 1 4015 2 is_stmt 1 view -0
 3638              		.cfi_startproc
 3639              		@ args = 0, pretend = 0, frame = 0
 3640              		@ frame_needed = 0, uses_anonymous_args = 0
4016:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3641              		.loc 1 4016 2 view .LVU1002
4017:FreeRTOS/src/tasks.c **** 
 3642              		.loc 1 4017 2 view .LVU1003
4022:FreeRTOS/src/tasks.c **** 		{
 3643              		.loc 1 4022 3 view .LVU1004
4022:FreeRTOS/src/tasks.c **** 		{
 3644              		.loc 1 4022 5 is_stmt 0 view .LVU1005
 3645 0000 0028     		cmp	r0, #0
 3646 0002 3ED0     		beq	.L296
4015:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3647              		.loc 1 4015 2 view .LVU1006
 3648 0004 38B5     		push	{r3, r4, r5, lr}
 3649              	.LCFI33:
 3650              		.cfi_def_cfa_offset 16
 3651              		.cfi_offset 3, -16
 3652              		.cfi_offset 4, -12
 3653              		.cfi_offset 5, -8
 3654              		.cfi_offset 14, -4
 3655 0006 0546     		mov	r5, r0
4027:FreeRTOS/src/tasks.c **** 			{
 3656              		.loc 1 4027 4 is_stmt 1 view .LVU1007
4027:FreeRTOS/src/tasks.c **** 			{
 3657              		.loc 1 4027 24 is_stmt 0 view .LVU1008
 3658 0008 C26A     		ldr	r2, [r0, #44]
4027:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 177


 3659              		.loc 1 4027 51 view .LVU1009
 3660 000a 2049     		ldr	r1, .L303
 3661 000c 0968     		ldr	r1, [r1]
 3662 000e C96A     		ldr	r1, [r1, #44]
4027:FreeRTOS/src/tasks.c **** 			{
 3663              		.loc 1 4027 6 view .LVU1010
 3664 0010 8A42     		cmp	r2, r1
 3665 0012 2ED2     		bcs	.L292
4032:FreeRTOS/src/tasks.c **** 				{
 3666              		.loc 1 4032 5 is_stmt 1 view .LVU1011
4032:FreeRTOS/src/tasks.c **** 				{
 3667              		.loc 1 4032 11 is_stmt 0 view .LVU1012
 3668 0014 8169     		ldr	r1, [r0, #24]
4032:FreeRTOS/src/tasks.c **** 				{
 3669              		.loc 1 4032 7 view .LVU1013
 3670 0016 0029     		cmp	r1, #0
 3671 0018 05DB     		blt	.L293
4034:FreeRTOS/src/tasks.c **** 				}
 3672              		.loc 1 4034 6 is_stmt 1 view .LVU1014
 3673 001a 1C49     		ldr	r1, .L303
 3674 001c 0968     		ldr	r1, [r1]
 3675 001e C96A     		ldr	r1, [r1, #44]
 3676 0020 C1F10501 		rsb	r1, r1, #5
 3677 0024 8161     		str	r1, [r0, #24]
 3678              	.L293:
4038:FreeRTOS/src/tasks.c **** 				}
 3679              		.loc 1 4038 30 view .LVU1015
4043:FreeRTOS/src/tasks.c **** 				{
 3680              		.loc 1 4043 5 view .LVU1016
4043:FreeRTOS/src/tasks.c **** 				{
 3681              		.loc 1 4043 9 is_stmt 0 view .LVU1017
 3682 0026 6869     		ldr	r0, [r5, #20]
 3683              	.LVL275:
4043:FreeRTOS/src/tasks.c **** 				{
 3684              		.loc 1 4043 9 view .LVU1018
 3685 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3686 002c 9100     		lsls	r1, r2, #2
 3687 002e 184A     		ldr	r2, .L303+4
 3688 0030 0A44     		add	r2, r2, r1
4043:FreeRTOS/src/tasks.c **** 				{
 3689              		.loc 1 4043 7 view .LVU1019
 3690 0032 9042     		cmp	r0, r2
 3691 0034 05D0     		beq	.L302
4064:FreeRTOS/src/tasks.c **** 				}
 3692              		.loc 1 4064 6 is_stmt 1 view .LVU1020
4064:FreeRTOS/src/tasks.c **** 				}
 3693              		.loc 1 4064 49 is_stmt 0 view .LVU1021
 3694 0036 154A     		ldr	r2, .L303
 3695 0038 1268     		ldr	r2, [r2]
 3696 003a D26A     		ldr	r2, [r2, #44]
4064:FreeRTOS/src/tasks.c **** 				}
 3697              		.loc 1 4064 35 view .LVU1022
 3698 003c EA62     		str	r2, [r5, #44]
4070:FreeRTOS/src/tasks.c **** 			}
 3699              		.loc 1 4070 13 view .LVU1023
 3700 003e 0120     		movs	r0, #1
 3701              	.LVL276:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 178


 3702              	.L290:
4097:FreeRTOS/src/tasks.c **** 
 3703              		.loc 1 4097 2 view .LVU1024
 3704 0040 38BD     		pop	{r3, r4, r5, pc}
 3705              	.LVL277:
 3706              	.L302:
4045:FreeRTOS/src/tasks.c **** 					{
 3707              		.loc 1 4045 6 is_stmt 1 view .LVU1025
4045:FreeRTOS/src/tasks.c **** 					{
 3708              		.loc 1 4045 10 is_stmt 0 view .LVU1026
 3709 0042 2C1D     		adds	r4, r5, #4
 3710 0044 2046     		mov	r0, r4
 3711 0046 FFF7FEFF 		bl	uxListRemove
 3712              	.LVL278:
4054:FreeRTOS/src/tasks.c **** 					}
 3713              		.loc 1 4054 31 is_stmt 1 view .LVU1027
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3714              		.loc 1 4058 6 view .LVU1028
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3715              		.loc 1 4058 49 is_stmt 0 view .LVU1029
 3716 004a 104B     		ldr	r3, .L303
 3717 004c 1B68     		ldr	r3, [r3]
 3718 004e DB6A     		ldr	r3, [r3, #44]
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3719              		.loc 1 4058 35 view .LVU1030
 3720 0050 EB62     		str	r3, [r5, #44]
4059:FreeRTOS/src/tasks.c **** 				}
 3721              		.loc 1 4059 6 is_stmt 1 view .LVU1031
4059:FreeRTOS/src/tasks.c **** 				}
 3722              		.loc 1 4059 6 view .LVU1032
 3723 0052 104A     		ldr	r2, .L303+8
 3724 0054 1268     		ldr	r2, [r2]
 3725 0056 9342     		cmp	r3, r2
 3726 0058 01D9     		bls	.L295
4059:FreeRTOS/src/tasks.c **** 				}
 3727              		.loc 1 4059 6 discriminator 1 view .LVU1033
 3728 005a 0E4A     		ldr	r2, .L303+8
 3729 005c 1360     		str	r3, [r2]
 3730              	.L295:
4059:FreeRTOS/src/tasks.c **** 				}
 3731              		.loc 1 4059 6 discriminator 3 view .LVU1034
4059:FreeRTOS/src/tasks.c **** 				}
 3732              		.loc 1 4059 6 discriminator 3 view .LVU1035
 3733 005e 03EB8303 		add	r3, r3, r3, lsl #2
 3734 0062 9A00     		lsls	r2, r3, #2
 3735 0064 2146     		mov	r1, r4
 3736 0066 0A48     		ldr	r0, .L303+4
 3737 0068 1044     		add	r0, r0, r2
 3738 006a FFF7FEFF 		bl	vListInsertEnd
 3739              	.LVL279:
4059:FreeRTOS/src/tasks.c **** 				}
 3740              		.loc 1 4059 47 discriminator 3 view .LVU1036
4070:FreeRTOS/src/tasks.c **** 			}
 3741              		.loc 1 4070 13 is_stmt 0 discriminator 3 view .LVU1037
 3742 006e 0120     		movs	r0, #1
 3743 0070 E6E7     		b	.L290
 3744              	.LVL280:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 179


 3745              	.L292:
4074:FreeRTOS/src/tasks.c **** 				{
 3746              		.loc 1 4074 5 is_stmt 1 view .LVU1038
4074:FreeRTOS/src/tasks.c **** 				{
 3747              		.loc 1 4074 25 is_stmt 0 view .LVU1039
 3748 0072 426C     		ldr	r2, [r0, #68]
4074:FreeRTOS/src/tasks.c **** 				{
 3749              		.loc 1 4074 56 view .LVU1040
 3750 0074 054B     		ldr	r3, .L303
 3751 0076 1B68     		ldr	r3, [r3]
 3752 0078 DB6A     		ldr	r3, [r3, #44]
4074:FreeRTOS/src/tasks.c **** 				{
 3753              		.loc 1 4074 7 view .LVU1041
 3754 007a 9A42     		cmp	r2, r3
 3755 007c 03D3     		bcc	.L297
4017:FreeRTOS/src/tasks.c **** 
 3756              		.loc 1 4017 13 view .LVU1042
 3757 007e 0020     		movs	r0, #0
 3758              	.LVL281:
4017:FreeRTOS/src/tasks.c **** 
 3759              		.loc 1 4017 13 view .LVU1043
 3760 0080 DEE7     		b	.L290
 3761              	.LVL282:
 3762              	.L296:
 3763              	.LCFI34:
 3764              		.cfi_def_cfa_offset 0
 3765              		.cfi_restore 3
 3766              		.cfi_restore 4
 3767              		.cfi_restore 5
 3768              		.cfi_restore 14
4017:FreeRTOS/src/tasks.c **** 
 3769              		.loc 1 4017 13 view .LVU1044
 3770 0082 0020     		movs	r0, #0
 3771              	.LVL283:
4097:FreeRTOS/src/tasks.c **** 
 3772              		.loc 1 4097 2 view .LVU1045
 3773 0084 7047     		bx	lr
 3774              	.LVL284:
 3775              	.L297:
 3776              	.LCFI35:
 3777              		.cfi_def_cfa_offset 16
 3778              		.cfi_offset 3, -16
 3779              		.cfi_offset 4, -12
 3780              		.cfi_offset 5, -8
 3781              		.cfi_offset 14, -4
4083:FreeRTOS/src/tasks.c **** 				}
 3782              		.loc 1 4083 14 view .LVU1046
 3783 0086 0120     		movs	r0, #1
 3784              	.LVL285:
4093:FreeRTOS/src/tasks.c **** 		}
 3785              		.loc 1 4093 28 is_stmt 1 view .LVU1047
4096:FreeRTOS/src/tasks.c **** 	}
 3786              		.loc 1 4096 3 view .LVU1048
4096:FreeRTOS/src/tasks.c **** 	}
 3787              		.loc 1 4096 10 is_stmt 0 view .LVU1049
 3788 0088 DAE7     		b	.L290
 3789              	.L304:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 180


 3790 008a 00BF     		.align	2
 3791              	.L303:
 3792 008c 00000000 		.word	.LANCHOR9
 3793 0090 00000000 		.word	.LANCHOR2
 3794 0094 00000000 		.word	.LANCHOR12
 3795              		.cfi_endproc
 3796              	.LFE42:
 3798              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3799              		.align	1
 3800              		.global	xTaskPriorityDisinherit
 3801              		.syntax unified
 3802              		.thumb
 3803              		.thumb_func
 3804              		.fpu fpv4-sp-d16
 3806              	xTaskPriorityDisinherit:
 3807              	.LVL286:
 3808              	.LFB43:
4105:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3809              		.loc 1 4105 2 is_stmt 1 view -0
 3810              		.cfi_startproc
 3811              		@ args = 0, pretend = 0, frame = 0
 3812              		@ frame_needed = 0, uses_anonymous_args = 0
4106:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3813              		.loc 1 4106 2 view .LVU1051
4107:FreeRTOS/src/tasks.c **** 
 3814              		.loc 1 4107 2 view .LVU1052
4109:FreeRTOS/src/tasks.c **** 		{
 3815              		.loc 1 4109 3 view .LVU1053
4109:FreeRTOS/src/tasks.c **** 		{
 3816              		.loc 1 4109 5 is_stmt 0 view .LVU1054
 3817 0000 20B3     		cbz	r0, .L308
4105:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3818              		.loc 1 4105 2 view .LVU1055
 3819 0002 38B5     		push	{r3, r4, r5, lr}
 3820              	.LCFI36:
 3821              		.cfi_def_cfa_offset 16
 3822              		.cfi_offset 3, -16
 3823              		.cfi_offset 4, -12
 3824              		.cfi_offset 5, -8
 3825              		.cfi_offset 14, -4
 3826 0004 0446     		mov	r4, r0
4115:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3827              		.loc 1 4115 41 is_stmt 1 view .LVU1056
4116:FreeRTOS/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3828              		.loc 1 4116 40 view .LVU1057
4117:FreeRTOS/src/tasks.c **** 
 3829              		.loc 1 4117 4 view .LVU1058
4117:FreeRTOS/src/tasks.c **** 
 3830              		.loc 1 4117 11 is_stmt 0 view .LVU1059
 3831 0006 826C     		ldr	r2, [r0, #72]
4117:FreeRTOS/src/tasks.c **** 
 3832              		.loc 1 4117 28 view .LVU1060
 3833 0008 013A     		subs	r2, r2, #1
 3834 000a 8264     		str	r2, [r0, #72]
4121:FreeRTOS/src/tasks.c **** 			{
 3835              		.loc 1 4121 4 is_stmt 1 view .LVU1061
4121:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 181


 3836              		.loc 1 4121 13 is_stmt 0 view .LVU1062
 3837 000c C06A     		ldr	r0, [r0, #44]
 3838              	.LVL287:
4121:FreeRTOS/src/tasks.c **** 			{
 3839              		.loc 1 4121 34 view .LVU1063
 3840 000e 616C     		ldr	r1, [r4, #68]
4121:FreeRTOS/src/tasks.c **** 			{
 3841              		.loc 1 4121 6 view .LVU1064
 3842 0010 8842     		cmp	r0, r1
 3843 0012 1DD0     		beq	.L309
4124:FreeRTOS/src/tasks.c **** 				{
 3844              		.loc 1 4124 5 is_stmt 1 view .LVU1065
4124:FreeRTOS/src/tasks.c **** 				{
 3845              		.loc 1 4124 7 is_stmt 0 view .LVU1066
 3846 0014 0AB1     		cbz	r2, .L315
4107:FreeRTOS/src/tasks.c **** 
 3847              		.loc 1 4107 13 view .LVU1067
 3848 0016 0020     		movs	r0, #0
4173:FreeRTOS/src/tasks.c **** 		}
 3849              		.loc 1 4173 28 is_stmt 1 view .LVU1068
4176:FreeRTOS/src/tasks.c **** 	}
 3850              		.loc 1 4176 3 view .LVU1069
 3851              	.LVL288:
 3852              	.L305:
4177:FreeRTOS/src/tasks.c **** 
 3853              		.loc 1 4177 2 is_stmt 0 view .LVU1070
 3854 0018 38BD     		pop	{r3, r4, r5, pc}
 3855              	.LVL289:
 3856              	.L315:
4131:FreeRTOS/src/tasks.c **** 					{
 3857              		.loc 1 4131 6 is_stmt 1 view .LVU1071
4131:FreeRTOS/src/tasks.c **** 					{
 3858              		.loc 1 4131 10 is_stmt 0 view .LVU1072
 3859 001a 251D     		adds	r5, r4, #4
 3860 001c 2846     		mov	r0, r5
 3861 001e FFF7FEFF 		bl	uxListRemove
 3862              	.LVL290:
4137:FreeRTOS/src/tasks.c **** 					}
 3863              		.loc 1 4137 31 is_stmt 1 view .LVU1073
4142:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 3864              		.loc 1 4142 67 view .LVU1074
4143:FreeRTOS/src/tasks.c **** 
 3865              		.loc 1 4143 6 view .LVU1075
4143:FreeRTOS/src/tasks.c **** 
 3866              		.loc 1 4143 31 is_stmt 0 view .LVU1076
 3867 0022 636C     		ldr	r3, [r4, #68]
4143:FreeRTOS/src/tasks.c **** 
 3868              		.loc 1 4143 24 view .LVU1077
 3869 0024 E362     		str	r3, [r4, #44]
4148:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3870              		.loc 1 4148 6 is_stmt 1 view .LVU1078
 3871 0026 C3F10502 		rsb	r2, r3, #5
 3872 002a A261     		str	r2, [r4, #24]
4149:FreeRTOS/src/tasks.c **** 
 3873              		.loc 1 4149 6 view .LVU1079
4149:FreeRTOS/src/tasks.c **** 
 3874              		.loc 1 4149 6 view .LVU1080
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 182


 3875 002c 094A     		ldr	r2, .L316
 3876 002e 1268     		ldr	r2, [r2]
 3877 0030 9342     		cmp	r3, r2
 3878 0032 01D9     		bls	.L307
4149:FreeRTOS/src/tasks.c **** 
 3879              		.loc 1 4149 6 discriminator 1 view .LVU1081
 3880 0034 074A     		ldr	r2, .L316
 3881 0036 1360     		str	r3, [r2]
 3882              	.L307:
4149:FreeRTOS/src/tasks.c **** 
 3883              		.loc 1 4149 6 discriminator 3 view .LVU1082
4149:FreeRTOS/src/tasks.c **** 
 3884              		.loc 1 4149 6 discriminator 3 view .LVU1083
 3885 0038 03EB8303 		add	r3, r3, r3, lsl #2
 3886 003c 9A00     		lsls	r2, r3, #2
 3887 003e 2946     		mov	r1, r5
 3888 0040 0548     		ldr	r0, .L316+4
 3889 0042 1044     		add	r0, r0, r2
 3890 0044 FFF7FEFF 		bl	vListInsertEnd
 3891              	.LVL291:
4149:FreeRTOS/src/tasks.c **** 
 3892              		.loc 1 4149 36 discriminator 3 view .LVU1084
4159:FreeRTOS/src/tasks.c **** 				}
 3893              		.loc 1 4159 6 discriminator 3 view .LVU1085
4159:FreeRTOS/src/tasks.c **** 				}
 3894              		.loc 1 4159 14 is_stmt 0 discriminator 3 view .LVU1086
 3895 0048 0120     		movs	r0, #1
 3896 004a E5E7     		b	.L305
 3897              	.LVL292:
 3898              	.L308:
 3899              	.LCFI37:
 3900              		.cfi_def_cfa_offset 0
 3901              		.cfi_restore 3
 3902              		.cfi_restore 4
 3903              		.cfi_restore 5
 3904              		.cfi_restore 14
4107:FreeRTOS/src/tasks.c **** 
 3905              		.loc 1 4107 13 view .LVU1087
 3906 004c 0020     		movs	r0, #0
 3907              	.LVL293:
4177:FreeRTOS/src/tasks.c **** 
 3908              		.loc 1 4177 2 view .LVU1088
 3909 004e 7047     		bx	lr
 3910              	.LVL294:
 3911              	.L309:
 3912              	.LCFI38:
 3913              		.cfi_def_cfa_offset 16
 3914              		.cfi_offset 3, -16
 3915              		.cfi_offset 4, -12
 3916              		.cfi_offset 5, -8
 3917              		.cfi_offset 14, -4
4107:FreeRTOS/src/tasks.c **** 
 3918              		.loc 1 4107 13 view .LVU1089
 3919 0050 0020     		movs	r0, #0
 3920 0052 E1E7     		b	.L305
 3921              	.L317:
 3922              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 183


 3923              	.L316:
 3924 0054 00000000 		.word	.LANCHOR12
 3925 0058 00000000 		.word	.LANCHOR2
 3926              		.cfi_endproc
 3927              	.LFE43:
 3929              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3930              		.align	1
 3931              		.global	vTaskPriorityDisinheritAfterTimeout
 3932              		.syntax unified
 3933              		.thumb
 3934              		.thumb_func
 3935              		.fpu fpv4-sp-d16
 3937              	vTaskPriorityDisinheritAfterTimeout:
 3938              	.LVL295:
 3939              	.LFB44:
4185:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3940              		.loc 1 4185 2 is_stmt 1 view -0
 3941              		.cfi_startproc
 3942              		@ args = 0, pretend = 0, frame = 0
 3943              		@ frame_needed = 0, uses_anonymous_args = 0
4186:FreeRTOS/src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 3944              		.loc 1 4186 2 view .LVU1091
4187:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 3945              		.loc 1 4187 2 view .LVU1092
4188:FreeRTOS/src/tasks.c **** 
 3946              		.loc 1 4188 2 view .LVU1093
4190:FreeRTOS/src/tasks.c **** 		{
 3947              		.loc 1 4190 3 view .LVU1094
4190:FreeRTOS/src/tasks.c **** 		{
 3948              		.loc 1 4190 5 is_stmt 0 view .LVU1095
 3949 0000 78B3     		cbz	r0, .L324
4185:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3950              		.loc 1 4185 2 view .LVU1096
 3951 0002 38B5     		push	{r3, r4, r5, lr}
 3952              	.LCFI39:
 3953              		.cfi_def_cfa_offset 16
 3954              		.cfi_offset 3, -16
 3955              		.cfi_offset 4, -12
 3956              		.cfi_offset 5, -8
 3957              		.cfi_offset 14, -4
 3958 0004 0446     		mov	r4, r0
4194:FreeRTOS/src/tasks.c **** 
 3959              		.loc 1 4194 40 is_stmt 1 view .LVU1097
4200:FreeRTOS/src/tasks.c **** 			{
 3960              		.loc 1 4200 4 view .LVU1098
4200:FreeRTOS/src/tasks.c **** 			{
 3961              		.loc 1 4200 13 is_stmt 0 view .LVU1099
 3962 0006 426C     		ldr	r2, [r0, #68]
4200:FreeRTOS/src/tasks.c **** 			{
 3963              		.loc 1 4200 6 view .LVU1100
 3964 0008 8A42     		cmp	r2, r1
 3965 000a 00D2     		bcs	.L320
4202:FreeRTOS/src/tasks.c **** 			}
 3966              		.loc 1 4202 21 view .LVU1101
 3967 000c 0A46     		mov	r2, r1
 3968              	.L320:
 3969              	.LVL296:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 184


4210:FreeRTOS/src/tasks.c **** 			{
 3970              		.loc 1 4210 4 is_stmt 1 view .LVU1102
4210:FreeRTOS/src/tasks.c **** 			{
 3971              		.loc 1 4210 13 is_stmt 0 view .LVU1103
 3972 000e E16A     		ldr	r1, [r4, #44]
 3973              	.LVL297:
4210:FreeRTOS/src/tasks.c **** 			{
 3974              		.loc 1 4210 6 view .LVU1104
 3975 0010 9142     		cmp	r1, r2
 3976 0012 02D0     		beq	.L318
4216:FreeRTOS/src/tasks.c **** 				{
 3977              		.loc 1 4216 5 is_stmt 1 view .LVU1105
4216:FreeRTOS/src/tasks.c **** 				{
 3978              		.loc 1 4216 14 is_stmt 0 view .LVU1106
 3979 0014 A06C     		ldr	r0, [r4, #72]
 3980              	.LVL298:
4216:FreeRTOS/src/tasks.c **** 				{
 3981              		.loc 1 4216 7 view .LVU1107
 3982 0016 0128     		cmp	r0, #1
 3983 0018 00D0     		beq	.L327
 3984              	.LVL299:
 3985              	.L318:
4282:FreeRTOS/src/tasks.c **** 
 3986              		.loc 1 4282 2 view .LVU1108
 3987 001a 38BD     		pop	{r3, r4, r5, pc}
 3988              	.LVL300:
 3989              	.L327:
4221:FreeRTOS/src/tasks.c **** 
 3990              		.loc 1 4221 43 is_stmt 1 view .LVU1109
4226:FreeRTOS/src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 3991              		.loc 1 4226 67 view .LVU1110
4227:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 3992              		.loc 1 4227 6 view .LVU1111
4228:FreeRTOS/src/tasks.c **** 
 3993              		.loc 1 4228 6 view .LVU1112
4228:FreeRTOS/src/tasks.c **** 
 3994              		.loc 1 4228 24 is_stmt 0 view .LVU1113
 3995 001c E262     		str	r2, [r4, #44]
4232:FreeRTOS/src/tasks.c **** 					{
 3996              		.loc 1 4232 6 is_stmt 1 view .LVU1114
4232:FreeRTOS/src/tasks.c **** 					{
 3997              		.loc 1 4232 12 is_stmt 0 view .LVU1115
 3998 001e A069     		ldr	r0, [r4, #24]
4232:FreeRTOS/src/tasks.c **** 					{
 3999              		.loc 1 4232 8 view .LVU1116
 4000 0020 0028     		cmp	r0, #0
 4001 0022 02DB     		blt	.L321
4234:FreeRTOS/src/tasks.c **** 					}
 4002              		.loc 1 4234 7 is_stmt 1 view .LVU1117
 4003 0024 C2F10502 		rsb	r2, r2, #5
 4004              	.LVL301:
4234:FreeRTOS/src/tasks.c **** 					}
 4005              		.loc 1 4234 7 is_stmt 0 view .LVU1118
 4006 0028 A261     		str	r2, [r4, #24]
 4007              	.L321:
4238:FreeRTOS/src/tasks.c **** 					}
 4008              		.loc 1 4238 31 is_stmt 1 view .LVU1119
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 185


4247:FreeRTOS/src/tasks.c **** 					{
 4009              		.loc 1 4247 6 view .LVU1120
4247:FreeRTOS/src/tasks.c **** 					{
 4010              		.loc 1 4247 10 is_stmt 0 view .LVU1121
 4011 002a 6369     		ldr	r3, [r4, #20]
 4012 002c 01EB8101 		add	r1, r1, r1, lsl #2
 4013              	.LVL302:
4247:FreeRTOS/src/tasks.c **** 					{
 4014              		.loc 1 4247 10 view .LVU1122
 4015 0030 8800     		lsls	r0, r1, #2
 4016 0032 0C4A     		ldr	r2, .L328
 4017 0034 0244     		add	r2, r2, r0
4247:FreeRTOS/src/tasks.c **** 					{
 4018              		.loc 1 4247 8 view .LVU1123
 4019 0036 9342     		cmp	r3, r2
 4020 0038 EFD1     		bne	.L318
4249:FreeRTOS/src/tasks.c **** 						{
 4021              		.loc 1 4249 7 is_stmt 1 view .LVU1124
4249:FreeRTOS/src/tasks.c **** 						{
 4022              		.loc 1 4249 11 is_stmt 0 view .LVU1125
 4023 003a 251D     		adds	r5, r4, #4
 4024 003c 2846     		mov	r0, r5
 4025 003e FFF7FEFF 		bl	uxListRemove
 4026              	.LVL303:
4258:FreeRTOS/src/tasks.c **** 						}
 4027              		.loc 1 4258 32 is_stmt 1 view .LVU1126
4261:FreeRTOS/src/tasks.c **** 					}
 4028              		.loc 1 4261 7 view .LVU1127
4261:FreeRTOS/src/tasks.c **** 					}
 4029              		.loc 1 4261 7 view .LVU1128
 4030 0042 E36A     		ldr	r3, [r4, #44]
 4031 0044 084A     		ldr	r2, .L328+4
 4032 0046 1268     		ldr	r2, [r2]
 4033 0048 9342     		cmp	r3, r2
 4034 004a 01D9     		bls	.L322
4261:FreeRTOS/src/tasks.c **** 					}
 4035              		.loc 1 4261 7 discriminator 1 view .LVU1129
 4036 004c 064A     		ldr	r2, .L328+4
 4037 004e 1360     		str	r3, [r2]
 4038              	.L322:
4261:FreeRTOS/src/tasks.c **** 					}
 4039              		.loc 1 4261 7 discriminator 3 view .LVU1130
4261:FreeRTOS/src/tasks.c **** 					}
 4040              		.loc 1 4261 7 discriminator 3 view .LVU1131
 4041 0050 03EB8303 		add	r3, r3, r3, lsl #2
 4042 0054 9A00     		lsls	r2, r3, #2
 4043 0056 2946     		mov	r1, r5
 4044 0058 0248     		ldr	r0, .L328
 4045 005a 1044     		add	r0, r0, r2
 4046 005c FFF7FEFF 		bl	vListInsertEnd
 4047              	.LVL304:
4261:FreeRTOS/src/tasks.c **** 					}
 4048              		.loc 1 4261 37 discriminator 3 view .LVU1132
4280:FreeRTOS/src/tasks.c **** 		}
 4049              		.loc 1 4280 28 discriminator 3 view .LVU1133
4282:FreeRTOS/src/tasks.c **** 
 4050              		.loc 1 4282 2 is_stmt 0 discriminator 3 view .LVU1134
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 186


 4051 0060 DBE7     		b	.L318
 4052              	.LVL305:
 4053              	.L324:
 4054              	.LCFI40:
 4055              		.cfi_def_cfa_offset 0
 4056              		.cfi_restore 3
 4057              		.cfi_restore 4
 4058              		.cfi_restore 5
 4059              		.cfi_restore 14
4282:FreeRTOS/src/tasks.c **** 
 4060              		.loc 1 4282 2 discriminator 3 view .LVU1135
 4061 0062 7047     		bx	lr
 4062              	.L329:
 4063              		.align	2
 4064              	.L328:
 4065 0064 00000000 		.word	.LANCHOR2
 4066 0068 00000000 		.word	.LANCHOR12
 4067              		.cfi_endproc
 4068              	.LFE44:
 4070              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4071              		.align	1
 4072              		.global	uxTaskResetEventItemValue
 4073              		.syntax unified
 4074              		.thumb
 4075              		.thumb_func
 4076              		.fpu fpv4-sp-d16
 4078              	uxTaskResetEventItemValue:
 4079              	.LFB45:
4603:FreeRTOS/src/tasks.c **** TickType_t uxReturn;
 4080              		.loc 1 4603 1 is_stmt 1 view -0
 4081              		.cfi_startproc
 4082              		@ args = 0, pretend = 0, frame = 0
 4083              		@ frame_needed = 0, uses_anonymous_args = 0
 4084              		@ link register save eliminated.
4604:FreeRTOS/src/tasks.c **** 
 4085              		.loc 1 4604 1 view .LVU1137
4606:FreeRTOS/src/tasks.c **** 
 4086              		.loc 1 4606 2 view .LVU1138
4606:FreeRTOS/src/tasks.c **** 
 4087              		.loc 1 4606 13 is_stmt 0 view .LVU1139
 4088 0000 044A     		ldr	r2, .L331
 4089 0002 1368     		ldr	r3, [r2]
4606:FreeRTOS/src/tasks.c **** 
 4090              		.loc 1 4606 11 view .LVU1140
 4091 0004 9869     		ldr	r0, [r3, #24]
 4092              	.LVL306:
4610:FreeRTOS/src/tasks.c **** 
 4093              		.loc 1 4610 2 is_stmt 1 view .LVU1141
 4094 0006 1368     		ldr	r3, [r2]
 4095 0008 DB6A     		ldr	r3, [r3, #44]
 4096 000a 1268     		ldr	r2, [r2]
 4097 000c C3F10503 		rsb	r3, r3, #5
 4098 0010 9361     		str	r3, [r2, #24]
4612:FreeRTOS/src/tasks.c **** }
 4099              		.loc 1 4612 2 view .LVU1142
4613:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 4100              		.loc 1 4613 1 is_stmt 0 view .LVU1143
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 187


 4101 0012 7047     		bx	lr
 4102              	.L332:
 4103              		.align	2
 4104              	.L331:
 4105 0014 00000000 		.word	.LANCHOR9
 4106              		.cfi_endproc
 4107              	.LFE45:
 4109              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4110              		.align	1
 4111              		.global	pvTaskIncrementMutexHeldCount
 4112              		.syntax unified
 4113              		.thumb
 4114              		.thumb_func
 4115              		.fpu fpv4-sp-d16
 4117              	pvTaskIncrementMutexHeldCount:
 4118              	.LFB46:
4619:FreeRTOS/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4119              		.loc 1 4619 2 is_stmt 1 view -0
 4120              		.cfi_startproc
 4121              		@ args = 0, pretend = 0, frame = 0
 4122              		@ frame_needed = 0, uses_anonymous_args = 0
 4123              		@ link register save eliminated.
4622:FreeRTOS/src/tasks.c **** 		{
 4124              		.loc 1 4622 3 view .LVU1145
4622:FreeRTOS/src/tasks.c **** 		{
 4125              		.loc 1 4622 20 is_stmt 0 view .LVU1146
 4126 0000 054B     		ldr	r3, .L335
 4127 0002 1B68     		ldr	r3, [r3]
4622:FreeRTOS/src/tasks.c **** 		{
 4128              		.loc 1 4622 5 view .LVU1147
 4129 0004 23B1     		cbz	r3, .L334
4624:FreeRTOS/src/tasks.c **** 		}
 4130              		.loc 1 4624 4 is_stmt 1 view .LVU1148
4624:FreeRTOS/src/tasks.c **** 		}
 4131              		.loc 1 4624 18 is_stmt 0 view .LVU1149
 4132 0006 044B     		ldr	r3, .L335
 4133 0008 1A68     		ldr	r2, [r3]
 4134 000a 936C     		ldr	r3, [r2, #72]
4624:FreeRTOS/src/tasks.c **** 		}
 4135              		.loc 1 4624 35 view .LVU1150
 4136 000c 0133     		adds	r3, r3, #1
 4137 000e 9364     		str	r3, [r2, #72]
 4138              	.L334:
4627:FreeRTOS/src/tasks.c **** 	}
 4139              		.loc 1 4627 3 is_stmt 1 view .LVU1151
4627:FreeRTOS/src/tasks.c **** 	}
 4140              		.loc 1 4627 10 is_stmt 0 view .LVU1152
 4141 0010 014B     		ldr	r3, .L335
 4142 0012 1868     		ldr	r0, [r3]
4628:FreeRTOS/src/tasks.c **** 
 4143              		.loc 1 4628 2 view .LVU1153
 4144 0014 7047     		bx	lr
 4145              	.L336:
 4146 0016 00BF     		.align	2
 4147              	.L335:
 4148 0018 00000000 		.word	.LANCHOR9
 4149              		.cfi_endproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 188


 4150              	.LFE46:
 4152              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4153              		.align	1
 4154              		.global	ulTaskNotifyTake
 4155              		.syntax unified
 4156              		.thumb
 4157              		.thumb_func
 4158              		.fpu fpv4-sp-d16
 4160              	ulTaskNotifyTake:
 4161              	.LVL307:
 4162              	.LFB47:
4636:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 4163              		.loc 1 4636 2 is_stmt 1 view -0
 4164              		.cfi_startproc
 4165              		@ args = 0, pretend = 0, frame = 0
 4166              		@ frame_needed = 0, uses_anonymous_args = 0
4636:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 4167              		.loc 1 4636 2 is_stmt 0 view .LVU1155
 4168 0000 38B5     		push	{r3, r4, r5, lr}
 4169              	.LCFI41:
 4170              		.cfi_def_cfa_offset 16
 4171              		.cfi_offset 3, -16
 4172              		.cfi_offset 4, -12
 4173              		.cfi_offset 5, -8
 4174              		.cfi_offset 14, -4
 4175 0002 0546     		mov	r5, r0
 4176 0004 0C46     		mov	r4, r1
4637:FreeRTOS/src/tasks.c **** 
 4177              		.loc 1 4637 2 is_stmt 1 view .LVU1156
4639:FreeRTOS/src/tasks.c **** 		{
 4178              		.loc 1 4639 3 view .LVU1157
 4179 0006 FFF7FEFF 		bl	vPortEnterCritical
 4180              	.LVL308:
4642:FreeRTOS/src/tasks.c **** 			{
 4181              		.loc 1 4642 4 view .LVU1158
4642:FreeRTOS/src/tasks.c **** 			{
 4182              		.loc 1 4642 20 is_stmt 0 view .LVU1159
 4183 000a 194B     		ldr	r3, .L343
 4184 000c 1B68     		ldr	r3, [r3]
 4185 000e DB6C     		ldr	r3, [r3, #76]
4642:FreeRTOS/src/tasks.c **** 			{
 4186              		.loc 1 4642 6 view .LVU1160
 4187 0010 2BB9     		cbnz	r3, .L338
4645:FreeRTOS/src/tasks.c **** 
 4188              		.loc 1 4645 5 is_stmt 1 view .LVU1161
4645:FreeRTOS/src/tasks.c **** 
 4189              		.loc 1 4645 17 is_stmt 0 view .LVU1162
 4190 0012 174B     		ldr	r3, .L343
 4191 0014 1B68     		ldr	r3, [r3]
4645:FreeRTOS/src/tasks.c **** 
 4192              		.loc 1 4645 33 view .LVU1163
 4193 0016 0122     		movs	r2, #1
 4194 0018 83F85020 		strb	r2, [r3, #80]
4647:FreeRTOS/src/tasks.c **** 				{
 4195              		.loc 1 4647 5 is_stmt 1 view .LVU1164
4647:FreeRTOS/src/tasks.c **** 				{
 4196              		.loc 1 4647 7 is_stmt 0 view .LVU1165
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 189


 4197 001c ACB9     		cbnz	r4, .L342
 4198              	.L338:
4665:FreeRTOS/src/tasks.c **** 			}
 4199              		.loc 1 4665 29 is_stmt 1 view .LVU1166
4668:FreeRTOS/src/tasks.c **** 
 4200              		.loc 1 4668 3 view .LVU1167
 4201 001e FFF7FEFF 		bl	vPortExitCritical
 4202              	.LVL309:
4670:FreeRTOS/src/tasks.c **** 		{
 4203              		.loc 1 4670 3 view .LVU1168
 4204 0022 FFF7FEFF 		bl	vPortEnterCritical
 4205              	.LVL310:
4672:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4206              		.loc 1 4672 27 view .LVU1169
4673:FreeRTOS/src/tasks.c **** 
 4207              		.loc 1 4673 4 view .LVU1170
4673:FreeRTOS/src/tasks.c **** 
 4208              		.loc 1 4673 27 is_stmt 0 view .LVU1171
 4209 0026 124B     		ldr	r3, .L343
 4210 0028 1B68     		ldr	r3, [r3]
4673:FreeRTOS/src/tasks.c **** 
 4211              		.loc 1 4673 13 view .LVU1172
 4212 002a DC6C     		ldr	r4, [r3, #76]
 4213              	.LVL311:
4675:FreeRTOS/src/tasks.c **** 			{
 4214              		.loc 1 4675 4 is_stmt 1 view .LVU1173
4675:FreeRTOS/src/tasks.c **** 			{
 4215              		.loc 1 4675 6 is_stmt 0 view .LVU1174
 4216 002c 24B1     		cbz	r4, .L339
4677:FreeRTOS/src/tasks.c **** 				{
 4217              		.loc 1 4677 5 is_stmt 1 view .LVU1175
4677:FreeRTOS/src/tasks.c **** 				{
 4218              		.loc 1 4677 7 is_stmt 0 view .LVU1176
 4219 002e CDB1     		cbz	r5, .L340
4679:FreeRTOS/src/tasks.c **** 				}
 4220              		.loc 1 4679 6 is_stmt 1 view .LVU1177
4679:FreeRTOS/src/tasks.c **** 				}
 4221              		.loc 1 4679 18 is_stmt 0 view .LVU1178
 4222 0030 0F4B     		ldr	r3, .L343
 4223 0032 1B68     		ldr	r3, [r3]
4679:FreeRTOS/src/tasks.c **** 				}
 4224              		.loc 1 4679 36 view .LVU1179
 4225 0034 0022     		movs	r2, #0
 4226 0036 DA64     		str	r2, [r3, #76]
 4227              	.L339:
4688:FreeRTOS/src/tasks.c **** 			}
 4228              		.loc 1 4688 29 is_stmt 1 view .LVU1180
4691:FreeRTOS/src/tasks.c **** 		}
 4229              		.loc 1 4691 4 view .LVU1181
4691:FreeRTOS/src/tasks.c **** 		}
 4230              		.loc 1 4691 16 is_stmt 0 view .LVU1182
 4231 0038 0D4B     		ldr	r3, .L343
 4232 003a 1B68     		ldr	r3, [r3]
4691:FreeRTOS/src/tasks.c **** 		}
 4233              		.loc 1 4691 32 view .LVU1183
 4234 003c 0022     		movs	r2, #0
 4235 003e 83F85020 		strb	r2, [r3, #80]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 190


4693:FreeRTOS/src/tasks.c **** 
 4236              		.loc 1 4693 3 is_stmt 1 view .LVU1184
 4237 0042 FFF7FEFF 		bl	vPortExitCritical
 4238              	.LVL312:
4695:FreeRTOS/src/tasks.c **** 	}
 4239              		.loc 1 4695 3 view .LVU1185
4696:FreeRTOS/src/tasks.c **** 
 4240              		.loc 1 4696 2 is_stmt 0 view .LVU1186
 4241 0046 2046     		mov	r0, r4
 4242 0048 38BD     		pop	{r3, r4, r5, pc}
 4243              	.LVL313:
 4244              	.L342:
4649:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4245              		.loc 1 4649 6 is_stmt 1 view .LVU1187
 4246 004a 1146     		mov	r1, r2
 4247 004c 2046     		mov	r0, r4
 4248 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4249              	.LVL314:
4650:FreeRTOS/src/tasks.c **** 
 4250              		.loc 1 4650 35 view .LVU1188
4656:FreeRTOS/src/tasks.c **** 				}
 4251              		.loc 1 4656 6 view .LVU1189
 4252 0052 084B     		ldr	r3, .L343+4
 4253 0054 4FF08052 		mov	r2, #268435456
 4254 0058 1A60     		str	r2, [r3]
4656:FreeRTOS/src/tasks.c **** 				}
 4255              		.loc 1 4656 6 view .LVU1190
 4256              		.syntax unified
 4257              	@ 4656 "FreeRTOS/src/tasks.c" 1
 4258 005a BFF34F8F 		dsb
 4259              	@ 0 "" 2
4656:FreeRTOS/src/tasks.c **** 				}
 4260              		.loc 1 4656 6 view .LVU1191
 4261              	@ 4656 "FreeRTOS/src/tasks.c" 1
 4262 005e BFF36F8F 		isb
 4263              	@ 0 "" 2
4656:FreeRTOS/src/tasks.c **** 				}
 4264              		.loc 1 4656 28 view .LVU1192
 4265              		.thumb
 4266              		.syntax unified
 4267 0062 DCE7     		b	.L338
 4268              	.LVL315:
 4269              	.L340:
4683:FreeRTOS/src/tasks.c **** 				}
 4270              		.loc 1 4683 6 view .LVU1193
4683:FreeRTOS/src/tasks.c **** 				}
 4271              		.loc 1 4683 18 is_stmt 0 view .LVU1194
 4272 0064 024B     		ldr	r3, .L343
 4273 0066 1B68     		ldr	r3, [r3]
4683:FreeRTOS/src/tasks.c **** 				}
 4274              		.loc 1 4683 47 view .LVU1195
 4275 0068 621E     		subs	r2, r4, #1
4683:FreeRTOS/src/tasks.c **** 				}
 4276              		.loc 1 4683 36 view .LVU1196
 4277 006a DA64     		str	r2, [r3, #76]
 4278 006c E4E7     		b	.L339
 4279              	.L344:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 191


 4280 006e 00BF     		.align	2
 4281              	.L343:
 4282 0070 00000000 		.word	.LANCHOR9
 4283 0074 04ED00E0 		.word	-536810236
 4284              		.cfi_endproc
 4285              	.LFE47:
 4287              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4288              		.align	1
 4289              		.global	xTaskNotifyWait
 4290              		.syntax unified
 4291              		.thumb
 4292              		.thumb_func
 4293              		.fpu fpv4-sp-d16
 4295              	xTaskNotifyWait:
 4296              	.LVL316:
 4297              	.LFB48:
4704:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 4298              		.loc 1 4704 2 is_stmt 1 view -0
 4299              		.cfi_startproc
 4300              		@ args = 0, pretend = 0, frame = 0
 4301              		@ frame_needed = 0, uses_anonymous_args = 0
4704:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 4302              		.loc 1 4704 2 is_stmt 0 view .LVU1198
 4303 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4304              	.LCFI42:
 4305              		.cfi_def_cfa_offset 24
 4306              		.cfi_offset 3, -24
 4307              		.cfi_offset 4, -20
 4308              		.cfi_offset 5, -16
 4309              		.cfi_offset 6, -12
 4310              		.cfi_offset 7, -8
 4311              		.cfi_offset 14, -4
 4312 0002 0746     		mov	r7, r0
 4313 0004 0D46     		mov	r5, r1
 4314 0006 1446     		mov	r4, r2
 4315 0008 1E46     		mov	r6, r3
4705:FreeRTOS/src/tasks.c **** 
 4316              		.loc 1 4705 2 is_stmt 1 view .LVU1199
4707:FreeRTOS/src/tasks.c **** 		{
 4317              		.loc 1 4707 3 view .LVU1200
 4318 000a FFF7FEFF 		bl	vPortEnterCritical
 4319              	.LVL317:
4710:FreeRTOS/src/tasks.c **** 			{
 4320              		.loc 1 4710 4 view .LVU1201
4710:FreeRTOS/src/tasks.c **** 			{
 4321              		.loc 1 4710 20 is_stmt 0 view .LVU1202
 4322 000e 204B     		ldr	r3, .L353
 4323 0010 1B68     		ldr	r3, [r3]
 4324 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4325 0016 DBB2     		uxtb	r3, r3
4710:FreeRTOS/src/tasks.c **** 			{
 4326              		.loc 1 4710 6 view .LVU1203
 4327 0018 022B     		cmp	r3, #2
 4328 001a 0AD0     		beq	.L346
4715:FreeRTOS/src/tasks.c **** 
 4329              		.loc 1 4715 5 is_stmt 1 view .LVU1204
4715:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 192


 4330              		.loc 1 4715 35 is_stmt 0 view .LVU1205
 4331 001c 1C4B     		ldr	r3, .L353
 4332 001e 1A68     		ldr	r2, [r3]
 4333 0020 D06C     		ldr	r0, [r2, #76]
 4334 0022 20EA0700 		bic	r0, r0, r7
 4335 0026 D064     		str	r0, [r2, #76]
4718:FreeRTOS/src/tasks.c **** 
 4336              		.loc 1 4718 5 is_stmt 1 view .LVU1206
4718:FreeRTOS/src/tasks.c **** 
 4337              		.loc 1 4718 17 is_stmt 0 view .LVU1207
 4338 0028 1B68     		ldr	r3, [r3]
4718:FreeRTOS/src/tasks.c **** 
 4339              		.loc 1 4718 33 view .LVU1208
 4340 002a 0122     		movs	r2, #1
 4341 002c 83F85020 		strb	r2, [r3, #80]
4720:FreeRTOS/src/tasks.c **** 				{
 4342              		.loc 1 4720 5 is_stmt 1 view .LVU1209
4720:FreeRTOS/src/tasks.c **** 				{
 4343              		.loc 1 4720 7 is_stmt 0 view .LVU1210
 4344 0030 CEB9     		cbnz	r6, .L351
 4345              	.L346:
4738:FreeRTOS/src/tasks.c **** 			}
 4346              		.loc 1 4738 29 is_stmt 1 view .LVU1211
4741:FreeRTOS/src/tasks.c **** 
 4347              		.loc 1 4741 3 view .LVU1212
 4348 0032 FFF7FEFF 		bl	vPortExitCritical
 4349              	.LVL318:
4743:FreeRTOS/src/tasks.c **** 		{
 4350              		.loc 1 4743 3 view .LVU1213
 4351 0036 FFF7FEFF 		bl	vPortEnterCritical
 4352              	.LVL319:
4745:FreeRTOS/src/tasks.c **** 
 4353              		.loc 1 4745 27 view .LVU1214
4747:FreeRTOS/src/tasks.c **** 			{
 4354              		.loc 1 4747 4 view .LVU1215
4747:FreeRTOS/src/tasks.c **** 			{
 4355              		.loc 1 4747 6 is_stmt 0 view .LVU1216
 4356 003a 1CB1     		cbz	r4, .L347
4751:FreeRTOS/src/tasks.c **** 			}
 4357              		.loc 1 4751 5 is_stmt 1 view .LVU1217
4751:FreeRTOS/src/tasks.c **** 			}
 4358              		.loc 1 4751 41 is_stmt 0 view .LVU1218
 4359 003c 144B     		ldr	r3, .L353
 4360 003e 1B68     		ldr	r3, [r3]
 4361 0040 DB6C     		ldr	r3, [r3, #76]
4751:FreeRTOS/src/tasks.c **** 			}
 4362              		.loc 1 4751 27 view .LVU1219
 4363 0042 2360     		str	r3, [r4]
 4364              	.L347:
4758:FreeRTOS/src/tasks.c **** 			{
 4365              		.loc 1 4758 4 is_stmt 1 view .LVU1220
4758:FreeRTOS/src/tasks.c **** 			{
 4366              		.loc 1 4758 20 is_stmt 0 view .LVU1221
 4367 0044 124B     		ldr	r3, .L353
 4368 0046 1B68     		ldr	r3, [r3]
 4369 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4370 004c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 193


4758:FreeRTOS/src/tasks.c **** 			{
 4371              		.loc 1 4758 6 view .LVU1222
 4372 004e 022B     		cmp	r3, #2
 4373 0050 16D0     		beq	.L352
4761:FreeRTOS/src/tasks.c **** 			}
 4374              		.loc 1 4761 13 view .LVU1223
 4375 0052 0024     		movs	r4, #0
 4376              	.LVL320:
 4377              	.L348:
4771:FreeRTOS/src/tasks.c **** 		}
 4378              		.loc 1 4771 4 is_stmt 1 view .LVU1224
4771:FreeRTOS/src/tasks.c **** 		}
 4379              		.loc 1 4771 16 is_stmt 0 view .LVU1225
 4380 0054 0E4B     		ldr	r3, .L353
 4381 0056 1B68     		ldr	r3, [r3]
4771:FreeRTOS/src/tasks.c **** 		}
 4382              		.loc 1 4771 32 view .LVU1226
 4383 0058 0022     		movs	r2, #0
 4384 005a 83F85020 		strb	r2, [r3, #80]
4773:FreeRTOS/src/tasks.c **** 
 4385              		.loc 1 4773 3 is_stmt 1 view .LVU1227
 4386 005e FFF7FEFF 		bl	vPortExitCritical
 4387              	.LVL321:
4775:FreeRTOS/src/tasks.c **** 	}
 4388              		.loc 1 4775 3 view .LVU1228
4776:FreeRTOS/src/tasks.c **** 
 4389              		.loc 1 4776 2 is_stmt 0 view .LVU1229
 4390 0062 2046     		mov	r0, r4
 4391 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4392              	.LVL322:
 4393              	.L351:
4722:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4394              		.loc 1 4722 6 is_stmt 1 view .LVU1230
 4395 0066 1146     		mov	r1, r2
 4396 0068 3046     		mov	r0, r6
 4397 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4398              	.LVL323:
4723:FreeRTOS/src/tasks.c **** 
 4399              		.loc 1 4723 35 view .LVU1231
4729:FreeRTOS/src/tasks.c **** 				}
 4400              		.loc 1 4729 6 view .LVU1232
 4401 006e 094B     		ldr	r3, .L353+4
 4402 0070 4FF08052 		mov	r2, #268435456
 4403 0074 1A60     		str	r2, [r3]
4729:FreeRTOS/src/tasks.c **** 				}
 4404              		.loc 1 4729 6 view .LVU1233
 4405              		.syntax unified
 4406              	@ 4729 "FreeRTOS/src/tasks.c" 1
 4407 0076 BFF34F8F 		dsb
 4408              	@ 0 "" 2
4729:FreeRTOS/src/tasks.c **** 				}
 4409              		.loc 1 4729 6 view .LVU1234
 4410              	@ 4729 "FreeRTOS/src/tasks.c" 1
 4411 007a BFF36F8F 		isb
 4412              	@ 0 "" 2
4729:FreeRTOS/src/tasks.c **** 				}
 4413              		.loc 1 4729 28 view .LVU1235
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 194


 4414              		.thumb
 4415              		.syntax unified
 4416 007e D8E7     		b	.L346
 4417              	.L352:
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4418              		.loc 1 4767 5 view .LVU1236
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4419              		.loc 1 4767 35 is_stmt 0 view .LVU1237
 4420 0080 034B     		ldr	r3, .L353
 4421 0082 1A68     		ldr	r2, [r3]
 4422 0084 D36C     		ldr	r3, [r2, #76]
 4423 0086 23EA0505 		bic	r5, r3, r5
 4424              	.LVL324:
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4425              		.loc 1 4767 35 view .LVU1238
 4426 008a D564     		str	r5, [r2, #76]
4768:FreeRTOS/src/tasks.c **** 			}
 4427              		.loc 1 4768 5 is_stmt 1 view .LVU1239
 4428              	.LVL325:
4768:FreeRTOS/src/tasks.c **** 			}
 4429              		.loc 1 4768 13 is_stmt 0 view .LVU1240
 4430 008c 0124     		movs	r4, #1
 4431              	.LVL326:
4768:FreeRTOS/src/tasks.c **** 			}
 4432              		.loc 1 4768 13 view .LVU1241
 4433 008e E1E7     		b	.L348
 4434              	.L354:
 4435              		.align	2
 4436              	.L353:
 4437 0090 00000000 		.word	.LANCHOR9
 4438 0094 04ED00E0 		.word	-536810236
 4439              		.cfi_endproc
 4440              	.LFE48:
 4442              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4443              		.align	1
 4444              		.global	xTaskGenericNotify
 4445              		.syntax unified
 4446              		.thumb
 4447              		.thumb_func
 4448              		.fpu fpv4-sp-d16
 4450              	xTaskGenericNotify:
 4451              	.LVL327:
 4452              	.LFB49:
4784:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4453              		.loc 1 4784 2 is_stmt 1 view -0
 4454              		.cfi_startproc
 4455              		@ args = 0, pretend = 0, frame = 0
 4456              		@ frame_needed = 0, uses_anonymous_args = 0
4784:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4457              		.loc 1 4784 2 is_stmt 0 view .LVU1243
 4458 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4459              	.LCFI43:
 4460              		.cfi_def_cfa_offset 24
 4461              		.cfi_offset 3, -24
 4462              		.cfi_offset 4, -20
 4463              		.cfi_offset 5, -16
 4464              		.cfi_offset 6, -12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 195


 4465              		.cfi_offset 7, -8
 4466              		.cfi_offset 14, -4
 4467 0002 0446     		mov	r4, r0
 4468 0004 0F46     		mov	r7, r1
 4469 0006 1546     		mov	r5, r2
 4470 0008 1E46     		mov	r6, r3
4785:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4471              		.loc 1 4785 2 is_stmt 1 view .LVU1244
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4472              		.loc 1 4786 2 view .LVU1245
 4473              	.LVL328:
4787:FreeRTOS/src/tasks.c **** 
 4474              		.loc 1 4787 2 view .LVU1246
4789:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
 4475              		.loc 1 4789 32 view .LVU1247
4790:FreeRTOS/src/tasks.c **** 
 4476              		.loc 1 4790 3 view .LVU1248
4792:FreeRTOS/src/tasks.c **** 		{
 4477              		.loc 1 4792 3 view .LVU1249
 4478 000a FFF7FEFF 		bl	vPortEnterCritical
 4479              	.LVL329:
4794:FreeRTOS/src/tasks.c **** 			{
 4480              		.loc 1 4794 4 view .LVU1250
4794:FreeRTOS/src/tasks.c **** 			{
 4481              		.loc 1 4794 6 is_stmt 0 view .LVU1251
 4482 000e 0EB1     		cbz	r6, .L356
4796:FreeRTOS/src/tasks.c **** 			}
 4483              		.loc 1 4796 5 is_stmt 1 view .LVU1252
4796:FreeRTOS/src/tasks.c **** 			}
 4484              		.loc 1 4796 42 is_stmt 0 view .LVU1253
 4485 0010 E36C     		ldr	r3, [r4, #76]
4796:FreeRTOS/src/tasks.c **** 			}
 4486              		.loc 1 4796 35 view .LVU1254
 4487 0012 3360     		str	r3, [r6]
 4488              	.L356:
4799:FreeRTOS/src/tasks.c **** 
 4489              		.loc 1 4799 4 is_stmt 1 view .LVU1255
4799:FreeRTOS/src/tasks.c **** 
 4490              		.loc 1 4799 26 is_stmt 0 view .LVU1256
 4491 0014 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4492 0018 DBB2     		uxtb	r3, r3
 4493              	.LVL330:
4801:FreeRTOS/src/tasks.c **** 
 4494              		.loc 1 4801 4 is_stmt 1 view .LVU1257
4801:FreeRTOS/src/tasks.c **** 
 4495              		.loc 1 4801 25 is_stmt 0 view .LVU1258
 4496 001a 0222     		movs	r2, #2
 4497 001c 84F85020 		strb	r2, [r4, #80]
4803:FreeRTOS/src/tasks.c **** 			{
 4498              		.loc 1 4803 4 is_stmt 1 view .LVU1259
 4499 0020 6A1E     		subs	r2, r5, #1
 4500 0022 032A     		cmp	r2, #3
 4501 0024 1AD8     		bhi	.L365
 4502 0026 DFE802F0 		tbb	[pc, r2]
 4503              	.L359:
 4504 002a 02       		.byte	(.L362-.L359)/2
 4505 002b 0C       		.byte	(.L361-.L359)/2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 196


 4506 002c 11       		.byte	(.L360-.L359)/2
 4507 002d 14       		.byte	(.L358-.L359)/2
 4508              		.p2align 1
 4509              	.L362:
4806:FreeRTOS/src/tasks.c **** 					break;
 4510              		.loc 1 4806 6 view .LVU1260
4806:FreeRTOS/src/tasks.c **** 					break;
 4511              		.loc 1 4806 29 is_stmt 0 view .LVU1261
 4512 002e E26C     		ldr	r2, [r4, #76]
 4513 0030 1743     		orrs	r7, r7, r2
 4514              	.LVL331:
4806:FreeRTOS/src/tasks.c **** 					break;
 4515              		.loc 1 4806 29 view .LVU1262
 4516 0032 E764     		str	r7, [r4, #76]
4807:FreeRTOS/src/tasks.c **** 
 4517              		.loc 1 4807 6 is_stmt 1 view .LVU1263
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4518              		.loc 1 4786 13 is_stmt 0 view .LVU1264
 4519 0034 0125     		movs	r5, #1
 4520              	.L357:
 4521              	.LVL332:
4843:FreeRTOS/src/tasks.c **** 
 4522              		.loc 1 4843 22 is_stmt 1 view .LVU1265
4847:FreeRTOS/src/tasks.c **** 			{
 4523              		.loc 1 4847 4 view .LVU1266
4847:FreeRTOS/src/tasks.c **** 			{
 4524              		.loc 1 4847 6 is_stmt 0 view .LVU1267
 4525 0036 012B     		cmp	r3, #1
 4526 0038 14D0     		beq	.L368
 4527              	.LVL333:
 4528              	.L363:
4884:FreeRTOS/src/tasks.c **** 			}
 4529              		.loc 1 4884 29 is_stmt 1 view .LVU1268
4887:FreeRTOS/src/tasks.c **** 
 4530              		.loc 1 4887 3 view .LVU1269
 4531 003a FFF7FEFF 		bl	vPortExitCritical
 4532              	.LVL334:
4889:FreeRTOS/src/tasks.c **** 	}
 4533              		.loc 1 4889 3 view .LVU1270
4890:FreeRTOS/src/tasks.c **** 
 4534              		.loc 1 4890 2 is_stmt 0 view .LVU1271
 4535 003e 2846     		mov	r0, r5
 4536 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4537              	.LVL335:
 4538              	.L361:
4810:FreeRTOS/src/tasks.c **** 					break;
 4539              		.loc 1 4810 6 is_stmt 1 view .LVU1272
4810:FreeRTOS/src/tasks.c **** 					break;
 4540              		.loc 1 4810 13 is_stmt 0 view .LVU1273
 4541 0042 E26C     		ldr	r2, [r4, #76]
4810:FreeRTOS/src/tasks.c **** 					break;
 4542              		.loc 1 4810 32 view .LVU1274
 4543 0044 0132     		adds	r2, r2, #1
 4544 0046 E264     		str	r2, [r4, #76]
4811:FreeRTOS/src/tasks.c **** 
 4545              		.loc 1 4811 6 is_stmt 1 view .LVU1275
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 197


 4546              		.loc 1 4786 13 is_stmt 0 view .LVU1276
 4547 0048 0125     		movs	r5, #1
4811:FreeRTOS/src/tasks.c **** 
 4548              		.loc 1 4811 6 view .LVU1277
 4549 004a F4E7     		b	.L357
 4550              	.L360:
4814:FreeRTOS/src/tasks.c **** 					break;
 4551              		.loc 1 4814 6 is_stmt 1 view .LVU1278
4814:FreeRTOS/src/tasks.c **** 					break;
 4552              		.loc 1 4814 29 is_stmt 0 view .LVU1279
 4553 004c E764     		str	r7, [r4, #76]
4815:FreeRTOS/src/tasks.c **** 
 4554              		.loc 1 4815 6 is_stmt 1 view .LVU1280
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4555              		.loc 1 4786 13 is_stmt 0 view .LVU1281
 4556 004e 0125     		movs	r5, #1
4815:FreeRTOS/src/tasks.c **** 
 4557              		.loc 1 4815 6 view .LVU1282
 4558 0050 F1E7     		b	.L357
 4559              	.L358:
4818:FreeRTOS/src/tasks.c **** 					{
 4560              		.loc 1 4818 6 is_stmt 1 view .LVU1283
4818:FreeRTOS/src/tasks.c **** 					{
 4561              		.loc 1 4818 8 is_stmt 0 view .LVU1284
 4562 0052 022B     		cmp	r3, #2
 4563 0054 04D0     		beq	.L366
4820:FreeRTOS/src/tasks.c **** 					}
 4564              		.loc 1 4820 7 is_stmt 1 view .LVU1285
4820:FreeRTOS/src/tasks.c **** 					}
 4565              		.loc 1 4820 30 is_stmt 0 view .LVU1286
 4566 0056 E764     		str	r7, [r4, #76]
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4567              		.loc 1 4786 13 view .LVU1287
 4568 0058 0125     		movs	r5, #1
 4569 005a ECE7     		b	.L357
 4570              	.L365:
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4571              		.loc 1 4786 13 view .LVU1288
 4572 005c 0125     		movs	r5, #1
 4573 005e EAE7     		b	.L357
 4574              	.L366:
4825:FreeRTOS/src/tasks.c **** 					}
 4575              		.loc 1 4825 15 view .LVU1289
 4576 0060 0025     		movs	r5, #0
 4577 0062 E8E7     		b	.L357
 4578              	.LVL336:
 4579              	.L368:
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4580              		.loc 1 4849 5 is_stmt 1 view .LVU1290
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4581              		.loc 1 4849 14 is_stmt 0 view .LVU1291
 4582 0064 261D     		adds	r6, r4, #4
 4583              	.LVL337:
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4584              		.loc 1 4849 14 view .LVU1292
 4585 0066 3046     		mov	r0, r6
 4586 0068 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 198


 4587              	.LVL338:
4850:FreeRTOS/src/tasks.c **** 
 4588              		.loc 1 4850 5 is_stmt 1 view .LVU1293
4850:FreeRTOS/src/tasks.c **** 
 4589              		.loc 1 4850 5 view .LVU1294
 4590 006c E36A     		ldr	r3, [r4, #44]
 4591 006e 0E4A     		ldr	r2, .L369
 4592 0070 1268     		ldr	r2, [r2]
 4593 0072 9342     		cmp	r3, r2
 4594 0074 01D9     		bls	.L364
4850:FreeRTOS/src/tasks.c **** 
 4595              		.loc 1 4850 5 discriminator 1 view .LVU1295
 4596 0076 0C4A     		ldr	r2, .L369
 4597 0078 1360     		str	r3, [r2]
 4598              	.L364:
4850:FreeRTOS/src/tasks.c **** 
 4599              		.loc 1 4850 5 discriminator 3 view .LVU1296
4850:FreeRTOS/src/tasks.c **** 
 4600              		.loc 1 4850 5 discriminator 3 view .LVU1297
 4601 007a 03EB8303 		add	r3, r3, r3, lsl #2
 4602 007e 9A00     		lsls	r2, r3, #2
 4603 0080 3146     		mov	r1, r6
 4604 0082 0A48     		ldr	r0, .L369+4
 4605 0084 1044     		add	r0, r0, r2
 4606 0086 FFF7FEFF 		bl	vListInsertEnd
 4607              	.LVL339:
4850:FreeRTOS/src/tasks.c **** 
 4608              		.loc 1 4850 35 discriminator 3 view .LVU1298
4853:FreeRTOS/src/tasks.c **** 
 4609              		.loc 1 4853 82 discriminator 3 view .LVU1299
4871:FreeRTOS/src/tasks.c **** 				{
 4610              		.loc 1 4871 5 discriminator 3 view .LVU1300
4871:FreeRTOS/src/tasks.c **** 				{
 4611              		.loc 1 4871 14 is_stmt 0 discriminator 3 view .LVU1301
 4612 008a E26A     		ldr	r2, [r4, #44]
4871:FreeRTOS/src/tasks.c **** 				{
 4613              		.loc 1 4871 41 discriminator 3 view .LVU1302
 4614 008c 084B     		ldr	r3, .L369+8
 4615 008e 1B68     		ldr	r3, [r3]
 4616 0090 DB6A     		ldr	r3, [r3, #44]
4871:FreeRTOS/src/tasks.c **** 				{
 4617              		.loc 1 4871 7 discriminator 3 view .LVU1303
 4618 0092 9A42     		cmp	r2, r3
 4619 0094 D1D9     		bls	.L363
4875:FreeRTOS/src/tasks.c **** 				}
 4620              		.loc 1 4875 6 is_stmt 1 view .LVU1304
 4621 0096 074B     		ldr	r3, .L369+12
 4622 0098 4FF08052 		mov	r2, #268435456
 4623 009c 1A60     		str	r2, [r3]
4875:FreeRTOS/src/tasks.c **** 				}
 4624              		.loc 1 4875 6 view .LVU1305
 4625              		.syntax unified
 4626              	@ 4875 "FreeRTOS/src/tasks.c" 1
 4627 009e BFF34F8F 		dsb
 4628              	@ 0 "" 2
4875:FreeRTOS/src/tasks.c **** 				}
 4629              		.loc 1 4875 6 view .LVU1306
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 199


 4630              	@ 4875 "FreeRTOS/src/tasks.c" 1
 4631 00a2 BFF36F8F 		isb
 4632              	@ 0 "" 2
4875:FreeRTOS/src/tasks.c **** 				}
 4633              		.loc 1 4875 37 view .LVU1307
 4634              		.thumb
 4635              		.syntax unified
 4636 00a6 C8E7     		b	.L363
 4637              	.L370:
 4638              		.align	2
 4639              	.L369:
 4640 00a8 00000000 		.word	.LANCHOR12
 4641 00ac 00000000 		.word	.LANCHOR2
 4642 00b0 00000000 		.word	.LANCHOR9
 4643 00b4 04ED00E0 		.word	-536810236
 4644              		.cfi_endproc
 4645              	.LFE49:
 4647              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4648              		.align	1
 4649              		.global	xTaskGenericNotifyFromISR
 4650              		.syntax unified
 4651              		.thumb
 4652              		.thumb_func
 4653              		.fpu fpv4-sp-d16
 4655              	xTaskGenericNotifyFromISR:
 4656              	.LVL340:
 4657              	.LFB50:
4898:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4658              		.loc 1 4898 2 view -0
 4659              		.cfi_startproc
 4660              		@ args = 4, pretend = 0, frame = 0
 4661              		@ frame_needed = 0, uses_anonymous_args = 0
4898:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4662              		.loc 1 4898 2 is_stmt 0 view .LVU1309
 4663 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4664              	.LCFI44:
 4665              		.cfi_def_cfa_offset 24
 4666              		.cfi_offset 3, -24
 4667              		.cfi_offset 4, -20
 4668              		.cfi_offset 5, -16
 4669              		.cfi_offset 6, -12
 4670              		.cfi_offset 7, -8
 4671              		.cfi_offset 14, -4
4899:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4672              		.loc 1 4899 2 is_stmt 1 view .LVU1310
4900:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4673              		.loc 1 4900 2 view .LVU1311
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4674              		.loc 1 4901 2 view .LVU1312
 4675              	.LVL341:
4902:FreeRTOS/src/tasks.c **** 
 4676              		.loc 1 4902 2 view .LVU1313
4904:FreeRTOS/src/tasks.c **** 
 4677              		.loc 1 4904 32 view .LVU1314
4922:FreeRTOS/src/tasks.c **** 
 4678              		.loc 1 4922 45 view .LVU1315
4924:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 200


 4679              		.loc 1 4924 3 view .LVU1316
4926:FreeRTOS/src/tasks.c **** 		{
 4680              		.loc 1 4926 3 view .LVU1317
 4681              	.LBB51:
 4682              	.LBI51:
 207:FreeRTOS/inc/portmacro.h **** {
 4683              		.loc 2 207 34 view .LVU1318
 4684              	.LBB52:
 209:FreeRTOS/inc/portmacro.h **** 
 4685              		.loc 2 209 1 view .LVU1319
 211:FreeRTOS/inc/portmacro.h **** 	(
 4686              		.loc 2 211 2 view .LVU1320
 4687              		.syntax unified
 4688              	@ 211 "FreeRTOS/inc/portmacro.h" 1
 4689 0002 EFF31184 			mrs r4, basepri											
 4690 0006 4FF0BF05 		mov r5, #191												
 4691 000a 85F31188 		msr basepri, r5											
 4692 000e BFF36F8F 		isb														
 4693 0012 BFF34F8F 		dsb														
 4694              	
 4695              	@ 0 "" 2
 4696              	.LVL342:
 223:FreeRTOS/inc/portmacro.h **** }
 4697              		.loc 2 223 2 view .LVU1321
 223:FreeRTOS/inc/portmacro.h **** }
 4698              		.loc 2 223 2 is_stmt 0 view .LVU1322
 4699              		.thumb
 4700              		.syntax unified
 4701              	.LBE52:
 4702              	.LBE51:
4928:FreeRTOS/src/tasks.c **** 			{
 4703              		.loc 1 4928 4 is_stmt 1 view .LVU1323
4928:FreeRTOS/src/tasks.c **** 			{
 4704              		.loc 1 4928 6 is_stmt 0 view .LVU1324
 4705 0016 0BB1     		cbz	r3, .L372
4930:FreeRTOS/src/tasks.c **** 			}
 4706              		.loc 1 4930 5 is_stmt 1 view .LVU1325
4930:FreeRTOS/src/tasks.c **** 			}
 4707              		.loc 1 4930 42 is_stmt 0 view .LVU1326
 4708 0018 C56C     		ldr	r5, [r0, #76]
4930:FreeRTOS/src/tasks.c **** 			}
 4709              		.loc 1 4930 35 view .LVU1327
 4710 001a 1D60     		str	r5, [r3]
 4711              	.L372:
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4712              		.loc 1 4933 4 is_stmt 1 view .LVU1328
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4713              		.loc 1 4933 26 is_stmt 0 view .LVU1329
 4714 001c 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 4715              	.LVL343:
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4716              		.loc 1 4933 26 view .LVU1330
 4717 0020 DBB2     		uxtb	r3, r3
 4718              	.LVL344:
4934:FreeRTOS/src/tasks.c **** 
 4719              		.loc 1 4934 4 is_stmt 1 view .LVU1331
4934:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 201


 4720              		.loc 1 4934 25 is_stmt 0 view .LVU1332
 4721 0022 0225     		movs	r5, #2
 4722 0024 80F85050 		strb	r5, [r0, #80]
4936:FreeRTOS/src/tasks.c **** 			{
 4723              		.loc 1 4936 4 is_stmt 1 view .LVU1333
 4724 0028 013A     		subs	r2, r2, #1
 4725              	.LVL345:
4936:FreeRTOS/src/tasks.c **** 			{
 4726              		.loc 1 4936 4 is_stmt 0 view .LVU1334
 4727 002a 032A     		cmp	r2, #3
 4728 002c 1AD8     		bhi	.L384
 4729 002e DFE802F0 		tbb	[pc, r2]
 4730              	.L375:
 4731 0032 02       		.byte	(.L378-.L375)/2
 4732 0033 0C       		.byte	(.L377-.L375)/2
 4733 0034 11       		.byte	(.L376-.L375)/2
 4734 0035 14       		.byte	(.L374-.L375)/2
 4735              		.p2align 1
 4736              	.L378:
4939:FreeRTOS/src/tasks.c **** 					break;
 4737              		.loc 1 4939 6 is_stmt 1 view .LVU1335
4939:FreeRTOS/src/tasks.c **** 					break;
 4738              		.loc 1 4939 29 is_stmt 0 view .LVU1336
 4739 0036 C26C     		ldr	r2, [r0, #76]
 4740 0038 1143     		orrs	r1, r1, r2
 4741              	.LVL346:
4939:FreeRTOS/src/tasks.c **** 					break;
 4742              		.loc 1 4939 29 view .LVU1337
 4743 003a C164     		str	r1, [r0, #76]
4940:FreeRTOS/src/tasks.c **** 
 4744              		.loc 1 4940 6 is_stmt 1 view .LVU1338
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4745              		.loc 1 4901 13 is_stmt 0 view .LVU1339
 4746 003c 0125     		movs	r5, #1
 4747              	.L373:
 4748              	.LVL347:
4975:FreeRTOS/src/tasks.c **** 
 4749              		.loc 1 4975 31 is_stmt 1 view .LVU1340
4979:FreeRTOS/src/tasks.c **** 			{
 4750              		.loc 1 4979 4 view .LVU1341
4979:FreeRTOS/src/tasks.c **** 			{
 4751              		.loc 1 4979 6 is_stmt 0 view .LVU1342
 4752 003e 012B     		cmp	r3, #1
 4753 0040 14D0     		beq	.L387
 4754              	.LVL348:
 4755              	.L379:
5012:FreeRTOS/src/tasks.c **** 				}
 4756              		.loc 1 5012 30 is_stmt 1 view .LVU1343
5016:FreeRTOS/src/tasks.c **** 
 4757              		.loc 1 5016 3 view .LVU1344
 4758              	.LBB53:
 4759              	.LBI53:
 227:FreeRTOS/inc/portmacro.h **** {
 4760              		.loc 2 227 30 view .LVU1345
 4761              	.LBB54:
 4762              		.loc 2 229 2 view .LVU1346
 4763              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 202


 4764              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 4765 0042 84F31188 			msr basepri, r4	
 4766              	@ 0 "" 2
 4767              	.LVL349:
 4768              		.loc 2 229 2 is_stmt 0 view .LVU1347
 4769              		.thumb
 4770              		.syntax unified
 4771              	.LBE54:
 4772              	.LBE53:
5018:FreeRTOS/src/tasks.c **** 	}
 4773              		.loc 1 5018 3 is_stmt 1 view .LVU1348
5019:FreeRTOS/src/tasks.c **** 
 4774              		.loc 1 5019 2 is_stmt 0 view .LVU1349
 4775 0046 2846     		mov	r0, r5
 4776 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4777              	.LVL350:
 4778              	.L377:
4943:FreeRTOS/src/tasks.c **** 					break;
 4779              		.loc 1 4943 6 is_stmt 1 view .LVU1350
4943:FreeRTOS/src/tasks.c **** 					break;
 4780              		.loc 1 4943 13 is_stmt 0 view .LVU1351
 4781 004a C26C     		ldr	r2, [r0, #76]
4943:FreeRTOS/src/tasks.c **** 					break;
 4782              		.loc 1 4943 32 view .LVU1352
 4783 004c 0132     		adds	r2, r2, #1
 4784 004e C264     		str	r2, [r0, #76]
4944:FreeRTOS/src/tasks.c **** 
 4785              		.loc 1 4944 6 is_stmt 1 view .LVU1353
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4786              		.loc 1 4901 13 is_stmt 0 view .LVU1354
 4787 0050 0125     		movs	r5, #1
4944:FreeRTOS/src/tasks.c **** 
 4788              		.loc 1 4944 6 view .LVU1355
 4789 0052 F4E7     		b	.L373
 4790              	.L376:
4947:FreeRTOS/src/tasks.c **** 					break;
 4791              		.loc 1 4947 6 is_stmt 1 view .LVU1356
4947:FreeRTOS/src/tasks.c **** 					break;
 4792              		.loc 1 4947 29 is_stmt 0 view .LVU1357
 4793 0054 C164     		str	r1, [r0, #76]
4948:FreeRTOS/src/tasks.c **** 
 4794              		.loc 1 4948 6 is_stmt 1 view .LVU1358
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4795              		.loc 1 4901 13 is_stmt 0 view .LVU1359
 4796 0056 0125     		movs	r5, #1
4948:FreeRTOS/src/tasks.c **** 
 4797              		.loc 1 4948 6 view .LVU1360
 4798 0058 F1E7     		b	.L373
 4799              	.L374:
4951:FreeRTOS/src/tasks.c **** 					{
 4800              		.loc 1 4951 6 is_stmt 1 view .LVU1361
4951:FreeRTOS/src/tasks.c **** 					{
 4801              		.loc 1 4951 8 is_stmt 0 view .LVU1362
 4802 005a 022B     		cmp	r3, #2
 4803 005c 04D0     		beq	.L385
4953:FreeRTOS/src/tasks.c **** 					}
 4804              		.loc 1 4953 7 is_stmt 1 view .LVU1363
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 203


4953:FreeRTOS/src/tasks.c **** 					}
 4805              		.loc 1 4953 30 is_stmt 0 view .LVU1364
 4806 005e C164     		str	r1, [r0, #76]
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4807              		.loc 1 4901 13 view .LVU1365
 4808 0060 0125     		movs	r5, #1
 4809 0062 ECE7     		b	.L373
 4810              	.L384:
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4811              		.loc 1 4901 13 view .LVU1366
 4812 0064 0125     		movs	r5, #1
 4813 0066 EAE7     		b	.L373
 4814              	.L385:
4958:FreeRTOS/src/tasks.c **** 					}
 4815              		.loc 1 4958 15 view .LVU1367
 4816 0068 0025     		movs	r5, #0
 4817 006a E8E7     		b	.L373
 4818              	.LVL351:
 4819              	.L387:
4958:FreeRTOS/src/tasks.c **** 					}
 4820              		.loc 1 4958 15 view .LVU1368
 4821 006c 0646     		mov	r6, r0
4982:FreeRTOS/src/tasks.c **** 
 4822              		.loc 1 4982 82 is_stmt 1 view .LVU1369
4984:FreeRTOS/src/tasks.c **** 				{
 4823              		.loc 1 4984 5 view .LVU1370
4984:FreeRTOS/src/tasks.c **** 				{
 4824              		.loc 1 4984 30 is_stmt 0 view .LVU1371
 4825 006e 154B     		ldr	r3, .L388
 4826              	.LVL352:
4984:FreeRTOS/src/tasks.c **** 				{
 4827              		.loc 1 4984 30 view .LVU1372
 4828 0070 1B68     		ldr	r3, [r3]
4984:FreeRTOS/src/tasks.c **** 				{
 4829              		.loc 1 4984 7 view .LVU1373
 4830 0072 0BBB     		cbnz	r3, .L380
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4831              		.loc 1 4986 6 is_stmt 1 view .LVU1374
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4832              		.loc 1 4986 15 is_stmt 0 view .LVU1375
 4833 0074 071D     		adds	r7, r0, #4
 4834 0076 3846     		mov	r0, r7
 4835              	.LVL353:
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4836              		.loc 1 4986 15 view .LVU1376
 4837 0078 FFF7FEFF 		bl	uxListRemove
 4838              	.LVL354:
4987:FreeRTOS/src/tasks.c **** 				}
 4839              		.loc 1 4987 6 is_stmt 1 view .LVU1377
4987:FreeRTOS/src/tasks.c **** 				}
 4840              		.loc 1 4987 6 view .LVU1378
 4841 007c F36A     		ldr	r3, [r6, #44]
 4842 007e 124A     		ldr	r2, .L388+4
 4843 0080 1268     		ldr	r2, [r2]
 4844 0082 9342     		cmp	r3, r2
 4845 0084 01D9     		bls	.L381
4987:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 204


 4846              		.loc 1 4987 6 discriminator 1 view .LVU1379
 4847 0086 104A     		ldr	r2, .L388+4
 4848 0088 1360     		str	r3, [r2]
 4849              	.L381:
4987:FreeRTOS/src/tasks.c **** 				}
 4850              		.loc 1 4987 6 discriminator 3 view .LVU1380
4987:FreeRTOS/src/tasks.c **** 				}
 4851              		.loc 1 4987 6 discriminator 3 view .LVU1381
 4852 008a 03EB8303 		add	r3, r3, r3, lsl #2
 4853 008e 9A00     		lsls	r2, r3, #2
 4854 0090 3946     		mov	r1, r7
 4855 0092 0E48     		ldr	r0, .L388+8
 4856 0094 1044     		add	r0, r0, r2
 4857 0096 FFF7FEFF 		bl	vListInsertEnd
 4858              	.LVL355:
4987:FreeRTOS/src/tasks.c **** 				}
 4859              		.loc 1 4987 36 discriminator 3 view .LVU1382
 4860              	.L382:
4996:FreeRTOS/src/tasks.c **** 				{
 4861              		.loc 1 4996 5 view .LVU1383
4996:FreeRTOS/src/tasks.c **** 				{
 4862              		.loc 1 4996 14 is_stmt 0 view .LVU1384
 4863 009a F26A     		ldr	r2, [r6, #44]
4996:FreeRTOS/src/tasks.c **** 				{
 4864              		.loc 1 4996 41 view .LVU1385
 4865 009c 0C4B     		ldr	r3, .L388+12
 4866 009e 1B68     		ldr	r3, [r3]
 4867 00a0 DB6A     		ldr	r3, [r3, #44]
4996:FreeRTOS/src/tasks.c **** 				{
 4868              		.loc 1 4996 7 view .LVU1386
 4869 00a2 9A42     		cmp	r2, r3
 4870 00a4 CDD9     		bls	.L379
5000:FreeRTOS/src/tasks.c **** 					{
 4871              		.loc 1 5000 6 is_stmt 1 view .LVU1387
5000:FreeRTOS/src/tasks.c **** 					{
 4872              		.loc 1 5000 8 is_stmt 0 view .LVU1388
 4873 00a6 069B     		ldr	r3, [sp, #24]
 4874 00a8 13B1     		cbz	r3, .L383
5002:FreeRTOS/src/tasks.c **** 					}
 4875              		.loc 1 5002 7 is_stmt 1 view .LVU1389
5002:FreeRTOS/src/tasks.c **** 					}
 4876              		.loc 1 5002 34 is_stmt 0 view .LVU1390
 4877 00aa 0123     		movs	r3, #1
 4878 00ac 069A     		ldr	r2, [sp, #24]
 4879 00ae 1360     		str	r3, [r2]
 4880              	.L383:
5008:FreeRTOS/src/tasks.c **** 				}
 4881              		.loc 1 5008 6 is_stmt 1 view .LVU1391
5008:FreeRTOS/src/tasks.c **** 				}
 4882              		.loc 1 5008 20 is_stmt 0 view .LVU1392
 4883 00b0 084B     		ldr	r3, .L388+16
 4884 00b2 0122     		movs	r2, #1
 4885 00b4 1A60     		str	r2, [r3]
 4886 00b6 C4E7     		b	.L379
 4887              	.LVL356:
 4888              	.L380:
4993:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 205


 4889              		.loc 1 4993 6 is_stmt 1 view .LVU1393
 4890 00b8 00F11801 		add	r1, r0, #24
 4891 00bc 0648     		ldr	r0, .L388+20
 4892              	.LVL357:
4993:FreeRTOS/src/tasks.c **** 				}
 4893              		.loc 1 4993 6 is_stmt 0 view .LVU1394
 4894 00be FFF7FEFF 		bl	vListInsertEnd
 4895              	.LVL358:
 4896 00c2 EAE7     		b	.L382
 4897              	.L389:
 4898              		.align	2
 4899              	.L388:
 4900 00c4 00000000 		.word	.LANCHOR14
 4901 00c8 00000000 		.word	.LANCHOR12
 4902 00cc 00000000 		.word	.LANCHOR2
 4903 00d0 00000000 		.word	.LANCHOR9
 4904 00d4 00000000 		.word	.LANCHOR17
 4905 00d8 00000000 		.word	.LANCHOR1
 4906              		.cfi_endproc
 4907              	.LFE50:
 4909              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4910              		.align	1
 4911              		.global	vTaskNotifyGiveFromISR
 4912              		.syntax unified
 4913              		.thumb
 4914              		.thumb_func
 4915              		.fpu fpv4-sp-d16
 4917              	vTaskNotifyGiveFromISR:
 4918              	.LVL359:
 4919              	.LFB51:
5027:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4920              		.loc 1 5027 2 is_stmt 1 view -0
 4921              		.cfi_startproc
 4922              		@ args = 0, pretend = 0, frame = 0
 4923              		@ frame_needed = 0, uses_anonymous_args = 0
5027:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4924              		.loc 1 5027 2 is_stmt 0 view .LVU1396
 4925 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4926              	.LCFI45:
 4927              		.cfi_def_cfa_offset 24
 4928              		.cfi_offset 3, -24
 4929              		.cfi_offset 4, -20
 4930              		.cfi_offset 5, -16
 4931              		.cfi_offset 6, -12
 4932              		.cfi_offset 7, -8
 4933              		.cfi_offset 14, -4
5028:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4934              		.loc 1 5028 2 is_stmt 1 view .LVU1397
5029:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4935              		.loc 1 5029 2 view .LVU1398
5030:FreeRTOS/src/tasks.c **** 
 4936              		.loc 1 5030 2 view .LVU1399
5032:FreeRTOS/src/tasks.c **** 
 4937              		.loc 1 5032 32 view .LVU1400
5050:FreeRTOS/src/tasks.c **** 
 4938              		.loc 1 5050 45 view .LVU1401
5052:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 206


 4939              		.loc 1 5052 3 view .LVU1402
 4940              	.LVL360:
5054:FreeRTOS/src/tasks.c **** 		{
 4941              		.loc 1 5054 3 view .LVU1403
 4942              	.LBB55:
 4943              	.LBI55:
 207:FreeRTOS/inc/portmacro.h **** {
 4944              		.loc 2 207 34 view .LVU1404
 4945              	.LBB56:
 209:FreeRTOS/inc/portmacro.h **** 
 4946              		.loc 2 209 1 view .LVU1405
 211:FreeRTOS/inc/portmacro.h **** 	(
 4947              		.loc 2 211 2 view .LVU1406
 4948              		.syntax unified
 4949              	@ 211 "FreeRTOS/inc/portmacro.h" 1
 4950 0002 EFF31185 			mrs r5, basepri											
 4951 0006 4FF0BF03 		mov r3, #191												
 4952 000a 83F31188 		msr basepri, r3											
 4953 000e BFF36F8F 		isb														
 4954 0012 BFF34F8F 		dsb														
 4955              	
 4956              	@ 0 "" 2
 4957              	.LVL361:
 223:FreeRTOS/inc/portmacro.h **** }
 4958              		.loc 2 223 2 view .LVU1407
 223:FreeRTOS/inc/portmacro.h **** }
 4959              		.loc 2 223 2 is_stmt 0 view .LVU1408
 4960              		.thumb
 4961              		.syntax unified
 4962              	.LBE56:
 4963              	.LBE55:
5056:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4964              		.loc 1 5056 4 is_stmt 1 view .LVU1409
5056:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4965              		.loc 1 5056 26 is_stmt 0 view .LVU1410
 4966 0016 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 4967 001a DBB2     		uxtb	r3, r3
 4968              	.LVL362:
5057:FreeRTOS/src/tasks.c **** 
 4969              		.loc 1 5057 4 is_stmt 1 view .LVU1411
5057:FreeRTOS/src/tasks.c **** 
 4970              		.loc 1 5057 25 is_stmt 0 view .LVU1412
 4971 001c 0222     		movs	r2, #2
 4972 001e 80F85020 		strb	r2, [r0, #80]
5061:FreeRTOS/src/tasks.c **** 
 4973              		.loc 1 5061 4 is_stmt 1 view .LVU1413
5061:FreeRTOS/src/tasks.c **** 
 4974              		.loc 1 5061 11 is_stmt 0 view .LVU1414
 4975 0022 C26C     		ldr	r2, [r0, #76]
5061:FreeRTOS/src/tasks.c **** 
 4976              		.loc 1 5061 30 view .LVU1415
 4977 0024 0132     		adds	r2, r2, #1
 4978 0026 C264     		str	r2, [r0, #76]
5063:FreeRTOS/src/tasks.c **** 
 4979              		.loc 1 5063 36 is_stmt 1 view .LVU1416
5067:FreeRTOS/src/tasks.c **** 			{
 4980              		.loc 1 5067 4 view .LVU1417
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 207


5067:FreeRTOS/src/tasks.c **** 			{
 4981              		.loc 1 5067 6 is_stmt 0 view .LVU1418
 4982 0028 012B     		cmp	r3, #1
 4983 002a 02D0     		beq	.L397
 4984              	.LVL363:
 4985              	.L391:
5100:FreeRTOS/src/tasks.c **** 				}
 4986              		.loc 1 5100 30 is_stmt 1 view .LVU1419
5104:FreeRTOS/src/tasks.c **** 	}
 4987              		.loc 1 5104 3 view .LVU1420
 4988              	.LBB57:
 4989              	.LBI57:
 227:FreeRTOS/inc/portmacro.h **** {
 4990              		.loc 2 227 30 view .LVU1421
 4991              	.LBB58:
 4992              		.loc 2 229 2 view .LVU1422
 4993              		.syntax unified
 4994              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 4995 002c 85F31188 			msr basepri, r5	
 4996              	@ 0 "" 2
 4997              	.LVL364:
 4998              		.loc 2 229 2 is_stmt 0 view .LVU1423
 4999              		.thumb
 5000              		.syntax unified
 5001              	.LBE58:
 5002              	.LBE57:
5105:FreeRTOS/src/tasks.c **** 
 5003              		.loc 1 5105 2 view .LVU1424
 5004 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5005              	.LVL365:
 5006              	.L397:
5105:FreeRTOS/src/tasks.c **** 
 5007              		.loc 1 5105 2 view .LVU1425
 5008 0032 0E46     		mov	r6, r1
 5009 0034 0446     		mov	r4, r0
5070:FreeRTOS/src/tasks.c **** 
 5010              		.loc 1 5070 82 is_stmt 1 view .LVU1426
5072:FreeRTOS/src/tasks.c **** 				{
 5011              		.loc 1 5072 5 view .LVU1427
5072:FreeRTOS/src/tasks.c **** 				{
 5012              		.loc 1 5072 30 is_stmt 0 view .LVU1428
 5013 0036 144B     		ldr	r3, .L398
 5014              	.LVL366:
5072:FreeRTOS/src/tasks.c **** 				{
 5015              		.loc 1 5072 30 view .LVU1429
 5016 0038 1B68     		ldr	r3, [r3]
5072:FreeRTOS/src/tasks.c **** 				{
 5017              		.loc 1 5072 7 view .LVU1430
 5018 003a FBB9     		cbnz	r3, .L392
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5019              		.loc 1 5074 6 is_stmt 1 view .LVU1431
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5020              		.loc 1 5074 15 is_stmt 0 view .LVU1432
 5021 003c 071D     		adds	r7, r0, #4
 5022 003e 3846     		mov	r0, r7
 5023              	.LVL367:
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 208


 5024              		.loc 1 5074 15 view .LVU1433
 5025 0040 FFF7FEFF 		bl	uxListRemove
 5026              	.LVL368:
5075:FreeRTOS/src/tasks.c **** 				}
 5027              		.loc 1 5075 6 is_stmt 1 view .LVU1434
5075:FreeRTOS/src/tasks.c **** 				}
 5028              		.loc 1 5075 6 view .LVU1435
 5029 0044 E36A     		ldr	r3, [r4, #44]
 5030 0046 114A     		ldr	r2, .L398+4
 5031 0048 1268     		ldr	r2, [r2]
 5032 004a 9342     		cmp	r3, r2
 5033 004c 01D9     		bls	.L393
5075:FreeRTOS/src/tasks.c **** 				}
 5034              		.loc 1 5075 6 discriminator 1 view .LVU1436
 5035 004e 0F4A     		ldr	r2, .L398+4
 5036 0050 1360     		str	r3, [r2]
 5037              	.L393:
5075:FreeRTOS/src/tasks.c **** 				}
 5038              		.loc 1 5075 6 discriminator 3 view .LVU1437
5075:FreeRTOS/src/tasks.c **** 				}
 5039              		.loc 1 5075 6 discriminator 3 view .LVU1438
 5040 0052 03EB8303 		add	r3, r3, r3, lsl #2
 5041 0056 9A00     		lsls	r2, r3, #2
 5042 0058 3946     		mov	r1, r7
 5043 005a 0D48     		ldr	r0, .L398+8
 5044 005c 1044     		add	r0, r0, r2
 5045 005e FFF7FEFF 		bl	vListInsertEnd
 5046              	.LVL369:
5075:FreeRTOS/src/tasks.c **** 				}
 5047              		.loc 1 5075 36 discriminator 3 view .LVU1439
 5048              	.L394:
5084:FreeRTOS/src/tasks.c **** 				{
 5049              		.loc 1 5084 5 view .LVU1440
5084:FreeRTOS/src/tasks.c **** 				{
 5050              		.loc 1 5084 14 is_stmt 0 view .LVU1441
 5051 0062 E26A     		ldr	r2, [r4, #44]
5084:FreeRTOS/src/tasks.c **** 				{
 5052              		.loc 1 5084 41 view .LVU1442
 5053 0064 0B4B     		ldr	r3, .L398+12
 5054 0066 1B68     		ldr	r3, [r3]
 5055 0068 DB6A     		ldr	r3, [r3, #44]
5084:FreeRTOS/src/tasks.c **** 				{
 5056              		.loc 1 5084 7 view .LVU1443
 5057 006a 9A42     		cmp	r2, r3
 5058 006c DED9     		bls	.L391
5088:FreeRTOS/src/tasks.c **** 					{
 5059              		.loc 1 5088 6 is_stmt 1 view .LVU1444
5088:FreeRTOS/src/tasks.c **** 					{
 5060              		.loc 1 5088 8 is_stmt 0 view .LVU1445
 5061 006e 0EB1     		cbz	r6, .L395
5090:FreeRTOS/src/tasks.c **** 					}
 5062              		.loc 1 5090 7 is_stmt 1 view .LVU1446
5090:FreeRTOS/src/tasks.c **** 					}
 5063              		.loc 1 5090 34 is_stmt 0 view .LVU1447
 5064 0070 0123     		movs	r3, #1
 5065 0072 3360     		str	r3, [r6]
 5066              	.L395:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 209


5096:FreeRTOS/src/tasks.c **** 				}
 5067              		.loc 1 5096 6 is_stmt 1 view .LVU1448
5096:FreeRTOS/src/tasks.c **** 				}
 5068              		.loc 1 5096 20 is_stmt 0 view .LVU1449
 5069 0074 084B     		ldr	r3, .L398+16
 5070 0076 0122     		movs	r2, #1
 5071 0078 1A60     		str	r2, [r3]
 5072 007a D7E7     		b	.L391
 5073              	.LVL370:
 5074              	.L392:
5081:FreeRTOS/src/tasks.c **** 				}
 5075              		.loc 1 5081 6 is_stmt 1 view .LVU1450
 5076 007c 00F11801 		add	r1, r0, #24
 5077              	.LVL371:
5081:FreeRTOS/src/tasks.c **** 				}
 5078              		.loc 1 5081 6 is_stmt 0 view .LVU1451
 5079 0080 0648     		ldr	r0, .L398+20
 5080              	.LVL372:
5081:FreeRTOS/src/tasks.c **** 				}
 5081              		.loc 1 5081 6 view .LVU1452
 5082 0082 FFF7FEFF 		bl	vListInsertEnd
 5083              	.LVL373:
 5084 0086 ECE7     		b	.L394
 5085              	.L399:
 5086              		.align	2
 5087              	.L398:
 5088 0088 00000000 		.word	.LANCHOR14
 5089 008c 00000000 		.word	.LANCHOR12
 5090 0090 00000000 		.word	.LANCHOR2
 5091 0094 00000000 		.word	.LANCHOR9
 5092 0098 00000000 		.word	.LANCHOR17
 5093 009c 00000000 		.word	.LANCHOR1
 5094              		.cfi_endproc
 5095              	.LFE51:
 5097              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5098              		.align	1
 5099              		.global	xTaskNotifyStateClear
 5100              		.syntax unified
 5101              		.thumb
 5102              		.thumb_func
 5103              		.fpu fpv4-sp-d16
 5105              	xTaskNotifyStateClear:
 5106              	.LVL374:
 5107              	.LFB52:
5113:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5108              		.loc 1 5113 2 is_stmt 1 view -0
 5109              		.cfi_startproc
 5110              		@ args = 0, pretend = 0, frame = 0
 5111              		@ frame_needed = 0, uses_anonymous_args = 0
5113:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5112              		.loc 1 5113 2 is_stmt 0 view .LVU1454
 5113 0000 10B5     		push	{r4, lr}
 5114              	.LCFI46:
 5115              		.cfi_def_cfa_offset 8
 5116              		.cfi_offset 4, -8
 5117              		.cfi_offset 14, -4
5114:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 210


 5118              		.loc 1 5114 2 is_stmt 1 view .LVU1455
5115:FreeRTOS/src/tasks.c **** 
 5119              		.loc 1 5115 2 view .LVU1456
5119:FreeRTOS/src/tasks.c **** 
 5120              		.loc 1 5119 3 view .LVU1457
5119:FreeRTOS/src/tasks.c **** 
 5121              		.loc 1 5119 11 is_stmt 0 view .LVU1458
 5122 0002 0446     		mov	r4, r0
 5123 0004 58B1     		cbz	r0, .L405
 5124              	.LVL375:
 5125              	.L401:
5121:FreeRTOS/src/tasks.c **** 		{
 5126              		.loc 1 5121 3 is_stmt 1 discriminator 4 view .LVU1459
 5127 0006 FFF7FEFF 		bl	vPortEnterCritical
 5128              	.LVL376:
5123:FreeRTOS/src/tasks.c **** 			{
 5129              		.loc 1 5123 4 discriminator 4 view .LVU1460
5123:FreeRTOS/src/tasks.c **** 			{
 5130              		.loc 1 5123 13 is_stmt 0 discriminator 4 view .LVU1461
 5131 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5132 000e DBB2     		uxtb	r3, r3
5123:FreeRTOS/src/tasks.c **** 			{
 5133              		.loc 1 5123 6 discriminator 4 view .LVU1462
 5134 0010 022B     		cmp	r3, #2
 5135 0012 07D0     		beq	.L406
5130:FreeRTOS/src/tasks.c **** 			}
 5136              		.loc 1 5130 13 view .LVU1463
 5137 0014 0024     		movs	r4, #0
 5138              	.LVL377:
 5139              	.L402:
5133:FreeRTOS/src/tasks.c **** 
 5140              		.loc 1 5133 3 is_stmt 1 view .LVU1464
 5141 0016 FFF7FEFF 		bl	vPortExitCritical
 5142              	.LVL378:
5135:FreeRTOS/src/tasks.c **** 	}
 5143              		.loc 1 5135 3 view .LVU1465
5136:FreeRTOS/src/tasks.c **** 
 5144              		.loc 1 5136 2 is_stmt 0 view .LVU1466
 5145 001a 2046     		mov	r0, r4
 5146 001c 10BD     		pop	{r4, pc}
 5147              	.LVL379:
 5148              	.L405:
5119:FreeRTOS/src/tasks.c **** 
 5149              		.loc 1 5119 11 discriminator 1 view .LVU1467
 5150 001e 044B     		ldr	r3, .L407
 5151 0020 1C68     		ldr	r4, [r3]
 5152              	.LVL380:
5119:FreeRTOS/src/tasks.c **** 
 5153              		.loc 1 5119 11 discriminator 1 view .LVU1468
 5154 0022 F0E7     		b	.L401
 5155              	.LVL381:
 5156              	.L406:
5125:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 5157              		.loc 1 5125 5 is_stmt 1 view .LVU1469
5125:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 5158              		.loc 1 5125 26 is_stmt 0 view .LVU1470
 5159 0024 0023     		movs	r3, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 211


 5160 0026 84F85030 		strb	r3, [r4, #80]
5126:FreeRTOS/src/tasks.c **** 			}
 5161              		.loc 1 5126 5 is_stmt 1 view .LVU1471
 5162              	.LVL382:
5126:FreeRTOS/src/tasks.c **** 			}
 5163              		.loc 1 5126 13 is_stmt 0 view .LVU1472
 5164 002a 0124     		movs	r4, #1
 5165              	.LVL383:
5126:FreeRTOS/src/tasks.c **** 			}
 5166              		.loc 1 5126 13 view .LVU1473
 5167 002c F3E7     		b	.L402
 5168              	.L408:
 5169 002e 00BF     		.align	2
 5170              	.L407:
 5171 0030 00000000 		.word	.LANCHOR9
 5172              		.cfi_endproc
 5173              	.LFE52:
 5175              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 5176              		.align	1
 5177              		.global	ulTaskNotifyValueClear
 5178              		.syntax unified
 5179              		.thumb
 5180              		.thumb_func
 5181              		.fpu fpv4-sp-d16
 5183              	ulTaskNotifyValueClear:
 5184              	.LVL384:
 5185              	.LFB53:
5144:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5186              		.loc 1 5144 2 is_stmt 1 view -0
 5187              		.cfi_startproc
 5188              		@ args = 0, pretend = 0, frame = 0
 5189              		@ frame_needed = 0, uses_anonymous_args = 0
5144:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5190              		.loc 1 5144 2 is_stmt 0 view .LVU1475
 5191 0000 70B5     		push	{r4, r5, r6, lr}
 5192              	.LCFI47:
 5193              		.cfi_def_cfa_offset 16
 5194              		.cfi_offset 4, -16
 5195              		.cfi_offset 5, -12
 5196              		.cfi_offset 6, -8
 5197              		.cfi_offset 14, -4
 5198 0002 0E46     		mov	r6, r1
5145:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 5199              		.loc 1 5145 2 is_stmt 1 view .LVU1476
5146:FreeRTOS/src/tasks.c **** 
 5200              		.loc 1 5146 2 view .LVU1477
5150:FreeRTOS/src/tasks.c **** 
 5201              		.loc 1 5150 3 view .LVU1478
5150:FreeRTOS/src/tasks.c **** 
 5202              		.loc 1 5150 11 is_stmt 0 view .LVU1479
 5203 0004 0446     		mov	r4, r0
 5204 0006 60B1     		cbz	r0, .L412
 5205              	.LVL385:
 5206              	.L410:
5152:FreeRTOS/src/tasks.c **** 		{
 5207              		.loc 1 5152 3 is_stmt 1 discriminator 4 view .LVU1480
 5208 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 212


 5209              	.LVL386:
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5210              		.loc 1 5156 4 discriminator 4 view .LVU1481
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5211              		.loc 1 5156 27 is_stmt 0 discriminator 4 view .LVU1482
 5212 000c 064B     		ldr	r3, .L413
 5213 000e 1B68     		ldr	r3, [r3]
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5214              		.loc 1 5156 13 discriminator 4 view .LVU1483
 5215 0010 DD6C     		ldr	r5, [r3, #76]
 5216              	.LVL387:
5157:FreeRTOS/src/tasks.c **** 		}
 5217              		.loc 1 5157 4 is_stmt 1 discriminator 4 view .LVU1484
5157:FreeRTOS/src/tasks.c **** 		}
 5218              		.loc 1 5157 27 is_stmt 0 discriminator 4 view .LVU1485
 5219 0012 E16C     		ldr	r1, [r4, #76]
 5220 0014 21EA0601 		bic	r1, r1, r6
 5221 0018 E164     		str	r1, [r4, #76]
5159:FreeRTOS/src/tasks.c **** 
 5222              		.loc 1 5159 3 is_stmt 1 discriminator 4 view .LVU1486
 5223 001a FFF7FEFF 		bl	vPortExitCritical
 5224              	.LVL388:
5161:FreeRTOS/src/tasks.c **** 	}
 5225              		.loc 1 5161 3 discriminator 4 view .LVU1487
5162:FreeRTOS/src/tasks.c **** 
 5226              		.loc 1 5162 2 is_stmt 0 discriminator 4 view .LVU1488
 5227 001e 2846     		mov	r0, r5
 5228 0020 70BD     		pop	{r4, r5, r6, pc}
 5229              	.LVL389:
 5230              	.L412:
5150:FreeRTOS/src/tasks.c **** 
 5231              		.loc 1 5150 11 discriminator 1 view .LVU1489
 5232 0022 014B     		ldr	r3, .L413
 5233 0024 1C68     		ldr	r4, [r3]
 5234              	.LVL390:
5150:FreeRTOS/src/tasks.c **** 
 5235              		.loc 1 5150 11 discriminator 1 view .LVU1490
 5236 0026 EFE7     		b	.L410
 5237              	.L414:
 5238              		.align	2
 5239              	.L413:
 5240 0028 00000000 		.word	.LANCHOR9
 5241              		.cfi_endproc
 5242              	.LFE53:
 5244              		.global	pxCurrentTCB
 5245              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5246              		.align	2
 5247              		.set	.LANCHOR9,. + 0
 5250              	pxCurrentTCB:
 5251 0000 00000000 		.space	4
 5252              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5253              		.align	2
 5254              		.set	.LANCHOR3,. + 0
 5257              	pxDelayedTaskList:
 5258 0000 00000000 		.space	4
 5259              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5260              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 213


 5261              		.set	.LANCHOR7,. + 0
 5264              	pxOverflowDelayedTaskList:
 5265 0000 00000000 		.space	4
 5266              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5267              		.align	2
 5268              		.set	.LANCHOR2,. + 0
 5271              	pxReadyTasksLists:
 5272 0000 00000000 		.space	100
 5272      00000000 
 5272      00000000 
 5272      00000000 
 5272      00000000 
 5273              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5274              		.align	2
 5275              		.set	.LANCHOR8,. + 0
 5278              	uxCurrentNumberOfTasks:
 5279 0000 00000000 		.space	4
 5280              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5281              		.align	2
 5282              		.set	.LANCHOR14,. + 0
 5285              	uxSchedulerSuspended:
 5286 0000 00000000 		.space	4
 5287              		.section	.bss.uxTaskNumber,"aw",%nobits
 5288              		.align	2
 5289              		.set	.LANCHOR11,. + 0
 5292              	uxTaskNumber:
 5293 0000 00000000 		.space	4
 5294              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5295              		.align	2
 5296              		.set	.LANCHOR12,. + 0
 5299              	uxTopReadyPriority:
 5300 0000 00000000 		.space	4
 5301              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5302              		.align	2
 5303              		.set	.LANCHOR5,. + 0
 5306              	xDelayedTaskList1:
 5307 0000 00000000 		.space	20
 5307      00000000 
 5307      00000000 
 5307      00000000 
 5307      00000000 
 5308              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5309              		.align	2
 5310              		.set	.LANCHOR6,. + 0
 5313              	xDelayedTaskList2:
 5314 0000 00000000 		.space	20
 5314      00000000 
 5314      00000000 
 5314      00000000 
 5314      00000000 
 5315              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5316              		.align	2
 5317              		.set	.LANCHOR15,. + 0
 5320              	xIdleTaskHandle:
 5321 0000 00000000 		.space	4
 5322              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5323              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 214


 5324              		.set	.LANCHOR4,. + 0
 5327              	xNextTaskUnblockTime:
 5328 0000 00000000 		.space	4
 5329              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5330              		.align	2
 5331              		.set	.LANCHOR16,. + 0
 5334              	xNumOfOverflows:
 5335 0000 00000000 		.space	4
 5336              		.section	.bss.xPendedTicks,"aw",%nobits
 5337              		.align	2
 5338              		.set	.LANCHOR18,. + 0
 5341              	xPendedTicks:
 5342 0000 00000000 		.space	4
 5343              		.section	.bss.xPendingReadyList,"aw",%nobits
 5344              		.align	2
 5345              		.set	.LANCHOR1,. + 0
 5348              	xPendingReadyList:
 5349 0000 00000000 		.space	20
 5349      00000000 
 5349      00000000 
 5349      00000000 
 5349      00000000 
 5350              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5351              		.align	2
 5352              		.set	.LANCHOR10,. + 0
 5355              	xSchedulerRunning:
 5356 0000 00000000 		.space	4
 5357              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5358              		.align	2
 5359              		.set	.LANCHOR0,. + 0
 5362              	xSuspendedTaskList:
 5363 0000 00000000 		.space	20
 5363      00000000 
 5363      00000000 
 5363      00000000 
 5363      00000000 
 5364              		.section	.bss.xTickCount,"aw",%nobits
 5365              		.align	2
 5366              		.set	.LANCHOR13,. + 0
 5369              	xTickCount:
 5370 0000 00000000 		.space	4
 5371              		.section	.bss.xYieldPending,"aw",%nobits
 5372              		.align	2
 5373              		.set	.LANCHOR17,. + 0
 5376              	xYieldPending:
 5377 0000 00000000 		.space	4
 5378              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5379              		.align	2
 5380              	.LC0:
 5381 0000 49444C45 		.ascii	"IDLE\000"
 5381      00
 5382              		.text
 5383              	.Letext0:
 5384              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 5385              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 5386              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 5387              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 215


 5388              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 5389              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 5390              		.file 9 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 5391              		.file 10 "FreeRTOS/inc/projdefs.h"
 5392              		.file 11 "FreeRTOS/inc/list.h"
 5393              		.file 12 "FreeRTOS/inc/task.h"
 5394              		.file 13 "FreeRTOS/inc/portable.h"
 5395              		.file 14 "FreeRTOS/inc/timers.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 216


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:25     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:85     .text.prvTaskIsTaskSuspended:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:91     .text.prvIdleTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:97     .text.prvIdleTask:0000000000000000 prvIdleTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:138    .text.prvIdleTask:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:144    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:150    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:193    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:199    .text.prvInitialiseNewTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:205    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:359    .text.prvInitialiseTaskLists:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:365    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:434    .text.prvInitialiseTaskLists:0000000000000040 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:445    .text.prvAddNewTaskToReadyList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:451    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:591    .text.prvAddNewTaskToReadyList:000000000000008c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:602    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:608    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:715    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:725    .text.xTaskCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:732    .text.xTaskCreate:0000000000000000 xTaskCreate
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:854    .text.uxTaskPriorityGet:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:861    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:907    .text.uxTaskPriorityGet:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:912    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:919    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:993    .text.uxTaskPriorityGetFromISR:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:998    .text.vTaskPrioritySet:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1005   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1219   .text.vTaskPrioritySet:00000000000000b4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1227   .text.vTaskResume:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1234   .text.vTaskResume:0000000000000000 vTaskResume
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1341   .text.vTaskResume:0000000000000064 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1349   .text.xTaskResumeFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1356   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1504   .text.xTaskResumeFromISR:0000000000000078 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1513   .text.vTaskStartScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1520   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1622   .text.vTaskStartScheduler:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1632   .text.vTaskEndScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1639   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1682   .text.vTaskEndScheduler:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1687   .text.vTaskSuspendAll:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1694   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1713   .text.vTaskSuspendAll:000000000000000c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1718   .text.xTaskGetTickCount:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1725   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1746   .text.xTaskGetTickCount:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1751   .text.xTaskGetTickCountFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1758   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1782   .text.xTaskGetTickCountFromISR:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1787   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1794   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1810   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 217


C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1815   .text.pcTaskGetName:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1822   .text.pcTaskGetName:0000000000000000 pcTaskGetName
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1853   .text.pcTaskGetName:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1858   .text.xTaskIncrementTick:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:1865   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2089   .text.xTaskIncrementTick:00000000000000c0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2104   .text.xTaskResumeAll:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2111   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2324   .text.xTaskResumeAll:00000000000000c0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2337   .text.vTaskDelayUntil:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2344   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2478   .text.vTaskDelayUntil:0000000000000058 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2485   .text.vTaskDelay:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2492   .text.vTaskDelay:0000000000000000 vTaskDelay
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2560   .text.vTaskDelay:0000000000000030 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2565   .text.xTaskCatchUpTicks:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2572   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2610   .text.xTaskCatchUpTicks:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2615   .text.vTaskSwitchContext:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2622   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2734   .text.vTaskSwitchContext:0000000000000074 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2745   .text.vTaskSuspend:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2752   .text.vTaskSuspend:0000000000000000 vTaskSuspend
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2909   .text.vTaskSuspend:0000000000000094 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2918   .text.vTaskPlaceOnEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2925   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2961   .text.vTaskPlaceOnEventList:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2966   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:2973   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3017   .text.vTaskPlaceOnUnorderedEventList:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3022   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3029   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3076   .text.vTaskPlaceOnEventListRestricted:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3081   .text.xTaskRemoveFromEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3088   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3193   .text.xTaskRemoveFromEventList:0000000000000060 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3203   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3210   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3291   .text.vTaskRemoveFromUnorderedEventList:0000000000000048 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3299   .text.vTaskSetTimeOutState:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3306   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3344   .text.vTaskSetTimeOutState:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3350   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3357   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3380   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3386   .text.xTaskCheckForTimeOut:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3393   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3509   .text.xTaskCheckForTimeOut:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3516   .text.vTaskMissedYield:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3523   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3540   .text.vTaskMissedYield:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3545   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3552   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3571   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3576   .text.xTaskGetSchedulerState:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3583   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3621   .text.xTaskGetSchedulerState:0000000000000018 $d
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 218


C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3627   .text.xTaskPriorityInherit:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3634   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3792   .text.xTaskPriorityInherit:000000000000008c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3799   .text.xTaskPriorityDisinherit:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3806   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3924   .text.xTaskPriorityDisinherit:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3930   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:3937   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4065   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000064 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4071   .text.uxTaskResetEventItemValue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4078   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4105   .text.uxTaskResetEventItemValue:0000000000000014 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4110   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4117   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4148   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4153   .text.ulTaskNotifyTake:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4160   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4282   .text.ulTaskNotifyTake:0000000000000070 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4288   .text.xTaskNotifyWait:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4295   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4437   .text.xTaskNotifyWait:0000000000000090 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4443   .text.xTaskGenericNotify:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4450   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4504   .text.xTaskGenericNotify:000000000000002a $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4508   .text.xTaskGenericNotify:000000000000002e $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4640   .text.xTaskGenericNotify:00000000000000a8 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4648   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4655   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4731   .text.xTaskGenericNotifyFromISR:0000000000000032 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4735   .text.xTaskGenericNotifyFromISR:0000000000000036 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4900   .text.xTaskGenericNotifyFromISR:00000000000000c4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4910   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:4917   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5088   .text.vTaskNotifyGiveFromISR:0000000000000088 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5098   .text.xTaskNotifyStateClear:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5105   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5171   .text.xTaskNotifyStateClear:0000000000000030 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5176   .text.ulTaskNotifyValueClear:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5183   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5240   .text.ulTaskNotifyValueClear:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5250   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5246   .bss.pxCurrentTCB:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5253   .bss.pxDelayedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5257   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5260   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5264   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5267   .bss.pxReadyTasksLists:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5271   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5274   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5278   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5281   .bss.uxSchedulerSuspended:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5285   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5288   .bss.uxTaskNumber:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5292   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5295   .bss.uxTopReadyPriority:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5299   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5302   .bss.xDelayedTaskList1:0000000000000000 $d
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s 			page 219


C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5306   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5309   .bss.xDelayedTaskList2:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5313   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5316   .bss.xIdleTaskHandle:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5320   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5323   .bss.xNextTaskUnblockTime:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5327   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5330   .bss.xNumOfOverflows:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5334   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5337   .bss.xPendedTicks:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5341   .bss.xPendedTicks:0000000000000000 xPendedTicks
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5344   .bss.xPendingReadyList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5348   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5351   .bss.xSchedulerRunning:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5355   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5358   .bss.xSuspendedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5362   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5365   .bss.xTickCount:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5369   .bss.xTickCount:0000000000000000 xTickCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5372   .bss.xYieldPending:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5376   .bss.xYieldPending:0000000000000000 xYieldPending
C:\Users\HARTO_~1\AppData\Local\Temp\ccUucZn4.s:5379   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortFree
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
