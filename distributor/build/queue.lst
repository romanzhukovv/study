ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvGetDisinheritPriorityAfterTimeout:
  26              	.LVL0:
  27              	.LFB24:
  28              		.file 1 "FreeRTOS/src/queue.c"
   1:FreeRTOS/src/queue.c **** /*
   2:FreeRTOS/src/queue.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/queue.c ****  *
   5:FreeRTOS/src/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/queue.c ****  * subject to the following conditions:
  11:FreeRTOS/src/queue.c ****  *
  12:FreeRTOS/src/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/queue.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/queue.c ****  *
  15:FreeRTOS/src/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/queue.c ****  *
  22:FreeRTOS/src/queue.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/queue.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/queue.c ****  *
  25:FreeRTOS/src/queue.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/queue.c ****  */
  27:FreeRTOS/src/queue.c **** 
  28:FreeRTOS/src/queue.c **** #include <stdlib.h>
  29:FreeRTOS/src/queue.c **** #include <string.h>
  30:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 2


  31:FreeRTOS/src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/src/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:FreeRTOS/src/queue.c **** task.h is included from an application file. */
  34:FreeRTOS/src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/src/queue.c **** 
  36:FreeRTOS/src/queue.c **** #include "FreeRTOS.h"
  37:FreeRTOS/src/queue.c **** #include "task.h"
  38:FreeRTOS/src/queue.c **** #include "queue.h"
  39:FreeRTOS/src/queue.c **** 
  40:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:FreeRTOS/src/queue.c **** 	#include "croutine.h"
  42:FreeRTOS/src/queue.c **** #endif
  43:FreeRTOS/src/queue.c **** 
  44:FreeRTOS/src/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS/src/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/src/queue.c **** for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/src/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS/src/queue.c **** 
  50:FreeRTOS/src/queue.c **** 
  51:FreeRTOS/src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS/src/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:FreeRTOS/src/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:FreeRTOS/src/queue.c **** 
  55:FreeRTOS/src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:FreeRTOS/src/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:FreeRTOS/src/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:FreeRTOS/src/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:FreeRTOS/src/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:FreeRTOS/src/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:FreeRTOS/src/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:FreeRTOS/src/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:FreeRTOS/src/queue.c **** being used for. */
  64:FreeRTOS/src/queue.c **** #define uxQueueType						pcHead
  65:FreeRTOS/src/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:FreeRTOS/src/queue.c **** 
  67:FreeRTOS/src/queue.c **** typedef struct QueuePointers
  68:FreeRTOS/src/queue.c **** {
  69:FreeRTOS/src/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:FreeRTOS/src/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:FreeRTOS/src/queue.c **** } QueuePointers_t;
  72:FreeRTOS/src/queue.c **** 
  73:FreeRTOS/src/queue.c **** typedef struct SemaphoreData
  74:FreeRTOS/src/queue.c **** {
  75:FreeRTOS/src/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:FreeRTOS/src/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:FreeRTOS/src/queue.c **** } SemaphoreData_t;
  78:FreeRTOS/src/queue.c **** 
  79:FreeRTOS/src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:FreeRTOS/src/queue.c **** zero. */
  81:FreeRTOS/src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:FreeRTOS/src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:FreeRTOS/src/queue.c **** 
  84:FreeRTOS/src/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:FreeRTOS/src/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:FreeRTOS/src/queue.c **** 	performed just because a higher priority task has been woken. */
  87:FreeRTOS/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 3


  88:FreeRTOS/src/queue.c **** #else
  89:FreeRTOS/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:FreeRTOS/src/queue.c **** #endif
  91:FreeRTOS/src/queue.c **** 
  92:FreeRTOS/src/queue.c **** /*
  93:FreeRTOS/src/queue.c ****  * Definition of the queue used by the scheduler.
  94:FreeRTOS/src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:FreeRTOS/src/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:FreeRTOS/src/queue.c ****  */
  97:FreeRTOS/src/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:FreeRTOS/src/queue.c **** {
  99:FreeRTOS/src/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:FreeRTOS/src/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:FreeRTOS/src/queue.c **** 
 102:FreeRTOS/src/queue.c **** 	union
 103:FreeRTOS/src/queue.c **** 	{
 104:FreeRTOS/src/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:FreeRTOS/src/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:FreeRTOS/src/queue.c **** 	} u;
 107:FreeRTOS/src/queue.c **** 
 108:FreeRTOS/src/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:FreeRTOS/src/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:FreeRTOS/src/queue.c **** 
 111:FreeRTOS/src/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:FreeRTOS/src/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:FreeRTOS/src/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:FreeRTOS/src/queue.c **** 
 115:FreeRTOS/src/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:FreeRTOS/src/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:FreeRTOS/src/queue.c **** 
 118:FreeRTOS/src/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:FreeRTOS/src/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:FreeRTOS/src/queue.c **** 	#endif
 121:FreeRTOS/src/queue.c **** 
 122:FreeRTOS/src/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:FreeRTOS/src/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:FreeRTOS/src/queue.c **** 	#endif
 125:FreeRTOS/src/queue.c **** 
 126:FreeRTOS/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:FreeRTOS/src/queue.c **** 		UBaseType_t uxQueueNumber;
 128:FreeRTOS/src/queue.c **** 		uint8_t ucQueueType;
 129:FreeRTOS/src/queue.c **** 	#endif
 130:FreeRTOS/src/queue.c **** 
 131:FreeRTOS/src/queue.c **** } xQUEUE;
 132:FreeRTOS/src/queue.c **** 
 133:FreeRTOS/src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:FreeRTOS/src/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:FreeRTOS/src/queue.c **** typedef xQUEUE Queue_t;
 136:FreeRTOS/src/queue.c **** 
 137:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 138:FreeRTOS/src/queue.c **** 
 139:FreeRTOS/src/queue.c **** /*
 140:FreeRTOS/src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:FreeRTOS/src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:FreeRTOS/src/queue.c ****  */
 143:FreeRTOS/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 4


 145:FreeRTOS/src/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:FreeRTOS/src/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:FreeRTOS/src/queue.c **** 	more user friendly. */
 148:FreeRTOS/src/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:FreeRTOS/src/queue.c **** 	{
 150:FreeRTOS/src/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:FreeRTOS/src/queue.c **** 		QueueHandle_t xHandle;
 152:FreeRTOS/src/queue.c **** 	} xQueueRegistryItem;
 153:FreeRTOS/src/queue.c **** 
 154:FreeRTOS/src/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:FreeRTOS/src/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:FreeRTOS/src/queue.c **** 	debuggers. */
 157:FreeRTOS/src/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:FreeRTOS/src/queue.c **** 
 159:FreeRTOS/src/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:FreeRTOS/src/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:FreeRTOS/src/queue.c **** 	array position being vacant. */
 162:FreeRTOS/src/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:FreeRTOS/src/queue.c **** 
 164:FreeRTOS/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:FreeRTOS/src/queue.c **** 
 166:FreeRTOS/src/queue.c **** /*
 167:FreeRTOS/src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:FreeRTOS/src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:FreeRTOS/src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:FreeRTOS/src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:FreeRTOS/src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:FreeRTOS/src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:FreeRTOS/src/queue.c ****  */
 174:FreeRTOS/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:FreeRTOS/src/queue.c **** 
 176:FreeRTOS/src/queue.c **** /*
 177:FreeRTOS/src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:FreeRTOS/src/queue.c ****  *
 179:FreeRTOS/src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:FreeRTOS/src/queue.c ****  */
 181:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:FreeRTOS/src/queue.c **** 
 183:FreeRTOS/src/queue.c **** /*
 184:FreeRTOS/src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:FreeRTOS/src/queue.c ****  *
 186:FreeRTOS/src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:FreeRTOS/src/queue.c ****  */
 188:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:FreeRTOS/src/queue.c **** 
 190:FreeRTOS/src/queue.c **** /*
 191:FreeRTOS/src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:FreeRTOS/src/queue.c ****  * back of the queue.
 193:FreeRTOS/src/queue.c ****  */
 194:FreeRTOS/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:FreeRTOS/src/queue.c **** 
 196:FreeRTOS/src/queue.c **** /*
 197:FreeRTOS/src/queue.c ****  * Copies an item out of a queue.
 198:FreeRTOS/src/queue.c ****  */
 199:FreeRTOS/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:FreeRTOS/src/queue.c **** 
 201:FreeRTOS/src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 5


 202:FreeRTOS/src/queue.c **** 	/*
 203:FreeRTOS/src/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:FreeRTOS/src/queue.c **** 	 * the queue set that the queue contains data.
 205:FreeRTOS/src/queue.c **** 	 */
 206:FreeRTOS/src/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 207:FreeRTOS/src/queue.c **** #endif
 208:FreeRTOS/src/queue.c **** 
 209:FreeRTOS/src/queue.c **** /*
 210:FreeRTOS/src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:FreeRTOS/src/queue.c ****  * dynamically to fill in the structure's members.
 212:FreeRTOS/src/queue.c ****  */
 213:FreeRTOS/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:FreeRTOS/src/queue.c **** 
 215:FreeRTOS/src/queue.c **** /*
 216:FreeRTOS/src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:FreeRTOS/src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:FreeRTOS/src/queue.c ****  * as a mutex.
 219:FreeRTOS/src/queue.c ****  */
 220:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:FreeRTOS/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:FreeRTOS/src/queue.c **** #endif
 223:FreeRTOS/src/queue.c **** 
 224:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:FreeRTOS/src/queue.c **** 	/*
 226:FreeRTOS/src/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:FreeRTOS/src/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:FreeRTOS/src/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:FreeRTOS/src/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:FreeRTOS/src/queue.c **** 	 * that priority.
 231:FreeRTOS/src/queue.c **** 	 */
 232:FreeRTOS/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:FreeRTOS/src/queue.c **** #endif
 234:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 235:FreeRTOS/src/queue.c **** 
 236:FreeRTOS/src/queue.c **** /*
 237:FreeRTOS/src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:FreeRTOS/src/queue.c ****  * accessing the queue event lists.
 239:FreeRTOS/src/queue.c ****  */
 240:FreeRTOS/src/queue.c **** #define prvLockQueue( pxQueue )								\
 241:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();									\
 242:FreeRTOS/src/queue.c **** 	{														\
 243:FreeRTOS/src/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:FreeRTOS/src/queue.c **** 		{													\
 245:FreeRTOS/src/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:FreeRTOS/src/queue.c **** 		}													\
 247:FreeRTOS/src/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:FreeRTOS/src/queue.c **** 		{													\
 249:FreeRTOS/src/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:FreeRTOS/src/queue.c **** 		}													\
 251:FreeRTOS/src/queue.c **** 	}														\
 252:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL()
 253:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 254:FreeRTOS/src/queue.c **** 
 255:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:FreeRTOS/src/queue.c **** {
 257:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 258:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 6


 259:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 260:FreeRTOS/src/queue.c **** 
 261:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
 262:FreeRTOS/src/queue.c **** 	{
 263:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:FreeRTOS/src/queue.c **** 
 270:FreeRTOS/src/queue.c **** 		if( xNewQueue == pdFALSE )
 271:FreeRTOS/src/queue.c **** 		{
 272:FreeRTOS/src/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:FreeRTOS/src/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:FreeRTOS/src/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:FreeRTOS/src/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:FreeRTOS/src/queue.c **** 			it will be possible to write to it. */
 277:FreeRTOS/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:FreeRTOS/src/queue.c **** 			{
 279:FreeRTOS/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:FreeRTOS/src/queue.c **** 				{
 281:FreeRTOS/src/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:FreeRTOS/src/queue.c **** 				}
 283:FreeRTOS/src/queue.c **** 				else
 284:FreeRTOS/src/queue.c **** 				{
 285:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:FreeRTOS/src/queue.c **** 				}
 287:FreeRTOS/src/queue.c **** 			}
 288:FreeRTOS/src/queue.c **** 			else
 289:FreeRTOS/src/queue.c **** 			{
 290:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:FreeRTOS/src/queue.c **** 			}
 292:FreeRTOS/src/queue.c **** 		}
 293:FreeRTOS/src/queue.c **** 		else
 294:FreeRTOS/src/queue.c **** 		{
 295:FreeRTOS/src/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:FreeRTOS/src/queue.c **** 		}
 299:FreeRTOS/src/queue.c **** 	}
 300:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
 301:FreeRTOS/src/queue.c **** 
 302:FreeRTOS/src/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:FreeRTOS/src/queue.c **** 	versions. */
 304:FreeRTOS/src/queue.c **** 	return pdPASS;
 305:FreeRTOS/src/queue.c **** }
 306:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 307:FreeRTOS/src/queue.c **** 
 308:FreeRTOS/src/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:FreeRTOS/src/queue.c **** 
 310:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:FreeRTOS/src/queue.c **** 	{
 312:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 313:FreeRTOS/src/queue.c **** 
 314:FreeRTOS/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 7


 316:FreeRTOS/src/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:FreeRTOS/src/queue.c **** 		supplied. */
 318:FreeRTOS/src/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:FreeRTOS/src/queue.c **** 
 320:FreeRTOS/src/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:FreeRTOS/src/queue.c **** 		should not be provided if the item size is 0. */
 322:FreeRTOS/src/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:FreeRTOS/src/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:FreeRTOS/src/queue.c **** 
 325:FreeRTOS/src/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:FreeRTOS/src/queue.c **** 		{
 327:FreeRTOS/src/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:FreeRTOS/src/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:FreeRTOS/src/queue.c **** 			the real queue and semaphore structures. */
 330:FreeRTOS/src/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:FreeRTOS/src/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:FreeRTOS/src/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:FreeRTOS/src/queue.c **** 		}
 334:FreeRTOS/src/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:FreeRTOS/src/queue.c **** 
 336:FreeRTOS/src/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:FreeRTOS/src/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:FreeRTOS/src/queue.c **** 		but is already set. */
 339:FreeRTOS/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:FreeRTOS/src/queue.c **** 
 341:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 342:FreeRTOS/src/queue.c **** 		{
 343:FreeRTOS/src/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:FreeRTOS/src/queue.c **** 			{
 345:FreeRTOS/src/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:FreeRTOS/src/queue.c **** 				note this queue was allocated statically in case the queue is
 347:FreeRTOS/src/queue.c **** 				later deleted. */
 348:FreeRTOS/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:FreeRTOS/src/queue.c **** 			}
 350:FreeRTOS/src/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:FreeRTOS/src/queue.c **** 
 352:FreeRTOS/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:FreeRTOS/src/queue.c **** 		}
 354:FreeRTOS/src/queue.c **** 		else
 355:FreeRTOS/src/queue.c **** 		{
 356:FreeRTOS/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:FreeRTOS/src/queue.c **** 		}
 359:FreeRTOS/src/queue.c **** 
 360:FreeRTOS/src/queue.c **** 		return pxNewQueue;
 361:FreeRTOS/src/queue.c **** 	}
 362:FreeRTOS/src/queue.c **** 
 363:FreeRTOS/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 365:FreeRTOS/src/queue.c **** 
 366:FreeRTOS/src/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:FreeRTOS/src/queue.c **** 
 368:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:FreeRTOS/src/queue.c **** 	{
 370:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 371:FreeRTOS/src/queue.c **** 	size_t xQueueSizeInBytes;
 372:FreeRTOS/src/queue.c **** 	uint8_t *pucQueueStorage;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 8


 373:FreeRTOS/src/queue.c **** 
 374:FreeRTOS/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:FreeRTOS/src/queue.c **** 
 376:FreeRTOS/src/queue.c **** 		/* Allocate enough space to hold the maximum number of items that
 377:FreeRTOS/src/queue.c **** 		can be in the queue at any time.  It is valid for uxItemSize to be
 378:FreeRTOS/src/queue.c **** 		zero in the case the queue is used as a semaphore. */
 379:FreeRTOS/src/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as th
 380:FreeRTOS/src/queue.c **** 
 381:FreeRTOS/src/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 382:FreeRTOS/src/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 383:FreeRTOS/src/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 384:FreeRTOS/src/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 385:FreeRTOS/src/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 386:FreeRTOS/src/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 387:FreeRTOS/src/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 388:FreeRTOS/src/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 389:FreeRTOS/src/queue.c **** 		two bytes). */
 390:FreeRTOS/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 391:FreeRTOS/src/queue.c **** 
 392:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 393:FreeRTOS/src/queue.c **** 		{
 394:FreeRTOS/src/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 395:FreeRTOS/src/queue.c **** 			storage area. */
 396:FreeRTOS/src/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 397:FreeRTOS/src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 398:FreeRTOS/src/queue.c **** 
 399:FreeRTOS/src/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 400:FreeRTOS/src/queue.c **** 			{
 401:FreeRTOS/src/queue.c **** 				/* Queues can be created either statically or dynamically, so
 402:FreeRTOS/src/queue.c **** 				note this task was created dynamically in case it is later
 403:FreeRTOS/src/queue.c **** 				deleted. */
 404:FreeRTOS/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 405:FreeRTOS/src/queue.c **** 			}
 406:FreeRTOS/src/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 407:FreeRTOS/src/queue.c **** 
 408:FreeRTOS/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 409:FreeRTOS/src/queue.c **** 		}
 410:FreeRTOS/src/queue.c **** 		else
 411:FreeRTOS/src/queue.c **** 		{
 412:FreeRTOS/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 413:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 414:FreeRTOS/src/queue.c **** 		}
 415:FreeRTOS/src/queue.c **** 
 416:FreeRTOS/src/queue.c **** 		return pxNewQueue;
 417:FreeRTOS/src/queue.c **** 	}
 418:FreeRTOS/src/queue.c **** 
 419:FreeRTOS/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 420:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 421:FreeRTOS/src/queue.c **** 
 422:FreeRTOS/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 423:FreeRTOS/src/queue.c **** {
 424:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 425:FreeRTOS/src/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 426:FreeRTOS/src/queue.c **** 	( void ) ucQueueType;
 427:FreeRTOS/src/queue.c **** 
 428:FreeRTOS/src/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 429:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 9


 430:FreeRTOS/src/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 431:FreeRTOS/src/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 432:FreeRTOS/src/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 433:FreeRTOS/src/queue.c **** 		value that is known to be within the memory map. */
 434:FreeRTOS/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 435:FreeRTOS/src/queue.c **** 	}
 436:FreeRTOS/src/queue.c **** 	else
 437:FreeRTOS/src/queue.c **** 	{
 438:FreeRTOS/src/queue.c **** 		/* Set the head to the start of the queue storage area. */
 439:FreeRTOS/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 440:FreeRTOS/src/queue.c **** 	}
 441:FreeRTOS/src/queue.c **** 
 442:FreeRTOS/src/queue.c **** 	/* Initialise the queue members as described where the queue type is
 443:FreeRTOS/src/queue.c **** 	defined. */
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 445:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 446:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 447:FreeRTOS/src/queue.c **** 
 448:FreeRTOS/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 449:FreeRTOS/src/queue.c **** 	{
 450:FreeRTOS/src/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 451:FreeRTOS/src/queue.c **** 	}
 452:FreeRTOS/src/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 453:FreeRTOS/src/queue.c **** 
 454:FreeRTOS/src/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 455:FreeRTOS/src/queue.c **** 	{
 456:FreeRTOS/src/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 457:FreeRTOS/src/queue.c **** 	}
 458:FreeRTOS/src/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 459:FreeRTOS/src/queue.c **** 
 460:FreeRTOS/src/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 461:FreeRTOS/src/queue.c **** }
 462:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 463:FreeRTOS/src/queue.c **** 
 464:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 465:FreeRTOS/src/queue.c **** 
 466:FreeRTOS/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 467:FreeRTOS/src/queue.c **** 	{
 468:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 469:FreeRTOS/src/queue.c **** 		{
 470:FreeRTOS/src/queue.c **** 			/* The queue create function will set all the queue structure members
 471:FreeRTOS/src/queue.c **** 			correctly for a generic queue, but this function is creating a
 472:FreeRTOS/src/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 473:FreeRTOS/src/queue.c **** 			in particular the information required for priority inheritance. */
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 475:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 476:FreeRTOS/src/queue.c **** 
 477:FreeRTOS/src/queue.c **** 			/* In case this is a recursive mutex. */
 478:FreeRTOS/src/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 479:FreeRTOS/src/queue.c **** 
 480:FreeRTOS/src/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 481:FreeRTOS/src/queue.c **** 
 482:FreeRTOS/src/queue.c **** 			/* Start with the semaphore in the expected state. */
 483:FreeRTOS/src/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 484:FreeRTOS/src/queue.c **** 		}
 485:FreeRTOS/src/queue.c **** 		else
 486:FreeRTOS/src/queue.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 10


 487:FreeRTOS/src/queue.c **** 			traceCREATE_MUTEX_FAILED();
 488:FreeRTOS/src/queue.c **** 		}
 489:FreeRTOS/src/queue.c **** 	}
 490:FreeRTOS/src/queue.c **** 
 491:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 492:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 493:FreeRTOS/src/queue.c **** 
 494:FreeRTOS/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 495:FreeRTOS/src/queue.c **** 
 496:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 497:FreeRTOS/src/queue.c **** 	{
 498:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 499:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 500:FreeRTOS/src/queue.c **** 
 501:FreeRTOS/src/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 502:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 503:FreeRTOS/src/queue.c **** 
 504:FreeRTOS/src/queue.c **** 		return xNewQueue;
 505:FreeRTOS/src/queue.c **** 	}
 506:FreeRTOS/src/queue.c **** 
 507:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 508:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 509:FreeRTOS/src/queue.c **** 
 510:FreeRTOS/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 511:FreeRTOS/src/queue.c **** 
 512:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 513:FreeRTOS/src/queue.c **** 	{
 514:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 515:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 516:FreeRTOS/src/queue.c **** 
 517:FreeRTOS/src/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 518:FreeRTOS/src/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 519:FreeRTOS/src/queue.c **** 		( void ) ucQueueType;
 520:FreeRTOS/src/queue.c **** 
 521:FreeRTOS/src/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 522:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 523:FreeRTOS/src/queue.c **** 
 524:FreeRTOS/src/queue.c **** 		return xNewQueue;
 525:FreeRTOS/src/queue.c **** 	}
 526:FreeRTOS/src/queue.c **** 
 527:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 528:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 529:FreeRTOS/src/queue.c **** 
 530:FreeRTOS/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 531:FreeRTOS/src/queue.c **** 
 532:FreeRTOS/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 533:FreeRTOS/src/queue.c **** 	{
 534:FreeRTOS/src/queue.c **** 	TaskHandle_t pxReturn;
 535:FreeRTOS/src/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 536:FreeRTOS/src/queue.c **** 
 537:FreeRTOS/src/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 538:FreeRTOS/src/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 539:FreeRTOS/src/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 540:FreeRTOS/src/queue.c **** 		identity of the mutex holder, as the holder may change between the
 541:FreeRTOS/src/queue.c **** 		following critical section exiting and the function returning. */
 542:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
 543:FreeRTOS/src/queue.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 11


 544:FreeRTOS/src/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 545:FreeRTOS/src/queue.c **** 			{
 546:FreeRTOS/src/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 547:FreeRTOS/src/queue.c **** 			}
 548:FreeRTOS/src/queue.c **** 			else
 549:FreeRTOS/src/queue.c **** 			{
 550:FreeRTOS/src/queue.c **** 				pxReturn = NULL;
 551:FreeRTOS/src/queue.c **** 			}
 552:FreeRTOS/src/queue.c **** 		}
 553:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
 554:FreeRTOS/src/queue.c **** 
 555:FreeRTOS/src/queue.c **** 		return pxReturn;
 556:FreeRTOS/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 557:FreeRTOS/src/queue.c **** 
 558:FreeRTOS/src/queue.c **** #endif
 559:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 560:FreeRTOS/src/queue.c **** 
 561:FreeRTOS/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 562:FreeRTOS/src/queue.c **** 
 563:FreeRTOS/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 564:FreeRTOS/src/queue.c **** 	{
 565:FreeRTOS/src/queue.c **** 	TaskHandle_t pxReturn;
 566:FreeRTOS/src/queue.c **** 
 567:FreeRTOS/src/queue.c **** 		configASSERT( xSemaphore );
 568:FreeRTOS/src/queue.c **** 
 569:FreeRTOS/src/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 570:FreeRTOS/src/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 571:FreeRTOS/src/queue.c **** 		not required here. */
 572:FreeRTOS/src/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 573:FreeRTOS/src/queue.c **** 		{
 574:FreeRTOS/src/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 575:FreeRTOS/src/queue.c **** 		}
 576:FreeRTOS/src/queue.c **** 		else
 577:FreeRTOS/src/queue.c **** 		{
 578:FreeRTOS/src/queue.c **** 			pxReturn = NULL;
 579:FreeRTOS/src/queue.c **** 		}
 580:FreeRTOS/src/queue.c **** 
 581:FreeRTOS/src/queue.c **** 		return pxReturn;
 582:FreeRTOS/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 583:FreeRTOS/src/queue.c **** 
 584:FreeRTOS/src/queue.c **** #endif
 585:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 586:FreeRTOS/src/queue.c **** 
 587:FreeRTOS/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 588:FreeRTOS/src/queue.c **** 
 589:FreeRTOS/src/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 590:FreeRTOS/src/queue.c **** 	{
 591:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 592:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 593:FreeRTOS/src/queue.c **** 
 594:FreeRTOS/src/queue.c **** 		configASSERT( pxMutex );
 595:FreeRTOS/src/queue.c **** 
 596:FreeRTOS/src/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 597:FreeRTOS/src/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 598:FreeRTOS/src/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 599:FreeRTOS/src/queue.c **** 		this is the only condition we are interested in it does not matter if
 600:FreeRTOS/src/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 12


 601:FreeRTOS/src/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 602:FreeRTOS/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 603:FreeRTOS/src/queue.c **** 		{
 604:FreeRTOS/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 605:FreeRTOS/src/queue.c **** 
 606:FreeRTOS/src/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 607:FreeRTOS/src/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 608:FreeRTOS/src/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 609:FreeRTOS/src/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 610:FreeRTOS/src/queue.c **** 			uxRecursiveCallCount member. */
 611:FreeRTOS/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 612:FreeRTOS/src/queue.c **** 
 613:FreeRTOS/src/queue.c **** 			/* Has the recursive call count unwound to 0? */
 614:FreeRTOS/src/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 615:FreeRTOS/src/queue.c **** 			{
 616:FreeRTOS/src/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 617:FreeRTOS/src/queue.c **** 				task that might be waiting to access the mutex. */
 618:FreeRTOS/src/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 619:FreeRTOS/src/queue.c **** 			}
 620:FreeRTOS/src/queue.c **** 			else
 621:FreeRTOS/src/queue.c **** 			{
 622:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 623:FreeRTOS/src/queue.c **** 			}
 624:FreeRTOS/src/queue.c **** 
 625:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 626:FreeRTOS/src/queue.c **** 		}
 627:FreeRTOS/src/queue.c **** 		else
 628:FreeRTOS/src/queue.c **** 		{
 629:FreeRTOS/src/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 630:FreeRTOS/src/queue.c **** 			holder. */
 631:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
 632:FreeRTOS/src/queue.c **** 
 633:FreeRTOS/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 634:FreeRTOS/src/queue.c **** 		}
 635:FreeRTOS/src/queue.c **** 
 636:FreeRTOS/src/queue.c **** 		return xReturn;
 637:FreeRTOS/src/queue.c **** 	}
 638:FreeRTOS/src/queue.c **** 
 639:FreeRTOS/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 640:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 641:FreeRTOS/src/queue.c **** 
 642:FreeRTOS/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 643:FreeRTOS/src/queue.c **** 
 644:FreeRTOS/src/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 645:FreeRTOS/src/queue.c **** 	{
 646:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 647:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 648:FreeRTOS/src/queue.c **** 
 649:FreeRTOS/src/queue.c **** 		configASSERT( pxMutex );
 650:FreeRTOS/src/queue.c **** 
 651:FreeRTOS/src/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 652:FreeRTOS/src/queue.c **** 		xQueueGiveMutexRecursive(). */
 653:FreeRTOS/src/queue.c **** 
 654:FreeRTOS/src/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 655:FreeRTOS/src/queue.c **** 
 656:FreeRTOS/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 657:FreeRTOS/src/queue.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 13


 658:FreeRTOS/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 659:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 660:FreeRTOS/src/queue.c **** 		}
 661:FreeRTOS/src/queue.c **** 		else
 662:FreeRTOS/src/queue.c **** 		{
 663:FreeRTOS/src/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 664:FreeRTOS/src/queue.c **** 
 665:FreeRTOS/src/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 666:FreeRTOS/src/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 667:FreeRTOS/src/queue.c **** 			before reaching here. */
 668:FreeRTOS/src/queue.c **** 			if( xReturn != pdFAIL )
 669:FreeRTOS/src/queue.c **** 			{
 670:FreeRTOS/src/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 671:FreeRTOS/src/queue.c **** 			}
 672:FreeRTOS/src/queue.c **** 			else
 673:FreeRTOS/src/queue.c **** 			{
 674:FreeRTOS/src/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 675:FreeRTOS/src/queue.c **** 			}
 676:FreeRTOS/src/queue.c **** 		}
 677:FreeRTOS/src/queue.c **** 
 678:FreeRTOS/src/queue.c **** 		return xReturn;
 679:FreeRTOS/src/queue.c **** 	}
 680:FreeRTOS/src/queue.c **** 
 681:FreeRTOS/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 682:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 683:FreeRTOS/src/queue.c **** 
 684:FreeRTOS/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 685:FreeRTOS/src/queue.c **** 
 686:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 687:FreeRTOS/src/queue.c **** 	{
 688:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
 689:FreeRTOS/src/queue.c **** 
 690:FreeRTOS/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 691:FreeRTOS/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 692:FreeRTOS/src/queue.c **** 
 693:FreeRTOS/src/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 694:FreeRTOS/src/queue.c **** 
 695:FreeRTOS/src/queue.c **** 		if( xHandle != NULL )
 696:FreeRTOS/src/queue.c **** 		{
 697:FreeRTOS/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 698:FreeRTOS/src/queue.c **** 
 699:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 700:FreeRTOS/src/queue.c **** 		}
 701:FreeRTOS/src/queue.c **** 		else
 702:FreeRTOS/src/queue.c **** 		{
 703:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 704:FreeRTOS/src/queue.c **** 		}
 705:FreeRTOS/src/queue.c **** 
 706:FreeRTOS/src/queue.c **** 		return xHandle;
 707:FreeRTOS/src/queue.c **** 	}
 708:FreeRTOS/src/queue.c **** 
 709:FreeRTOS/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 710:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 711:FreeRTOS/src/queue.c **** 
 712:FreeRTOS/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 713:FreeRTOS/src/queue.c **** 
 714:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 14


 715:FreeRTOS/src/queue.c **** 	{
 716:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
 717:FreeRTOS/src/queue.c **** 
 718:FreeRTOS/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 719:FreeRTOS/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 720:FreeRTOS/src/queue.c **** 
 721:FreeRTOS/src/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 722:FreeRTOS/src/queue.c **** 
 723:FreeRTOS/src/queue.c **** 		if( xHandle != NULL )
 724:FreeRTOS/src/queue.c **** 		{
 725:FreeRTOS/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 726:FreeRTOS/src/queue.c **** 
 727:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 728:FreeRTOS/src/queue.c **** 		}
 729:FreeRTOS/src/queue.c **** 		else
 730:FreeRTOS/src/queue.c **** 		{
 731:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 732:FreeRTOS/src/queue.c **** 		}
 733:FreeRTOS/src/queue.c **** 
 734:FreeRTOS/src/queue.c **** 		return xHandle;
 735:FreeRTOS/src/queue.c **** 	}
 736:FreeRTOS/src/queue.c **** 
 737:FreeRTOS/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 738:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 739:FreeRTOS/src/queue.c **** 
 740:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 741:FreeRTOS/src/queue.c **** {
 742:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 743:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 744:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 745:FreeRTOS/src/queue.c **** 
 746:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 747:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 748:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 749:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 750:FreeRTOS/src/queue.c **** 	{
 751:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 752:FreeRTOS/src/queue.c **** 	}
 753:FreeRTOS/src/queue.c **** 	#endif
 754:FreeRTOS/src/queue.c **** 
 755:FreeRTOS/src/queue.c **** 
 756:FreeRTOS/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 757:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
 758:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
 759:FreeRTOS/src/queue.c **** 	for( ;; )
 760:FreeRTOS/src/queue.c **** 	{
 761:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
 762:FreeRTOS/src/queue.c **** 		{
 763:FreeRTOS/src/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 764:FreeRTOS/src/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 765:FreeRTOS/src/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 766:FreeRTOS/src/queue.c **** 			queue is full. */
 767:FreeRTOS/src/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 768:FreeRTOS/src/queue.c **** 			{
 769:FreeRTOS/src/queue.c **** 				traceQUEUE_SEND( pxQueue );
 770:FreeRTOS/src/queue.c **** 
 771:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 15


 772:FreeRTOS/src/queue.c **** 				{
 773:FreeRTOS/src/queue.c **** 				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 774:FreeRTOS/src/queue.c **** 
 775:FreeRTOS/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 776:FreeRTOS/src/queue.c **** 
 777:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 778:FreeRTOS/src/queue.c **** 					{
 779:FreeRTOS/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 780:FreeRTOS/src/queue.c **** 						{
 781:FreeRTOS/src/queue.c **** 							/* Do not notify the queue set as an existing item
 782:FreeRTOS/src/queue.c **** 							was overwritten in the queue so the number of items
 783:FreeRTOS/src/queue.c **** 							in the queue has not changed. */
 784:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 785:FreeRTOS/src/queue.c **** 						}
 786:FreeRTOS/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 787:FreeRTOS/src/queue.c **** 						{
 788:FreeRTOS/src/queue.c **** 							/* The queue is a member of a queue set, and posting
 789:FreeRTOS/src/queue.c **** 							to the queue set caused a higher priority task to
 790:FreeRTOS/src/queue.c **** 							unblock. A context switch is required. */
 791:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 792:FreeRTOS/src/queue.c **** 						}
 793:FreeRTOS/src/queue.c **** 						else
 794:FreeRTOS/src/queue.c **** 						{
 795:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 796:FreeRTOS/src/queue.c **** 						}
 797:FreeRTOS/src/queue.c **** 					}
 798:FreeRTOS/src/queue.c **** 					else
 799:FreeRTOS/src/queue.c **** 					{
 800:FreeRTOS/src/queue.c **** 						/* If there was a task waiting for data to arrive on the
 801:FreeRTOS/src/queue.c **** 						queue then unblock it now. */
 802:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803:FreeRTOS/src/queue.c **** 						{
 804:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805:FreeRTOS/src/queue.c **** 							{
 806:FreeRTOS/src/queue.c **** 								/* The unblocked task has a priority higher than
 807:FreeRTOS/src/queue.c **** 								our own so yield immediately.  Yes it is ok to
 808:FreeRTOS/src/queue.c **** 								do this from within the critical section - the
 809:FreeRTOS/src/queue.c **** 								kernel takes care of that. */
 810:FreeRTOS/src/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 811:FreeRTOS/src/queue.c **** 							}
 812:FreeRTOS/src/queue.c **** 							else
 813:FreeRTOS/src/queue.c **** 							{
 814:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 815:FreeRTOS/src/queue.c **** 							}
 816:FreeRTOS/src/queue.c **** 						}
 817:FreeRTOS/src/queue.c **** 						else if( xYieldRequired != pdFALSE )
 818:FreeRTOS/src/queue.c **** 						{
 819:FreeRTOS/src/queue.c **** 							/* This path is a special case that will only get
 820:FreeRTOS/src/queue.c **** 							executed if the task was holding multiple mutexes
 821:FreeRTOS/src/queue.c **** 							and the mutexes were given back in an order that is
 822:FreeRTOS/src/queue.c **** 							different to that in which they were taken. */
 823:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 824:FreeRTOS/src/queue.c **** 						}
 825:FreeRTOS/src/queue.c **** 						else
 826:FreeRTOS/src/queue.c **** 						{
 827:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 828:FreeRTOS/src/queue.c **** 						}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 16


 829:FreeRTOS/src/queue.c **** 					}
 830:FreeRTOS/src/queue.c **** 				}
 831:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 832:FreeRTOS/src/queue.c **** 				{
 833:FreeRTOS/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 834:FreeRTOS/src/queue.c **** 
 835:FreeRTOS/src/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:FreeRTOS/src/queue.c **** 					queue then unblock it now. */
 837:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 838:FreeRTOS/src/queue.c **** 					{
 839:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 840:FreeRTOS/src/queue.c **** 						{
 841:FreeRTOS/src/queue.c **** 							/* The unblocked task has a priority higher than
 842:FreeRTOS/src/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 843:FreeRTOS/src/queue.c **** 							this from within the critical section - the kernel
 844:FreeRTOS/src/queue.c **** 							takes care of that. */
 845:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 846:FreeRTOS/src/queue.c **** 						}
 847:FreeRTOS/src/queue.c **** 						else
 848:FreeRTOS/src/queue.c **** 						{
 849:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 850:FreeRTOS/src/queue.c **** 						}
 851:FreeRTOS/src/queue.c **** 					}
 852:FreeRTOS/src/queue.c **** 					else if( xYieldRequired != pdFALSE )
 853:FreeRTOS/src/queue.c **** 					{
 854:FreeRTOS/src/queue.c **** 						/* This path is a special case that will only get
 855:FreeRTOS/src/queue.c **** 						executed if the task was holding multiple mutexes and
 856:FreeRTOS/src/queue.c **** 						the mutexes were given back in an order that is
 857:FreeRTOS/src/queue.c **** 						different to that in which they were taken. */
 858:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 859:FreeRTOS/src/queue.c **** 					}
 860:FreeRTOS/src/queue.c **** 					else
 861:FreeRTOS/src/queue.c **** 					{
 862:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 863:FreeRTOS/src/queue.c **** 					}
 864:FreeRTOS/src/queue.c **** 				}
 865:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 866:FreeRTOS/src/queue.c **** 
 867:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
 868:FreeRTOS/src/queue.c **** 				return pdPASS;
 869:FreeRTOS/src/queue.c **** 			}
 870:FreeRTOS/src/queue.c **** 			else
 871:FreeRTOS/src/queue.c **** 			{
 872:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 873:FreeRTOS/src/queue.c **** 				{
 874:FreeRTOS/src/queue.c **** 					/* The queue was full and no block time is specified (or
 875:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
 876:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
 877:FreeRTOS/src/queue.c **** 
 878:FreeRTOS/src/queue.c **** 					/* Return to the original privilege level before exiting
 879:FreeRTOS/src/queue.c **** 					the function. */
 880:FreeRTOS/src/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 881:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
 882:FreeRTOS/src/queue.c **** 				}
 883:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 884:FreeRTOS/src/queue.c **** 				{
 885:FreeRTOS/src/queue.c **** 					/* The queue was full and a block time was specified so
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 17


 886:FreeRTOS/src/queue.c **** 					configure the timeout structure. */
 887:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 888:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 889:FreeRTOS/src/queue.c **** 				}
 890:FreeRTOS/src/queue.c **** 				else
 891:FreeRTOS/src/queue.c **** 				{
 892:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
 893:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 894:FreeRTOS/src/queue.c **** 				}
 895:FreeRTOS/src/queue.c **** 			}
 896:FreeRTOS/src/queue.c **** 		}
 897:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
 898:FreeRTOS/src/queue.c **** 
 899:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 900:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
 901:FreeRTOS/src/queue.c **** 
 902:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
 903:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 904:FreeRTOS/src/queue.c **** 
 905:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 906:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 907:FreeRTOS/src/queue.c **** 		{
 908:FreeRTOS/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 909:FreeRTOS/src/queue.c **** 			{
 910:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 911:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 912:FreeRTOS/src/queue.c **** 
 913:FreeRTOS/src/queue.c **** 				/* Unlocking the queue means queue events can effect the
 914:FreeRTOS/src/queue.c **** 				event list.  It is possible that interrupts occurring now
 915:FreeRTOS/src/queue.c **** 				remove this task from the event list again - but as the
 916:FreeRTOS/src/queue.c **** 				scheduler is suspended the task will go onto the pending
 917:FreeRTOS/src/queue.c **** 				ready last instead of the actual ready list. */
 918:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 919:FreeRTOS/src/queue.c **** 
 920:FreeRTOS/src/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 921:FreeRTOS/src/queue.c **** 				ready list into the ready list - so it is feasible that this
 922:FreeRTOS/src/queue.c **** 				task is already in a ready list before it yields - in which
 923:FreeRTOS/src/queue.c **** 				case the yield will not cause a context switch unless there
 924:FreeRTOS/src/queue.c **** 				is also a higher priority task in the pending ready list. */
 925:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 926:FreeRTOS/src/queue.c **** 				{
 927:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
 928:FreeRTOS/src/queue.c **** 				}
 929:FreeRTOS/src/queue.c **** 			}
 930:FreeRTOS/src/queue.c **** 			else
 931:FreeRTOS/src/queue.c **** 			{
 932:FreeRTOS/src/queue.c **** 				/* Try again. */
 933:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 934:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 935:FreeRTOS/src/queue.c **** 			}
 936:FreeRTOS/src/queue.c **** 		}
 937:FreeRTOS/src/queue.c **** 		else
 938:FreeRTOS/src/queue.c **** 		{
 939:FreeRTOS/src/queue.c **** 			/* The timeout has expired. */
 940:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
 941:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 942:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 18


 943:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 944:FreeRTOS/src/queue.c **** 			return errQUEUE_FULL;
 945:FreeRTOS/src/queue.c **** 		}
 946:FreeRTOS/src/queue.c **** 	} /*lint -restore */
 947:FreeRTOS/src/queue.c **** }
 948:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 949:FreeRTOS/src/queue.c **** 
 950:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 951:FreeRTOS/src/queue.c **** {
 952:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 953:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 954:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 955:FreeRTOS/src/queue.c **** 
 956:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 957:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 958:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 959:FreeRTOS/src/queue.c **** 
 960:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 961:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 962:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 963:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 964:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 965:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 966:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 967:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
 968:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 969:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 970:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 971:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 972:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 973:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 974:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 975:FreeRTOS/src/queue.c **** 
 976:FreeRTOS/src/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 977:FreeRTOS/src/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 978:FreeRTOS/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 979:FreeRTOS/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 980:FreeRTOS/src/queue.c **** 	post). */
 981:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 982:FreeRTOS/src/queue.c **** 	{
 983:FreeRTOS/src/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 984:FreeRTOS/src/queue.c **** 		{
 985:FreeRTOS/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 986:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 987:FreeRTOS/src/queue.c **** 
 988:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 989:FreeRTOS/src/queue.c **** 
 990:FreeRTOS/src/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 991:FreeRTOS/src/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 992:FreeRTOS/src/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 993:FreeRTOS/src/queue.c **** 			called here even though the disinherit function does not check if
 994:FreeRTOS/src/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 995:FreeRTOS/src/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 996:FreeRTOS/src/queue.c **** 
 997:FreeRTOS/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 998:FreeRTOS/src/queue.c **** 			be done when the queue is unlocked later. */
 999:FreeRTOS/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 19


1000:FreeRTOS/src/queue.c **** 			{
1001:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1002:FreeRTOS/src/queue.c **** 				{
1003:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1004:FreeRTOS/src/queue.c **** 					{
1005:FreeRTOS/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
1006:FreeRTOS/src/queue.c **** 						{
1007:FreeRTOS/src/queue.c **** 							/* Do not notify the queue set as an existing item
1008:FreeRTOS/src/queue.c **** 							was overwritten in the queue so the number of items
1009:FreeRTOS/src/queue.c **** 							in the queue has not changed. */
1010:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1011:FreeRTOS/src/queue.c **** 						}
1012:FreeRTOS/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1013:FreeRTOS/src/queue.c **** 						{
1014:FreeRTOS/src/queue.c **** 							/* The queue is a member of a queue set, and posting
1015:FreeRTOS/src/queue.c **** 							to the queue set caused a higher priority task to
1016:FreeRTOS/src/queue.c **** 							unblock.  A context switch is required. */
1017:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1018:FreeRTOS/src/queue.c **** 							{
1019:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1020:FreeRTOS/src/queue.c **** 							}
1021:FreeRTOS/src/queue.c **** 							else
1022:FreeRTOS/src/queue.c **** 							{
1023:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1024:FreeRTOS/src/queue.c **** 							}
1025:FreeRTOS/src/queue.c **** 						}
1026:FreeRTOS/src/queue.c **** 						else
1027:FreeRTOS/src/queue.c **** 						{
1028:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1029:FreeRTOS/src/queue.c **** 						}
1030:FreeRTOS/src/queue.c **** 					}
1031:FreeRTOS/src/queue.c **** 					else
1032:FreeRTOS/src/queue.c **** 					{
1033:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1034:FreeRTOS/src/queue.c **** 						{
1035:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1036:FreeRTOS/src/queue.c **** 							{
1037:FreeRTOS/src/queue.c **** 								/* The task waiting has a higher priority so
1038:FreeRTOS/src/queue.c **** 								record that a context switch is required. */
1039:FreeRTOS/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1040:FreeRTOS/src/queue.c **** 								{
1041:FreeRTOS/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1042:FreeRTOS/src/queue.c **** 								}
1043:FreeRTOS/src/queue.c **** 								else
1044:FreeRTOS/src/queue.c **** 								{
1045:FreeRTOS/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1046:FreeRTOS/src/queue.c **** 								}
1047:FreeRTOS/src/queue.c **** 							}
1048:FreeRTOS/src/queue.c **** 							else
1049:FreeRTOS/src/queue.c **** 							{
1050:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1051:FreeRTOS/src/queue.c **** 							}
1052:FreeRTOS/src/queue.c **** 						}
1053:FreeRTOS/src/queue.c **** 						else
1054:FreeRTOS/src/queue.c **** 						{
1055:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1056:FreeRTOS/src/queue.c **** 						}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 20


1057:FreeRTOS/src/queue.c **** 					}
1058:FreeRTOS/src/queue.c **** 				}
1059:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1060:FreeRTOS/src/queue.c **** 				{
1061:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1062:FreeRTOS/src/queue.c **** 					{
1063:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1064:FreeRTOS/src/queue.c **** 						{
1065:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1066:FreeRTOS/src/queue.c **** 							context	switch is required. */
1067:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1068:FreeRTOS/src/queue.c **** 							{
1069:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1070:FreeRTOS/src/queue.c **** 							}
1071:FreeRTOS/src/queue.c **** 							else
1072:FreeRTOS/src/queue.c **** 							{
1073:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1074:FreeRTOS/src/queue.c **** 							}
1075:FreeRTOS/src/queue.c **** 						}
1076:FreeRTOS/src/queue.c **** 						else
1077:FreeRTOS/src/queue.c **** 						{
1078:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1079:FreeRTOS/src/queue.c **** 						}
1080:FreeRTOS/src/queue.c **** 					}
1081:FreeRTOS/src/queue.c **** 					else
1082:FreeRTOS/src/queue.c **** 					{
1083:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1084:FreeRTOS/src/queue.c **** 					}
1085:FreeRTOS/src/queue.c **** 					
1086:FreeRTOS/src/queue.c **** 					/* Not used in this path. */
1087:FreeRTOS/src/queue.c **** 					( void ) uxPreviousMessagesWaiting;
1088:FreeRTOS/src/queue.c **** 				}
1089:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1090:FreeRTOS/src/queue.c **** 			}
1091:FreeRTOS/src/queue.c **** 			else
1092:FreeRTOS/src/queue.c **** 			{
1093:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1094:FreeRTOS/src/queue.c **** 				knows that data was posted while it was locked. */
1095:FreeRTOS/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1096:FreeRTOS/src/queue.c **** 			}
1097:FreeRTOS/src/queue.c **** 
1098:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1099:FreeRTOS/src/queue.c **** 		}
1100:FreeRTOS/src/queue.c **** 		else
1101:FreeRTOS/src/queue.c **** 		{
1102:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1103:FreeRTOS/src/queue.c **** 			xReturn = errQUEUE_FULL;
1104:FreeRTOS/src/queue.c **** 		}
1105:FreeRTOS/src/queue.c **** 	}
1106:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1107:FreeRTOS/src/queue.c **** 
1108:FreeRTOS/src/queue.c **** 	return xReturn;
1109:FreeRTOS/src/queue.c **** }
1110:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1111:FreeRTOS/src/queue.c **** 
1112:FreeRTOS/src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1113:FreeRTOS/src/queue.c **** {
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 21


1114:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1115:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1116:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1117:FreeRTOS/src/queue.c **** 
1118:FreeRTOS/src/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1119:FreeRTOS/src/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1120:FreeRTOS/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1121:FreeRTOS/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1122:FreeRTOS/src/queue.c **** 	post). */
1123:FreeRTOS/src/queue.c **** 
1124:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1125:FreeRTOS/src/queue.c **** 
1126:FreeRTOS/src/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1127:FreeRTOS/src/queue.c **** 	if the item size is not 0. */
1128:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1129:FreeRTOS/src/queue.c **** 
1130:FreeRTOS/src/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1131:FreeRTOS/src/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1132:FreeRTOS/src/queue.c **** 	interrupts, only tasks. */
1133:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1134:FreeRTOS/src/queue.c **** 
1135:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1136:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1137:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1138:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1139:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1140:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1141:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1142:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1143:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1144:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1145:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1146:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1147:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1148:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1149:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1150:FreeRTOS/src/queue.c **** 
1151:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1152:FreeRTOS/src/queue.c **** 	{
1153:FreeRTOS/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1154:FreeRTOS/src/queue.c **** 
1155:FreeRTOS/src/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1156:FreeRTOS/src/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1157:FreeRTOS/src/queue.c **** 		space'. */
1158:FreeRTOS/src/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1159:FreeRTOS/src/queue.c **** 		{
1160:FreeRTOS/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1161:FreeRTOS/src/queue.c **** 
1162:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1163:FreeRTOS/src/queue.c **** 
1164:FreeRTOS/src/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1165:FreeRTOS/src/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1166:FreeRTOS/src/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1167:FreeRTOS/src/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1168:FreeRTOS/src/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1169:FreeRTOS/src/queue.c **** 			messages (semaphores) available. */
1170:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 22


1171:FreeRTOS/src/queue.c **** 
1172:FreeRTOS/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1173:FreeRTOS/src/queue.c **** 			be done when the queue is unlocked later. */
1174:FreeRTOS/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1175:FreeRTOS/src/queue.c **** 			{
1176:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1177:FreeRTOS/src/queue.c **** 				{
1178:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1179:FreeRTOS/src/queue.c **** 					{
1180:FreeRTOS/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1181:FreeRTOS/src/queue.c **** 						{
1182:FreeRTOS/src/queue.c **** 							/* The semaphore is a member of a queue set, and
1183:FreeRTOS/src/queue.c **** 							posting	to the queue set caused a higher priority
1184:FreeRTOS/src/queue.c **** 							task to	unblock.  A context switch is required. */
1185:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1186:FreeRTOS/src/queue.c **** 							{
1187:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1188:FreeRTOS/src/queue.c **** 							}
1189:FreeRTOS/src/queue.c **** 							else
1190:FreeRTOS/src/queue.c **** 							{
1191:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1192:FreeRTOS/src/queue.c **** 							}
1193:FreeRTOS/src/queue.c **** 						}
1194:FreeRTOS/src/queue.c **** 						else
1195:FreeRTOS/src/queue.c **** 						{
1196:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1197:FreeRTOS/src/queue.c **** 						}
1198:FreeRTOS/src/queue.c **** 					}
1199:FreeRTOS/src/queue.c **** 					else
1200:FreeRTOS/src/queue.c **** 					{
1201:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1202:FreeRTOS/src/queue.c **** 						{
1203:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1204:FreeRTOS/src/queue.c **** 							{
1205:FreeRTOS/src/queue.c **** 								/* The task waiting has a higher priority so
1206:FreeRTOS/src/queue.c **** 								record that a context switch is required. */
1207:FreeRTOS/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1208:FreeRTOS/src/queue.c **** 								{
1209:FreeRTOS/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1210:FreeRTOS/src/queue.c **** 								}
1211:FreeRTOS/src/queue.c **** 								else
1212:FreeRTOS/src/queue.c **** 								{
1213:FreeRTOS/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1214:FreeRTOS/src/queue.c **** 								}
1215:FreeRTOS/src/queue.c **** 							}
1216:FreeRTOS/src/queue.c **** 							else
1217:FreeRTOS/src/queue.c **** 							{
1218:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1219:FreeRTOS/src/queue.c **** 							}
1220:FreeRTOS/src/queue.c **** 						}
1221:FreeRTOS/src/queue.c **** 						else
1222:FreeRTOS/src/queue.c **** 						{
1223:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1224:FreeRTOS/src/queue.c **** 						}
1225:FreeRTOS/src/queue.c **** 					}
1226:FreeRTOS/src/queue.c **** 				}
1227:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 23


1228:FreeRTOS/src/queue.c **** 				{
1229:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1230:FreeRTOS/src/queue.c **** 					{
1231:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1232:FreeRTOS/src/queue.c **** 						{
1233:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1234:FreeRTOS/src/queue.c **** 							context	switch is required. */
1235:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1236:FreeRTOS/src/queue.c **** 							{
1237:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1238:FreeRTOS/src/queue.c **** 							}
1239:FreeRTOS/src/queue.c **** 							else
1240:FreeRTOS/src/queue.c **** 							{
1241:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1242:FreeRTOS/src/queue.c **** 							}
1243:FreeRTOS/src/queue.c **** 						}
1244:FreeRTOS/src/queue.c **** 						else
1245:FreeRTOS/src/queue.c **** 						{
1246:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1247:FreeRTOS/src/queue.c **** 						}
1248:FreeRTOS/src/queue.c **** 					}
1249:FreeRTOS/src/queue.c **** 					else
1250:FreeRTOS/src/queue.c **** 					{
1251:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1252:FreeRTOS/src/queue.c **** 					}
1253:FreeRTOS/src/queue.c **** 				}
1254:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1255:FreeRTOS/src/queue.c **** 			}
1256:FreeRTOS/src/queue.c **** 			else
1257:FreeRTOS/src/queue.c **** 			{
1258:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1259:FreeRTOS/src/queue.c **** 				knows that data was posted while it was locked. */
1260:FreeRTOS/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1261:FreeRTOS/src/queue.c **** 			}
1262:FreeRTOS/src/queue.c **** 
1263:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1264:FreeRTOS/src/queue.c **** 		}
1265:FreeRTOS/src/queue.c **** 		else
1266:FreeRTOS/src/queue.c **** 		{
1267:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1268:FreeRTOS/src/queue.c **** 			xReturn = errQUEUE_FULL;
1269:FreeRTOS/src/queue.c **** 		}
1270:FreeRTOS/src/queue.c **** 	}
1271:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1272:FreeRTOS/src/queue.c **** 
1273:FreeRTOS/src/queue.c **** 	return xReturn;
1274:FreeRTOS/src/queue.c **** }
1275:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1276:FreeRTOS/src/queue.c **** 
1277:FreeRTOS/src/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1278:FreeRTOS/src/queue.c **** {
1279:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1280:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1281:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1282:FreeRTOS/src/queue.c **** 
1283:FreeRTOS/src/queue.c **** 	/* Check the pointer is not NULL. */
1284:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 24


1285:FreeRTOS/src/queue.c **** 
1286:FreeRTOS/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1287:FreeRTOS/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1288:FreeRTOS/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1289:FreeRTOS/src/queue.c **** 
1290:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1291:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1292:FreeRTOS/src/queue.c **** 	{
1293:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1294:FreeRTOS/src/queue.c **** 	}
1295:FreeRTOS/src/queue.c **** 	#endif
1296:FreeRTOS/src/queue.c **** 
1297:FreeRTOS/src/queue.c **** 
1298:FreeRTOS/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1299:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1300:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
1301:FreeRTOS/src/queue.c **** 	for( ;; )
1302:FreeRTOS/src/queue.c **** 	{
1303:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1304:FreeRTOS/src/queue.c **** 		{
1305:FreeRTOS/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1306:FreeRTOS/src/queue.c **** 
1307:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1308:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1309:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1310:FreeRTOS/src/queue.c **** 			{
1311:FreeRTOS/src/queue.c **** 				/* Data available, remove one item. */
1312:FreeRTOS/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1313:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1314:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1315:FreeRTOS/src/queue.c **** 
1316:FreeRTOS/src/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1317:FreeRTOS/src/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1318:FreeRTOS/src/queue.c **** 				task. */
1319:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1320:FreeRTOS/src/queue.c **** 				{
1321:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1322:FreeRTOS/src/queue.c **** 					{
1323:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1324:FreeRTOS/src/queue.c **** 					}
1325:FreeRTOS/src/queue.c **** 					else
1326:FreeRTOS/src/queue.c **** 					{
1327:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1328:FreeRTOS/src/queue.c **** 					}
1329:FreeRTOS/src/queue.c **** 				}
1330:FreeRTOS/src/queue.c **** 				else
1331:FreeRTOS/src/queue.c **** 				{
1332:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1333:FreeRTOS/src/queue.c **** 				}
1334:FreeRTOS/src/queue.c **** 
1335:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1336:FreeRTOS/src/queue.c **** 				return pdPASS;
1337:FreeRTOS/src/queue.c **** 			}
1338:FreeRTOS/src/queue.c **** 			else
1339:FreeRTOS/src/queue.c **** 			{
1340:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1341:FreeRTOS/src/queue.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 25


1342:FreeRTOS/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1343:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
1344:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1345:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1346:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1347:FreeRTOS/src/queue.c **** 				}
1348:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1349:FreeRTOS/src/queue.c **** 				{
1350:FreeRTOS/src/queue.c **** 					/* The queue was empty and a block time was specified so
1351:FreeRTOS/src/queue.c **** 					configure the timeout structure. */
1352:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1353:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1354:FreeRTOS/src/queue.c **** 				}
1355:FreeRTOS/src/queue.c **** 				else
1356:FreeRTOS/src/queue.c **** 				{
1357:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1358:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1359:FreeRTOS/src/queue.c **** 				}
1360:FreeRTOS/src/queue.c **** 			}
1361:FreeRTOS/src/queue.c **** 		}
1362:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1363:FreeRTOS/src/queue.c **** 
1364:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1365:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1366:FreeRTOS/src/queue.c **** 
1367:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1368:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1369:FreeRTOS/src/queue.c **** 
1370:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1371:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1372:FreeRTOS/src/queue.c **** 		{
1373:FreeRTOS/src/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1374:FreeRTOS/src/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1375:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1376:FreeRTOS/src/queue.c **** 			{
1377:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1378:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1379:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1380:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1381:FreeRTOS/src/queue.c **** 				{
1382:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1383:FreeRTOS/src/queue.c **** 				}
1384:FreeRTOS/src/queue.c **** 				else
1385:FreeRTOS/src/queue.c **** 				{
1386:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1387:FreeRTOS/src/queue.c **** 				}
1388:FreeRTOS/src/queue.c **** 			}
1389:FreeRTOS/src/queue.c **** 			else
1390:FreeRTOS/src/queue.c **** 			{
1391:FreeRTOS/src/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1392:FreeRTOS/src/queue.c **** 				data. */
1393:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1394:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1395:FreeRTOS/src/queue.c **** 			}
1396:FreeRTOS/src/queue.c **** 		}
1397:FreeRTOS/src/queue.c **** 		else
1398:FreeRTOS/src/queue.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 26


1399:FreeRTOS/src/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1400:FreeRTOS/src/queue.c **** 			back and attempt to read the data. */
1401:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1402:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1403:FreeRTOS/src/queue.c **** 
1404:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1405:FreeRTOS/src/queue.c **** 			{
1406:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1407:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1408:FreeRTOS/src/queue.c **** 			}
1409:FreeRTOS/src/queue.c **** 			else
1410:FreeRTOS/src/queue.c **** 			{
1411:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1412:FreeRTOS/src/queue.c **** 			}
1413:FreeRTOS/src/queue.c **** 		}
1414:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1415:FreeRTOS/src/queue.c **** }
1416:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1417:FreeRTOS/src/queue.c **** 
1418:FreeRTOS/src/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1419:FreeRTOS/src/queue.c **** {
1420:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1421:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1422:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1423:FreeRTOS/src/queue.c **** 
1424:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
1425:FreeRTOS/src/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1426:FreeRTOS/src/queue.c **** #endif
1427:FreeRTOS/src/queue.c **** 
1428:FreeRTOS/src/queue.c **** 	/* Check the queue pointer is not NULL. */
1429:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
1430:FreeRTOS/src/queue.c **** 
1431:FreeRTOS/src/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1432:FreeRTOS/src/queue.c **** 	0. */
1433:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1434:FreeRTOS/src/queue.c **** 
1435:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1436:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1437:FreeRTOS/src/queue.c **** 	{
1438:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1439:FreeRTOS/src/queue.c **** 	}
1440:FreeRTOS/src/queue.c **** 	#endif
1441:FreeRTOS/src/queue.c **** 
1442:FreeRTOS/src/queue.c **** 
1443:FreeRTOS/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1444:FreeRTOS/src/queue.c **** 	statements within the function itself.  This is done in the interest
1445:FreeRTOS/src/queue.c **** 	of execution time efficiency. */
1446:FreeRTOS/src/queue.c **** 	for( ;; )
1447:FreeRTOS/src/queue.c **** 	{
1448:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1449:FreeRTOS/src/queue.c **** 		{
1450:FreeRTOS/src/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1451:FreeRTOS/src/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1452:FreeRTOS/src/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1453:FreeRTOS/src/queue.c **** 
1454:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1455:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 27


1456:FreeRTOS/src/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1457:FreeRTOS/src/queue.c **** 			{
1458:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1459:FreeRTOS/src/queue.c **** 
1460:FreeRTOS/src/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1461:FreeRTOS/src/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1462:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1463:FreeRTOS/src/queue.c **** 
1464:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1465:FreeRTOS/src/queue.c **** 				{
1466:FreeRTOS/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1467:FreeRTOS/src/queue.c **** 					{
1468:FreeRTOS/src/queue.c **** 						/* Record the information required to implement
1469:FreeRTOS/src/queue.c **** 						priority inheritance should it become necessary. */
1470:FreeRTOS/src/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1471:FreeRTOS/src/queue.c **** 					}
1472:FreeRTOS/src/queue.c **** 					else
1473:FreeRTOS/src/queue.c **** 					{
1474:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1475:FreeRTOS/src/queue.c **** 					}
1476:FreeRTOS/src/queue.c **** 				}
1477:FreeRTOS/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1478:FreeRTOS/src/queue.c **** 
1479:FreeRTOS/src/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1480:FreeRTOS/src/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1481:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1482:FreeRTOS/src/queue.c **** 				{
1483:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1484:FreeRTOS/src/queue.c **** 					{
1485:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1486:FreeRTOS/src/queue.c **** 					}
1487:FreeRTOS/src/queue.c **** 					else
1488:FreeRTOS/src/queue.c **** 					{
1489:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1490:FreeRTOS/src/queue.c **** 					}
1491:FreeRTOS/src/queue.c **** 				}
1492:FreeRTOS/src/queue.c **** 				else
1493:FreeRTOS/src/queue.c **** 				{
1494:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1495:FreeRTOS/src/queue.c **** 				}
1496:FreeRTOS/src/queue.c **** 
1497:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1498:FreeRTOS/src/queue.c **** 				return pdPASS;
1499:FreeRTOS/src/queue.c **** 			}
1500:FreeRTOS/src/queue.c **** 			else
1501:FreeRTOS/src/queue.c **** 			{
1502:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1503:FreeRTOS/src/queue.c **** 				{
1504:FreeRTOS/src/queue.c **** 					/* For inheritance to have occurred there must have been an
1505:FreeRTOS/src/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1506:FreeRTOS/src/queue.c **** 					if it were 0 the function would have exited. */
1507:FreeRTOS/src/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1508:FreeRTOS/src/queue.c **** 					{
1509:FreeRTOS/src/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1510:FreeRTOS/src/queue.c **** 					}
1511:FreeRTOS/src/queue.c **** 					#endif /* configUSE_MUTEXES */
1512:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 28


1513:FreeRTOS/src/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1514:FreeRTOS/src/queue.c **** 					(or the block time has expired) so exit now. */
1515:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1516:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1517:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1518:FreeRTOS/src/queue.c **** 				}
1519:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1520:FreeRTOS/src/queue.c **** 				{
1521:FreeRTOS/src/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1522:FreeRTOS/src/queue.c **** 					so configure the timeout structure ready to block. */
1523:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1524:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1525:FreeRTOS/src/queue.c **** 				}
1526:FreeRTOS/src/queue.c **** 				else
1527:FreeRTOS/src/queue.c **** 				{
1528:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1529:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1530:FreeRTOS/src/queue.c **** 				}
1531:FreeRTOS/src/queue.c **** 			}
1532:FreeRTOS/src/queue.c **** 		}
1533:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1534:FreeRTOS/src/queue.c **** 
1535:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1536:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1537:FreeRTOS/src/queue.c **** 
1538:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1539:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1540:FreeRTOS/src/queue.c **** 
1541:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1542:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1543:FreeRTOS/src/queue.c **** 		{
1544:FreeRTOS/src/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1545:FreeRTOS/src/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1546:FreeRTOS/src/queue.c **** 			become available.  As semaphores are implemented with queues the
1547:FreeRTOS/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1548:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1549:FreeRTOS/src/queue.c **** 			{
1550:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1551:FreeRTOS/src/queue.c **** 
1552:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1553:FreeRTOS/src/queue.c **** 				{
1554:FreeRTOS/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1555:FreeRTOS/src/queue.c **** 					{
1556:FreeRTOS/src/queue.c **** 						taskENTER_CRITICAL();
1557:FreeRTOS/src/queue.c **** 						{
1558:FreeRTOS/src/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1559:FreeRTOS/src/queue.c **** 						}
1560:FreeRTOS/src/queue.c **** 						taskEXIT_CRITICAL();
1561:FreeRTOS/src/queue.c **** 					}
1562:FreeRTOS/src/queue.c **** 					else
1563:FreeRTOS/src/queue.c **** 					{
1564:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1565:FreeRTOS/src/queue.c **** 					}
1566:FreeRTOS/src/queue.c **** 				}
1567:FreeRTOS/src/queue.c **** 				#endif
1568:FreeRTOS/src/queue.c **** 
1569:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 29


1570:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1571:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1572:FreeRTOS/src/queue.c **** 				{
1573:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1574:FreeRTOS/src/queue.c **** 				}
1575:FreeRTOS/src/queue.c **** 				else
1576:FreeRTOS/src/queue.c **** 				{
1577:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1578:FreeRTOS/src/queue.c **** 				}
1579:FreeRTOS/src/queue.c **** 			}
1580:FreeRTOS/src/queue.c **** 			else
1581:FreeRTOS/src/queue.c **** 			{
1582:FreeRTOS/src/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1583:FreeRTOS/src/queue.c **** 				attempt to take the semaphore again. */
1584:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1585:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1586:FreeRTOS/src/queue.c **** 			}
1587:FreeRTOS/src/queue.c **** 		}
1588:FreeRTOS/src/queue.c **** 		else
1589:FreeRTOS/src/queue.c **** 		{
1590:FreeRTOS/src/queue.c **** 			/* Timed out. */
1591:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1592:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1593:FreeRTOS/src/queue.c **** 
1594:FreeRTOS/src/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1595:FreeRTOS/src/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1596:FreeRTOS/src/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1597:FreeRTOS/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1598:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1599:FreeRTOS/src/queue.c **** 			{
1600:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1601:FreeRTOS/src/queue.c **** 				{
1602:FreeRTOS/src/queue.c **** 					/* xInheritanceOccurred could only have be set if
1603:FreeRTOS/src/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1604:FreeRTOS/src/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1605:FreeRTOS/src/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1606:FreeRTOS/src/queue.c **** 					{
1607:FreeRTOS/src/queue.c **** 						taskENTER_CRITICAL();
1608:FreeRTOS/src/queue.c **** 						{
1609:FreeRTOS/src/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1610:FreeRTOS/src/queue.c **** 
1611:FreeRTOS/src/queue.c **** 							/* This task blocking on the mutex caused another
1612:FreeRTOS/src/queue.c **** 							task to inherit this task's priority.  Now this task
1613:FreeRTOS/src/queue.c **** 							has timed out the priority should be disinherited
1614:FreeRTOS/src/queue.c **** 							again, but only as low as the next highest priority
1615:FreeRTOS/src/queue.c **** 							task that is waiting for the same mutex. */
1616:FreeRTOS/src/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1617:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1618:FreeRTOS/src/queue.c **** 						}
1619:FreeRTOS/src/queue.c **** 						taskEXIT_CRITICAL();
1620:FreeRTOS/src/queue.c **** 					}
1621:FreeRTOS/src/queue.c **** 				}
1622:FreeRTOS/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1623:FreeRTOS/src/queue.c **** 
1624:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1625:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1626:FreeRTOS/src/queue.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 30


1627:FreeRTOS/src/queue.c **** 			else
1628:FreeRTOS/src/queue.c **** 			{
1629:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1630:FreeRTOS/src/queue.c **** 			}
1631:FreeRTOS/src/queue.c **** 		}
1632:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1633:FreeRTOS/src/queue.c **** }
1634:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1635:FreeRTOS/src/queue.c **** 
1636:FreeRTOS/src/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1637:FreeRTOS/src/queue.c **** {
1638:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1639:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1640:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
1641:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1642:FreeRTOS/src/queue.c **** 
1643:FreeRTOS/src/queue.c **** 	/* Check the pointer is not NULL. */
1644:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
1645:FreeRTOS/src/queue.c **** 
1646:FreeRTOS/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1647:FreeRTOS/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1648:FreeRTOS/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1649:FreeRTOS/src/queue.c **** 
1650:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1651:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1652:FreeRTOS/src/queue.c **** 	{
1653:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1654:FreeRTOS/src/queue.c **** 	}
1655:FreeRTOS/src/queue.c **** 	#endif
1656:FreeRTOS/src/queue.c **** 
1657:FreeRTOS/src/queue.c **** 
1658:FreeRTOS/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1659:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1660:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
1661:FreeRTOS/src/queue.c **** 	for( ;; )
1662:FreeRTOS/src/queue.c **** 	{
1663:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1664:FreeRTOS/src/queue.c **** 		{
1665:FreeRTOS/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1666:FreeRTOS/src/queue.c **** 
1667:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1668:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1669:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1670:FreeRTOS/src/queue.c **** 			{
1671:FreeRTOS/src/queue.c **** 				/* Remember the read position so it can be reset after the data
1672:FreeRTOS/src/queue.c **** 				is read from the queue as this function is only peeking the
1673:FreeRTOS/src/queue.c **** 				data, not removing it. */
1674:FreeRTOS/src/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1675:FreeRTOS/src/queue.c **** 
1676:FreeRTOS/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1677:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1678:FreeRTOS/src/queue.c **** 
1679:FreeRTOS/src/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1680:FreeRTOS/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1681:FreeRTOS/src/queue.c **** 
1682:FreeRTOS/src/queue.c **** 				/* The data is being left in the queue, so see if there are
1683:FreeRTOS/src/queue.c **** 				any other tasks waiting for the data. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 31


1684:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1685:FreeRTOS/src/queue.c **** 				{
1686:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1687:FreeRTOS/src/queue.c **** 					{
1688:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority than this task. */
1689:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1690:FreeRTOS/src/queue.c **** 					}
1691:FreeRTOS/src/queue.c **** 					else
1692:FreeRTOS/src/queue.c **** 					{
1693:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1694:FreeRTOS/src/queue.c **** 					}
1695:FreeRTOS/src/queue.c **** 				}
1696:FreeRTOS/src/queue.c **** 				else
1697:FreeRTOS/src/queue.c **** 				{
1698:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1699:FreeRTOS/src/queue.c **** 				}
1700:FreeRTOS/src/queue.c **** 
1701:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1702:FreeRTOS/src/queue.c **** 				return pdPASS;
1703:FreeRTOS/src/queue.c **** 			}
1704:FreeRTOS/src/queue.c **** 			else
1705:FreeRTOS/src/queue.c **** 			{
1706:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1707:FreeRTOS/src/queue.c **** 				{
1708:FreeRTOS/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1709:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
1710:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1711:FreeRTOS/src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1712:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1713:FreeRTOS/src/queue.c **** 				}
1714:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1715:FreeRTOS/src/queue.c **** 				{
1716:FreeRTOS/src/queue.c **** 					/* The queue was empty and a block time was specified so
1717:FreeRTOS/src/queue.c **** 					configure the timeout structure ready to enter the blocked
1718:FreeRTOS/src/queue.c **** 					state. */
1719:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1720:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1721:FreeRTOS/src/queue.c **** 				}
1722:FreeRTOS/src/queue.c **** 				else
1723:FreeRTOS/src/queue.c **** 				{
1724:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1725:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1726:FreeRTOS/src/queue.c **** 				}
1727:FreeRTOS/src/queue.c **** 			}
1728:FreeRTOS/src/queue.c **** 		}
1729:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1730:FreeRTOS/src/queue.c **** 
1731:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1732:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1733:FreeRTOS/src/queue.c **** 
1734:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1735:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1736:FreeRTOS/src/queue.c **** 
1737:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1738:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1739:FreeRTOS/src/queue.c **** 		{
1740:FreeRTOS/src/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 32


1741:FreeRTOS/src/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1742:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1743:FreeRTOS/src/queue.c **** 			{
1744:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1745:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1746:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1747:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1748:FreeRTOS/src/queue.c **** 				{
1749:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1750:FreeRTOS/src/queue.c **** 				}
1751:FreeRTOS/src/queue.c **** 				else
1752:FreeRTOS/src/queue.c **** 				{
1753:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1754:FreeRTOS/src/queue.c **** 				}
1755:FreeRTOS/src/queue.c **** 			}
1756:FreeRTOS/src/queue.c **** 			else
1757:FreeRTOS/src/queue.c **** 			{
1758:FreeRTOS/src/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1759:FreeRTOS/src/queue.c **** 				state, instead return to try and obtain the data. */
1760:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1761:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1762:FreeRTOS/src/queue.c **** 			}
1763:FreeRTOS/src/queue.c **** 		}
1764:FreeRTOS/src/queue.c **** 		else
1765:FreeRTOS/src/queue.c **** 		{
1766:FreeRTOS/src/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1767:FreeRTOS/src/queue.c **** 			exit, otherwise go back and try to read the data again. */
1768:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1769:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1770:FreeRTOS/src/queue.c **** 
1771:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1772:FreeRTOS/src/queue.c **** 			{
1773:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1774:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1775:FreeRTOS/src/queue.c **** 			}
1776:FreeRTOS/src/queue.c **** 			else
1777:FreeRTOS/src/queue.c **** 			{
1778:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1779:FreeRTOS/src/queue.c **** 			}
1780:FreeRTOS/src/queue.c **** 		}
1781:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1782:FreeRTOS/src/queue.c **** }
1783:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1784:FreeRTOS/src/queue.c **** 
1785:FreeRTOS/src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1786:FreeRTOS/src/queue.c **** {
1787:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1788:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1789:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1790:FreeRTOS/src/queue.c **** 
1791:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1792:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1793:FreeRTOS/src/queue.c **** 
1794:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 33


1798:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1799:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1800:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1802:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1808:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1809:FreeRTOS/src/queue.c **** 
1810:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1811:FreeRTOS/src/queue.c **** 	{
1812:FreeRTOS/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1813:FreeRTOS/src/queue.c **** 
1814:FreeRTOS/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1815:FreeRTOS/src/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1816:FreeRTOS/src/queue.c **** 		{
1817:FreeRTOS/src/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1818:FreeRTOS/src/queue.c **** 
1819:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1820:FreeRTOS/src/queue.c **** 
1821:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1822:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1823:FreeRTOS/src/queue.c **** 
1824:FreeRTOS/src/queue.c **** 			/* If the queue is locked the event list will not be modified.
1825:FreeRTOS/src/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1826:FreeRTOS/src/queue.c **** 			will know that an ISR has removed data while the queue was
1827:FreeRTOS/src/queue.c **** 			locked. */
1828:FreeRTOS/src/queue.c **** 			if( cRxLock == queueUNLOCKED )
1829:FreeRTOS/src/queue.c **** 			{
1830:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1831:FreeRTOS/src/queue.c **** 				{
1832:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1833:FreeRTOS/src/queue.c **** 					{
1834:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority than us so
1835:FreeRTOS/src/queue.c **** 						force a context switch. */
1836:FreeRTOS/src/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1837:FreeRTOS/src/queue.c **** 						{
1838:FreeRTOS/src/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1839:FreeRTOS/src/queue.c **** 						}
1840:FreeRTOS/src/queue.c **** 						else
1841:FreeRTOS/src/queue.c **** 						{
1842:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:FreeRTOS/src/queue.c **** 						}
1844:FreeRTOS/src/queue.c **** 					}
1845:FreeRTOS/src/queue.c **** 					else
1846:FreeRTOS/src/queue.c **** 					{
1847:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1848:FreeRTOS/src/queue.c **** 					}
1849:FreeRTOS/src/queue.c **** 				}
1850:FreeRTOS/src/queue.c **** 				else
1851:FreeRTOS/src/queue.c **** 				{
1852:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1853:FreeRTOS/src/queue.c **** 				}
1854:FreeRTOS/src/queue.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 34


1855:FreeRTOS/src/queue.c **** 			else
1856:FreeRTOS/src/queue.c **** 			{
1857:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1858:FreeRTOS/src/queue.c **** 				knows that data was removed while it was locked. */
1859:FreeRTOS/src/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1860:FreeRTOS/src/queue.c **** 			}
1861:FreeRTOS/src/queue.c **** 
1862:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1863:FreeRTOS/src/queue.c **** 		}
1864:FreeRTOS/src/queue.c **** 		else
1865:FreeRTOS/src/queue.c **** 		{
1866:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
1867:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1868:FreeRTOS/src/queue.c **** 		}
1869:FreeRTOS/src/queue.c **** 	}
1870:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1871:FreeRTOS/src/queue.c **** 
1872:FreeRTOS/src/queue.c **** 	return xReturn;
1873:FreeRTOS/src/queue.c **** }
1874:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1875:FreeRTOS/src/queue.c **** 
1876:FreeRTOS/src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1877:FreeRTOS/src/queue.c **** {
1878:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1879:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1880:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
1881:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1882:FreeRTOS/src/queue.c **** 
1883:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1884:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1885:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1886:FreeRTOS/src/queue.c **** 
1887:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1888:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1889:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1890:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1891:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1892:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1893:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1894:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1895:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1896:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1897:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1898:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1899:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1900:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1901:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1902:FreeRTOS/src/queue.c **** 
1903:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1904:FreeRTOS/src/queue.c **** 	{
1905:FreeRTOS/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1906:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1907:FreeRTOS/src/queue.c **** 		{
1908:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1909:FreeRTOS/src/queue.c **** 
1910:FreeRTOS/src/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1911:FreeRTOS/src/queue.c **** 			actually being removed from the queue. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 35


1912:FreeRTOS/src/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1913:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1914:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1915:FreeRTOS/src/queue.c **** 
1916:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1917:FreeRTOS/src/queue.c **** 		}
1918:FreeRTOS/src/queue.c **** 		else
1919:FreeRTOS/src/queue.c **** 		{
1920:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
1921:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1922:FreeRTOS/src/queue.c **** 		}
1923:FreeRTOS/src/queue.c **** 	}
1924:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1925:FreeRTOS/src/queue.c **** 
1926:FreeRTOS/src/queue.c **** 	return xReturn;
1927:FreeRTOS/src/queue.c **** }
1928:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1929:FreeRTOS/src/queue.c **** 
1930:FreeRTOS/src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1931:FreeRTOS/src/queue.c **** {
1932:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1933:FreeRTOS/src/queue.c **** 
1934:FreeRTOS/src/queue.c **** 	configASSERT( xQueue );
1935:FreeRTOS/src/queue.c **** 
1936:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
1937:FreeRTOS/src/queue.c **** 	{
1938:FreeRTOS/src/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1939:FreeRTOS/src/queue.c **** 	}
1940:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
1941:FreeRTOS/src/queue.c **** 
1942:FreeRTOS/src/queue.c **** 	return uxReturn;
1943:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1944:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1945:FreeRTOS/src/queue.c **** 
1946:FreeRTOS/src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1947:FreeRTOS/src/queue.c **** {
1948:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1949:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1950:FreeRTOS/src/queue.c **** 
1951:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1952:FreeRTOS/src/queue.c **** 
1953:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
1954:FreeRTOS/src/queue.c **** 	{
1955:FreeRTOS/src/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1956:FreeRTOS/src/queue.c **** 	}
1957:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
1958:FreeRTOS/src/queue.c **** 
1959:FreeRTOS/src/queue.c **** 	return uxReturn;
1960:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1961:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1962:FreeRTOS/src/queue.c **** 
1963:FreeRTOS/src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1964:FreeRTOS/src/queue.c **** {
1965:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1966:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1967:FreeRTOS/src/queue.c **** 
1968:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 36


1969:FreeRTOS/src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1970:FreeRTOS/src/queue.c **** 
1971:FreeRTOS/src/queue.c **** 	return uxReturn;
1972:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1973:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1974:FreeRTOS/src/queue.c **** 
1975:FreeRTOS/src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1976:FreeRTOS/src/queue.c **** {
1977:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1978:FreeRTOS/src/queue.c **** 
1979:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1980:FreeRTOS/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1981:FreeRTOS/src/queue.c **** 
1982:FreeRTOS/src/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1983:FreeRTOS/src/queue.c **** 	{
1984:FreeRTOS/src/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1985:FreeRTOS/src/queue.c **** 	}
1986:FreeRTOS/src/queue.c **** 	#endif
1987:FreeRTOS/src/queue.c **** 
1988:FreeRTOS/src/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1989:FreeRTOS/src/queue.c **** 	{
1990:FreeRTOS/src/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1991:FreeRTOS/src/queue.c **** 		again. */
1992:FreeRTOS/src/queue.c **** 		vPortFree( pxQueue );
1993:FreeRTOS/src/queue.c **** 	}
1994:FreeRTOS/src/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1995:FreeRTOS/src/queue.c **** 	{
1996:FreeRTOS/src/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1997:FreeRTOS/src/queue.c **** 		check before attempting to free the memory. */
1998:FreeRTOS/src/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1999:FreeRTOS/src/queue.c **** 		{
2000:FreeRTOS/src/queue.c **** 			vPortFree( pxQueue );
2001:FreeRTOS/src/queue.c **** 		}
2002:FreeRTOS/src/queue.c **** 		else
2003:FreeRTOS/src/queue.c **** 		{
2004:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2005:FreeRTOS/src/queue.c **** 		}
2006:FreeRTOS/src/queue.c **** 	}
2007:FreeRTOS/src/queue.c **** 	#else
2008:FreeRTOS/src/queue.c **** 	{
2009:FreeRTOS/src/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2010:FreeRTOS/src/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2011:FreeRTOS/src/queue.c **** 		( void ) pxQueue;
2012:FreeRTOS/src/queue.c **** 	}
2013:FreeRTOS/src/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2014:FreeRTOS/src/queue.c **** }
2015:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2016:FreeRTOS/src/queue.c **** 
2017:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:FreeRTOS/src/queue.c **** 
2019:FreeRTOS/src/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2020:FreeRTOS/src/queue.c **** 	{
2021:FreeRTOS/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2022:FreeRTOS/src/queue.c **** 	}
2023:FreeRTOS/src/queue.c **** 
2024:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 37


2026:FreeRTOS/src/queue.c **** 
2027:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2028:FreeRTOS/src/queue.c **** 
2029:FreeRTOS/src/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2030:FreeRTOS/src/queue.c **** 	{
2031:FreeRTOS/src/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2032:FreeRTOS/src/queue.c **** 	}
2033:FreeRTOS/src/queue.c **** 
2034:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2035:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2036:FreeRTOS/src/queue.c **** 
2037:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2038:FreeRTOS/src/queue.c **** 
2039:FreeRTOS/src/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2040:FreeRTOS/src/queue.c **** 	{
2041:FreeRTOS/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2042:FreeRTOS/src/queue.c **** 	}
2043:FreeRTOS/src/queue.c **** 
2044:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2045:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2046:FreeRTOS/src/queue.c **** 
2047:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
2048:FreeRTOS/src/queue.c **** 
2049:FreeRTOS/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2050:FreeRTOS/src/queue.c **** 	{
  29              		.loc 1 2050 2 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
2051:FreeRTOS/src/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
  34              		.loc 1 2051 2 view .LVU1
2052:FreeRTOS/src/queue.c **** 
2053:FreeRTOS/src/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2054:FreeRTOS/src/queue.c **** 		priority, but the waiting task times out, then the holder should
2055:FreeRTOS/src/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2056:FreeRTOS/src/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2057:FreeRTOS/src/queue.c **** 		return the priority of the highest priority task that is waiting for the
2058:FreeRTOS/src/queue.c **** 		mutex. */
2059:FreeRTOS/src/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  35              		.loc 1 2059 3 view .LVU2
  36              		.loc 1 2059 7 is_stmt 0 view .LVU3
  37 0000 436A     		ldr	r3, [r0, #36]
  38              		.loc 1 2059 5 view .LVU4
  39 0002 23B1     		cbz	r3, .L3
2060:FreeRTOS/src/queue.c **** 		{
2061:FreeRTOS/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  40              		.loc 1 2061 4 is_stmt 1 view .LVU5
  41              		.loc 1 2061 93 is_stmt 0 view .LVU6
  42 0004 036B     		ldr	r3, [r0, #48]
  43 0006 1868     		ldr	r0, [r3]
  44              	.LVL1:
  45              		.loc 1 2061 36 view .LVU7
  46 0008 C0F10500 		rsb	r0, r0, #5
  47              	.LVL2:
  48              		.loc 1 2061 36 view .LVU8
  49 000c 7047     		bx	lr
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 38


  50              	.LVL3:
  51              	.L3:
2062:FreeRTOS/src/queue.c **** 		}
2063:FreeRTOS/src/queue.c **** 		else
2064:FreeRTOS/src/queue.c **** 		{
2065:FreeRTOS/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  52              		.loc 1 2065 36 view .LVU9
  53 000e 0020     		movs	r0, #0
  54              	.LVL4:
2066:FreeRTOS/src/queue.c **** 		}
2067:FreeRTOS/src/queue.c **** 
2068:FreeRTOS/src/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
  55              		.loc 1 2068 3 is_stmt 1 view .LVU10
2069:FreeRTOS/src/queue.c **** 	}
  56              		.loc 1 2069 2 is_stmt 0 view .LVU11
  57 0010 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE24:
  61              		.section	.text.prvIsQueueFull,"ax",%progbits
  62              		.align	1
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	prvIsQueueFull:
  69              	.LVL5:
  70              	.LFB30:
2070:FreeRTOS/src/queue.c **** 
2071:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
2072:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2073:FreeRTOS/src/queue.c **** 
2074:FreeRTOS/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2075:FreeRTOS/src/queue.c **** {
2076:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
2077:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
2078:FreeRTOS/src/queue.c **** 
2079:FreeRTOS/src/queue.c **** 	/* This function is called from a critical section. */
2080:FreeRTOS/src/queue.c **** 
2081:FreeRTOS/src/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2082:FreeRTOS/src/queue.c **** 
2083:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2084:FreeRTOS/src/queue.c **** 	{
2085:FreeRTOS/src/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2086:FreeRTOS/src/queue.c **** 		{
2087:FreeRTOS/src/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2088:FreeRTOS/src/queue.c **** 			{
2089:FreeRTOS/src/queue.c **** 				/* The mutex is no longer being held. */
2090:FreeRTOS/src/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2091:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2092:FreeRTOS/src/queue.c **** 			}
2093:FreeRTOS/src/queue.c **** 			else
2094:FreeRTOS/src/queue.c **** 			{
2095:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2096:FreeRTOS/src/queue.c **** 			}
2097:FreeRTOS/src/queue.c **** 		}
2098:FreeRTOS/src/queue.c **** 		#endif /* configUSE_MUTEXES */
2099:FreeRTOS/src/queue.c **** 	}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 39


2100:FreeRTOS/src/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2101:FreeRTOS/src/queue.c **** 	{
2102:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2103:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2104:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2105:FreeRTOS/src/queue.c **** 		{
2106:FreeRTOS/src/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2107:FreeRTOS/src/queue.c **** 		}
2108:FreeRTOS/src/queue.c **** 		else
2109:FreeRTOS/src/queue.c **** 		{
2110:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2111:FreeRTOS/src/queue.c **** 		}
2112:FreeRTOS/src/queue.c **** 	}
2113:FreeRTOS/src/queue.c **** 	else
2114:FreeRTOS/src/queue.c **** 	{
2115:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2116:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2117:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2118:FreeRTOS/src/queue.c **** 		{
2119:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2120:FreeRTOS/src/queue.c **** 		}
2121:FreeRTOS/src/queue.c **** 		else
2122:FreeRTOS/src/queue.c **** 		{
2123:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:FreeRTOS/src/queue.c **** 		}
2125:FreeRTOS/src/queue.c **** 
2126:FreeRTOS/src/queue.c **** 		if( xPosition == queueOVERWRITE )
2127:FreeRTOS/src/queue.c **** 		{
2128:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2129:FreeRTOS/src/queue.c **** 			{
2130:FreeRTOS/src/queue.c **** 				/* An item is not being added but overwritten, so subtract
2131:FreeRTOS/src/queue.c **** 				one from the recorded number of items in the queue so when
2132:FreeRTOS/src/queue.c **** 				one is added again below the number of recorded items remains
2133:FreeRTOS/src/queue.c **** 				correct. */
2134:FreeRTOS/src/queue.c **** 				--uxMessagesWaiting;
2135:FreeRTOS/src/queue.c **** 			}
2136:FreeRTOS/src/queue.c **** 			else
2137:FreeRTOS/src/queue.c **** 			{
2138:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2139:FreeRTOS/src/queue.c **** 			}
2140:FreeRTOS/src/queue.c **** 		}
2141:FreeRTOS/src/queue.c **** 		else
2142:FreeRTOS/src/queue.c **** 		{
2143:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2144:FreeRTOS/src/queue.c **** 		}
2145:FreeRTOS/src/queue.c **** 	}
2146:FreeRTOS/src/queue.c **** 
2147:FreeRTOS/src/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2148:FreeRTOS/src/queue.c **** 
2149:FreeRTOS/src/queue.c **** 	return xReturn;
2150:FreeRTOS/src/queue.c **** }
2151:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2152:FreeRTOS/src/queue.c **** 
2153:FreeRTOS/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2154:FreeRTOS/src/queue.c **** {
2155:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2156:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 40


2157:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2158:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2159:FreeRTOS/src/queue.c **** 		{
2160:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2161:FreeRTOS/src/queue.c **** 		}
2162:FreeRTOS/src/queue.c **** 		else
2163:FreeRTOS/src/queue.c **** 		{
2164:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2165:FreeRTOS/src/queue.c **** 		}
2166:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2167:FreeRTOS/src/queue.c **** 	}
2168:FreeRTOS/src/queue.c **** }
2169:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2170:FreeRTOS/src/queue.c **** 
2171:FreeRTOS/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2172:FreeRTOS/src/queue.c **** {
2173:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2174:FreeRTOS/src/queue.c **** 
2175:FreeRTOS/src/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2176:FreeRTOS/src/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2177:FreeRTOS/src/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2178:FreeRTOS/src/queue.c **** 	updated. */
2179:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2180:FreeRTOS/src/queue.c **** 	{
2181:FreeRTOS/src/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2182:FreeRTOS/src/queue.c **** 
2183:FreeRTOS/src/queue.c **** 		/* See if data was added to the queue while it was locked. */
2184:FreeRTOS/src/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2185:FreeRTOS/src/queue.c **** 		{
2186:FreeRTOS/src/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2187:FreeRTOS/src/queue.c **** 			blocked waiting for data to become available? */
2188:FreeRTOS/src/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2189:FreeRTOS/src/queue.c **** 			{
2190:FreeRTOS/src/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2191:FreeRTOS/src/queue.c **** 				{
2192:FreeRTOS/src/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2193:FreeRTOS/src/queue.c **** 					{
2194:FreeRTOS/src/queue.c **** 						/* The queue is a member of a queue set, and posting to
2195:FreeRTOS/src/queue.c **** 						the queue set caused a higher priority task to unblock.
2196:FreeRTOS/src/queue.c **** 						A context switch is required. */
2197:FreeRTOS/src/queue.c **** 						vTaskMissedYield();
2198:FreeRTOS/src/queue.c **** 					}
2199:FreeRTOS/src/queue.c **** 					else
2200:FreeRTOS/src/queue.c **** 					{
2201:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2202:FreeRTOS/src/queue.c **** 					}
2203:FreeRTOS/src/queue.c **** 				}
2204:FreeRTOS/src/queue.c **** 				else
2205:FreeRTOS/src/queue.c **** 				{
2206:FreeRTOS/src/queue.c **** 					/* Tasks that are removed from the event list will get
2207:FreeRTOS/src/queue.c **** 					added to the pending ready list as the scheduler is still
2208:FreeRTOS/src/queue.c **** 					suspended. */
2209:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2210:FreeRTOS/src/queue.c **** 					{
2211:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2212:FreeRTOS/src/queue.c **** 						{
2213:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 41


2214:FreeRTOS/src/queue.c **** 							context	switch is required. */
2215:FreeRTOS/src/queue.c **** 							vTaskMissedYield();
2216:FreeRTOS/src/queue.c **** 						}
2217:FreeRTOS/src/queue.c **** 						else
2218:FreeRTOS/src/queue.c **** 						{
2219:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2220:FreeRTOS/src/queue.c **** 						}
2221:FreeRTOS/src/queue.c **** 					}
2222:FreeRTOS/src/queue.c **** 					else
2223:FreeRTOS/src/queue.c **** 					{
2224:FreeRTOS/src/queue.c **** 						break;
2225:FreeRTOS/src/queue.c **** 					}
2226:FreeRTOS/src/queue.c **** 				}
2227:FreeRTOS/src/queue.c **** 			}
2228:FreeRTOS/src/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2229:FreeRTOS/src/queue.c **** 			{
2230:FreeRTOS/src/queue.c **** 				/* Tasks that are removed from the event list will get added to
2231:FreeRTOS/src/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2232:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2233:FreeRTOS/src/queue.c **** 				{
2234:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2235:FreeRTOS/src/queue.c **** 					{
2236:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority so record that
2237:FreeRTOS/src/queue.c **** 						a context switch is required. */
2238:FreeRTOS/src/queue.c **** 						vTaskMissedYield();
2239:FreeRTOS/src/queue.c **** 					}
2240:FreeRTOS/src/queue.c **** 					else
2241:FreeRTOS/src/queue.c **** 					{
2242:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:FreeRTOS/src/queue.c **** 					}
2244:FreeRTOS/src/queue.c **** 				}
2245:FreeRTOS/src/queue.c **** 				else
2246:FreeRTOS/src/queue.c **** 				{
2247:FreeRTOS/src/queue.c **** 					break;
2248:FreeRTOS/src/queue.c **** 				}
2249:FreeRTOS/src/queue.c **** 			}
2250:FreeRTOS/src/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2251:FreeRTOS/src/queue.c **** 
2252:FreeRTOS/src/queue.c **** 			--cTxLock;
2253:FreeRTOS/src/queue.c **** 		}
2254:FreeRTOS/src/queue.c **** 
2255:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2256:FreeRTOS/src/queue.c **** 	}
2257:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2258:FreeRTOS/src/queue.c **** 
2259:FreeRTOS/src/queue.c **** 	/* Do the same for the Rx lock. */
2260:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2261:FreeRTOS/src/queue.c **** 	{
2262:FreeRTOS/src/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2263:FreeRTOS/src/queue.c **** 
2264:FreeRTOS/src/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2265:FreeRTOS/src/queue.c **** 		{
2266:FreeRTOS/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2267:FreeRTOS/src/queue.c **** 			{
2268:FreeRTOS/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2269:FreeRTOS/src/queue.c **** 				{
2270:FreeRTOS/src/queue.c **** 					vTaskMissedYield();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 42


2271:FreeRTOS/src/queue.c **** 				}
2272:FreeRTOS/src/queue.c **** 				else
2273:FreeRTOS/src/queue.c **** 				{
2274:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2275:FreeRTOS/src/queue.c **** 				}
2276:FreeRTOS/src/queue.c **** 
2277:FreeRTOS/src/queue.c **** 				--cRxLock;
2278:FreeRTOS/src/queue.c **** 			}
2279:FreeRTOS/src/queue.c **** 			else
2280:FreeRTOS/src/queue.c **** 			{
2281:FreeRTOS/src/queue.c **** 				break;
2282:FreeRTOS/src/queue.c **** 			}
2283:FreeRTOS/src/queue.c **** 		}
2284:FreeRTOS/src/queue.c **** 
2285:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2286:FreeRTOS/src/queue.c **** 	}
2287:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2288:FreeRTOS/src/queue.c **** }
2289:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2290:FreeRTOS/src/queue.c **** 
2291:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2292:FreeRTOS/src/queue.c **** {
2293:FreeRTOS/src/queue.c **** BaseType_t xReturn;
2294:FreeRTOS/src/queue.c **** 
2295:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2296:FreeRTOS/src/queue.c **** 	{
2297:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2298:FreeRTOS/src/queue.c **** 		{
2299:FreeRTOS/src/queue.c **** 			xReturn = pdTRUE;
2300:FreeRTOS/src/queue.c **** 		}
2301:FreeRTOS/src/queue.c **** 		else
2302:FreeRTOS/src/queue.c **** 		{
2303:FreeRTOS/src/queue.c **** 			xReturn = pdFALSE;
2304:FreeRTOS/src/queue.c **** 		}
2305:FreeRTOS/src/queue.c **** 	}
2306:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2307:FreeRTOS/src/queue.c **** 
2308:FreeRTOS/src/queue.c **** 	return xReturn;
2309:FreeRTOS/src/queue.c **** }
2310:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2311:FreeRTOS/src/queue.c **** 
2312:FreeRTOS/src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2313:FreeRTOS/src/queue.c **** {
2314:FreeRTOS/src/queue.c **** BaseType_t xReturn;
2315:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
2316:FreeRTOS/src/queue.c **** 
2317:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
2318:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2319:FreeRTOS/src/queue.c **** 	{
2320:FreeRTOS/src/queue.c **** 		xReturn = pdTRUE;
2321:FreeRTOS/src/queue.c **** 	}
2322:FreeRTOS/src/queue.c **** 	else
2323:FreeRTOS/src/queue.c **** 	{
2324:FreeRTOS/src/queue.c **** 		xReturn = pdFALSE;
2325:FreeRTOS/src/queue.c **** 	}
2326:FreeRTOS/src/queue.c **** 
2327:FreeRTOS/src/queue.c **** 	return xReturn;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 43


2328:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2329:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2330:FreeRTOS/src/queue.c **** 
2331:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2332:FreeRTOS/src/queue.c **** {
  71              		.loc 1 2332 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		.loc 1 2332 1 is_stmt 0 view .LVU13
  76 0000 10B5     		push	{r4, lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 4, -8
  80              		.cfi_offset 14, -4
  81 0002 0446     		mov	r4, r0
2333:FreeRTOS/src/queue.c **** BaseType_t xReturn;
  82              		.loc 1 2333 1 is_stmt 1 view .LVU14
2334:FreeRTOS/src/queue.c **** 
2335:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
  83              		.loc 1 2335 2 view .LVU15
  84 0004 FFF7FEFF 		bl	vPortEnterCritical
  85              	.LVL6:
2336:FreeRTOS/src/queue.c **** 	{
2337:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  86              		.loc 1 2337 3 view .LVU16
  87              		.loc 1 2337 14 is_stmt 0 view .LVU17
  88 0008 A26B     		ldr	r2, [r4, #56]
  89              		.loc 1 2337 44 view .LVU18
  90 000a E36B     		ldr	r3, [r4, #60]
  91              		.loc 1 2337 5 view .LVU19
  92 000c 9A42     		cmp	r2, r3
  93 000e 04D0     		beq	.L8
2338:FreeRTOS/src/queue.c **** 		{
2339:FreeRTOS/src/queue.c **** 			xReturn = pdTRUE;
2340:FreeRTOS/src/queue.c **** 		}
2341:FreeRTOS/src/queue.c **** 		else
2342:FreeRTOS/src/queue.c **** 		{
2343:FreeRTOS/src/queue.c **** 			xReturn = pdFALSE;
  94              		.loc 1 2343 12 view .LVU20
  95 0010 0024     		movs	r4, #0
  96              	.LVL7:
  97              	.L5:
2344:FreeRTOS/src/queue.c **** 		}
2345:FreeRTOS/src/queue.c **** 	}
2346:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
  98              		.loc 1 2346 2 is_stmt 1 view .LVU21
  99 0012 FFF7FEFF 		bl	vPortExitCritical
 100              	.LVL8:
2347:FreeRTOS/src/queue.c **** 
2348:FreeRTOS/src/queue.c **** 	return xReturn;
 101              		.loc 1 2348 2 view .LVU22
2349:FreeRTOS/src/queue.c **** }
 102              		.loc 1 2349 1 is_stmt 0 view .LVU23
 103 0016 2046     		mov	r0, r4
 104 0018 10BD     		pop	{r4, pc}
 105              	.LVL9:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 44


 106              	.L8:
2339:FreeRTOS/src/queue.c **** 		}
 107              		.loc 1 2339 12 view .LVU24
 108 001a 0124     		movs	r4, #1
 109              	.LVL10:
2339:FreeRTOS/src/queue.c **** 		}
 110              		.loc 1 2339 12 view .LVU25
 111 001c F9E7     		b	.L5
 112              		.cfi_endproc
 113              	.LFE30:
 115              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 116              		.align	1
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	prvIsQueueEmpty:
 123              	.LVL11:
 124              	.LFB28:
2292:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 125              		.loc 1 2292 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
2292:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 129              		.loc 1 2292 1 is_stmt 0 view .LVU27
 130 0000 10B5     		push	{r4, lr}
 131              	.LCFI1:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
 135 0002 0446     		mov	r4, r0
2293:FreeRTOS/src/queue.c **** 
 136              		.loc 1 2293 1 is_stmt 1 view .LVU28
2295:FreeRTOS/src/queue.c **** 	{
 137              		.loc 1 2295 2 view .LVU29
 138 0004 FFF7FEFF 		bl	vPortEnterCritical
 139              	.LVL12:
2297:FreeRTOS/src/queue.c **** 		{
 140              		.loc 1 2297 3 view .LVU30
2297:FreeRTOS/src/queue.c **** 		{
 141              		.loc 1 2297 14 is_stmt 0 view .LVU31
 142 0008 A36B     		ldr	r3, [r4, #56]
2297:FreeRTOS/src/queue.c **** 		{
 143              		.loc 1 2297 5 view .LVU32
 144 000a 23B9     		cbnz	r3, .L11
2299:FreeRTOS/src/queue.c **** 		}
 145              		.loc 1 2299 12 view .LVU33
 146 000c 0124     		movs	r4, #1
 147              	.LVL13:
 148              	.L10:
2306:FreeRTOS/src/queue.c **** 
 149              		.loc 1 2306 2 is_stmt 1 view .LVU34
 150 000e FFF7FEFF 		bl	vPortExitCritical
 151              	.LVL14:
2308:FreeRTOS/src/queue.c **** }
 152              		.loc 1 2308 2 view .LVU35
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 45


2309:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 153              		.loc 1 2309 1 is_stmt 0 view .LVU36
 154 0012 2046     		mov	r0, r4
 155 0014 10BD     		pop	{r4, pc}
 156              	.LVL15:
 157              	.L11:
2303:FreeRTOS/src/queue.c **** 		}
 158              		.loc 1 2303 12 view .LVU37
 159 0016 0024     		movs	r4, #0
 160              	.LVL16:
2303:FreeRTOS/src/queue.c **** 		}
 161              		.loc 1 2303 12 view .LVU38
 162 0018 F9E7     		b	.L10
 163              		.cfi_endproc
 164              	.LFE28:
 166              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 167              		.align	1
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	prvCopyDataToQueue:
 174              	.LVL17:
 175              	.LFB25:
2075:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
 176              		.loc 1 2075 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
2075:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
 180              		.loc 1 2075 1 is_stmt 0 view .LVU40
 181 0000 70B5     		push	{r4, r5, r6, lr}
 182              	.LCFI2:
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 4, -16
 185              		.cfi_offset 5, -12
 186              		.cfi_offset 6, -8
 187              		.cfi_offset 14, -4
 188 0002 0446     		mov	r4, r0
 189 0004 1646     		mov	r6, r2
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 190              		.loc 1 2076 1 is_stmt 1 view .LVU41
 191              	.LVL18:
2077:FreeRTOS/src/queue.c **** 
 192              		.loc 1 2077 1 view .LVU42
2081:FreeRTOS/src/queue.c **** 
 193              		.loc 1 2081 2 view .LVU43
2081:FreeRTOS/src/queue.c **** 
 194              		.loc 1 2081 20 is_stmt 0 view .LVU44
 195 0006 856B     		ldr	r5, [r0, #56]
 196              	.LVL19:
2083:FreeRTOS/src/queue.c **** 	{
 197              		.loc 1 2083 2 is_stmt 1 view .LVU45
2083:FreeRTOS/src/queue.c **** 	{
 198              		.loc 1 2083 13 is_stmt 0 view .LVU46
 199 0008 026C     		ldr	r2, [r0, #64]
 200              	.LVL20:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 46


2083:FreeRTOS/src/queue.c **** 	{
 201              		.loc 1 2083 4 view .LVU47
 202 000a 5AB9     		cbnz	r2, .L14
2087:FreeRTOS/src/queue.c **** 			{
 203              		.loc 1 2087 4 is_stmt 1 view .LVU48
2087:FreeRTOS/src/queue.c **** 			{
 204              		.loc 1 2087 15 is_stmt 0 view .LVU49
 205 000c 0368     		ldr	r3, [r0]
2087:FreeRTOS/src/queue.c **** 			{
 206              		.loc 1 2087 6 view .LVU50
 207 000e 1BB1     		cbz	r3, .L23
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 208              		.loc 1 2076 12 view .LVU51
 209 0010 0020     		movs	r0, #0
 210              	.LVL21:
 211              	.L15:
2143:FreeRTOS/src/queue.c **** 		}
 212              		.loc 1 2143 28 is_stmt 1 view .LVU52
2147:FreeRTOS/src/queue.c **** 
 213              		.loc 1 2147 2 view .LVU53
2147:FreeRTOS/src/queue.c **** 
 214              		.loc 1 2147 49 is_stmt 0 view .LVU54
 215 0012 0135     		adds	r5, r5, #1
 216              	.LVL22:
2147:FreeRTOS/src/queue.c **** 
 217              		.loc 1 2147 29 view .LVU55
 218 0014 A563     		str	r5, [r4, #56]
2149:FreeRTOS/src/queue.c **** }
 219              		.loc 1 2149 2 is_stmt 1 view .LVU56
2150:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 220              		.loc 1 2150 1 is_stmt 0 view .LVU57
 221 0016 70BD     		pop	{r4, r5, r6, pc}
 222              	.LVL23:
 223              	.L23:
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 224              		.loc 1 2090 5 is_stmt 1 view .LVU58
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 225              		.loc 1 2090 15 is_stmt 0 view .LVU59
 226 0018 8068     		ldr	r0, [r0, #8]
 227              	.LVL24:
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 228              		.loc 1 2090 15 view .LVU60
 229 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 230              	.LVL25:
2091:FreeRTOS/src/queue.c **** 			}
 231              		.loc 1 2091 5 is_stmt 1 view .LVU61
2091:FreeRTOS/src/queue.c **** 			}
 232              		.loc 1 2091 40 is_stmt 0 view .LVU62
 233 001e 0023     		movs	r3, #0
 234 0020 A360     		str	r3, [r4, #8]
 235 0022 F6E7     		b	.L15
 236              	.LVL26:
 237              	.L14:
2100:FreeRTOS/src/queue.c **** 	{
 238              		.loc 1 2100 7 is_stmt 1 view .LVU63
2100:FreeRTOS/src/queue.c **** 	{
 239              		.loc 1 2100 9 is_stmt 0 view .LVU64
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 47


 240 0024 6EB9     		cbnz	r6, .L16
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 241              		.loc 1 2102 3 is_stmt 1 view .LVU65
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 242              		.loc 1 2102 12 is_stmt 0 view .LVU66
 243 0026 4068     		ldr	r0, [r0, #4]
 244              	.LVL27:
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 245              		.loc 1 2102 12 view .LVU67
 246 0028 FFF7FEFF 		bl	memcpy
 247              	.LVL28:
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 248              		.loc 1 2103 3 is_stmt 1 view .LVU68
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 249              		.loc 1 2103 32 is_stmt 0 view .LVU69
 250 002c 226C     		ldr	r2, [r4, #64]
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 251              		.loc 1 2103 22 view .LVU70
 252 002e 6368     		ldr	r3, [r4, #4]
 253 0030 1344     		add	r3, r3, r2
 254 0032 6360     		str	r3, [r4, #4]
2104:FreeRTOS/src/queue.c **** 		{
 255              		.loc 1 2104 3 is_stmt 1 view .LVU71
2104:FreeRTOS/src/queue.c **** 		{
 256              		.loc 1 2104 46 is_stmt 0 view .LVU72
 257 0034 A268     		ldr	r2, [r4, #8]
2104:FreeRTOS/src/queue.c **** 		{
 258              		.loc 1 2104 5 view .LVU73
 259 0036 9342     		cmp	r3, r2
 260 0038 19D3     		bcc	.L19
2106:FreeRTOS/src/queue.c **** 		}
 261              		.loc 1 2106 4 is_stmt 1 view .LVU74
2106:FreeRTOS/src/queue.c **** 		}
 262              		.loc 1 2106 32 is_stmt 0 view .LVU75
 263 003a 2368     		ldr	r3, [r4]
2106:FreeRTOS/src/queue.c **** 		}
 264              		.loc 1 2106 23 view .LVU76
 265 003c 6360     		str	r3, [r4, #4]
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 266              		.loc 1 2076 12 view .LVU77
 267 003e 0020     		movs	r0, #0
 268 0040 E7E7     		b	.L15
 269              	.LVL29:
 270              	.L16:
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 271              		.loc 1 2115 3 is_stmt 1 view .LVU78
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 272              		.loc 1 2115 12 is_stmt 0 view .LVU79
 273 0042 C068     		ldr	r0, [r0, #12]
 274              	.LVL30:
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 275              		.loc 1 2115 12 view .LVU80
 276 0044 FFF7FEFF 		bl	memcpy
 277              	.LVL31:
2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 278              		.loc 1 2116 3 is_stmt 1 view .LVU81
2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 48


 279              		.loc 1 2116 42 is_stmt 0 view .LVU82
 280 0048 226C     		ldr	r2, [r4, #64]
2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 281              		.loc 1 2116 32 view .LVU83
 282 004a 5242     		rsbs	r2, r2, #0
 283 004c E368     		ldr	r3, [r4, #12]
 284 004e 1344     		add	r3, r3, r2
 285 0050 E360     		str	r3, [r4, #12]
2117:FreeRTOS/src/queue.c **** 		{
 286              		.loc 1 2117 3 is_stmt 1 view .LVU84
2117:FreeRTOS/src/queue.c **** 		{
 287              		.loc 1 2117 45 is_stmt 0 view .LVU85
 288 0052 2168     		ldr	r1, [r4]
2117:FreeRTOS/src/queue.c **** 		{
 289              		.loc 1 2117 5 view .LVU86
 290 0054 8B42     		cmp	r3, r1
 291 0056 02D2     		bcs	.L17
2119:FreeRTOS/src/queue.c **** 		}
 292              		.loc 1 2119 4 is_stmt 1 view .LVU87
2119:FreeRTOS/src/queue.c **** 		}
 293              		.loc 1 2119 54 is_stmt 0 view .LVU88
 294 0058 A368     		ldr	r3, [r4, #8]
2119:FreeRTOS/src/queue.c **** 		}
 295              		.loc 1 2119 62 view .LVU89
 296 005a 1A44     		add	r2, r2, r3
2119:FreeRTOS/src/queue.c **** 		}
 297              		.loc 1 2119 33 view .LVU90
 298 005c E260     		str	r2, [r4, #12]
 299              	.L17:
2123:FreeRTOS/src/queue.c **** 		}
 300              		.loc 1 2123 28 is_stmt 1 view .LVU91
2126:FreeRTOS/src/queue.c **** 		{
 301              		.loc 1 2126 3 view .LVU92
2126:FreeRTOS/src/queue.c **** 		{
 302              		.loc 1 2126 5 is_stmt 0 view .LVU93
 303 005e 022E     		cmp	r6, #2
 304 0060 01D0     		beq	.L24
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 305              		.loc 1 2076 12 view .LVU94
 306 0062 0020     		movs	r0, #0
 307 0064 D5E7     		b	.L15
 308              	.L24:
2128:FreeRTOS/src/queue.c **** 			{
 309              		.loc 1 2128 4 is_stmt 1 view .LVU95
2128:FreeRTOS/src/queue.c **** 			{
 310              		.loc 1 2128 6 is_stmt 0 view .LVU96
 311 0066 25B1     		cbz	r5, .L21
2134:FreeRTOS/src/queue.c **** 			}
 312              		.loc 1 2134 5 is_stmt 1 view .LVU97
 313 0068 013D     		subs	r5, r5, #1
 314              	.LVL32:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 315              		.loc 1 2076 12 is_stmt 0 view .LVU98
 316 006a 0020     		movs	r0, #0
 317 006c D1E7     		b	.L15
 318              	.L19:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 49


 319              		.loc 1 2076 12 view .LVU99
 320 006e 0020     		movs	r0, #0
 321 0070 CFE7     		b	.L15
 322              	.L21:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 323              		.loc 1 2076 12 view .LVU100
 324 0072 0020     		movs	r0, #0
 325 0074 CDE7     		b	.L15
 326              		.cfi_endproc
 327              	.LFE25:
 329              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 330              		.align	1
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	prvCopyDataFromQueue:
 337              	.LVL33:
 338              	.LFB26:
2154:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 339              		.loc 1 2154 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
2155:FreeRTOS/src/queue.c **** 	{
 343              		.loc 1 2155 2 view .LVU102
2155:FreeRTOS/src/queue.c **** 	{
 344              		.loc 1 2155 13 is_stmt 0 view .LVU103
 345 0000 026C     		ldr	r2, [r0, #64]
2155:FreeRTOS/src/queue.c **** 	{
 346              		.loc 1 2155 4 view .LVU104
 347 0002 72B1     		cbz	r2, .L29
2154:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 348              		.loc 1 2154 1 view .LVU105
 349 0004 10B5     		push	{r4, lr}
 350              	.LCFI3:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 4, -8
 353              		.cfi_offset 14, -4
2157:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 354              		.loc 1 2157 3 is_stmt 1 view .LVU106
2157:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 355              		.loc 1 2157 32 is_stmt 0 view .LVU107
 356 0006 C368     		ldr	r3, [r0, #12]
 357 0008 1344     		add	r3, r3, r2
 358 000a C360     		str	r3, [r0, #12]
2158:FreeRTOS/src/queue.c **** 		{
 359              		.loc 1 2158 3 is_stmt 1 view .LVU108
2158:FreeRTOS/src/queue.c **** 		{
 360              		.loc 1 2158 56 is_stmt 0 view .LVU109
 361 000c 8468     		ldr	r4, [r0, #8]
2158:FreeRTOS/src/queue.c **** 		{
 362              		.loc 1 2158 5 view .LVU110
 363 000e A342     		cmp	r3, r4
 364 0010 01D3     		bcc	.L27
2160:FreeRTOS/src/queue.c **** 		}
 365              		.loc 1 2160 4 is_stmt 1 view .LVU111
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 50


2160:FreeRTOS/src/queue.c **** 		}
 366              		.loc 1 2160 42 is_stmt 0 view .LVU112
 367 0012 0368     		ldr	r3, [r0]
2160:FreeRTOS/src/queue.c **** 		}
 368              		.loc 1 2160 33 view .LVU113
 369 0014 C360     		str	r3, [r0, #12]
 370              	.L27:
 371 0016 0C46     		mov	r4, r1
2164:FreeRTOS/src/queue.c **** 		}
 372              		.loc 1 2164 28 is_stmt 1 view .LVU114
2166:FreeRTOS/src/queue.c **** 	}
 373              		.loc 1 2166 3 view .LVU115
2166:FreeRTOS/src/queue.c **** 	}
 374              		.loc 1 2166 12 is_stmt 0 view .LVU116
 375 0018 C168     		ldr	r1, [r0, #12]
 376              	.LVL34:
2166:FreeRTOS/src/queue.c **** 	}
 377              		.loc 1 2166 12 view .LVU117
 378 001a 2046     		mov	r0, r4
 379              	.LVL35:
2166:FreeRTOS/src/queue.c **** 	}
 380              		.loc 1 2166 12 view .LVU118
 381 001c FFF7FEFF 		bl	memcpy
 382              	.LVL36:
2168:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 383              		.loc 1 2168 1 view .LVU119
 384 0020 10BD     		pop	{r4, pc}
 385              	.LVL37:
 386              	.L29:
 387              	.LCFI4:
 388              		.cfi_def_cfa_offset 0
 389              		.cfi_restore 4
 390              		.cfi_restore 14
2168:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 391              		.loc 1 2168 1 view .LVU120
 392 0022 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE26:
 396              		.section	.text.prvUnlockQueue,"ax",%progbits
 397              		.align	1
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu fpv4-sp-d16
 403              	prvUnlockQueue:
 404              	.LVL38:
 405              	.LFB27:
2172:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 406              		.loc 1 2172 1 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
2172:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 410              		.loc 1 2172 1 is_stmt 0 view .LVU122
 411 0000 38B5     		push	{r3, r4, r5, lr}
 412              	.LCFI5:
 413              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 51


 414              		.cfi_offset 3, -16
 415              		.cfi_offset 4, -12
 416              		.cfi_offset 5, -8
 417              		.cfi_offset 14, -4
 418 0002 0546     		mov	r5, r0
2179:FreeRTOS/src/queue.c **** 	{
 419              		.loc 1 2179 2 is_stmt 1 view .LVU123
 420 0004 FFF7FEFF 		bl	vPortEnterCritical
 421              	.LVL39:
 422              	.LBB23:
2181:FreeRTOS/src/queue.c **** 
 423              		.loc 1 2181 3 view .LVU124
2181:FreeRTOS/src/queue.c **** 
 424              		.loc 1 2181 10 is_stmt 0 view .LVU125
 425 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 426 000c 64B2     		sxtb	r4, r4
 427              	.LVL40:
2184:FreeRTOS/src/queue.c **** 		{
 428              		.loc 1 2184 3 is_stmt 1 view .LVU126
2184:FreeRTOS/src/queue.c **** 		{
 429              		.loc 1 2184 8 is_stmt 0 view .LVU127
 430 000e 03E0     		b	.L33
 431              	.L42:
2238:FreeRTOS/src/queue.c **** 					}
 432              		.loc 1 2238 7 is_stmt 1 view .LVU128
 433 0010 FFF7FEFF 		bl	vTaskMissedYield
 434              	.LVL41:
 435              	.L35:
2242:FreeRTOS/src/queue.c **** 					}
 436              		.loc 1 2242 31 view .LVU129
2252:FreeRTOS/src/queue.c **** 		}
 437              		.loc 1 2252 4 view .LVU130
 438 0014 013C     		subs	r4, r4, #1
 439              	.LVL42:
2252:FreeRTOS/src/queue.c **** 		}
 440              		.loc 1 2252 4 is_stmt 0 view .LVU131
 441 0016 64B2     		sxtb	r4, r4
 442              	.LVL43:
 443              	.L33:
2184:FreeRTOS/src/queue.c **** 		{
 444              		.loc 1 2184 8 view .LVU132
 445 0018 002C     		cmp	r4, #0
 446 001a 08DD     		ble	.L34
2232:FreeRTOS/src/queue.c **** 				{
 447              		.loc 1 2232 5 is_stmt 1 view .LVU133
2232:FreeRTOS/src/queue.c **** 				{
 448              		.loc 1 2232 9 is_stmt 0 view .LVU134
 449 001c 6B6A     		ldr	r3, [r5, #36]
2232:FreeRTOS/src/queue.c **** 				{
 450              		.loc 1 2232 7 view .LVU135
 451 001e 33B1     		cbz	r3, .L34
2234:FreeRTOS/src/queue.c **** 					{
 452              		.loc 1 2234 6 is_stmt 1 view .LVU136
2234:FreeRTOS/src/queue.c **** 					{
 453              		.loc 1 2234 10 is_stmt 0 view .LVU137
 454 0020 05F12400 		add	r0, r5, #36
 455 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 52


 456              	.LVL44:
2234:FreeRTOS/src/queue.c **** 					{
 457              		.loc 1 2234 8 view .LVU138
 458 0028 0028     		cmp	r0, #0
 459 002a F3D0     		beq	.L35
 460 002c F0E7     		b	.L42
 461              	.L34:
2255:FreeRTOS/src/queue.c **** 	}
 462              		.loc 1 2255 3 is_stmt 1 view .LVU139
2255:FreeRTOS/src/queue.c **** 	}
 463              		.loc 1 2255 20 is_stmt 0 view .LVU140
 464 002e FF23     		movs	r3, #255
 465 0030 85F84530 		strb	r3, [r5, #69]
 466              	.LBE23:
2257:FreeRTOS/src/queue.c **** 
 467              		.loc 1 2257 2 is_stmt 1 view .LVU141
 468 0034 FFF7FEFF 		bl	vPortExitCritical
 469              	.LVL45:
2260:FreeRTOS/src/queue.c **** 	{
 470              		.loc 1 2260 2 view .LVU142
 471 0038 FFF7FEFF 		bl	vPortEnterCritical
 472              	.LVL46:
 473              	.LBB24:
2262:FreeRTOS/src/queue.c **** 
 474              		.loc 1 2262 3 view .LVU143
2262:FreeRTOS/src/queue.c **** 
 475              		.loc 1 2262 10 is_stmt 0 view .LVU144
 476 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 477              	.LVL47:
2262:FreeRTOS/src/queue.c **** 
 478              		.loc 1 2262 10 view .LVU145
 479 0040 64B2     		sxtb	r4, r4
 480              	.LVL48:
2264:FreeRTOS/src/queue.c **** 		{
 481              		.loc 1 2264 3 is_stmt 1 view .LVU146
2264:FreeRTOS/src/queue.c **** 		{
 482              		.loc 1 2264 8 is_stmt 0 view .LVU147
 483 0042 03E0     		b	.L37
 484              	.L43:
2270:FreeRTOS/src/queue.c **** 				}
 485              		.loc 1 2270 6 is_stmt 1 view .LVU148
 486 0044 FFF7FEFF 		bl	vTaskMissedYield
 487              	.LVL49:
 488              	.L39:
2274:FreeRTOS/src/queue.c **** 				}
 489              		.loc 1 2274 30 view .LVU149
2277:FreeRTOS/src/queue.c **** 			}
 490              		.loc 1 2277 5 view .LVU150
 491 0048 013C     		subs	r4, r4, #1
 492              	.LVL50:
2277:FreeRTOS/src/queue.c **** 			}
 493              		.loc 1 2277 5 is_stmt 0 view .LVU151
 494 004a 64B2     		sxtb	r4, r4
 495              	.LVL51:
 496              	.L37:
2264:FreeRTOS/src/queue.c **** 		{
 497              		.loc 1 2264 8 view .LVU152
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 53


 498 004c 002C     		cmp	r4, #0
 499 004e 08DD     		ble	.L38
2266:FreeRTOS/src/queue.c **** 			{
 500              		.loc 1 2266 4 is_stmt 1 view .LVU153
2266:FreeRTOS/src/queue.c **** 			{
 501              		.loc 1 2266 8 is_stmt 0 view .LVU154
 502 0050 2B69     		ldr	r3, [r5, #16]
2266:FreeRTOS/src/queue.c **** 			{
 503              		.loc 1 2266 6 view .LVU155
 504 0052 33B1     		cbz	r3, .L38
2268:FreeRTOS/src/queue.c **** 				{
 505              		.loc 1 2268 5 is_stmt 1 view .LVU156
2268:FreeRTOS/src/queue.c **** 				{
 506              		.loc 1 2268 9 is_stmt 0 view .LVU157
 507 0054 05F11000 		add	r0, r5, #16
 508 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 509              	.LVL52:
2268:FreeRTOS/src/queue.c **** 				{
 510              		.loc 1 2268 7 view .LVU158
 511 005c 0028     		cmp	r0, #0
 512 005e F3D0     		beq	.L39
 513 0060 F0E7     		b	.L43
 514              	.L38:
2285:FreeRTOS/src/queue.c **** 	}
 515              		.loc 1 2285 3 is_stmt 1 view .LVU159
2285:FreeRTOS/src/queue.c **** 	}
 516              		.loc 1 2285 20 is_stmt 0 view .LVU160
 517 0062 FF23     		movs	r3, #255
 518 0064 85F84430 		strb	r3, [r5, #68]
 519              	.LBE24:
2287:FreeRTOS/src/queue.c **** }
 520              		.loc 1 2287 2 is_stmt 1 view .LVU161
 521 0068 FFF7FEFF 		bl	vPortExitCritical
 522              	.LVL53:
2288:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 523              		.loc 1 2288 1 is_stmt 0 view .LVU162
 524 006c 38BD     		pop	{r3, r4, r5, pc}
2288:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 525              		.loc 1 2288 1 view .LVU163
 526              		.cfi_endproc
 527              	.LFE27:
 529              		.section	.text.xQueueGenericReset,"ax",%progbits
 530              		.align	1
 531              		.global	xQueueGenericReset
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	xQueueGenericReset:
 538              	.LVL54:
 539              	.LFB4:
 256:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 540              		.loc 1 256 1 is_stmt 1 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 256:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 54


 544              		.loc 1 256 1 is_stmt 0 view .LVU165
 545 0000 38B5     		push	{r3, r4, r5, lr}
 546              	.LCFI6:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 3, -16
 549              		.cfi_offset 4, -12
 550              		.cfi_offset 5, -8
 551              		.cfi_offset 14, -4
 552 0002 0446     		mov	r4, r0
 553 0004 0D46     		mov	r5, r1
 257:FreeRTOS/src/queue.c **** 
 554              		.loc 1 257 1 is_stmt 1 view .LVU166
 555              	.LVL55:
 259:FreeRTOS/src/queue.c **** 
 556              		.loc 1 259 25 view .LVU167
 261:FreeRTOS/src/queue.c **** 	{
 557              		.loc 1 261 2 view .LVU168
 558 0006 FFF7FEFF 		bl	vPortEnterCritical
 559              	.LVL56:
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 560              		.loc 1 263 3 view .LVU169
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 561              		.loc 1 263 37 is_stmt 0 view .LVU170
 562 000a 2168     		ldr	r1, [r4]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 563              		.loc 1 263 57 view .LVU171
 564 000c E26B     		ldr	r2, [r4, #60]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 565              		.loc 1 263 77 view .LVU172
 566 000e 236C     		ldr	r3, [r4, #64]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 567              		.loc 1 263 46 view .LVU173
 568 0010 03FB0210 		mla	r0, r3, r2, r1
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 569              		.loc 1 263 28 view .LVU174
 570 0014 A060     		str	r0, [r4, #8]
 264:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 571              		.loc 1 264 3 is_stmt 1 view .LVU175
 264:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 572              		.loc 1 264 30 is_stmt 0 view .LVU176
 573 0016 0020     		movs	r0, #0
 574 0018 A063     		str	r0, [r4, #56]
 265:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 575              		.loc 1 265 3 is_stmt 1 view .LVU177
 265:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 576              		.loc 1 265 22 is_stmt 0 view .LVU178
 577 001a 6160     		str	r1, [r4, #4]
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 578              		.loc 1 266 3 is_stmt 1 view .LVU179
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 579              		.loc 1 266 74 is_stmt 0 view .LVU180
 580 001c 013A     		subs	r2, r2, #1
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 581              		.loc 1 266 50 view .LVU181
 582 001e 02FB0313 		mla	r3, r2, r3, r1
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 583              		.loc 1 266 32 view .LVU182
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 55


 584 0022 E360     		str	r3, [r4, #12]
 267:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 585              		.loc 1 267 3 is_stmt 1 view .LVU183
 267:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 586              		.loc 1 267 20 is_stmt 0 view .LVU184
 587 0024 FF23     		movs	r3, #255
 588 0026 84F84430 		strb	r3, [r4, #68]
 268:FreeRTOS/src/queue.c **** 
 589              		.loc 1 268 3 is_stmt 1 view .LVU185
 268:FreeRTOS/src/queue.c **** 
 590              		.loc 1 268 20 is_stmt 0 view .LVU186
 591 002a 84F84530 		strb	r3, [r4, #69]
 270:FreeRTOS/src/queue.c **** 		{
 592              		.loc 1 270 3 is_stmt 1 view .LVU187
 270:FreeRTOS/src/queue.c **** 		{
 593              		.loc 1 270 5 is_stmt 0 view .LVU188
 594 002e A5B9     		cbnz	r5, .L45
 277:FreeRTOS/src/queue.c **** 			{
 595              		.loc 1 277 4 is_stmt 1 view .LVU189
 277:FreeRTOS/src/queue.c **** 			{
 596              		.loc 1 277 8 is_stmt 0 view .LVU190
 597 0030 2369     		ldr	r3, [r4, #16]
 277:FreeRTOS/src/queue.c **** 			{
 598              		.loc 1 277 6 view .LVU191
 599 0032 1BB9     		cbnz	r3, .L48
 600              	.L46:
 300:FreeRTOS/src/queue.c **** 
 601              		.loc 1 300 2 is_stmt 1 view .LVU192
 602 0034 FFF7FEFF 		bl	vPortExitCritical
 603              	.LVL57:
 304:FreeRTOS/src/queue.c **** }
 604              		.loc 1 304 2 view .LVU193
 305:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 605              		.loc 1 305 1 is_stmt 0 view .LVU194
 606 0038 0120     		movs	r0, #1
 607 003a 38BD     		pop	{r3, r4, r5, pc}
 608              	.LVL58:
 609              	.L48:
 279:FreeRTOS/src/queue.c **** 				{
 610              		.loc 1 279 5 is_stmt 1 view .LVU195
 279:FreeRTOS/src/queue.c **** 				{
 611              		.loc 1 279 9 is_stmt 0 view .LVU196
 612 003c 04F11000 		add	r0, r4, #16
 613 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 614              	.LVL59:
 279:FreeRTOS/src/queue.c **** 				{
 615              		.loc 1 279 7 view .LVU197
 616 0044 0028     		cmp	r0, #0
 617 0046 F5D0     		beq	.L46
 281:FreeRTOS/src/queue.c **** 				}
 618              		.loc 1 281 6 is_stmt 1 view .LVU198
 619 0048 084B     		ldr	r3, .L49
 620 004a 4FF08052 		mov	r2, #268435456
 621 004e 1A60     		str	r2, [r3]
 281:FreeRTOS/src/queue.c **** 				}
 622              		.loc 1 281 6 view .LVU199
 623              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 56


 624              	@ 281 "FreeRTOS/src/queue.c" 1
 625 0050 BFF34F8F 		dsb
 626              	@ 0 "" 2
 281:FreeRTOS/src/queue.c **** 				}
 627              		.loc 1 281 6 view .LVU200
 628              	@ 281 "FreeRTOS/src/queue.c" 1
 629 0054 BFF36F8F 		isb
 630              	@ 0 "" 2
 281:FreeRTOS/src/queue.c **** 				}
 631              		.loc 1 281 38 view .LVU201
 632              		.thumb
 633              		.syntax unified
 634 0058 ECE7     		b	.L46
 635              	.L45:
 296:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 636              		.loc 1 296 4 view .LVU202
 637 005a 04F11000 		add	r0, r4, #16
 638 005e FFF7FEFF 		bl	vListInitialise
 639              	.LVL60:
 297:FreeRTOS/src/queue.c **** 		}
 640              		.loc 1 297 4 view .LVU203
 641 0062 04F12400 		add	r0, r4, #36
 642 0066 FFF7FEFF 		bl	vListInitialise
 643              	.LVL61:
 644 006a E3E7     		b	.L46
 645              	.L50:
 646              		.align	2
 647              	.L49:
 648 006c 04ED00E0 		.word	-536810236
 649              		.cfi_endproc
 650              	.LFE4:
 652              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 653              		.align	1
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv4-sp-d16
 659              	prvInitialiseNewQueue:
 660              	.LVL62:
 661              	.LFB6:
 423:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 662              		.loc 1 423 1 view -0
 663              		.cfi_startproc
 664              		@ args = 4, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 423:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 666              		.loc 1 423 1 is_stmt 0 view .LVU205
 667 0000 10B5     		push	{r4, lr}
 668              	.LCFI7:
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 4, -8
 671              		.cfi_offset 14, -4
 672 0002 029B     		ldr	r3, [sp, #8]
 673              	.LVL63:
 426:FreeRTOS/src/queue.c **** 
 674              		.loc 1 426 2 is_stmt 1 view .LVU206
 428:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 57


 675              		.loc 1 428 2 view .LVU207
 428:FreeRTOS/src/queue.c **** 	{
 676              		.loc 1 428 4 is_stmt 0 view .LVU208
 677 0004 0C46     		mov	r4, r1
 678 0006 39B9     		cbnz	r1, .L52
 434:FreeRTOS/src/queue.c **** 	}
 679              		.loc 1 434 3 is_stmt 1 view .LVU209
 434:FreeRTOS/src/queue.c **** 	}
 680              		.loc 1 434 22 is_stmt 0 view .LVU210
 681 0008 1B60     		str	r3, [r3]
 682              	.L53:
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 683              		.loc 1 444 2 is_stmt 1 view .LVU211
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 684              		.loc 1 444 23 is_stmt 0 view .LVU212
 685 000a D863     		str	r0, [r3, #60]
 445:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 686              		.loc 1 445 2 is_stmt 1 view .LVU213
 445:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 687              		.loc 1 445 25 is_stmt 0 view .LVU214
 688 000c 1C64     		str	r4, [r3, #64]
 446:FreeRTOS/src/queue.c **** 
 689              		.loc 1 446 2 is_stmt 1 view .LVU215
 446:FreeRTOS/src/queue.c **** 
 690              		.loc 1 446 11 is_stmt 0 view .LVU216
 691 000e 0121     		movs	r1, #1
 692              	.LVL64:
 446:FreeRTOS/src/queue.c **** 
 693              		.loc 1 446 11 view .LVU217
 694 0010 1846     		mov	r0, r3
 695              	.LVL65:
 446:FreeRTOS/src/queue.c **** 
 696              		.loc 1 446 11 view .LVU218
 697 0012 FFF7FEFF 		bl	xQueueGenericReset
 698              	.LVL66:
 460:FreeRTOS/src/queue.c **** }
 699              		.loc 1 460 33 is_stmt 1 view .LVU219
 461:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 700              		.loc 1 461 1 is_stmt 0 view .LVU220
 701 0016 10BD     		pop	{r4, pc}
 702              	.LVL67:
 703              	.L52:
 439:FreeRTOS/src/queue.c **** 	}
 704              		.loc 1 439 3 is_stmt 1 view .LVU221
 439:FreeRTOS/src/queue.c **** 	}
 705              		.loc 1 439 22 is_stmt 0 view .LVU222
 706 0018 1A60     		str	r2, [r3]
 707 001a F6E7     		b	.L53
 708              		.cfi_endproc
 709              	.LFE6:
 711              		.section	.text.xQueueGenericCreate,"ax",%progbits
 712              		.align	1
 713              		.global	xQueueGenericCreate
 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 717              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 58


 719              	xQueueGenericCreate:
 720              	.LVL68:
 721              	.LFB5:
 369:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 722              		.loc 1 369 2 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 369:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 726              		.loc 1 369 2 is_stmt 0 view .LVU224
 727 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 728              	.LCFI8:
 729              		.cfi_def_cfa_offset 20
 730              		.cfi_offset 4, -20
 731              		.cfi_offset 5, -16
 732              		.cfi_offset 6, -12
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 14, -4
 735 0002 83B0     		sub	sp, sp, #12
 736              	.LCFI9:
 737              		.cfi_def_cfa_offset 32
 738 0004 0546     		mov	r5, r0
 739 0006 0E46     		mov	r6, r1
 740 0008 1746     		mov	r7, r2
 370:FreeRTOS/src/queue.c **** 	size_t xQueueSizeInBytes;
 741              		.loc 1 370 2 is_stmt 1 view .LVU225
 371:FreeRTOS/src/queue.c **** 	uint8_t *pucQueueStorage;
 742              		.loc 1 371 2 view .LVU226
 372:FreeRTOS/src/queue.c **** 
 743              		.loc 1 372 2 view .LVU227
 374:FreeRTOS/src/queue.c **** 
 744              		.loc 1 374 52 view .LVU228
 379:FreeRTOS/src/queue.c **** 
 745              		.loc 1 379 3 view .LVU229
 379:FreeRTOS/src/queue.c **** 
 746              		.loc 1 379 21 is_stmt 0 view .LVU230
 747 000a 01FB00F0 		mul	r0, r1, r0
 748              	.LVL69:
 390:FreeRTOS/src/queue.c **** 
 749              		.loc 1 390 3 is_stmt 1 view .LVU231
 390:FreeRTOS/src/queue.c **** 
 750              		.loc 1 390 30 is_stmt 0 view .LVU232
 751 000e 4830     		adds	r0, r0, #72
 752              	.LVL70:
 390:FreeRTOS/src/queue.c **** 
 753              		.loc 1 390 30 view .LVU233
 754 0010 FFF7FEFF 		bl	pvPortMalloc
 755              	.LVL71:
 392:FreeRTOS/src/queue.c **** 		{
 756              		.loc 1 392 3 is_stmt 1 view .LVU234
 392:FreeRTOS/src/queue.c **** 		{
 757              		.loc 1 392 5 is_stmt 0 view .LVU235
 758 0014 0446     		mov	r4, r0
 759 0016 38B1     		cbz	r0, .L55
 396:FreeRTOS/src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 760              		.loc 1 396 4 is_stmt 1 view .LVU236
 761              	.LVL72:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 59


 397:FreeRTOS/src/queue.c **** 
 762              		.loc 1 397 4 view .LVU237
 408:FreeRTOS/src/queue.c **** 		}
 763              		.loc 1 408 4 view .LVU238
 764 0018 0090     		str	r0, [sp]
 765 001a 3B46     		mov	r3, r7
 766 001c 00F14802 		add	r2, r0, #72
 767              	.LVL73:
 408:FreeRTOS/src/queue.c **** 		}
 768              		.loc 1 408 4 is_stmt 0 view .LVU239
 769 0020 3146     		mov	r1, r6
 770 0022 2846     		mov	r0, r5
 771              	.LVL74:
 408:FreeRTOS/src/queue.c **** 		}
 772              		.loc 1 408 4 view .LVU240
 773 0024 FFF7FEFF 		bl	prvInitialiseNewQueue
 774              	.LVL75:
 412:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 775              		.loc 1 412 43 is_stmt 1 view .LVU241
 413:FreeRTOS/src/queue.c **** 		}
 776              		.loc 1 413 28 view .LVU242
 416:FreeRTOS/src/queue.c **** 	}
 777              		.loc 1 416 3 view .LVU243
 778              	.L55:
 417:FreeRTOS/src/queue.c **** 
 779              		.loc 1 417 2 is_stmt 0 view .LVU244
 780 0028 2046     		mov	r0, r4
 781 002a 03B0     		add	sp, sp, #12
 782              	.LCFI10:
 783              		.cfi_def_cfa_offset 20
 784              		@ sp needed
 785 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 417:FreeRTOS/src/queue.c **** 
 786              		.loc 1 417 2 view .LVU245
 787              		.cfi_endproc
 788              	.LFE5:
 790              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 791              		.align	1
 792              		.global	xQueueCreateCountingSemaphore
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	xQueueCreateCountingSemaphore:
 799              	.LVL76:
 800              	.LFB11:
 715:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
 801              		.loc 1 715 2 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 715:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
 805              		.loc 1 715 2 is_stmt 0 view .LVU247
 806 0000 10B5     		push	{r4, lr}
 807              	.LCFI11:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 4, -8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 60


 810              		.cfi_offset 14, -4
 811 0002 0C46     		mov	r4, r1
 716:FreeRTOS/src/queue.c **** 
 812              		.loc 1 716 2 is_stmt 1 view .LVU248
 718:FreeRTOS/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 813              		.loc 1 718 34 view .LVU249
 719:FreeRTOS/src/queue.c **** 
 814              		.loc 1 719 47 view .LVU250
 721:FreeRTOS/src/queue.c **** 
 815              		.loc 1 721 3 view .LVU251
 721:FreeRTOS/src/queue.c **** 
 816              		.loc 1 721 13 is_stmt 0 view .LVU252
 817 0004 0222     		movs	r2, #2
 818 0006 0021     		movs	r1, #0
 819              	.LVL77:
 721:FreeRTOS/src/queue.c **** 
 820              		.loc 1 721 13 view .LVU253
 821 0008 FFF7FEFF 		bl	xQueueGenericCreate
 822              	.LVL78:
 723:FreeRTOS/src/queue.c **** 		{
 823              		.loc 1 723 3 is_stmt 1 view .LVU254
 723:FreeRTOS/src/queue.c **** 		{
 824              		.loc 1 723 5 is_stmt 0 view .LVU255
 825 000c 0346     		mov	r3, r0
 826 000e 00B1     		cbz	r0, .L58
 725:FreeRTOS/src/queue.c **** 
 827              		.loc 1 725 4 is_stmt 1 view .LVU256
 725:FreeRTOS/src/queue.c **** 
 828              		.loc 1 725 49 is_stmt 0 view .LVU257
 829 0010 8463     		str	r4, [r0, #56]
 727:FreeRTOS/src/queue.c **** 		}
 830              		.loc 1 727 36 is_stmt 1 view .LVU258
 731:FreeRTOS/src/queue.c **** 		}
 831              		.loc 1 731 43 view .LVU259
 734:FreeRTOS/src/queue.c **** 	}
 832              		.loc 1 734 3 view .LVU260
 833              	.L58:
 735:FreeRTOS/src/queue.c **** 
 834              		.loc 1 735 2 is_stmt 0 view .LVU261
 835 0012 1846     		mov	r0, r3
 836              	.LVL79:
 735:FreeRTOS/src/queue.c **** 
 837              		.loc 1 735 2 view .LVU262
 838 0014 10BD     		pop	{r4, pc}
 735:FreeRTOS/src/queue.c **** 
 839              		.loc 1 735 2 view .LVU263
 840              		.cfi_endproc
 841              	.LFE11:
 843              		.section	.text.xQueueGenericSend,"ax",%progbits
 844              		.align	1
 845              		.global	xQueueGenericSend
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu fpv4-sp-d16
 851              	xQueueGenericSend:
 852              	.LVL80:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 61


 853              	.LFB12:
 741:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 854              		.loc 1 741 1 is_stmt 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 16
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 741:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 858              		.loc 1 741 1 is_stmt 0 view .LVU265
 859 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 860              	.LCFI12:
 861              		.cfi_def_cfa_offset 20
 862              		.cfi_offset 4, -20
 863              		.cfi_offset 5, -16
 864              		.cfi_offset 6, -12
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 85B0     		sub	sp, sp, #20
 868              	.LCFI13:
 869              		.cfi_def_cfa_offset 40
 870 0004 0446     		mov	r4, r0
 871 0006 0F46     		mov	r7, r1
 872 0008 0192     		str	r2, [sp, #4]
 873 000a 1E46     		mov	r6, r3
 742:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 874              		.loc 1 742 1 is_stmt 1 view .LVU266
 875              	.LVL81:
 743:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 876              		.loc 1 743 1 view .LVU267
 744:FreeRTOS/src/queue.c **** 
 877              		.loc 1 744 1 view .LVU268
 742:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 878              		.loc 1 742 12 is_stmt 0 view .LVU269
 879 000c 0025     		movs	r5, #0
 880 000e 39E0     		b	.L62
 881              	.LVL82:
 882              	.L63:
 769:FreeRTOS/src/queue.c **** 
 883              		.loc 1 769 31 is_stmt 1 view .LVU270
 833:FreeRTOS/src/queue.c **** 
 884              		.loc 1 833 6 view .LVU271
 833:FreeRTOS/src/queue.c **** 
 885              		.loc 1 833 23 is_stmt 0 view .LVU272
 886 0010 3246     		mov	r2, r6
 887 0012 3946     		mov	r1, r7
 888 0014 2046     		mov	r0, r4
 889 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 890              	.LVL83:
 837:FreeRTOS/src/queue.c **** 					{
 891              		.loc 1 837 6 is_stmt 1 view .LVU273
 837:FreeRTOS/src/queue.c **** 					{
 892              		.loc 1 837 10 is_stmt 0 view .LVU274
 893 001a 636A     		ldr	r3, [r4, #36]
 837:FreeRTOS/src/queue.c **** 					{
 894              		.loc 1 837 8 view .LVU275
 895 001c 6BB9     		cbnz	r3, .L76
 852:FreeRTOS/src/queue.c **** 					{
 896              		.loc 1 852 11 is_stmt 1 view .LVU276
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 62


 852:FreeRTOS/src/queue.c **** 					{
 897              		.loc 1 852 13 is_stmt 0 view .LVU277
 898 001e 38B1     		cbz	r0, .L66
 858:FreeRTOS/src/queue.c **** 					}
 899              		.loc 1 858 7 is_stmt 1 view .LVU278
 900 0020 3C4B     		ldr	r3, .L81
 901 0022 4FF08052 		mov	r2, #268435456
 902 0026 1A60     		str	r2, [r3]
 858:FreeRTOS/src/queue.c **** 					}
 903              		.loc 1 858 7 view .LVU279
 904              		.syntax unified
 905              	@ 858 "FreeRTOS/src/queue.c" 1
 906 0028 BFF34F8F 		dsb
 907              	@ 0 "" 2
 858:FreeRTOS/src/queue.c **** 					}
 908              		.loc 1 858 7 view .LVU280
 909              	@ 858 "FreeRTOS/src/queue.c" 1
 910 002c BFF36F8F 		isb
 911              	@ 0 "" 2
 858:FreeRTOS/src/queue.c **** 					}
 912              		.loc 1 858 39 view .LVU281
 913              	.LVL84:
 914              		.thumb
 915              		.syntax unified
 916              	.L66:
 862:FreeRTOS/src/queue.c **** 					}
 917              		.loc 1 862 31 view .LVU282
 867:FreeRTOS/src/queue.c **** 				return pdPASS;
 918              		.loc 1 867 5 view .LVU283
 919 0030 FFF7FEFF 		bl	vPortExitCritical
 920              	.LVL85:
 868:FreeRTOS/src/queue.c **** 			}
 921              		.loc 1 868 5 view .LVU284
 868:FreeRTOS/src/queue.c **** 			}
 922              		.loc 1 868 12 is_stmt 0 view .LVU285
 923 0034 0120     		movs	r0, #1
 924              	.L61:
 947:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 925              		.loc 1 947 1 view .LVU286
 926 0036 05B0     		add	sp, sp, #20
 927              	.LCFI14:
 928              		.cfi_remember_state
 929              		.cfi_def_cfa_offset 20
 930              		@ sp needed
 931 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 932              	.LVL86:
 933              	.L76:
 934              	.LCFI15:
 935              		.cfi_restore_state
 839:FreeRTOS/src/queue.c **** 						{
 936              		.loc 1 839 7 is_stmt 1 view .LVU287
 839:FreeRTOS/src/queue.c **** 						{
 937              		.loc 1 839 11 is_stmt 0 view .LVU288
 938 003a 04F12400 		add	r0, r4, #36
 939              	.LVL87:
 839:FreeRTOS/src/queue.c **** 						{
 940              		.loc 1 839 11 view .LVU289
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 63


 941 003e FFF7FEFF 		bl	xTaskRemoveFromEventList
 942              	.LVL88:
 839:FreeRTOS/src/queue.c **** 						{
 943              		.loc 1 839 9 view .LVU290
 944 0042 0028     		cmp	r0, #0
 945 0044 F4D0     		beq	.L66
 845:FreeRTOS/src/queue.c **** 						}
 946              		.loc 1 845 8 is_stmt 1 view .LVU291
 947 0046 334B     		ldr	r3, .L81
 948 0048 4FF08052 		mov	r2, #268435456
 949 004c 1A60     		str	r2, [r3]
 845:FreeRTOS/src/queue.c **** 						}
 950              		.loc 1 845 8 view .LVU292
 951              		.syntax unified
 952              	@ 845 "FreeRTOS/src/queue.c" 1
 953 004e BFF34F8F 		dsb
 954              	@ 0 "" 2
 845:FreeRTOS/src/queue.c **** 						}
 955              		.loc 1 845 8 view .LVU293
 956              	@ 845 "FreeRTOS/src/queue.c" 1
 957 0052 BFF36F8F 		isb
 958              	@ 0 "" 2
 845:FreeRTOS/src/queue.c **** 						}
 959              		.loc 1 845 40 view .LVU294
 960              		.thumb
 961              		.syntax unified
 962 0056 EBE7     		b	.L66
 963              	.L77:
 876:FreeRTOS/src/queue.c **** 
 964              		.loc 1 876 6 view .LVU295
 965 0058 FFF7FEFF 		bl	vPortExitCritical
 966              	.LVL89:
 880:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
 967              		.loc 1 880 39 view .LVU296
 881:FreeRTOS/src/queue.c **** 				}
 968              		.loc 1 881 6 view .LVU297
 881:FreeRTOS/src/queue.c **** 				}
 969              		.loc 1 881 13 is_stmt 0 view .LVU298
 970 005c 0020     		movs	r0, #0
 971 005e EAE7     		b	.L61
 972              	.L78:
 887:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 973              		.loc 1 887 6 is_stmt 1 view .LVU299
 974 0060 02A8     		add	r0, sp, #8
 975 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 976              	.LVL90:
 888:FreeRTOS/src/queue.c **** 				}
 977              		.loc 1 888 6 view .LVU300
 888:FreeRTOS/src/queue.c **** 				}
 978              		.loc 1 888 20 is_stmt 0 view .LVU301
 979 0066 0125     		movs	r5, #1
 980 0068 19E0     		b	.L69
 981              	.LVL91:
 982              	.L79:
 903:FreeRTOS/src/queue.c **** 
 983              		.loc 1 903 3 is_stmt 1 discriminator 1 view .LVU302
 984 006a 0023     		movs	r3, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 64


 985 006c 84F84430 		strb	r3, [r4, #68]
 986 0070 21E0     		b	.L70
 987              	.L80:
 903:FreeRTOS/src/queue.c **** 
 988              		.loc 1 903 3 discriminator 4 view .LVU303
 989 0072 0023     		movs	r3, #0
 990 0074 84F84530 		strb	r3, [r4, #69]
 991 0078 23E0     		b	.L71
 992              	.L73:
 933:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 993              		.loc 1 933 5 view .LVU304
 994 007a 2046     		mov	r0, r4
 995 007c FFF7FEFF 		bl	prvUnlockQueue
 996              	.LVL92:
 934:FreeRTOS/src/queue.c **** 			}
 997              		.loc 1 934 5 view .LVU305
 934:FreeRTOS/src/queue.c **** 			}
 998              		.loc 1 934 14 is_stmt 0 view .LVU306
 999 0080 FFF7FEFF 		bl	xTaskResumeAll
 1000              	.LVL93:
 1001              	.L62:
 746:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1002              		.loc 1 746 25 is_stmt 1 view .LVU307
 747:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1003              		.loc 1 747 97 view .LVU308
 748:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1004              		.loc 1 748 88 view .LVU309
 751:FreeRTOS/src/queue.c **** 	}
 1005              		.loc 1 751 104 view .LVU310
 759:FreeRTOS/src/queue.c **** 	{
 1006              		.loc 1 759 2 view .LVU311
 761:FreeRTOS/src/queue.c **** 		{
 1007              		.loc 1 761 3 view .LVU312
 1008 0084 FFF7FEFF 		bl	vPortEnterCritical
 1009              	.LVL94:
 767:FreeRTOS/src/queue.c **** 			{
 1010              		.loc 1 767 4 view .LVU313
 767:FreeRTOS/src/queue.c **** 			{
 1011              		.loc 1 767 17 is_stmt 0 view .LVU314
 1012 0088 A26B     		ldr	r2, [r4, #56]
 767:FreeRTOS/src/queue.c **** 			{
 1013              		.loc 1 767 46 view .LVU315
 1014 008a E36B     		ldr	r3, [r4, #60]
 767:FreeRTOS/src/queue.c **** 			{
 1015              		.loc 1 767 6 view .LVU316
 1016 008c 9A42     		cmp	r2, r3
 1017 008e BFD3     		bcc	.L63
 767:FreeRTOS/src/queue.c **** 			{
 1018              		.loc 1 767 59 discriminator 1 view .LVU317
 1019 0090 022E     		cmp	r6, #2
 1020 0092 BDD0     		beq	.L63
 872:FreeRTOS/src/queue.c **** 				{
 1021              		.loc 1 872 5 is_stmt 1 view .LVU318
 872:FreeRTOS/src/queue.c **** 				{
 1022              		.loc 1 872 22 is_stmt 0 view .LVU319
 1023 0094 019B     		ldr	r3, [sp, #4]
 872:FreeRTOS/src/queue.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 65


 1024              		.loc 1 872 7 view .LVU320
 1025 0096 002B     		cmp	r3, #0
 1026 0098 DED0     		beq	.L77
 883:FreeRTOS/src/queue.c **** 				{
 1027              		.loc 1 883 10 is_stmt 1 view .LVU321
 883:FreeRTOS/src/queue.c **** 				{
 1028              		.loc 1 883 12 is_stmt 0 view .LVU322
 1029 009a 002D     		cmp	r5, #0
 1030 009c E0D0     		beq	.L78
 1031              	.LVL95:
 1032              	.L69:
 893:FreeRTOS/src/queue.c **** 				}
 1033              		.loc 1 893 30 is_stmt 1 view .LVU323
 897:FreeRTOS/src/queue.c **** 
 1034              		.loc 1 897 3 view .LVU324
 1035 009e FFF7FEFF 		bl	vPortExitCritical
 1036              	.LVL96:
 902:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 1037              		.loc 1 902 3 view .LVU325
 1038 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 1039              	.LVL97:
 903:FreeRTOS/src/queue.c **** 
 1040              		.loc 1 903 3 view .LVU326
 1041 00a6 FFF7FEFF 		bl	vPortEnterCritical
 1042              	.LVL98:
 903:FreeRTOS/src/queue.c **** 
 1043              		.loc 1 903 3 view .LVU327
 1044 00aa 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1045 00ae 5BB2     		sxtb	r3, r3
 1046 00b0 B3F1FF3F 		cmp	r3, #-1
 1047 00b4 D9D0     		beq	.L79
 1048              	.L70:
 903:FreeRTOS/src/queue.c **** 
 1049              		.loc 1 903 3 discriminator 3 view .LVU328
 1050 00b6 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1051 00ba 5BB2     		sxtb	r3, r3
 1052 00bc B3F1FF3F 		cmp	r3, #-1
 1053 00c0 D7D0     		beq	.L80
 1054              	.L71:
 903:FreeRTOS/src/queue.c **** 
 1055              		.loc 1 903 3 discriminator 6 view .LVU329
 1056 00c2 FFF7FEFF 		bl	vPortExitCritical
 1057              	.LVL99:
 906:FreeRTOS/src/queue.c **** 		{
 1058              		.loc 1 906 3 discriminator 6 view .LVU330
 906:FreeRTOS/src/queue.c **** 		{
 1059              		.loc 1 906 7 is_stmt 0 discriminator 6 view .LVU331
 1060 00c6 01A9     		add	r1, sp, #4
 1061 00c8 02A8     		add	r0, sp, #8
 1062 00ca FFF7FEFF 		bl	xTaskCheckForTimeOut
 1063              	.LVL100:
 906:FreeRTOS/src/queue.c **** 		{
 1064              		.loc 1 906 5 discriminator 6 view .LVU332
 1065 00ce C8B9     		cbnz	r0, .L72
 908:FreeRTOS/src/queue.c **** 			{
 1066              		.loc 1 908 4 is_stmt 1 view .LVU333
 908:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 66


 1067              		.loc 1 908 8 is_stmt 0 view .LVU334
 1068 00d0 2046     		mov	r0, r4
 1069 00d2 FFF7FEFF 		bl	prvIsQueueFull
 1070              	.LVL101:
 908:FreeRTOS/src/queue.c **** 			{
 1071              		.loc 1 908 6 view .LVU335
 1072 00d6 0028     		cmp	r0, #0
 1073 00d8 CFD0     		beq	.L73
 910:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1074              		.loc 1 910 43 is_stmt 1 view .LVU336
 911:FreeRTOS/src/queue.c **** 
 1075              		.loc 1 911 5 view .LVU337
 1076 00da 0199     		ldr	r1, [sp, #4]
 1077 00dc 04F11000 		add	r0, r4, #16
 1078 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1079              	.LVL102:
 918:FreeRTOS/src/queue.c **** 
 1080              		.loc 1 918 5 view .LVU338
 1081 00e4 2046     		mov	r0, r4
 1082 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1083              	.LVL103:
 925:FreeRTOS/src/queue.c **** 				{
 1084              		.loc 1 925 5 view .LVU339
 925:FreeRTOS/src/queue.c **** 				{
 1085              		.loc 1 925 9 is_stmt 0 view .LVU340
 1086 00ea FFF7FEFF 		bl	xTaskResumeAll
 1087              	.LVL104:
 925:FreeRTOS/src/queue.c **** 				{
 1088              		.loc 1 925 7 view .LVU341
 1089 00ee 0028     		cmp	r0, #0
 1090 00f0 C8D1     		bne	.L62
 927:FreeRTOS/src/queue.c **** 				}
 1091              		.loc 1 927 6 is_stmt 1 view .LVU342
 1092 00f2 084B     		ldr	r3, .L81
 1093 00f4 4FF08052 		mov	r2, #268435456
 1094 00f8 1A60     		str	r2, [r3]
 927:FreeRTOS/src/queue.c **** 				}
 1095              		.loc 1 927 6 view .LVU343
 1096              		.syntax unified
 1097              	@ 927 "FreeRTOS/src/queue.c" 1
 1098 00fa BFF34F8F 		dsb
 1099              	@ 0 "" 2
 927:FreeRTOS/src/queue.c **** 				}
 1100              		.loc 1 927 6 view .LVU344
 1101              	@ 927 "FreeRTOS/src/queue.c" 1
 1102 00fe BFF36F8F 		isb
 1103              	@ 0 "" 2
 1104              		.thumb
 1105              		.syntax unified
 1106 0102 BFE7     		b	.L62
 1107              	.L72:
 940:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 1108              		.loc 1 940 4 view .LVU345
 1109 0104 2046     		mov	r0, r4
 1110 0106 FFF7FEFF 		bl	prvUnlockQueue
 1111              	.LVL105:
 941:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 67


 1112              		.loc 1 941 4 view .LVU346
 941:FreeRTOS/src/queue.c **** 
 1113              		.loc 1 941 13 is_stmt 0 view .LVU347
 1114 010a FFF7FEFF 		bl	xTaskResumeAll
 1115              	.LVL106:
 943:FreeRTOS/src/queue.c **** 			return errQUEUE_FULL;
 1116              		.loc 1 943 37 is_stmt 1 view .LVU348
 944:FreeRTOS/src/queue.c **** 		}
 1117              		.loc 1 944 4 view .LVU349
 944:FreeRTOS/src/queue.c **** 		}
 1118              		.loc 1 944 11 is_stmt 0 view .LVU350
 1119 010e 0020     		movs	r0, #0
 1120 0110 91E7     		b	.L61
 1121              	.L82:
 1122 0112 00BF     		.align	2
 1123              	.L81:
 1124 0114 04ED00E0 		.word	-536810236
 1125              		.cfi_endproc
 1126              	.LFE12:
 1128              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1129              		.align	1
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu fpv4-sp-d16
 1135              	prvInitialiseMutex:
 1136              	.LVL107:
 1137              	.LFB7:
 467:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 1138              		.loc 1 467 2 is_stmt 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 468:FreeRTOS/src/queue.c **** 		{
 1142              		.loc 1 468 3 view .LVU352
 468:FreeRTOS/src/queue.c **** 		{
 1143              		.loc 1 468 5 is_stmt 0 view .LVU353
 1144 0000 48B1     		cbz	r0, .L86
 467:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 1145              		.loc 1 467 2 view .LVU354
 1146 0002 08B5     		push	{r3, lr}
 1147              	.LCFI16:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 3, -8
 1150              		.cfi_offset 14, -4
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1151              		.loc 1 474 4 is_stmt 1 view .LVU355
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1152              		.loc 1 474 42 is_stmt 0 view .LVU356
 1153 0004 0021     		movs	r1, #0
 1154 0006 8160     		str	r1, [r0, #8]
 475:FreeRTOS/src/queue.c **** 
 1155              		.loc 1 475 4 is_stmt 1 view .LVU357
 475:FreeRTOS/src/queue.c **** 
 1156              		.loc 1 475 28 is_stmt 0 view .LVU358
 1157 0008 0160     		str	r1, [r0]
 478:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 68


 1158              		.loc 1 478 4 is_stmt 1 view .LVU359
 478:FreeRTOS/src/queue.c **** 
 1159              		.loc 1 478 50 is_stmt 0 view .LVU360
 1160 000a C160     		str	r1, [r0, #12]
 480:FreeRTOS/src/queue.c **** 
 1161              		.loc 1 480 35 is_stmt 1 view .LVU361
 483:FreeRTOS/src/queue.c **** 		}
 1162              		.loc 1 483 4 view .LVU362
 483:FreeRTOS/src/queue.c **** 		}
 1163              		.loc 1 483 13 is_stmt 0 view .LVU363
 1164 000c 0B46     		mov	r3, r1
 1165 000e 0A46     		mov	r2, r1
 1166 0010 FFF7FEFF 		bl	xQueueGenericSend
 1167              	.LVL108:
 487:FreeRTOS/src/queue.c **** 		}
 1168              		.loc 1 487 30 is_stmt 1 view .LVU364
 489:FreeRTOS/src/queue.c **** 
 1169              		.loc 1 489 2 is_stmt 0 view .LVU365
 1170 0014 08BD     		pop	{r3, pc}
 1171              	.LVL109:
 1172              	.L86:
 1173              	.LCFI17:
 1174              		.cfi_def_cfa_offset 0
 1175              		.cfi_restore 3
 1176              		.cfi_restore 14
 489:FreeRTOS/src/queue.c **** 
 1177              		.loc 1 489 2 view .LVU366
 1178 0016 7047     		bx	lr
 1179              		.cfi_endproc
 1180              	.LFE7:
 1182              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1183              		.align	1
 1184              		.global	xQueueCreateMutex
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu fpv4-sp-d16
 1190              	xQueueCreateMutex:
 1191              	.LVL110:
 1192              	.LFB8:
 497:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 1193              		.loc 1 497 2 is_stmt 1 view -0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 497:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 1197              		.loc 1 497 2 is_stmt 0 view .LVU368
 1198 0000 10B5     		push	{r4, lr}
 1199              	.LCFI18:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 4, -8
 1202              		.cfi_offset 14, -4
 498:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1203              		.loc 1 498 2 is_stmt 1 view .LVU369
 499:FreeRTOS/src/queue.c **** 
 1204              		.loc 1 499 2 view .LVU370
 1205              	.LVL111:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 69


 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1206              		.loc 1 501 3 view .LVU371
 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1207              		.loc 1 501 15 is_stmt 0 view .LVU372
 1208 0002 0246     		mov	r2, r0
 1209 0004 0021     		movs	r1, #0
 1210 0006 0120     		movs	r0, #1
 1211              	.LVL112:
 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1212              		.loc 1 501 15 view .LVU373
 1213 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1214              	.LVL113:
 1215 000c 0446     		mov	r4, r0
 1216              	.LVL114:
 502:FreeRTOS/src/queue.c **** 
 1217              		.loc 1 502 3 is_stmt 1 view .LVU374
 1218 000e FFF7FEFF 		bl	prvInitialiseMutex
 1219              	.LVL115:
 504:FreeRTOS/src/queue.c **** 	}
 1220              		.loc 1 504 3 view .LVU375
 505:FreeRTOS/src/queue.c **** 
 1221              		.loc 1 505 2 is_stmt 0 view .LVU376
 1222 0012 2046     		mov	r0, r4
 1223 0014 10BD     		pop	{r4, pc}
 505:FreeRTOS/src/queue.c **** 
 1224              		.loc 1 505 2 view .LVU377
 1225              		.cfi_endproc
 1226              	.LFE8:
 1228              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1229              		.align	1
 1230              		.global	xQueueGiveMutexRecursive
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	xQueueGiveMutexRecursive:
 1237              	.LVL116:
 1238              	.LFB9:
 590:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 1239              		.loc 1 590 2 is_stmt 1 view -0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 0
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 590:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 1243              		.loc 1 590 2 is_stmt 0 view .LVU379
 1244 0000 38B5     		push	{r3, r4, r5, lr}
 1245              	.LCFI19:
 1246              		.cfi_def_cfa_offset 16
 1247              		.cfi_offset 3, -16
 1248              		.cfi_offset 4, -12
 1249              		.cfi_offset 5, -8
 1250              		.cfi_offset 14, -4
 1251 0002 0446     		mov	r4, r0
 591:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1252              		.loc 1 591 2 is_stmt 1 view .LVU380
 592:FreeRTOS/src/queue.c **** 
 1253              		.loc 1 592 2 view .LVU381
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 70


 1254              	.LVL117:
 594:FreeRTOS/src/queue.c **** 
 1255              		.loc 1 594 26 view .LVU382
 602:FreeRTOS/src/queue.c **** 		{
 1256              		.loc 1 602 3 view .LVU383
 602:FreeRTOS/src/queue.c **** 		{
 1257              		.loc 1 602 28 is_stmt 0 view .LVU384
 1258 0004 8568     		ldr	r5, [r0, #8]
 602:FreeRTOS/src/queue.c **** 		{
 1259              		.loc 1 602 45 view .LVU385
 1260 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1261              	.LVL118:
 602:FreeRTOS/src/queue.c **** 		{
 1262              		.loc 1 602 5 view .LVU386
 1263 000a 8542     		cmp	r5, r0
 1264 000c 01D0     		beq	.L96
 631:FreeRTOS/src/queue.c **** 
 1265              		.loc 1 631 12 view .LVU387
 1266 000e 0020     		movs	r0, #0
 1267              	.L91:
 637:FreeRTOS/src/queue.c **** 
 1268              		.loc 1 637 2 view .LVU388
 1269 0010 38BD     		pop	{r3, r4, r5, pc}
 1270              	.LVL119:
 1271              	.L96:
 604:FreeRTOS/src/queue.c **** 
 1272              		.loc 1 604 40 is_stmt 1 view .LVU389
 611:FreeRTOS/src/queue.c **** 
 1273              		.loc 1 611 4 view .LVU390
 611:FreeRTOS/src/queue.c **** 
 1274              		.loc 1 611 27 is_stmt 0 view .LVU391
 1275 0012 E368     		ldr	r3, [r4, #12]
 611:FreeRTOS/src/queue.c **** 
 1276              		.loc 1 611 50 view .LVU392
 1277 0014 013B     		subs	r3, r3, #1
 1278 0016 E360     		str	r3, [r4, #12]
 614:FreeRTOS/src/queue.c **** 			{
 1279              		.loc 1 614 4 is_stmt 1 view .LVU393
 614:FreeRTOS/src/queue.c **** 			{
 1280              		.loc 1 614 6 is_stmt 0 view .LVU394
 1281 0018 0BB1     		cbz	r3, .L97
 625:FreeRTOS/src/queue.c **** 		}
 1282              		.loc 1 625 12 view .LVU395
 1283 001a 0120     		movs	r0, #1
 1284              	.LVL120:
 633:FreeRTOS/src/queue.c **** 		}
 1285              		.loc 1 633 47 is_stmt 1 view .LVU396
 636:FreeRTOS/src/queue.c **** 	}
 1286              		.loc 1 636 3 view .LVU397
 636:FreeRTOS/src/queue.c **** 	}
 1287              		.loc 1 636 10 is_stmt 0 view .LVU398
 1288 001c F8E7     		b	.L91
 1289              	.LVL121:
 1290              	.L97:
 618:FreeRTOS/src/queue.c **** 			}
 1291              		.loc 1 618 5 is_stmt 1 view .LVU399
 618:FreeRTOS/src/queue.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 71


 1292              		.loc 1 618 14 is_stmt 0 view .LVU400
 1293 001e 1A46     		mov	r2, r3
 1294 0020 1946     		mov	r1, r3
 1295 0022 2046     		mov	r0, r4
 1296 0024 FFF7FEFF 		bl	xQueueGenericSend
 1297              	.LVL122:
 625:FreeRTOS/src/queue.c **** 		}
 1298              		.loc 1 625 12 view .LVU401
 1299 0028 0120     		movs	r0, #1
 1300 002a F1E7     		b	.L91
 1301              		.cfi_endproc
 1302              	.LFE9:
 1304              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1305              		.align	1
 1306              		.global	xQueueGenericSendFromISR
 1307              		.syntax unified
 1308              		.thumb
 1309              		.thumb_func
 1310              		.fpu fpv4-sp-d16
 1312              	xQueueGenericSendFromISR:
 1313              	.LVL123:
 1314              	.LFB13:
 951:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1315              		.loc 1 951 1 is_stmt 1 view -0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 0
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 951:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1319              		.loc 1 951 1 is_stmt 0 view .LVU403
 1320 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1321              	.LCFI20:
 1322              		.cfi_def_cfa_offset 24
 1323              		.cfi_offset 3, -24
 1324              		.cfi_offset 4, -20
 1325              		.cfi_offset 5, -16
 1326              		.cfi_offset 6, -12
 1327              		.cfi_offset 7, -8
 1328              		.cfi_offset 14, -4
 952:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1329              		.loc 1 952 1 is_stmt 1 view .LVU404
 953:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1330              		.loc 1 953 1 view .LVU405
 954:FreeRTOS/src/queue.c **** 
 1331              		.loc 1 954 1 view .LVU406
 1332              	.LVL124:
 956:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1333              		.loc 1 956 25 view .LVU407
 957:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1334              		.loc 1 957 97 view .LVU408
 958:FreeRTOS/src/queue.c **** 
 1335              		.loc 1 958 88 view .LVU409
 974:FreeRTOS/src/queue.c **** 
 1336              		.loc 1 974 44 view .LVU410
 981:FreeRTOS/src/queue.c **** 	{
 1337              		.loc 1 981 2 view .LVU411
 1338              	.LBB25:
 1339              	.LBI25:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 72


 1340              		.file 2 "FreeRTOS/inc/portmacro.h"
   1:FreeRTOS/inc/portmacro.h **** /*
   2:FreeRTOS/inc/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/inc/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/inc/portmacro.h ****  *
   5:FreeRTOS/inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/inc/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/inc/portmacro.h ****  *
  12:FreeRTOS/inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/inc/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/inc/portmacro.h ****  *
  15:FreeRTOS/inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/inc/portmacro.h ****  *
  22:FreeRTOS/inc/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/inc/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/inc/portmacro.h ****  *
  25:FreeRTOS/inc/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/inc/portmacro.h ****  */
  27:FreeRTOS/inc/portmacro.h **** 
  28:FreeRTOS/inc/portmacro.h **** 
  29:FreeRTOS/inc/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/inc/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/inc/portmacro.h **** 
  32:FreeRTOS/inc/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/inc/portmacro.h **** extern "C" {
  34:FreeRTOS/inc/portmacro.h **** #endif
  35:FreeRTOS/inc/portmacro.h **** 
  36:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/inc/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/inc/portmacro.h ****  *
  39:FreeRTOS/inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/inc/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/inc/portmacro.h ****  *
  42:FreeRTOS/inc/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/inc/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/inc/portmacro.h ****  */
  45:FreeRTOS/inc/portmacro.h **** 
  46:FreeRTOS/inc/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/inc/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/inc/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/inc/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/inc/portmacro.h **** #define portLONG		long
  51:FreeRTOS/inc/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/inc/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/inc/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/inc/portmacro.h **** 
  55:FreeRTOS/inc/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/inc/portmacro.h **** typedef long BaseType_t;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 73


  57:FreeRTOS/inc/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/inc/portmacro.h **** 
  59:FreeRTOS/inc/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/inc/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/inc/portmacro.h **** #else
  63:FreeRTOS/inc/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/inc/portmacro.h **** 
  66:FreeRTOS/inc/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/inc/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/inc/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/inc/portmacro.h **** #endif
  70:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/inc/portmacro.h **** 
  72:FreeRTOS/inc/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/inc/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/inc/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/inc/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/inc/portmacro.h **** 
  78:FreeRTOS/inc/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/inc/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/inc/portmacro.h **** {																				\
  81:FreeRTOS/inc/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/inc/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/inc/portmacro.h **** 																				\
  84:FreeRTOS/inc/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/inc/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/inc/portmacro.h **** }
  89:FreeRTOS/inc/portmacro.h **** 
  90:FreeRTOS/inc/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/inc/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/inc/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/inc/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/inc/portmacro.h **** 
  96:FreeRTOS/inc/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/inc/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/inc/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/inc/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/inc/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/inc/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/inc/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/inc/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/inc/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/inc/portmacro.h **** 
 106:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/inc/portmacro.h **** 
 108:FreeRTOS/inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/inc/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/inc/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 74


 114:FreeRTOS/inc/portmacro.h **** 
 115:FreeRTOS/inc/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/inc/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/inc/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/inc/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/inc/portmacro.h **** #endif
 120:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/inc/portmacro.h **** 
 122:FreeRTOS/inc/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/inc/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/inc/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/inc/portmacro.h **** #endif
 126:FreeRTOS/inc/portmacro.h **** 
 127:FreeRTOS/inc/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/inc/portmacro.h **** 
 129:FreeRTOS/inc/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/inc/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/inc/portmacro.h **** 	{
 132:FreeRTOS/inc/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/inc/portmacro.h **** 
 134:FreeRTOS/inc/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/inc/portmacro.h **** 	}
 137:FreeRTOS/inc/portmacro.h **** 
 138:FreeRTOS/inc/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/inc/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/inc/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/inc/portmacro.h **** 	#endif
 142:FreeRTOS/inc/portmacro.h **** 
 143:FreeRTOS/inc/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/inc/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/inc/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/inc/portmacro.h **** 
 147:FreeRTOS/inc/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/inc/portmacro.h **** 
 149:FreeRTOS/inc/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/inc/portmacro.h **** 
 151:FreeRTOS/inc/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/inc/portmacro.h **** 
 153:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/inc/portmacro.h **** 
 155:FreeRTOS/inc/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/inc/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/inc/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/inc/portmacro.h **** #endif
 159:FreeRTOS/inc/portmacro.h **** 
 160:FreeRTOS/inc/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/inc/portmacro.h **** #define portNOP()
 162:FreeRTOS/inc/portmacro.h **** 
 163:FreeRTOS/inc/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/inc/portmacro.h **** 
 165:FreeRTOS/inc/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/inc/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/inc/portmacro.h **** #endif
 168:FreeRTOS/inc/portmacro.h **** 
 169:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 75


 171:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/inc/portmacro.h **** {
 173:FreeRTOS/inc/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:FreeRTOS/inc/portmacro.h **** BaseType_t xReturn;
 175:FreeRTOS/inc/portmacro.h **** 
 176:FreeRTOS/inc/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:FreeRTOS/inc/portmacro.h **** 
 179:FreeRTOS/inc/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/inc/portmacro.h **** 	{
 181:FreeRTOS/inc/portmacro.h **** 		xReturn = pdFALSE;
 182:FreeRTOS/inc/portmacro.h **** 	}
 183:FreeRTOS/inc/portmacro.h **** 	else
 184:FreeRTOS/inc/portmacro.h **** 	{
 185:FreeRTOS/inc/portmacro.h **** 		xReturn = pdTRUE;
 186:FreeRTOS/inc/portmacro.h **** 	}
 187:FreeRTOS/inc/portmacro.h **** 
 188:FreeRTOS/inc/portmacro.h **** 	return xReturn;
 189:FreeRTOS/inc/portmacro.h **** }
 190:FreeRTOS/inc/portmacro.h **** 
 191:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/inc/portmacro.h **** 
 193:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:FreeRTOS/inc/portmacro.h **** {
 195:FreeRTOS/inc/portmacro.h **** uint32_t ulNewBASEPRI;
 196:FreeRTOS/inc/portmacro.h **** 
 197:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 198:FreeRTOS/inc/portmacro.h **** 	(
 199:FreeRTOS/inc/portmacro.h **** 		"	mov %0, %1												\n" \
 200:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 202:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 203:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/inc/portmacro.h **** 	);
 205:FreeRTOS/inc/portmacro.h **** }
 206:FreeRTOS/inc/portmacro.h **** 
 207:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/inc/portmacro.h **** 
 209:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1341              		.loc 2 209 34 view .LVU412
 1342              	.LBB26:
 210:FreeRTOS/inc/portmacro.h **** {
 211:FreeRTOS/inc/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1343              		.loc 2 211 1 view .LVU413
 212:FreeRTOS/inc/portmacro.h **** 
 213:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1344              		.loc 2 213 2 view .LVU414
 1345              		.syntax unified
 1346              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1347 0002 EFF31186 			mrs r6, basepri											
 1348 0006 4FF0BF04 		mov r4, #191												
 1349 000a 84F31188 		msr basepri, r4											
 1350 000e BFF36F8F 		isb														
 1351 0012 BFF34F8F 		dsb														
 1352              	
 1353              	@ 0 "" 2
 1354              	.LVL125:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 76


 214:FreeRTOS/inc/portmacro.h **** 	(
 215:FreeRTOS/inc/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:FreeRTOS/inc/portmacro.h **** 		"	mov %1, %2												\n" \
 217:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 219:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 220:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:FreeRTOS/inc/portmacro.h **** 	);
 222:FreeRTOS/inc/portmacro.h **** 
 223:FreeRTOS/inc/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/inc/portmacro.h **** 	warnings. */
 225:FreeRTOS/inc/portmacro.h **** 	return ulOriginalBASEPRI;
 1355              		.loc 2 225 2 view .LVU415
 1356              		.loc 2 225 2 is_stmt 0 view .LVU416
 1357              		.thumb
 1358              		.syntax unified
 1359              	.LBE26:
 1360              	.LBE25:
 983:FreeRTOS/src/queue.c **** 		{
 1361              		.loc 1 983 3 is_stmt 1 view .LVU417
 983:FreeRTOS/src/queue.c **** 		{
 1362              		.loc 1 983 16 is_stmt 0 view .LVU418
 1363 0016 856B     		ldr	r5, [r0, #56]
 983:FreeRTOS/src/queue.c **** 		{
 1364              		.loc 1 983 45 view .LVU419
 1365 0018 C46B     		ldr	r4, [r0, #60]
 983:FreeRTOS/src/queue.c **** 		{
 1366              		.loc 1 983 5 view .LVU420
 1367 001a A542     		cmp	r5, r4
 1368 001c 05D3     		bcc	.L99
 983:FreeRTOS/src/queue.c **** 		{
 1369              		.loc 1 983 58 discriminator 1 view .LVU421
 1370 001e 022B     		cmp	r3, #2
 1371 0020 03D0     		beq	.L99
1103:FreeRTOS/src/queue.c **** 		}
 1372              		.loc 1 1103 12 view .LVU422
 1373 0022 0020     		movs	r0, #0
 1374              	.LVL126:
 1375              	.L100:
1106:FreeRTOS/src/queue.c **** 
 1376              		.loc 1 1106 2 is_stmt 1 view .LVU423
 1377              	.LBB27:
 1378              	.LBI27:
 226:FreeRTOS/inc/portmacro.h **** }
 227:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/inc/portmacro.h **** 
 229:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1379              		.loc 2 229 30 view .LVU424
 1380              	.LBB28:
 230:FreeRTOS/inc/portmacro.h **** {
 231:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1381              		.loc 2 231 2 view .LVU425
 1382              		.syntax unified
 1383              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1384 0024 86F31188 			msr basepri, r6	
 1385              	@ 0 "" 2
 1386              	.LVL127:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 77


 1387              		.loc 2 231 2 is_stmt 0 view .LVU426
 1388              		.thumb
 1389              		.syntax unified
 1390              	.LBE28:
 1391              	.LBE27:
1108:FreeRTOS/src/queue.c **** }
 1392              		.loc 1 1108 2 is_stmt 1 view .LVU427
1109:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1393              		.loc 1 1109 1 is_stmt 0 view .LVU428
 1394 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1395              	.LVL128:
 1396              	.L99:
1109:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1397              		.loc 1 1109 1 view .LVU429
 1398 002a 1746     		mov	r7, r2
 1399 002c 0546     		mov	r5, r0
 1400              	.LBB29:
 985:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1401              		.loc 1 985 4 is_stmt 1 view .LVU430
 985:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1402              		.loc 1 985 17 is_stmt 0 view .LVU431
 1403 002e 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1404 0032 64B2     		sxtb	r4, r4
 1405              	.LVL129:
 986:FreeRTOS/src/queue.c **** 
 1406              		.loc 1 986 4 is_stmt 1 view .LVU432
 986:FreeRTOS/src/queue.c **** 
 1407              		.loc 1 986 22 is_stmt 0 view .LVU433
 1408 0034 826B     		ldr	r2, [r0, #56]
 1409              	.LVL130:
 988:FreeRTOS/src/queue.c **** 
 1410              		.loc 1 988 39 is_stmt 1 view .LVU434
 995:FreeRTOS/src/queue.c **** 
 1411              		.loc 1 995 4 view .LVU435
 995:FreeRTOS/src/queue.c **** 
 1412              		.loc 1 995 13 is_stmt 0 view .LVU436
 1413 0036 1A46     		mov	r2, r3
 1414 0038 FFF7FEFF 		bl	prvCopyDataToQueue
 1415              	.LVL131:
 999:FreeRTOS/src/queue.c **** 			{
 1416              		.loc 1 999 4 is_stmt 1 view .LVU437
 999:FreeRTOS/src/queue.c **** 			{
 1417              		.loc 1 999 6 is_stmt 0 view .LVU438
 1418 003c B4F1FF3F 		cmp	r4, #-1
 1419 0040 05D0     		beq	.L107
1095:FreeRTOS/src/queue.c **** 			}
 1420              		.loc 1 1095 5 is_stmt 1 view .LVU439
1095:FreeRTOS/src/queue.c **** 			}
 1421              		.loc 1 1095 45 is_stmt 0 view .LVU440
 1422 0042 0134     		adds	r4, r4, #1
 1423              	.LVL132:
1095:FreeRTOS/src/queue.c **** 			}
 1424              		.loc 1 1095 24 view .LVU441
 1425 0044 64B2     		sxtb	r4, r4
 1426              	.LVL133:
1095:FreeRTOS/src/queue.c **** 			}
 1427              		.loc 1 1095 22 view .LVU442
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 78


 1428 0046 85F84540 		strb	r4, [r5, #69]
1098:FreeRTOS/src/queue.c **** 		}
 1429              		.loc 1 1098 12 view .LVU443
 1430 004a 0120     		movs	r0, #1
 1431 004c EAE7     		b	.L100
 1432              	.LVL134:
 1433              	.L107:
1061:FreeRTOS/src/queue.c **** 					{
 1434              		.loc 1 1061 6 is_stmt 1 view .LVU444
1061:FreeRTOS/src/queue.c **** 					{
 1435              		.loc 1 1061 10 is_stmt 0 view .LVU445
 1436 004e 6B6A     		ldr	r3, [r5, #36]
1061:FreeRTOS/src/queue.c **** 					{
 1437              		.loc 1 1061 8 view .LVU446
 1438 0050 0BB9     		cbnz	r3, .L108
1098:FreeRTOS/src/queue.c **** 		}
 1439              		.loc 1 1098 12 view .LVU447
 1440 0052 0120     		movs	r0, #1
 1441 0054 E6E7     		b	.L100
 1442              	.L108:
1063:FreeRTOS/src/queue.c **** 						{
 1443              		.loc 1 1063 7 is_stmt 1 view .LVU448
1063:FreeRTOS/src/queue.c **** 						{
 1444              		.loc 1 1063 11 is_stmt 0 view .LVU449
 1445 0056 05F12400 		add	r0, r5, #36
 1446 005a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1447              	.LVL135:
1063:FreeRTOS/src/queue.c **** 						{
 1448              		.loc 1 1063 9 view .LVU450
 1449 005e 18B1     		cbz	r0, .L104
1067:FreeRTOS/src/queue.c **** 							{
 1450              		.loc 1 1067 8 is_stmt 1 view .LVU451
1067:FreeRTOS/src/queue.c **** 							{
 1451              		.loc 1 1067 10 is_stmt 0 view .LVU452
 1452 0060 27B1     		cbz	r7, .L105
1069:FreeRTOS/src/queue.c **** 							}
 1453              		.loc 1 1069 9 is_stmt 1 view .LVU453
1069:FreeRTOS/src/queue.c **** 							}
 1454              		.loc 1 1069 36 is_stmt 0 view .LVU454
 1455 0062 0120     		movs	r0, #1
 1456 0064 3860     		str	r0, [r7]
 1457 0066 DDE7     		b	.L100
 1458              	.L104:
1098:FreeRTOS/src/queue.c **** 		}
 1459              		.loc 1 1098 12 view .LVU455
 1460 0068 0120     		movs	r0, #1
 1461 006a DBE7     		b	.L100
 1462              	.L105:
 1463 006c 0120     		movs	r0, #1
 1464 006e D9E7     		b	.L100
 1465              	.LBE29:
 1466              		.cfi_endproc
 1467              	.LFE13:
 1469              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1470              		.align	1
 1471              		.global	xQueueGiveFromISR
 1472              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 79


 1473              		.thumb
 1474              		.thumb_func
 1475              		.fpu fpv4-sp-d16
 1477              	xQueueGiveFromISR:
 1478              	.LVL136:
 1479              	.LFB14:
1113:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1480              		.loc 1 1113 1 is_stmt 1 view -0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
1113:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1484              		.loc 1 1113 1 is_stmt 0 view .LVU457
 1485 0000 38B5     		push	{r3, r4, r5, lr}
 1486              	.LCFI21:
 1487              		.cfi_def_cfa_offset 16
 1488              		.cfi_offset 3, -16
 1489              		.cfi_offset 4, -12
 1490              		.cfi_offset 5, -8
 1491              		.cfi_offset 14, -4
1114:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1492              		.loc 1 1114 1 is_stmt 1 view .LVU458
1115:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1493              		.loc 1 1115 1 view .LVU459
1116:FreeRTOS/src/queue.c **** 
 1494              		.loc 1 1116 1 view .LVU460
 1495              	.LVL137:
1124:FreeRTOS/src/queue.c **** 
 1496              		.loc 1 1124 25 view .LVU461
1128:FreeRTOS/src/queue.c **** 
 1497              		.loc 1 1128 42 view .LVU462
1133:FreeRTOS/src/queue.c **** 
 1498              		.loc 1 1133 120 view .LVU463
1149:FreeRTOS/src/queue.c **** 
 1499              		.loc 1 1149 44 view .LVU464
1151:FreeRTOS/src/queue.c **** 	{
 1500              		.loc 1 1151 2 view .LVU465
 1501              	.LBB30:
 1502              	.LBI30:
 209:FreeRTOS/inc/portmacro.h **** {
 1503              		.loc 2 209 34 view .LVU466
 1504              	.LBB31:
 211:FreeRTOS/inc/portmacro.h **** 
 1505              		.loc 2 211 1 view .LVU467
 213:FreeRTOS/inc/portmacro.h **** 	(
 1506              		.loc 2 213 2 view .LVU468
 1507              		.syntax unified
 1508              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1509 0002 EFF31184 			mrs r4, basepri											
 1510 0006 4FF0BF03 		mov r3, #191												
 1511 000a 83F31188 		msr basepri, r3											
 1512 000e BFF36F8F 		isb														
 1513 0012 BFF34F8F 		dsb														
 1514              	
 1515              	@ 0 "" 2
 1516              	.LVL138:
 225:FreeRTOS/inc/portmacro.h **** }
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 80


 1517              		.loc 2 225 2 view .LVU469
 225:FreeRTOS/inc/portmacro.h **** }
 1518              		.loc 2 225 2 is_stmt 0 view .LVU470
 1519              		.thumb
 1520              		.syntax unified
 1521              	.LBE31:
 1522              	.LBE30:
 1523              	.LBB32:
1153:FreeRTOS/src/queue.c **** 
 1524              		.loc 1 1153 3 is_stmt 1 view .LVU471
1153:FreeRTOS/src/queue.c **** 
 1525              		.loc 1 1153 21 is_stmt 0 view .LVU472
 1526 0016 826B     		ldr	r2, [r0, #56]
 1527              	.LVL139:
1158:FreeRTOS/src/queue.c **** 		{
 1528              		.loc 1 1158 3 is_stmt 1 view .LVU473
1158:FreeRTOS/src/queue.c **** 		{
 1529              		.loc 1 1158 34 is_stmt 0 view .LVU474
 1530 0018 C36B     		ldr	r3, [r0, #60]
1158:FreeRTOS/src/queue.c **** 		{
 1531              		.loc 1 1158 5 view .LVU475
 1532 001a 9342     		cmp	r3, r2
 1533 001c 1AD9     		bls	.L112
 1534              	.LBB33:
1160:FreeRTOS/src/queue.c **** 
 1535              		.loc 1 1160 4 is_stmt 1 view .LVU476
1160:FreeRTOS/src/queue.c **** 
 1536              		.loc 1 1160 17 is_stmt 0 view .LVU477
 1537 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1538 0022 5BB2     		sxtb	r3, r3
 1539              	.LVL140:
1162:FreeRTOS/src/queue.c **** 
 1540              		.loc 1 1162 39 is_stmt 1 view .LVU478
1170:FreeRTOS/src/queue.c **** 
 1541              		.loc 1 1170 4 view .LVU479
1170:FreeRTOS/src/queue.c **** 
 1542              		.loc 1 1170 51 is_stmt 0 view .LVU480
 1543 0024 0132     		adds	r2, r2, #1
 1544              	.LVL141:
1170:FreeRTOS/src/queue.c **** 
 1545              		.loc 1 1170 31 view .LVU481
 1546 0026 8263     		str	r2, [r0, #56]
1174:FreeRTOS/src/queue.c **** 			{
 1547              		.loc 1 1174 4 is_stmt 1 view .LVU482
1174:FreeRTOS/src/queue.c **** 			{
 1548              		.loc 1 1174 6 is_stmt 0 view .LVU483
 1549 0028 B3F1FF3F 		cmp	r3, #-1
 1550 002c 05D0     		beq	.L117
1260:FreeRTOS/src/queue.c **** 			}
 1551              		.loc 1 1260 5 is_stmt 1 view .LVU484
1260:FreeRTOS/src/queue.c **** 			}
 1552              		.loc 1 1260 45 is_stmt 0 view .LVU485
 1553 002e 0133     		adds	r3, r3, #1
 1554              	.LVL142:
1260:FreeRTOS/src/queue.c **** 			}
 1555              		.loc 1 1260 24 view .LVU486
 1556 0030 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 81


 1557              	.LVL143:
1260:FreeRTOS/src/queue.c **** 			}
 1558              		.loc 1 1260 22 view .LVU487
 1559 0032 80F84530 		strb	r3, [r0, #69]
1263:FreeRTOS/src/queue.c **** 		}
 1560              		.loc 1 1263 12 view .LVU488
 1561 0036 0120     		movs	r0, #1
 1562              	.LVL144:
1263:FreeRTOS/src/queue.c **** 		}
 1563              		.loc 1 1263 12 view .LVU489
 1564 0038 0DE0     		b	.L110
 1565              	.LVL145:
 1566              	.L117:
1229:FreeRTOS/src/queue.c **** 					{
 1567              		.loc 1 1229 6 is_stmt 1 view .LVU490
1229:FreeRTOS/src/queue.c **** 					{
 1568              		.loc 1 1229 10 is_stmt 0 view .LVU491
 1569 003a 436A     		ldr	r3, [r0, #36]
 1570              	.LVL146:
1229:FreeRTOS/src/queue.c **** 					{
 1571              		.loc 1 1229 8 view .LVU492
 1572 003c 0BB9     		cbnz	r3, .L118
1263:FreeRTOS/src/queue.c **** 		}
 1573              		.loc 1 1263 12 view .LVU493
 1574 003e 0120     		movs	r0, #1
 1575              	.LVL147:
1263:FreeRTOS/src/queue.c **** 		}
 1576              		.loc 1 1263 12 view .LVU494
 1577 0040 09E0     		b	.L110
 1578              	.LVL148:
 1579              	.L118:
1263:FreeRTOS/src/queue.c **** 		}
 1580              		.loc 1 1263 12 view .LVU495
 1581 0042 0D46     		mov	r5, r1
1231:FreeRTOS/src/queue.c **** 						{
 1582              		.loc 1 1231 7 is_stmt 1 view .LVU496
1231:FreeRTOS/src/queue.c **** 						{
 1583              		.loc 1 1231 11 is_stmt 0 view .LVU497
 1584 0044 2430     		adds	r0, r0, #36
 1585              	.LVL149:
1231:FreeRTOS/src/queue.c **** 						{
 1586              		.loc 1 1231 11 view .LVU498
 1587 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1588              	.LVL150:
1231:FreeRTOS/src/queue.c **** 						{
 1589              		.loc 1 1231 9 view .LVU499
 1590 004a 38B1     		cbz	r0, .L114
1235:FreeRTOS/src/queue.c **** 							{
 1591              		.loc 1 1235 8 is_stmt 1 view .LVU500
1235:FreeRTOS/src/queue.c **** 							{
 1592              		.loc 1 1235 10 is_stmt 0 view .LVU501
 1593 004c 45B1     		cbz	r5, .L115
1237:FreeRTOS/src/queue.c **** 							}
 1594              		.loc 1 1237 9 is_stmt 1 view .LVU502
1237:FreeRTOS/src/queue.c **** 							}
 1595              		.loc 1 1237 36 is_stmt 0 view .LVU503
 1596 004e 0120     		movs	r0, #1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 82


 1597 0050 2860     		str	r0, [r5]
 1598 0052 00E0     		b	.L110
 1599              	.LVL151:
 1600              	.L112:
1237:FreeRTOS/src/queue.c **** 							}
 1601              		.loc 1 1237 36 view .LVU504
 1602              	.LBE33:
1268:FreeRTOS/src/queue.c **** 		}
 1603              		.loc 1 1268 12 view .LVU505
 1604 0054 0020     		movs	r0, #0
 1605              	.LVL152:
 1606              	.L110:
1268:FreeRTOS/src/queue.c **** 		}
 1607              		.loc 1 1268 12 view .LVU506
 1608              	.LBE32:
1271:FreeRTOS/src/queue.c **** 
 1609              		.loc 1 1271 2 is_stmt 1 view .LVU507
 1610              	.LBB35:
 1611              	.LBI35:
 229:FreeRTOS/inc/portmacro.h **** {
 1612              		.loc 2 229 30 view .LVU508
 1613              	.LBB36:
 1614              		.loc 2 231 2 view .LVU509
 1615              		.syntax unified
 1616              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1617 0056 84F31188 			msr basepri, r4	
 1618              	@ 0 "" 2
 1619              	.LVL153:
 1620              		.loc 2 231 2 is_stmt 0 view .LVU510
 1621              		.thumb
 1622              		.syntax unified
 1623              	.LBE36:
 1624              	.LBE35:
1273:FreeRTOS/src/queue.c **** }
 1625              		.loc 1 1273 2 is_stmt 1 view .LVU511
1274:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1626              		.loc 1 1274 1 is_stmt 0 view .LVU512
 1627 005a 38BD     		pop	{r3, r4, r5, pc}
 1628              	.LVL154:
 1629              	.L114:
 1630              	.LBB37:
 1631              	.LBB34:
1263:FreeRTOS/src/queue.c **** 		}
 1632              		.loc 1 1263 12 view .LVU513
 1633 005c 0120     		movs	r0, #1
 1634 005e FAE7     		b	.L110
 1635              	.L115:
 1636 0060 0120     		movs	r0, #1
 1637 0062 F8E7     		b	.L110
 1638              	.LBE34:
 1639              	.LBE37:
 1640              		.cfi_endproc
 1641              	.LFE14:
 1643              		.section	.text.xQueueReceive,"ax",%progbits
 1644              		.align	1
 1645              		.global	xQueueReceive
 1646              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 83


 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu fpv4-sp-d16
 1651              	xQueueReceive:
 1652              	.LVL155:
 1653              	.LFB15:
1278:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1654              		.loc 1 1278 1 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 16
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
1278:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1658              		.loc 1 1278 1 is_stmt 0 view .LVU515
 1659 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1660              	.LCFI22:
 1661              		.cfi_def_cfa_offset 20
 1662              		.cfi_offset 4, -20
 1663              		.cfi_offset 5, -16
 1664              		.cfi_offset 6, -12
 1665              		.cfi_offset 7, -8
 1666              		.cfi_offset 14, -4
 1667 0002 85B0     		sub	sp, sp, #20
 1668              	.LCFI23:
 1669              		.cfi_def_cfa_offset 40
 1670 0004 0446     		mov	r4, r0
 1671 0006 0F46     		mov	r7, r1
 1672 0008 0192     		str	r2, [sp, #4]
1279:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1673              		.loc 1 1279 1 is_stmt 1 view .LVU516
 1674              	.LVL156:
1280:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1675              		.loc 1 1280 1 view .LVU517
1281:FreeRTOS/src/queue.c **** 
 1676              		.loc 1 1281 1 view .LVU518
1279:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1677              		.loc 1 1279 12 is_stmt 0 view .LVU519
 1678 000a 0026     		movs	r6, #0
 1679 000c 3CE0     		b	.L120
 1680              	.LVL157:
 1681              	.L134:
 1682              	.LBB38:
1312:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1683              		.loc 1 1312 5 is_stmt 1 view .LVU520
 1684 000e 3946     		mov	r1, r7
 1685 0010 2046     		mov	r0, r4
 1686 0012 FFF7FEFF 		bl	prvCopyDataFromQueue
 1687              	.LVL158:
1313:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1688              		.loc 1 1313 34 view .LVU521
1314:FreeRTOS/src/queue.c **** 
 1689              		.loc 1 1314 5 view .LVU522
1314:FreeRTOS/src/queue.c **** 
 1690              		.loc 1 1314 52 is_stmt 0 view .LVU523
 1691 0016 013D     		subs	r5, r5, #1
 1692              	.LVL159:
1314:FreeRTOS/src/queue.c **** 
 1693              		.loc 1 1314 32 view .LVU524
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 84


 1694 0018 A563     		str	r5, [r4, #56]
1319:FreeRTOS/src/queue.c **** 				{
 1695              		.loc 1 1319 5 is_stmt 1 view .LVU525
1319:FreeRTOS/src/queue.c **** 				{
 1696              		.loc 1 1319 9 is_stmt 0 view .LVU526
 1697 001a 2369     		ldr	r3, [r4, #16]
1319:FreeRTOS/src/queue.c **** 				{
 1698              		.loc 1 1319 7 view .LVU527
 1699 001c 23B9     		cbnz	r3, .L132
 1700              	.L122:
1332:FreeRTOS/src/queue.c **** 				}
 1701              		.loc 1 1332 30 is_stmt 1 view .LVU528
1335:FreeRTOS/src/queue.c **** 				return pdPASS;
 1702              		.loc 1 1335 5 view .LVU529
 1703 001e FFF7FEFF 		bl	vPortExitCritical
 1704              	.LVL160:
1336:FreeRTOS/src/queue.c **** 			}
 1705              		.loc 1 1336 5 view .LVU530
1336:FreeRTOS/src/queue.c **** 			}
 1706              		.loc 1 1336 12 is_stmt 0 view .LVU531
 1707 0022 0120     		movs	r0, #1
 1708              	.LVL161:
 1709              	.L119:
1336:FreeRTOS/src/queue.c **** 			}
 1710              		.loc 1 1336 12 view .LVU532
 1711              	.LBE38:
1415:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1712              		.loc 1 1415 1 view .LVU533
 1713 0024 05B0     		add	sp, sp, #20
 1714              	.LCFI24:
 1715              		.cfi_remember_state
 1716              		.cfi_def_cfa_offset 20
 1717              		@ sp needed
 1718 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 1719              	.LVL162:
 1720              	.L132:
 1721              	.LCFI25:
 1722              		.cfi_restore_state
 1723              	.LBB39:
1321:FreeRTOS/src/queue.c **** 					{
 1724              		.loc 1 1321 6 is_stmt 1 view .LVU534
1321:FreeRTOS/src/queue.c **** 					{
 1725              		.loc 1 1321 10 is_stmt 0 view .LVU535
 1726 0028 04F11000 		add	r0, r4, #16
 1727 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1728              	.LVL163:
1321:FreeRTOS/src/queue.c **** 					{
 1729              		.loc 1 1321 8 view .LVU536
 1730 0030 0028     		cmp	r0, #0
 1731 0032 F4D0     		beq	.L122
1323:FreeRTOS/src/queue.c **** 					}
 1732              		.loc 1 1323 7 is_stmt 1 view .LVU537
 1733 0034 344B     		ldr	r3, .L139
 1734 0036 4FF08052 		mov	r2, #268435456
 1735 003a 1A60     		str	r2, [r3]
1323:FreeRTOS/src/queue.c **** 					}
 1736              		.loc 1 1323 7 view .LVU538
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 85


 1737              		.syntax unified
 1738              	@ 1323 "FreeRTOS/src/queue.c" 1
 1739 003c BFF34F8F 		dsb
 1740              	@ 0 "" 2
1323:FreeRTOS/src/queue.c **** 					}
 1741              		.loc 1 1323 7 view .LVU539
 1742              	@ 1323 "FreeRTOS/src/queue.c" 1
 1743 0040 BFF36F8F 		isb
 1744              	@ 0 "" 2
1323:FreeRTOS/src/queue.c **** 					}
 1745              		.loc 1 1323 39 view .LVU540
 1746              		.thumb
 1747              		.syntax unified
 1748 0044 EBE7     		b	.L122
 1749              	.LVL164:
 1750              	.L135:
1344:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1751              		.loc 1 1344 6 view .LVU541
 1752 0046 FFF7FEFF 		bl	vPortExitCritical
 1753              	.LVL165:
1345:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 1754              		.loc 1 1345 42 view .LVU542
1346:FreeRTOS/src/queue.c **** 				}
 1755              		.loc 1 1346 6 view .LVU543
1346:FreeRTOS/src/queue.c **** 				}
 1756              		.loc 1 1346 13 is_stmt 0 view .LVU544
 1757 004a 0020     		movs	r0, #0
 1758 004c EAE7     		b	.L119
 1759              	.L136:
1352:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1760              		.loc 1 1352 6 is_stmt 1 view .LVU545
 1761 004e 02A8     		add	r0, sp, #8
 1762 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1763              	.LVL166:
1353:FreeRTOS/src/queue.c **** 				}
 1764              		.loc 1 1353 6 view .LVU546
1353:FreeRTOS/src/queue.c **** 				}
 1765              		.loc 1 1353 20 is_stmt 0 view .LVU547
 1766 0054 0126     		movs	r6, #1
 1767 0056 21E0     		b	.L125
 1768              	.LVL167:
 1769              	.L137:
1353:FreeRTOS/src/queue.c **** 				}
 1770              		.loc 1 1353 20 view .LVU548
 1771              	.LBE39:
1368:FreeRTOS/src/queue.c **** 
 1772              		.loc 1 1368 3 is_stmt 1 discriminator 1 view .LVU549
 1773 0058 0023     		movs	r3, #0
 1774 005a 84F84430 		strb	r3, [r4, #68]
 1775 005e 29E0     		b	.L126
 1776              	.L138:
1368:FreeRTOS/src/queue.c **** 
 1777              		.loc 1 1368 3 discriminator 4 view .LVU550
 1778 0060 0023     		movs	r3, #0
 1779 0062 84F84530 		strb	r3, [r4, #69]
 1780 0066 2BE0     		b	.L127
 1781              	.L129:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 86


1393:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 1782              		.loc 1 1393 5 view .LVU551
 1783 0068 2046     		mov	r0, r4
 1784 006a FFF7FEFF 		bl	prvUnlockQueue
 1785              	.LVL168:
1394:FreeRTOS/src/queue.c **** 			}
 1786              		.loc 1 1394 5 view .LVU552
1394:FreeRTOS/src/queue.c **** 			}
 1787              		.loc 1 1394 14 is_stmt 0 view .LVU553
 1788 006e FFF7FEFF 		bl	xTaskResumeAll
 1789              	.LVL169:
 1790 0072 09E0     		b	.L120
 1791              	.L128:
1401:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 1792              		.loc 1 1401 4 is_stmt 1 view .LVU554
 1793 0074 2046     		mov	r0, r4
 1794 0076 FFF7FEFF 		bl	prvUnlockQueue
 1795              	.LVL170:
1402:FreeRTOS/src/queue.c **** 
 1796              		.loc 1 1402 4 view .LVU555
1402:FreeRTOS/src/queue.c **** 
 1797              		.loc 1 1402 13 is_stmt 0 view .LVU556
 1798 007a FFF7FEFF 		bl	xTaskResumeAll
 1799              	.LVL171:
1404:FreeRTOS/src/queue.c **** 			{
 1800              		.loc 1 1404 4 is_stmt 1 view .LVU557
1404:FreeRTOS/src/queue.c **** 			{
 1801              		.loc 1 1404 8 is_stmt 0 view .LVU558
 1802 007e 2046     		mov	r0, r4
 1803 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 1804              	.LVL172:
1404:FreeRTOS/src/queue.c **** 			{
 1805              		.loc 1 1404 6 view .LVU559
 1806 0084 0028     		cmp	r0, #0
 1807 0086 3DD1     		bne	.L133
 1808              	.LVL173:
 1809              	.L120:
1284:FreeRTOS/src/queue.c **** 
 1810              		.loc 1 1284 29 is_stmt 1 view .LVU560
1288:FreeRTOS/src/queue.c **** 
 1811              		.loc 1 1288 100 view .LVU561
1293:FreeRTOS/src/queue.c **** 	}
 1812              		.loc 1 1293 104 view .LVU562
1301:FreeRTOS/src/queue.c **** 	{
 1813              		.loc 1 1301 2 view .LVU563
1303:FreeRTOS/src/queue.c **** 		{
 1814              		.loc 1 1303 3 view .LVU564
 1815 0088 FFF7FEFF 		bl	vPortEnterCritical
 1816              	.LVL174:
 1817              	.LBB40:
1305:FreeRTOS/src/queue.c **** 
 1818              		.loc 1 1305 4 view .LVU565
1305:FreeRTOS/src/queue.c **** 
 1819              		.loc 1 1305 22 is_stmt 0 view .LVU566
 1820 008c A56B     		ldr	r5, [r4, #56]
 1821              	.LVL175:
1309:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 87


 1822              		.loc 1 1309 4 is_stmt 1 view .LVU567
1309:FreeRTOS/src/queue.c **** 			{
 1823              		.loc 1 1309 6 is_stmt 0 view .LVU568
 1824 008e 002D     		cmp	r5, #0
 1825 0090 BDD1     		bne	.L134
1340:FreeRTOS/src/queue.c **** 				{
 1826              		.loc 1 1340 5 is_stmt 1 view .LVU569
1340:FreeRTOS/src/queue.c **** 				{
 1827              		.loc 1 1340 22 is_stmt 0 view .LVU570
 1828 0092 019B     		ldr	r3, [sp, #4]
1340:FreeRTOS/src/queue.c **** 				{
 1829              		.loc 1 1340 7 view .LVU571
 1830 0094 002B     		cmp	r3, #0
 1831 0096 D6D0     		beq	.L135
1348:FreeRTOS/src/queue.c **** 				{
 1832              		.loc 1 1348 10 is_stmt 1 view .LVU572
1348:FreeRTOS/src/queue.c **** 				{
 1833              		.loc 1 1348 12 is_stmt 0 view .LVU573
 1834 0098 002E     		cmp	r6, #0
 1835 009a D8D0     		beq	.L136
 1836              	.LVL176:
 1837              	.L125:
1358:FreeRTOS/src/queue.c **** 				}
 1838              		.loc 1 1358 30 is_stmt 1 view .LVU574
 1839              	.LBE40:
1362:FreeRTOS/src/queue.c **** 
 1840              		.loc 1 1362 3 view .LVU575
 1841 009c FFF7FEFF 		bl	vPortExitCritical
 1842              	.LVL177:
1367:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 1843              		.loc 1 1367 3 view .LVU576
 1844 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 1845              	.LVL178:
1368:FreeRTOS/src/queue.c **** 
 1846              		.loc 1 1368 3 view .LVU577
 1847 00a4 FFF7FEFF 		bl	vPortEnterCritical
 1848              	.LVL179:
1368:FreeRTOS/src/queue.c **** 
 1849              		.loc 1 1368 3 view .LVU578
 1850 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1851 00ac 5BB2     		sxtb	r3, r3
 1852 00ae B3F1FF3F 		cmp	r3, #-1
 1853 00b2 D1D0     		beq	.L137
 1854              	.L126:
1368:FreeRTOS/src/queue.c **** 
 1855              		.loc 1 1368 3 discriminator 3 view .LVU579
 1856 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1857 00b8 5BB2     		sxtb	r3, r3
 1858 00ba B3F1FF3F 		cmp	r3, #-1
 1859 00be CFD0     		beq	.L138
 1860              	.L127:
1368:FreeRTOS/src/queue.c **** 
 1861              		.loc 1 1368 3 discriminator 6 view .LVU580
 1862 00c0 FFF7FEFF 		bl	vPortExitCritical
 1863              	.LVL180:
1371:FreeRTOS/src/queue.c **** 		{
 1864              		.loc 1 1371 3 discriminator 6 view .LVU581
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 88


1371:FreeRTOS/src/queue.c **** 		{
 1865              		.loc 1 1371 7 is_stmt 0 discriminator 6 view .LVU582
 1866 00c4 01A9     		add	r1, sp, #4
 1867 00c6 02A8     		add	r0, sp, #8
 1868 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1869              	.LVL181:
1371:FreeRTOS/src/queue.c **** 		{
 1870              		.loc 1 1371 5 discriminator 6 view .LVU583
 1871 00cc 0028     		cmp	r0, #0
 1872 00ce D1D1     		bne	.L128
1375:FreeRTOS/src/queue.c **** 			{
 1873              		.loc 1 1375 4 is_stmt 1 view .LVU584
1375:FreeRTOS/src/queue.c **** 			{
 1874              		.loc 1 1375 8 is_stmt 0 view .LVU585
 1875 00d0 2046     		mov	r0, r4
 1876 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 1877              	.LVL182:
1375:FreeRTOS/src/queue.c **** 			{
 1878              		.loc 1 1375 6 view .LVU586
 1879 00d6 0028     		cmp	r0, #0
 1880 00d8 C6D0     		beq	.L129
1377:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1881              		.loc 1 1377 46 is_stmt 1 view .LVU587
1378:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 1882              		.loc 1 1378 5 view .LVU588
 1883 00da 0199     		ldr	r1, [sp, #4]
 1884 00dc 04F12400 		add	r0, r4, #36
 1885 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1886              	.LVL183:
1379:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1887              		.loc 1 1379 5 view .LVU589
 1888 00e4 2046     		mov	r0, r4
 1889 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1890              	.LVL184:
1380:FreeRTOS/src/queue.c **** 				{
 1891              		.loc 1 1380 5 view .LVU590
1380:FreeRTOS/src/queue.c **** 				{
 1892              		.loc 1 1380 9 is_stmt 0 view .LVU591
 1893 00ea FFF7FEFF 		bl	xTaskResumeAll
 1894              	.LVL185:
1380:FreeRTOS/src/queue.c **** 				{
 1895              		.loc 1 1380 7 view .LVU592
 1896 00ee 0028     		cmp	r0, #0
 1897 00f0 CAD1     		bne	.L120
1382:FreeRTOS/src/queue.c **** 				}
 1898              		.loc 1 1382 6 is_stmt 1 view .LVU593
 1899 00f2 054B     		ldr	r3, .L139
 1900 00f4 4FF08052 		mov	r2, #268435456
 1901 00f8 1A60     		str	r2, [r3]
1382:FreeRTOS/src/queue.c **** 				}
 1902              		.loc 1 1382 6 view .LVU594
 1903              		.syntax unified
 1904              	@ 1382 "FreeRTOS/src/queue.c" 1
 1905 00fa BFF34F8F 		dsb
 1906              	@ 0 "" 2
1382:FreeRTOS/src/queue.c **** 				}
 1907              		.loc 1 1382 6 view .LVU595
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 89


 1908              	@ 1382 "FreeRTOS/src/queue.c" 1
 1909 00fe BFF36F8F 		isb
 1910              	@ 0 "" 2
1382:FreeRTOS/src/queue.c **** 				}
 1911              		.loc 1 1382 28 view .LVU596
 1912              		.thumb
 1913              		.syntax unified
 1914 0102 C1E7     		b	.L120
 1915              	.L133:
1407:FreeRTOS/src/queue.c **** 			}
 1916              		.loc 1 1407 12 is_stmt 0 view .LVU597
 1917 0104 0020     		movs	r0, #0
 1918 0106 8DE7     		b	.L119
 1919              	.L140:
 1920              		.align	2
 1921              	.L139:
 1922 0108 04ED00E0 		.word	-536810236
 1923              		.cfi_endproc
 1924              	.LFE15:
 1926              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1927              		.align	1
 1928              		.global	xQueueSemaphoreTake
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1932              		.fpu fpv4-sp-d16
 1934              	xQueueSemaphoreTake:
 1935              	.LVL186:
 1936              	.LFB16:
1419:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1937              		.loc 1 1419 1 is_stmt 1 view -0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 16
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
1419:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1941              		.loc 1 1419 1 is_stmt 0 view .LVU599
 1942 0000 70B5     		push	{r4, r5, r6, lr}
 1943              	.LCFI26:
 1944              		.cfi_def_cfa_offset 16
 1945              		.cfi_offset 4, -16
 1946              		.cfi_offset 5, -12
 1947              		.cfi_offset 6, -8
 1948              		.cfi_offset 14, -4
 1949 0002 84B0     		sub	sp, sp, #16
 1950              	.LCFI27:
 1951              		.cfi_def_cfa_offset 32
 1952 0004 0446     		mov	r4, r0
 1953 0006 0191     		str	r1, [sp, #4]
1420:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1954              		.loc 1 1420 1 is_stmt 1 view .LVU600
 1955              	.LVL187:
1421:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1956              		.loc 1 1421 1 view .LVU601
1422:FreeRTOS/src/queue.c **** 
 1957              		.loc 1 1422 1 view .LVU602
1425:FreeRTOS/src/queue.c **** #endif
 1958              		.loc 1 1425 2 view .LVU603
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 90


1425:FreeRTOS/src/queue.c **** #endif
 1959              		.loc 1 1425 13 is_stmt 0 view .LVU604
 1960 0008 0026     		movs	r6, #0
1420:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1961              		.loc 1 1420 12 view .LVU605
 1962 000a 3546     		mov	r5, r6
 1963 000c 47E0     		b	.L142
 1964              	.LVL188:
 1965              	.L160:
 1966              	.LBB41:
1458:FreeRTOS/src/queue.c **** 
 1967              		.loc 1 1458 34 is_stmt 1 view .LVU606
1462:FreeRTOS/src/queue.c **** 
 1968              		.loc 1 1462 5 view .LVU607
1462:FreeRTOS/src/queue.c **** 
 1969              		.loc 1 1462 51 is_stmt 0 view .LVU608
 1970 000e 013B     		subs	r3, r3, #1
 1971              	.LVL189:
1462:FreeRTOS/src/queue.c **** 
 1972              		.loc 1 1462 32 view .LVU609
 1973 0010 A363     		str	r3, [r4, #56]
1466:FreeRTOS/src/queue.c **** 					{
 1974              		.loc 1 1466 6 is_stmt 1 view .LVU610
1466:FreeRTOS/src/queue.c **** 					{
 1975              		.loc 1 1466 17 is_stmt 0 view .LVU611
 1976 0012 2368     		ldr	r3, [r4]
 1977              	.LVL190:
1466:FreeRTOS/src/queue.c **** 					{
 1978              		.loc 1 1466 8 view .LVU612
 1979 0014 33B1     		cbz	r3, .L157
 1980              	.LVL191:
 1981              	.L144:
1474:FreeRTOS/src/queue.c **** 					}
 1982              		.loc 1 1474 31 is_stmt 1 view .LVU613
1481:FreeRTOS/src/queue.c **** 				{
 1983              		.loc 1 1481 5 view .LVU614
1481:FreeRTOS/src/queue.c **** 				{
 1984              		.loc 1 1481 9 is_stmt 0 view .LVU615
 1985 0016 2369     		ldr	r3, [r4, #16]
1481:FreeRTOS/src/queue.c **** 				{
 1986              		.loc 1 1481 7 view .LVU616
 1987 0018 43B9     		cbnz	r3, .L158
 1988              	.L145:
1494:FreeRTOS/src/queue.c **** 				}
 1989              		.loc 1 1494 30 is_stmt 1 view .LVU617
1497:FreeRTOS/src/queue.c **** 				return pdPASS;
 1990              		.loc 1 1497 5 view .LVU618
 1991 001a FFF7FEFF 		bl	vPortExitCritical
 1992              	.LVL192:
1498:FreeRTOS/src/queue.c **** 			}
 1993              		.loc 1 1498 5 view .LVU619
1498:FreeRTOS/src/queue.c **** 			}
 1994              		.loc 1 1498 12 is_stmt 0 view .LVU620
 1995 001e 0120     		movs	r0, #1
 1996              	.L141:
1498:FreeRTOS/src/queue.c **** 			}
 1997              		.loc 1 1498 12 view .LVU621
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 91


 1998              	.LBE41:
1633:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1999              		.loc 1 1633 1 view .LVU622
 2000 0020 04B0     		add	sp, sp, #16
 2001              	.LCFI28:
 2002              		.cfi_remember_state
 2003              		.cfi_def_cfa_offset 16
 2004              		@ sp needed
 2005 0022 70BD     		pop	{r4, r5, r6, pc}
 2006              	.LVL193:
 2007              	.L157:
 2008              	.LCFI29:
 2009              		.cfi_restore_state
 2010              	.LBB42:
1470:FreeRTOS/src/queue.c **** 					}
 2011              		.loc 1 1470 7 is_stmt 1 view .LVU623
1470:FreeRTOS/src/queue.c **** 					}
 2012              		.loc 1 1470 44 is_stmt 0 view .LVU624
 2013 0024 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2014              	.LVL194:
1470:FreeRTOS/src/queue.c **** 					}
 2015              		.loc 1 1470 42 view .LVU625
 2016 0028 A060     		str	r0, [r4, #8]
 2017 002a F4E7     		b	.L144
 2018              	.L158:
1483:FreeRTOS/src/queue.c **** 					{
 2019              		.loc 1 1483 6 is_stmt 1 view .LVU626
1483:FreeRTOS/src/queue.c **** 					{
 2020              		.loc 1 1483 10 is_stmt 0 view .LVU627
 2021 002c 04F11000 		add	r0, r4, #16
 2022 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2023              	.LVL195:
1483:FreeRTOS/src/queue.c **** 					{
 2024              		.loc 1 1483 8 view .LVU628
 2025 0034 0028     		cmp	r0, #0
 2026 0036 F0D0     		beq	.L145
1485:FreeRTOS/src/queue.c **** 					}
 2027              		.loc 1 1485 7 is_stmt 1 view .LVU629
 2028 0038 414B     		ldr	r3, .L167
 2029 003a 4FF08052 		mov	r2, #268435456
 2030 003e 1A60     		str	r2, [r3]
1485:FreeRTOS/src/queue.c **** 					}
 2031              		.loc 1 1485 7 view .LVU630
 2032              		.syntax unified
 2033              	@ 1485 "FreeRTOS/src/queue.c" 1
 2034 0040 BFF34F8F 		dsb
 2035              	@ 0 "" 2
1485:FreeRTOS/src/queue.c **** 					}
 2036              		.loc 1 1485 7 view .LVU631
 2037              	@ 1485 "FreeRTOS/src/queue.c" 1
 2038 0044 BFF36F8F 		isb
 2039              	@ 0 "" 2
1485:FreeRTOS/src/queue.c **** 					}
 2040              		.loc 1 1485 39 view .LVU632
 2041              		.thumb
 2042              		.syntax unified
 2043 0048 E7E7     		b	.L145
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 92


 2044              	.L161:
1509:FreeRTOS/src/queue.c **** 					}
 2045              		.loc 1 1509 54 view .LVU633
1515:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2046              		.loc 1 1515 6 view .LVU634
 2047 004a FFF7FEFF 		bl	vPortExitCritical
 2048              	.LVL196:
1516:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 2049              		.loc 1 1516 42 view .LVU635
1517:FreeRTOS/src/queue.c **** 				}
 2050              		.loc 1 1517 6 view .LVU636
1517:FreeRTOS/src/queue.c **** 				}
 2051              		.loc 1 1517 13 is_stmt 0 view .LVU637
 2052 004e 0020     		movs	r0, #0
 2053 0050 E6E7     		b	.L141
 2054              	.L162:
1523:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 2055              		.loc 1 1523 6 is_stmt 1 view .LVU638
 2056 0052 02A8     		add	r0, sp, #8
 2057 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2058              	.LVL197:
1524:FreeRTOS/src/queue.c **** 				}
 2059              		.loc 1 1524 6 view .LVU639
1524:FreeRTOS/src/queue.c **** 				}
 2060              		.loc 1 1524 20 is_stmt 0 view .LVU640
 2061 0058 0125     		movs	r5, #1
 2062 005a 2AE0     		b	.L148
 2063              	.LVL198:
 2064              	.L163:
1524:FreeRTOS/src/queue.c **** 				}
 2065              		.loc 1 1524 20 view .LVU641
 2066              	.LBE42:
1539:FreeRTOS/src/queue.c **** 
 2067              		.loc 1 1539 3 is_stmt 1 discriminator 1 view .LVU642
 2068 005c 0023     		movs	r3, #0
 2069 005e 84F84430 		strb	r3, [r4, #68]
 2070 0062 32E0     		b	.L149
 2071              	.L164:
1539:FreeRTOS/src/queue.c **** 
 2072              		.loc 1 1539 3 discriminator 4 view .LVU643
 2073 0064 0023     		movs	r3, #0
 2074 0066 84F84530 		strb	r3, [r4, #69]
 2075 006a 34E0     		b	.L150
 2076              	.L165:
1556:FreeRTOS/src/queue.c **** 						{
 2077              		.loc 1 1556 7 view .LVU644
 2078 006c FFF7FEFF 		bl	vPortEnterCritical
 2079              	.LVL199:
1558:FreeRTOS/src/queue.c **** 						}
 2080              		.loc 1 1558 8 view .LVU645
1558:FreeRTOS/src/queue.c **** 						}
 2081              		.loc 1 1558 31 is_stmt 0 view .LVU646
 2082 0070 A068     		ldr	r0, [r4, #8]
 2083 0072 FFF7FEFF 		bl	xTaskPriorityInherit
 2084              	.LVL200:
 2085 0076 0646     		mov	r6, r0
 2086              	.LVL201:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 93


1560:FreeRTOS/src/queue.c **** 					}
 2087              		.loc 1 1560 7 is_stmt 1 view .LVU647
 2088 0078 FFF7FEFF 		bl	vPortExitCritical
 2089              	.LVL202:
1560:FreeRTOS/src/queue.c **** 					}
 2090              		.loc 1 1560 7 is_stmt 0 view .LVU648
 2091 007c 3BE0     		b	.L153
 2092              	.L152:
1584:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 2093              		.loc 1 1584 5 is_stmt 1 view .LVU649
 2094 007e 2046     		mov	r0, r4
 2095 0080 FFF7FEFF 		bl	prvUnlockQueue
 2096              	.LVL203:
1585:FreeRTOS/src/queue.c **** 			}
 2097              		.loc 1 1585 5 view .LVU650
1585:FreeRTOS/src/queue.c **** 			}
 2098              		.loc 1 1585 14 is_stmt 0 view .LVU651
 2099 0084 FFF7FEFF 		bl	xTaskResumeAll
 2100              	.LVL204:
 2101 0088 09E0     		b	.L142
 2102              	.L151:
1591:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 2103              		.loc 1 1591 4 is_stmt 1 view .LVU652
 2104 008a 2046     		mov	r0, r4
 2105 008c FFF7FEFF 		bl	prvUnlockQueue
 2106              	.LVL205:
1592:FreeRTOS/src/queue.c **** 
 2107              		.loc 1 1592 4 view .LVU653
1592:FreeRTOS/src/queue.c **** 
 2108              		.loc 1 1592 13 is_stmt 0 view .LVU654
 2109 0090 FFF7FEFF 		bl	xTaskResumeAll
 2110              	.LVL206:
1598:FreeRTOS/src/queue.c **** 			{
 2111              		.loc 1 1598 4 is_stmt 1 view .LVU655
1598:FreeRTOS/src/queue.c **** 			{
 2112              		.loc 1 1598 8 is_stmt 0 view .LVU656
 2113 0094 2046     		mov	r0, r4
 2114 0096 FFF7FEFF 		bl	prvIsQueueEmpty
 2115              	.LVL207:
1598:FreeRTOS/src/queue.c **** 			{
 2116              		.loc 1 1598 6 view .LVU657
 2117 009a 0028     		cmp	r0, #0
 2118 009c 40D1     		bne	.L159
 2119              	.LVL208:
 2120              	.L142:
1429:FreeRTOS/src/queue.c **** 
 2121              		.loc 1 1429 29 is_stmt 1 view .LVU658
1433:FreeRTOS/src/queue.c **** 
 2122              		.loc 1 1433 42 view .LVU659
1438:FreeRTOS/src/queue.c **** 	}
 2123              		.loc 1 1438 104 view .LVU660
1446:FreeRTOS/src/queue.c **** 	{
 2124              		.loc 1 1446 2 view .LVU661
1448:FreeRTOS/src/queue.c **** 		{
 2125              		.loc 1 1448 3 view .LVU662
 2126 009e FFF7FEFF 		bl	vPortEnterCritical
 2127              	.LVL209:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 94


 2128              	.LBB43:
1452:FreeRTOS/src/queue.c **** 
 2129              		.loc 1 1452 4 view .LVU663
1452:FreeRTOS/src/queue.c **** 
 2130              		.loc 1 1452 22 is_stmt 0 view .LVU664
 2131 00a2 A36B     		ldr	r3, [r4, #56]
 2132              	.LVL210:
1456:FreeRTOS/src/queue.c **** 			{
 2133              		.loc 1 1456 4 is_stmt 1 view .LVU665
1456:FreeRTOS/src/queue.c **** 			{
 2134              		.loc 1 1456 6 is_stmt 0 view .LVU666
 2135 00a4 002B     		cmp	r3, #0
 2136 00a6 B2D1     		bne	.L160
1502:FreeRTOS/src/queue.c **** 				{
 2137              		.loc 1 1502 5 is_stmt 1 view .LVU667
1502:FreeRTOS/src/queue.c **** 				{
 2138              		.loc 1 1502 22 is_stmt 0 view .LVU668
 2139 00a8 019B     		ldr	r3, [sp, #4]
 2140              	.LVL211:
1502:FreeRTOS/src/queue.c **** 				{
 2141              		.loc 1 1502 7 view .LVU669
 2142 00aa 002B     		cmp	r3, #0
 2143 00ac CDD0     		beq	.L161
1519:FreeRTOS/src/queue.c **** 				{
 2144              		.loc 1 1519 10 is_stmt 1 view .LVU670
1519:FreeRTOS/src/queue.c **** 				{
 2145              		.loc 1 1519 12 is_stmt 0 view .LVU671
 2146 00ae 002D     		cmp	r5, #0
 2147 00b0 CFD0     		beq	.L162
 2148              	.LVL212:
 2149              	.L148:
1529:FreeRTOS/src/queue.c **** 				}
 2150              		.loc 1 1529 30 is_stmt 1 view .LVU672
 2151              	.LBE43:
1533:FreeRTOS/src/queue.c **** 
 2152              		.loc 1 1533 3 view .LVU673
 2153 00b2 FFF7FEFF 		bl	vPortExitCritical
 2154              	.LVL213:
1538:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 2155              		.loc 1 1538 3 view .LVU674
 2156 00b6 FFF7FEFF 		bl	vTaskSuspendAll
 2157              	.LVL214:
1539:FreeRTOS/src/queue.c **** 
 2158              		.loc 1 1539 3 view .LVU675
 2159 00ba FFF7FEFF 		bl	vPortEnterCritical
 2160              	.LVL215:
1539:FreeRTOS/src/queue.c **** 
 2161              		.loc 1 1539 3 view .LVU676
 2162 00be 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2163 00c2 5BB2     		sxtb	r3, r3
 2164 00c4 B3F1FF3F 		cmp	r3, #-1
 2165 00c8 C8D0     		beq	.L163
 2166              	.L149:
1539:FreeRTOS/src/queue.c **** 
 2167              		.loc 1 1539 3 discriminator 3 view .LVU677
 2168 00ca 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2169 00ce 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 95


 2170 00d0 B3F1FF3F 		cmp	r3, #-1
 2171 00d4 C6D0     		beq	.L164
 2172              	.L150:
1539:FreeRTOS/src/queue.c **** 
 2173              		.loc 1 1539 3 discriminator 6 view .LVU678
 2174 00d6 FFF7FEFF 		bl	vPortExitCritical
 2175              	.LVL216:
1542:FreeRTOS/src/queue.c **** 		{
 2176              		.loc 1 1542 3 discriminator 6 view .LVU679
1542:FreeRTOS/src/queue.c **** 		{
 2177              		.loc 1 1542 7 is_stmt 0 discriminator 6 view .LVU680
 2178 00da 01A9     		add	r1, sp, #4
 2179 00dc 02A8     		add	r0, sp, #8
 2180 00de FFF7FEFF 		bl	xTaskCheckForTimeOut
 2181              	.LVL217:
1542:FreeRTOS/src/queue.c **** 		{
 2182              		.loc 1 1542 5 discriminator 6 view .LVU681
 2183 00e2 0028     		cmp	r0, #0
 2184 00e4 D1D1     		bne	.L151
1548:FreeRTOS/src/queue.c **** 			{
 2185              		.loc 1 1548 4 is_stmt 1 view .LVU682
1548:FreeRTOS/src/queue.c **** 			{
 2186              		.loc 1 1548 8 is_stmt 0 view .LVU683
 2187 00e6 2046     		mov	r0, r4
 2188 00e8 FFF7FEFF 		bl	prvIsQueueEmpty
 2189              	.LVL218:
1548:FreeRTOS/src/queue.c **** 			{
 2190              		.loc 1 1548 6 view .LVU684
 2191 00ec 0028     		cmp	r0, #0
 2192 00ee C6D0     		beq	.L152
1550:FreeRTOS/src/queue.c **** 
 2193              		.loc 1 1550 46 is_stmt 1 view .LVU685
1554:FreeRTOS/src/queue.c **** 					{
 2194              		.loc 1 1554 6 view .LVU686
1554:FreeRTOS/src/queue.c **** 					{
 2195              		.loc 1 1554 17 is_stmt 0 view .LVU687
 2196 00f0 2368     		ldr	r3, [r4]
1554:FreeRTOS/src/queue.c **** 					{
 2197              		.loc 1 1554 8 view .LVU688
 2198 00f2 002B     		cmp	r3, #0
 2199 00f4 BAD0     		beq	.L165
 2200              	.L153:
1564:FreeRTOS/src/queue.c **** 					}
 2201              		.loc 1 1564 31 is_stmt 1 view .LVU689
1569:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2202              		.loc 1 1569 5 view .LVU690
 2203 00f6 0199     		ldr	r1, [sp, #4]
 2204 00f8 04F12400 		add	r0, r4, #36
 2205 00fc FFF7FEFF 		bl	vTaskPlaceOnEventList
 2206              	.LVL219:
1570:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2207              		.loc 1 1570 5 view .LVU691
 2208 0100 2046     		mov	r0, r4
 2209 0102 FFF7FEFF 		bl	prvUnlockQueue
 2210              	.LVL220:
1571:FreeRTOS/src/queue.c **** 				{
 2211              		.loc 1 1571 5 view .LVU692
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 96


1571:FreeRTOS/src/queue.c **** 				{
 2212              		.loc 1 1571 9 is_stmt 0 view .LVU693
 2213 0106 FFF7FEFF 		bl	xTaskResumeAll
 2214              	.LVL221:
1571:FreeRTOS/src/queue.c **** 				{
 2215              		.loc 1 1571 7 view .LVU694
 2216 010a 0028     		cmp	r0, #0
 2217 010c C7D1     		bne	.L142
1573:FreeRTOS/src/queue.c **** 				}
 2218              		.loc 1 1573 6 is_stmt 1 view .LVU695
 2219 010e 0C4B     		ldr	r3, .L167
 2220 0110 4FF08052 		mov	r2, #268435456
 2221 0114 1A60     		str	r2, [r3]
1573:FreeRTOS/src/queue.c **** 				}
 2222              		.loc 1 1573 6 view .LVU696
 2223              		.syntax unified
 2224              	@ 1573 "FreeRTOS/src/queue.c" 1
 2225 0116 BFF34F8F 		dsb
 2226              	@ 0 "" 2
1573:FreeRTOS/src/queue.c **** 				}
 2227              		.loc 1 1573 6 view .LVU697
 2228              	@ 1573 "FreeRTOS/src/queue.c" 1
 2229 011a BFF36F8F 		isb
 2230              	@ 0 "" 2
1573:FreeRTOS/src/queue.c **** 				}
 2231              		.loc 1 1573 28 view .LVU698
 2232              		.thumb
 2233              		.syntax unified
 2234 011e BEE7     		b	.L142
 2235              	.L159:
1605:FreeRTOS/src/queue.c **** 					{
 2236              		.loc 1 1605 6 view .LVU699
1605:FreeRTOS/src/queue.c **** 					{
 2237              		.loc 1 1605 8 is_stmt 0 view .LVU700
 2238 0120 0EB9     		cbnz	r6, .L166
 2239              	.L155:
1624:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
 2240              		.loc 1 1624 41 is_stmt 1 view .LVU701
1625:FreeRTOS/src/queue.c **** 			}
 2241              		.loc 1 1625 5 view .LVU702
1625:FreeRTOS/src/queue.c **** 			}
 2242              		.loc 1 1625 12 is_stmt 0 view .LVU703
 2243 0122 0020     		movs	r0, #0
 2244 0124 7CE7     		b	.L141
 2245              	.L166:
1607:FreeRTOS/src/queue.c **** 						{
 2246              		.loc 1 1607 7 is_stmt 1 view .LVU704
 2247 0126 FFF7FEFF 		bl	vPortEnterCritical
 2248              	.LVL222:
 2249              	.LBB44:
1609:FreeRTOS/src/queue.c **** 
 2250              		.loc 1 1609 8 view .LVU705
1616:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2251              		.loc 1 1616 8 view .LVU706
1616:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2252              		.loc 1 1616 35 is_stmt 0 view .LVU707
 2253 012a 2046     		mov	r0, r4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 97


 2254 012c FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2255              	.LVL223:
1617:FreeRTOS/src/queue.c **** 						}
 2256              		.loc 1 1617 8 is_stmt 1 view .LVU708
 2257 0130 0146     		mov	r1, r0
 2258 0132 A068     		ldr	r0, [r4, #8]
 2259              	.LVL224:
1617:FreeRTOS/src/queue.c **** 						}
 2260              		.loc 1 1617 8 is_stmt 0 view .LVU709
 2261 0134 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2262              	.LVL225:
1617:FreeRTOS/src/queue.c **** 						}
 2263              		.loc 1 1617 8 view .LVU710
 2264              	.LBE44:
1619:FreeRTOS/src/queue.c **** 					}
 2265              		.loc 1 1619 7 is_stmt 1 view .LVU711
 2266 0138 FFF7FEFF 		bl	vPortExitCritical
 2267              	.LVL226:
 2268 013c F1E7     		b	.L155
 2269              	.L168:
 2270 013e 00BF     		.align	2
 2271              	.L167:
 2272 0140 04ED00E0 		.word	-536810236
 2273              		.cfi_endproc
 2274              	.LFE16:
 2276              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2277              		.align	1
 2278              		.global	xQueueTakeMutexRecursive
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2282              		.fpu fpv4-sp-d16
 2284              	xQueueTakeMutexRecursive:
 2285              	.LVL227:
 2286              	.LFB10:
 645:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 2287              		.loc 1 645 2 view -0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 0
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 645:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 2291              		.loc 1 645 2 is_stmt 0 view .LVU713
 2292 0000 70B5     		push	{r4, r5, r6, lr}
 2293              	.LCFI30:
 2294              		.cfi_def_cfa_offset 16
 2295              		.cfi_offset 4, -16
 2296              		.cfi_offset 5, -12
 2297              		.cfi_offset 6, -8
 2298              		.cfi_offset 14, -4
 2299 0002 0446     		mov	r4, r0
 2300 0004 0E46     		mov	r6, r1
 646:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2301              		.loc 1 646 2 is_stmt 1 view .LVU714
 647:FreeRTOS/src/queue.c **** 
 2302              		.loc 1 647 2 view .LVU715
 2303              	.LVL228:
 649:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 98


 2304              		.loc 1 649 26 view .LVU716
 654:FreeRTOS/src/queue.c **** 
 2305              		.loc 1 654 39 view .LVU717
 656:FreeRTOS/src/queue.c **** 		{
 2306              		.loc 1 656 3 view .LVU718
 656:FreeRTOS/src/queue.c **** 		{
 2307              		.loc 1 656 28 is_stmt 0 view .LVU719
 2308 0006 8568     		ldr	r5, [r0, #8]
 656:FreeRTOS/src/queue.c **** 		{
 2309              		.loc 1 656 45 view .LVU720
 2310 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2311              	.LVL229:
 656:FreeRTOS/src/queue.c **** 		{
 2312              		.loc 1 656 5 view .LVU721
 2313 000c 8542     		cmp	r5, r0
 2314 000e 09D0     		beq	.L173
 663:FreeRTOS/src/queue.c **** 
 2315              		.loc 1 663 4 is_stmt 1 view .LVU722
 663:FreeRTOS/src/queue.c **** 
 2316              		.loc 1 663 14 is_stmt 0 view .LVU723
 2317 0010 3146     		mov	r1, r6
 2318 0012 2046     		mov	r0, r4
 2319 0014 FFF7FEFF 		bl	xQueueSemaphoreTake
 2320              	.LVL230:
 668:FreeRTOS/src/queue.c **** 			{
 2321              		.loc 1 668 4 is_stmt 1 view .LVU724
 668:FreeRTOS/src/queue.c **** 			{
 2322              		.loc 1 668 6 is_stmt 0 view .LVU725
 2323 0018 0346     		mov	r3, r0
 2324 001a 38B1     		cbz	r0, .L169
 670:FreeRTOS/src/queue.c **** 			}
 2325              		.loc 1 670 5 is_stmt 1 view .LVU726
 670:FreeRTOS/src/queue.c **** 			}
 2326              		.loc 1 670 28 is_stmt 0 view .LVU727
 2327 001c E268     		ldr	r2, [r4, #12]
 670:FreeRTOS/src/queue.c **** 			}
 2328              		.loc 1 670 51 view .LVU728
 2329 001e 0132     		adds	r2, r2, #1
 2330 0020 E260     		str	r2, [r4, #12]
 674:FreeRTOS/src/queue.c **** 			}
 2331              		.loc 1 674 48 is_stmt 1 view .LVU729
 678:FreeRTOS/src/queue.c **** 	}
 2332              		.loc 1 678 3 view .LVU730
 678:FreeRTOS/src/queue.c **** 	}
 2333              		.loc 1 678 10 is_stmt 0 view .LVU731
 2334 0022 03E0     		b	.L169
 2335              	.LVL231:
 2336              	.L173:
 658:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 2337              		.loc 1 658 4 is_stmt 1 view .LVU732
 658:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 2338              		.loc 1 658 27 is_stmt 0 view .LVU733
 2339 0024 E368     		ldr	r3, [r4, #12]
 658:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 2340              		.loc 1 658 50 view .LVU734
 2341 0026 0133     		adds	r3, r3, #1
 2342 0028 E360     		str	r3, [r4, #12]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 99


 659:FreeRTOS/src/queue.c **** 		}
 2343              		.loc 1 659 4 is_stmt 1 view .LVU735
 2344              	.LVL232:
 659:FreeRTOS/src/queue.c **** 		}
 2345              		.loc 1 659 12 is_stmt 0 view .LVU736
 2346 002a 0123     		movs	r3, #1
 2347              	.LVL233:
 2348              	.L169:
 679:FreeRTOS/src/queue.c **** 
 2349              		.loc 1 679 2 view .LVU737
 2350 002c 1846     		mov	r0, r3
 2351 002e 70BD     		pop	{r4, r5, r6, pc}
 679:FreeRTOS/src/queue.c **** 
 2352              		.loc 1 679 2 view .LVU738
 2353              		.cfi_endproc
 2354              	.LFE10:
 2356              		.section	.text.xQueuePeek,"ax",%progbits
 2357              		.align	1
 2358              		.global	xQueuePeek
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv4-sp-d16
 2364              	xQueuePeek:
 2365              	.LVL234:
 2366              	.LFB17:
1637:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2367              		.loc 1 1637 1 is_stmt 1 view -0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 16
 2370              		@ frame_needed = 0, uses_anonymous_args = 0
1637:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2371              		.loc 1 1637 1 is_stmt 0 view .LVU740
 2372 0000 70B5     		push	{r4, r5, r6, lr}
 2373              	.LCFI31:
 2374              		.cfi_def_cfa_offset 16
 2375              		.cfi_offset 4, -16
 2376              		.cfi_offset 5, -12
 2377              		.cfi_offset 6, -8
 2378              		.cfi_offset 14, -4
 2379 0002 84B0     		sub	sp, sp, #16
 2380              	.LCFI32:
 2381              		.cfi_def_cfa_offset 32
 2382 0004 0446     		mov	r4, r0
 2383 0006 0E46     		mov	r6, r1
 2384 0008 0192     		str	r2, [sp, #4]
1638:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 2385              		.loc 1 1638 1 is_stmt 1 view .LVU741
 2386              	.LVL235:
1639:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
 2387              		.loc 1 1639 1 view .LVU742
1640:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2388              		.loc 1 1640 1 view .LVU743
1641:FreeRTOS/src/queue.c **** 
 2389              		.loc 1 1641 1 view .LVU744
1638:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 2390              		.loc 1 1638 12 is_stmt 0 view .LVU745
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 100


 2391 000a 0025     		movs	r5, #0
 2392 000c 3CE0     		b	.L175
 2393              	.LVL236:
 2394              	.L189:
 2395              	.LBB45:
1674:FreeRTOS/src/queue.c **** 
 2396              		.loc 1 1674 5 is_stmt 1 view .LVU746
1674:FreeRTOS/src/queue.c **** 
 2397              		.loc 1 1674 28 is_stmt 0 view .LVU747
 2398 000e E568     		ldr	r5, [r4, #12]
 2399              	.LVL237:
1676:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2400              		.loc 1 1676 5 is_stmt 1 view .LVU748
 2401 0010 3146     		mov	r1, r6
 2402 0012 2046     		mov	r0, r4
 2403 0014 FFF7FEFF 		bl	prvCopyDataFromQueue
 2404              	.LVL238:
1677:FreeRTOS/src/queue.c **** 
 2405              		.loc 1 1677 31 view .LVU749
1680:FreeRTOS/src/queue.c **** 
 2406              		.loc 1 1680 5 view .LVU750
1680:FreeRTOS/src/queue.c **** 
 2407              		.loc 1 1680 34 is_stmt 0 view .LVU751
 2408 0018 E560     		str	r5, [r4, #12]
1684:FreeRTOS/src/queue.c **** 				{
 2409              		.loc 1 1684 5 is_stmt 1 view .LVU752
1684:FreeRTOS/src/queue.c **** 				{
 2410              		.loc 1 1684 9 is_stmt 0 view .LVU753
 2411 001a 636A     		ldr	r3, [r4, #36]
1684:FreeRTOS/src/queue.c **** 				{
 2412              		.loc 1 1684 7 view .LVU754
 2413 001c 23B9     		cbnz	r3, .L187
 2414              	.L177:
1698:FreeRTOS/src/queue.c **** 				}
 2415              		.loc 1 1698 30 is_stmt 1 view .LVU755
1701:FreeRTOS/src/queue.c **** 				return pdPASS;
 2416              		.loc 1 1701 5 view .LVU756
 2417 001e FFF7FEFF 		bl	vPortExitCritical
 2418              	.LVL239:
1702:FreeRTOS/src/queue.c **** 			}
 2419              		.loc 1 1702 5 view .LVU757
1702:FreeRTOS/src/queue.c **** 			}
 2420              		.loc 1 1702 12 is_stmt 0 view .LVU758
 2421 0022 0120     		movs	r0, #1
 2422              	.LVL240:
 2423              	.L174:
1702:FreeRTOS/src/queue.c **** 			}
 2424              		.loc 1 1702 12 view .LVU759
 2425              	.LBE45:
1782:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2426              		.loc 1 1782 1 view .LVU760
 2427 0024 04B0     		add	sp, sp, #16
 2428              	.LCFI33:
 2429              		.cfi_remember_state
 2430              		.cfi_def_cfa_offset 16
 2431              		@ sp needed
 2432 0026 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 101


 2433              	.LVL241:
 2434              	.L187:
 2435              	.LCFI34:
 2436              		.cfi_restore_state
 2437              	.LBB46:
1686:FreeRTOS/src/queue.c **** 					{
 2438              		.loc 1 1686 6 is_stmt 1 view .LVU761
1686:FreeRTOS/src/queue.c **** 					{
 2439              		.loc 1 1686 10 is_stmt 0 view .LVU762
 2440 0028 04F12400 		add	r0, r4, #36
 2441 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2442              	.LVL242:
1686:FreeRTOS/src/queue.c **** 					{
 2443              		.loc 1 1686 8 view .LVU763
 2444 0030 0028     		cmp	r0, #0
 2445 0032 F4D0     		beq	.L177
1689:FreeRTOS/src/queue.c **** 					}
 2446              		.loc 1 1689 7 is_stmt 1 view .LVU764
 2447 0034 344B     		ldr	r3, .L194
 2448 0036 4FF08052 		mov	r2, #268435456
 2449 003a 1A60     		str	r2, [r3]
1689:FreeRTOS/src/queue.c **** 					}
 2450              		.loc 1 1689 7 view .LVU765
 2451              		.syntax unified
 2452              	@ 1689 "FreeRTOS/src/queue.c" 1
 2453 003c BFF34F8F 		dsb
 2454              	@ 0 "" 2
1689:FreeRTOS/src/queue.c **** 					}
 2455              		.loc 1 1689 7 view .LVU766
 2456              	@ 1689 "FreeRTOS/src/queue.c" 1
 2457 0040 BFF36F8F 		isb
 2458              	@ 0 "" 2
1689:FreeRTOS/src/queue.c **** 					}
 2459              		.loc 1 1689 39 view .LVU767
 2460              		.thumb
 2461              		.syntax unified
 2462 0044 EBE7     		b	.L177
 2463              	.LVL243:
 2464              	.L190:
1710:FreeRTOS/src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2465              		.loc 1 1710 6 view .LVU768
 2466 0046 FFF7FEFF 		bl	vPortExitCritical
 2467              	.LVL244:
1711:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 2468              		.loc 1 1711 39 view .LVU769
1712:FreeRTOS/src/queue.c **** 				}
 2469              		.loc 1 1712 6 view .LVU770
1712:FreeRTOS/src/queue.c **** 				}
 2470              		.loc 1 1712 13 is_stmt 0 view .LVU771
 2471 004a 0020     		movs	r0, #0
 2472 004c EAE7     		b	.L174
 2473              	.L191:
1719:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 2474              		.loc 1 1719 6 is_stmt 1 view .LVU772
 2475 004e 02A8     		add	r0, sp, #8
 2476 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2477              	.LVL245:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 102


1720:FreeRTOS/src/queue.c **** 				}
 2478              		.loc 1 1720 6 view .LVU773
1720:FreeRTOS/src/queue.c **** 				}
 2479              		.loc 1 1720 20 is_stmt 0 view .LVU774
 2480 0054 0125     		movs	r5, #1
 2481 0056 21E0     		b	.L180
 2482              	.LVL246:
 2483              	.L192:
1720:FreeRTOS/src/queue.c **** 				}
 2484              		.loc 1 1720 20 view .LVU775
 2485              	.LBE46:
1735:FreeRTOS/src/queue.c **** 
 2486              		.loc 1 1735 3 is_stmt 1 discriminator 1 view .LVU776
 2487 0058 0023     		movs	r3, #0
 2488 005a 84F84430 		strb	r3, [r4, #68]
 2489 005e 29E0     		b	.L181
 2490              	.L193:
1735:FreeRTOS/src/queue.c **** 
 2491              		.loc 1 1735 3 discriminator 4 view .LVU777
 2492 0060 0023     		movs	r3, #0
 2493 0062 84F84530 		strb	r3, [r4, #69]
 2494 0066 2BE0     		b	.L182
 2495              	.L184:
1760:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 2496              		.loc 1 1760 5 view .LVU778
 2497 0068 2046     		mov	r0, r4
 2498 006a FFF7FEFF 		bl	prvUnlockQueue
 2499              	.LVL247:
1761:FreeRTOS/src/queue.c **** 			}
 2500              		.loc 1 1761 5 view .LVU779
1761:FreeRTOS/src/queue.c **** 			}
 2501              		.loc 1 1761 14 is_stmt 0 view .LVU780
 2502 006e FFF7FEFF 		bl	xTaskResumeAll
 2503              	.LVL248:
 2504 0072 09E0     		b	.L175
 2505              	.L183:
1768:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 2506              		.loc 1 1768 4 is_stmt 1 view .LVU781
 2507 0074 2046     		mov	r0, r4
 2508 0076 FFF7FEFF 		bl	prvUnlockQueue
 2509              	.LVL249:
1769:FreeRTOS/src/queue.c **** 
 2510              		.loc 1 1769 4 view .LVU782
1769:FreeRTOS/src/queue.c **** 
 2511              		.loc 1 1769 13 is_stmt 0 view .LVU783
 2512 007a FFF7FEFF 		bl	xTaskResumeAll
 2513              	.LVL250:
1771:FreeRTOS/src/queue.c **** 			{
 2514              		.loc 1 1771 4 is_stmt 1 view .LVU784
1771:FreeRTOS/src/queue.c **** 			{
 2515              		.loc 1 1771 8 is_stmt 0 view .LVU785
 2516 007e 2046     		mov	r0, r4
 2517 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 2518              	.LVL251:
1771:FreeRTOS/src/queue.c **** 			{
 2519              		.loc 1 1771 6 view .LVU786
 2520 0084 0028     		cmp	r0, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 103


 2521 0086 3DD1     		bne	.L188
 2522              	.LVL252:
 2523              	.L175:
1644:FreeRTOS/src/queue.c **** 
 2524              		.loc 1 1644 29 is_stmt 1 view .LVU787
1648:FreeRTOS/src/queue.c **** 
 2525              		.loc 1 1648 100 view .LVU788
1653:FreeRTOS/src/queue.c **** 	}
 2526              		.loc 1 1653 104 view .LVU789
1661:FreeRTOS/src/queue.c **** 	{
 2527              		.loc 1 1661 2 view .LVU790
1663:FreeRTOS/src/queue.c **** 		{
 2528              		.loc 1 1663 3 view .LVU791
 2529 0088 FFF7FEFF 		bl	vPortEnterCritical
 2530              	.LVL253:
 2531              	.LBB47:
1665:FreeRTOS/src/queue.c **** 
 2532              		.loc 1 1665 4 view .LVU792
1665:FreeRTOS/src/queue.c **** 
 2533              		.loc 1 1665 22 is_stmt 0 view .LVU793
 2534 008c A36B     		ldr	r3, [r4, #56]
 2535              	.LVL254:
1669:FreeRTOS/src/queue.c **** 			{
 2536              		.loc 1 1669 4 is_stmt 1 view .LVU794
1669:FreeRTOS/src/queue.c **** 			{
 2537              		.loc 1 1669 6 is_stmt 0 view .LVU795
 2538 008e 002B     		cmp	r3, #0
 2539 0090 BDD1     		bne	.L189
1706:FreeRTOS/src/queue.c **** 				{
 2540              		.loc 1 1706 5 is_stmt 1 view .LVU796
1706:FreeRTOS/src/queue.c **** 				{
 2541              		.loc 1 1706 22 is_stmt 0 view .LVU797
 2542 0092 019B     		ldr	r3, [sp, #4]
 2543              	.LVL255:
1706:FreeRTOS/src/queue.c **** 				{
 2544              		.loc 1 1706 7 view .LVU798
 2545 0094 002B     		cmp	r3, #0
 2546 0096 D6D0     		beq	.L190
1714:FreeRTOS/src/queue.c **** 				{
 2547              		.loc 1 1714 10 is_stmt 1 view .LVU799
1714:FreeRTOS/src/queue.c **** 				{
 2548              		.loc 1 1714 12 is_stmt 0 view .LVU800
 2549 0098 002D     		cmp	r5, #0
 2550 009a D8D0     		beq	.L191
 2551              	.LVL256:
 2552              	.L180:
1725:FreeRTOS/src/queue.c **** 				}
 2553              		.loc 1 1725 30 is_stmt 1 view .LVU801
 2554              	.LBE47:
1729:FreeRTOS/src/queue.c **** 
 2555              		.loc 1 1729 3 view .LVU802
 2556 009c FFF7FEFF 		bl	vPortExitCritical
 2557              	.LVL257:
1734:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 2558              		.loc 1 1734 3 view .LVU803
 2559 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 2560              	.LVL258:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 104


1735:FreeRTOS/src/queue.c **** 
 2561              		.loc 1 1735 3 view .LVU804
 2562 00a4 FFF7FEFF 		bl	vPortEnterCritical
 2563              	.LVL259:
1735:FreeRTOS/src/queue.c **** 
 2564              		.loc 1 1735 3 view .LVU805
 2565 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2566 00ac 5BB2     		sxtb	r3, r3
 2567 00ae B3F1FF3F 		cmp	r3, #-1
 2568 00b2 D1D0     		beq	.L192
 2569              	.L181:
1735:FreeRTOS/src/queue.c **** 
 2570              		.loc 1 1735 3 discriminator 3 view .LVU806
 2571 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2572 00b8 5BB2     		sxtb	r3, r3
 2573 00ba B3F1FF3F 		cmp	r3, #-1
 2574 00be CFD0     		beq	.L193
 2575              	.L182:
1735:FreeRTOS/src/queue.c **** 
 2576              		.loc 1 1735 3 discriminator 6 view .LVU807
 2577 00c0 FFF7FEFF 		bl	vPortExitCritical
 2578              	.LVL260:
1738:FreeRTOS/src/queue.c **** 		{
 2579              		.loc 1 1738 3 discriminator 6 view .LVU808
1738:FreeRTOS/src/queue.c **** 		{
 2580              		.loc 1 1738 7 is_stmt 0 discriminator 6 view .LVU809
 2581 00c4 01A9     		add	r1, sp, #4
 2582 00c6 02A8     		add	r0, sp, #8
 2583 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2584              	.LVL261:
1738:FreeRTOS/src/queue.c **** 		{
 2585              		.loc 1 1738 5 discriminator 6 view .LVU810
 2586 00cc 0028     		cmp	r0, #0
 2587 00ce D1D1     		bne	.L183
1742:FreeRTOS/src/queue.c **** 			{
 2588              		.loc 1 1742 4 is_stmt 1 view .LVU811
1742:FreeRTOS/src/queue.c **** 			{
 2589              		.loc 1 1742 8 is_stmt 0 view .LVU812
 2590 00d0 2046     		mov	r0, r4
 2591 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 2592              	.LVL262:
1742:FreeRTOS/src/queue.c **** 			{
 2593              		.loc 1 1742 6 view .LVU813
 2594 00d6 0028     		cmp	r0, #0
 2595 00d8 C6D0     		beq	.L184
1744:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2596              		.loc 1 1744 43 is_stmt 1 view .LVU814
1745:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2597              		.loc 1 1745 5 view .LVU815
 2598 00da 0199     		ldr	r1, [sp, #4]
 2599 00dc 04F12400 		add	r0, r4, #36
 2600 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2601              	.LVL263:
1746:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2602              		.loc 1 1746 5 view .LVU816
 2603 00e4 2046     		mov	r0, r4
 2604 00e6 FFF7FEFF 		bl	prvUnlockQueue
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 105


 2605              	.LVL264:
1747:FreeRTOS/src/queue.c **** 				{
 2606              		.loc 1 1747 5 view .LVU817
1747:FreeRTOS/src/queue.c **** 				{
 2607              		.loc 1 1747 9 is_stmt 0 view .LVU818
 2608 00ea FFF7FEFF 		bl	xTaskResumeAll
 2609              	.LVL265:
1747:FreeRTOS/src/queue.c **** 				{
 2610              		.loc 1 1747 7 view .LVU819
 2611 00ee 0028     		cmp	r0, #0
 2612 00f0 CAD1     		bne	.L175
1749:FreeRTOS/src/queue.c **** 				}
 2613              		.loc 1 1749 6 is_stmt 1 view .LVU820
 2614 00f2 054B     		ldr	r3, .L194
 2615 00f4 4FF08052 		mov	r2, #268435456
 2616 00f8 1A60     		str	r2, [r3]
1749:FreeRTOS/src/queue.c **** 				}
 2617              		.loc 1 1749 6 view .LVU821
 2618              		.syntax unified
 2619              	@ 1749 "FreeRTOS/src/queue.c" 1
 2620 00fa BFF34F8F 		dsb
 2621              	@ 0 "" 2
1749:FreeRTOS/src/queue.c **** 				}
 2622              		.loc 1 1749 6 view .LVU822
 2623              	@ 1749 "FreeRTOS/src/queue.c" 1
 2624 00fe BFF36F8F 		isb
 2625              	@ 0 "" 2
1749:FreeRTOS/src/queue.c **** 				}
 2626              		.loc 1 1749 28 view .LVU823
 2627              		.thumb
 2628              		.syntax unified
 2629 0102 C1E7     		b	.L175
 2630              	.L188:
1774:FreeRTOS/src/queue.c **** 			}
 2631              		.loc 1 1774 12 is_stmt 0 view .LVU824
 2632 0104 0020     		movs	r0, #0
 2633 0106 8DE7     		b	.L174
 2634              	.L195:
 2635              		.align	2
 2636              	.L194:
 2637 0108 04ED00E0 		.word	-536810236
 2638              		.cfi_endproc
 2639              	.LFE17:
 2641              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2642              		.align	1
 2643              		.global	xQueueReceiveFromISR
 2644              		.syntax unified
 2645              		.thumb
 2646              		.thumb_func
 2647              		.fpu fpv4-sp-d16
 2649              	xQueueReceiveFromISR:
 2650              	.LVL266:
 2651              	.LFB18:
1786:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2652              		.loc 1 1786 1 is_stmt 1 view -0
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 106


 2655              		@ frame_needed = 0, uses_anonymous_args = 0
1786:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2656              		.loc 1 1786 1 is_stmt 0 view .LVU826
 2657 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2658              	.LCFI35:
 2659              		.cfi_def_cfa_offset 24
 2660              		.cfi_offset 4, -24
 2661              		.cfi_offset 5, -20
 2662              		.cfi_offset 6, -16
 2663              		.cfi_offset 7, -12
 2664              		.cfi_offset 8, -8
 2665              		.cfi_offset 14, -4
1787:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2666              		.loc 1 1787 1 is_stmt 1 view .LVU827
1788:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2667              		.loc 1 1788 1 view .LVU828
1789:FreeRTOS/src/queue.c **** 
 2668              		.loc 1 1789 1 view .LVU829
 2669              	.LVL267:
1791:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2670              		.loc 1 1791 25 view .LVU830
1792:FreeRTOS/src/queue.c **** 
 2671              		.loc 1 1792 92 view .LVU831
1808:FreeRTOS/src/queue.c **** 
 2672              		.loc 1 1808 44 view .LVU832
1810:FreeRTOS/src/queue.c **** 	{
 2673              		.loc 1 1810 2 view .LVU833
 2674              	.LBB48:
 2675              	.LBI48:
 209:FreeRTOS/inc/portmacro.h **** {
 2676              		.loc 2 209 34 view .LVU834
 2677              	.LBB49:
 211:FreeRTOS/inc/portmacro.h **** 
 2678              		.loc 2 211 1 view .LVU835
 213:FreeRTOS/inc/portmacro.h **** 	(
 2679              		.loc 2 213 2 view .LVU836
 2680              		.syntax unified
 2681              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 2682 0004 EFF31186 			mrs r6, basepri											
 2683 0008 4FF0BF03 		mov r3, #191												
 2684 000c 83F31188 		msr basepri, r3											
 2685 0010 BFF36F8F 		isb														
 2686 0014 BFF34F8F 		dsb														
 2687              	
 2688              	@ 0 "" 2
 2689              	.LVL268:
 225:FreeRTOS/inc/portmacro.h **** }
 2690              		.loc 2 225 2 view .LVU837
 225:FreeRTOS/inc/portmacro.h **** }
 2691              		.loc 2 225 2 is_stmt 0 view .LVU838
 2692              		.thumb
 2693              		.syntax unified
 2694              	.LBE49:
 2695              	.LBE48:
 2696              	.LBB50:
1812:FreeRTOS/src/queue.c **** 
 2697              		.loc 1 1812 3 is_stmt 1 view .LVU839
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 107


1812:FreeRTOS/src/queue.c **** 
 2698              		.loc 1 1812 21 is_stmt 0 view .LVU840
 2699 0018 846B     		ldr	r4, [r0, #56]
 2700              	.LVL269:
1815:FreeRTOS/src/queue.c **** 		{
 2701              		.loc 1 1815 3 is_stmt 1 view .LVU841
1815:FreeRTOS/src/queue.c **** 		{
 2702              		.loc 1 1815 5 is_stmt 0 view .LVU842
 2703 001a 24B9     		cbnz	r4, .L204
1866:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2704              		.loc 1 1866 12 view .LVU843
 2705 001c 0020     		movs	r0, #0
 2706              	.LVL270:
 2707              	.L197:
1867:FreeRTOS/src/queue.c **** 		}
 2708              		.loc 1 1867 49 is_stmt 1 view .LVU844
 2709              	.LBE50:
1870:FreeRTOS/src/queue.c **** 
 2710              		.loc 1 1870 2 view .LVU845
 2711              	.LBB52:
 2712              	.LBI52:
 229:FreeRTOS/inc/portmacro.h **** {
 2713              		.loc 2 229 30 view .LVU846
 2714              	.LBB53:
 2715              		.loc 2 231 2 view .LVU847
 2716              		.syntax unified
 2717              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 2718 001e 86F31188 			msr basepri, r6	
 2719              	@ 0 "" 2
 2720              	.LVL271:
 2721              		.loc 2 231 2 is_stmt 0 view .LVU848
 2722              		.thumb
 2723              		.syntax unified
 2724              	.LBE53:
 2725              	.LBE52:
1872:FreeRTOS/src/queue.c **** }
 2726              		.loc 1 1872 2 is_stmt 1 view .LVU849
1873:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2727              		.loc 1 1873 1 is_stmt 0 view .LVU850
 2728 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2729              	.LVL272:
 2730              	.L204:
1873:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2731              		.loc 1 1873 1 view .LVU851
 2732 0026 9046     		mov	r8, r2
 2733 0028 0746     		mov	r7, r0
 2734              	.LBB54:
 2735              	.LBB51:
1817:FreeRTOS/src/queue.c **** 
 2736              		.loc 1 1817 4 is_stmt 1 view .LVU852
1817:FreeRTOS/src/queue.c **** 
 2737              		.loc 1 1817 17 is_stmt 0 view .LVU853
 2738 002a 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2739 002e 6DB2     		sxtb	r5, r5
 2740              	.LVL273:
1819:FreeRTOS/src/queue.c **** 
 2741              		.loc 1 1819 42 is_stmt 1 view .LVU854
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 108


1821:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2742              		.loc 1 1821 4 view .LVU855
 2743 0030 FFF7FEFF 		bl	prvCopyDataFromQueue
 2744              	.LVL274:
1822:FreeRTOS/src/queue.c **** 
 2745              		.loc 1 1822 4 view .LVU856
1822:FreeRTOS/src/queue.c **** 
 2746              		.loc 1 1822 51 is_stmt 0 view .LVU857
 2747 0034 013C     		subs	r4, r4, #1
 2748              	.LVL275:
1822:FreeRTOS/src/queue.c **** 
 2749              		.loc 1 1822 31 view .LVU858
 2750 0036 BC63     		str	r4, [r7, #56]
1828:FreeRTOS/src/queue.c **** 			{
 2751              		.loc 1 1828 4 is_stmt 1 view .LVU859
1828:FreeRTOS/src/queue.c **** 			{
 2752              		.loc 1 1828 6 is_stmt 0 view .LVU860
 2753 0038 B5F1FF3F 		cmp	r5, #-1
 2754 003c 05D0     		beq	.L205
1859:FreeRTOS/src/queue.c **** 			}
 2755              		.loc 1 1859 5 is_stmt 1 view .LVU861
1859:FreeRTOS/src/queue.c **** 			}
 2756              		.loc 1 1859 45 is_stmt 0 view .LVU862
 2757 003e 0135     		adds	r5, r5, #1
 2758              	.LVL276:
1859:FreeRTOS/src/queue.c **** 			}
 2759              		.loc 1 1859 24 view .LVU863
 2760 0040 6DB2     		sxtb	r5, r5
 2761              	.LVL277:
1859:FreeRTOS/src/queue.c **** 			}
 2762              		.loc 1 1859 22 view .LVU864
 2763 0042 87F84450 		strb	r5, [r7, #68]
1862:FreeRTOS/src/queue.c **** 		}
 2764              		.loc 1 1862 12 view .LVU865
 2765 0046 0120     		movs	r0, #1
 2766 0048 E9E7     		b	.L197
 2767              	.LVL278:
 2768              	.L205:
1830:FreeRTOS/src/queue.c **** 				{
 2769              		.loc 1 1830 5 is_stmt 1 view .LVU866
1830:FreeRTOS/src/queue.c **** 				{
 2770              		.loc 1 1830 9 is_stmt 0 view .LVU867
 2771 004a 3B69     		ldr	r3, [r7, #16]
1830:FreeRTOS/src/queue.c **** 				{
 2772              		.loc 1 1830 7 view .LVU868
 2773 004c 0BB9     		cbnz	r3, .L206
1862:FreeRTOS/src/queue.c **** 		}
 2774              		.loc 1 1862 12 view .LVU869
 2775 004e 0120     		movs	r0, #1
 2776 0050 E5E7     		b	.L197
 2777              	.L206:
1832:FreeRTOS/src/queue.c **** 					{
 2778              		.loc 1 1832 6 is_stmt 1 view .LVU870
1832:FreeRTOS/src/queue.c **** 					{
 2779              		.loc 1 1832 10 is_stmt 0 view .LVU871
 2780 0052 07F11000 		add	r0, r7, #16
 2781 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 109


 2782              	.LVL279:
1832:FreeRTOS/src/queue.c **** 					{
 2783              		.loc 1 1832 8 view .LVU872
 2784 005a 30B1     		cbz	r0, .L201
1836:FreeRTOS/src/queue.c **** 						{
 2785              		.loc 1 1836 7 is_stmt 1 view .LVU873
1836:FreeRTOS/src/queue.c **** 						{
 2786              		.loc 1 1836 9 is_stmt 0 view .LVU874
 2787 005c B8F1000F 		cmp	r8, #0
 2788 0060 05D0     		beq	.L202
1838:FreeRTOS/src/queue.c **** 						}
 2789              		.loc 1 1838 8 is_stmt 1 view .LVU875
1838:FreeRTOS/src/queue.c **** 						}
 2790              		.loc 1 1838 35 is_stmt 0 view .LVU876
 2791 0062 0120     		movs	r0, #1
 2792 0064 C8F80000 		str	r0, [r8]
 2793 0068 D9E7     		b	.L197
 2794              	.L201:
1862:FreeRTOS/src/queue.c **** 		}
 2795              		.loc 1 1862 12 view .LVU877
 2796 006a 0120     		movs	r0, #1
 2797 006c D7E7     		b	.L197
 2798              	.L202:
 2799 006e 0120     		movs	r0, #1
 2800 0070 D5E7     		b	.L197
 2801              	.LBE51:
 2802              	.LBE54:
 2803              		.cfi_endproc
 2804              	.LFE18:
 2806              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2807              		.align	1
 2808              		.global	xQueuePeekFromISR
 2809              		.syntax unified
 2810              		.thumb
 2811              		.thumb_func
 2812              		.fpu fpv4-sp-d16
 2814              	xQueuePeekFromISR:
 2815              	.LVL280:
 2816              	.LFB19:
1877:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2817              		.loc 1 1877 1 is_stmt 1 view -0
 2818              		.cfi_startproc
 2819              		@ args = 0, pretend = 0, frame = 0
 2820              		@ frame_needed = 0, uses_anonymous_args = 0
1877:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2821              		.loc 1 1877 1 is_stmt 0 view .LVU879
 2822 0000 70B5     		push	{r4, r5, r6, lr}
 2823              	.LCFI36:
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 4, -16
 2826              		.cfi_offset 5, -12
 2827              		.cfi_offset 6, -8
 2828              		.cfi_offset 14, -4
1878:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2829              		.loc 1 1878 1 is_stmt 1 view .LVU880
1879:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
 2830              		.loc 1 1879 1 view .LVU881
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 110


1880:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2831              		.loc 1 1880 1 view .LVU882
1881:FreeRTOS/src/queue.c **** 
 2832              		.loc 1 1881 1 view .LVU883
 2833              	.LVL281:
1883:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2834              		.loc 1 1883 25 view .LVU884
1884:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2835              		.loc 1 1884 92 view .LVU885
1885:FreeRTOS/src/queue.c **** 
 2836              		.loc 1 1885 42 view .LVU886
1901:FreeRTOS/src/queue.c **** 
 2837              		.loc 1 1901 44 view .LVU887
1903:FreeRTOS/src/queue.c **** 	{
 2838              		.loc 1 1903 2 view .LVU888
 2839              	.LBB55:
 2840              	.LBI55:
 209:FreeRTOS/inc/portmacro.h **** {
 2841              		.loc 2 209 34 view .LVU889
 2842              	.LBB56:
 211:FreeRTOS/inc/portmacro.h **** 
 2843              		.loc 2 211 1 view .LVU890
 213:FreeRTOS/inc/portmacro.h **** 	(
 2844              		.loc 2 213 2 view .LVU891
 2845              		.syntax unified
 2846              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 2847 0002 EFF31185 			mrs r5, basepri											
 2848 0006 4FF0BF03 		mov r3, #191												
 2849 000a 83F31188 		msr basepri, r3											
 2850 000e BFF36F8F 		isb														
 2851 0012 BFF34F8F 		dsb														
 2852              	
 2853              	@ 0 "" 2
 2854              	.LVL282:
 225:FreeRTOS/inc/portmacro.h **** }
 2855              		.loc 2 225 2 view .LVU892
 225:FreeRTOS/inc/portmacro.h **** }
 2856              		.loc 2 225 2 is_stmt 0 view .LVU893
 2857              		.thumb
 2858              		.syntax unified
 2859              	.LBE56:
 2860              	.LBE55:
1906:FreeRTOS/src/queue.c **** 		{
 2861              		.loc 1 1906 3 is_stmt 1 view .LVU894
1906:FreeRTOS/src/queue.c **** 		{
 2862              		.loc 1 1906 14 is_stmt 0 view .LVU895
 2863 0016 836B     		ldr	r3, [r0, #56]
1906:FreeRTOS/src/queue.c **** 		{
 2864              		.loc 1 1906 5 view .LVU896
 2865 0018 1BB9     		cbnz	r3, .L211
1920:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2866              		.loc 1 1920 12 view .LVU897
 2867 001a 0020     		movs	r0, #0
 2868              	.LVL283:
 2869              	.L208:
1921:FreeRTOS/src/queue.c **** 		}
 2870              		.loc 1 1921 46 is_stmt 1 view .LVU898
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 111


1924:FreeRTOS/src/queue.c **** 
 2871              		.loc 1 1924 2 view .LVU899
 2872              	.LBB57:
 2873              	.LBI57:
 229:FreeRTOS/inc/portmacro.h **** {
 2874              		.loc 2 229 30 view .LVU900
 2875              	.LBB58:
 2876              		.loc 2 231 2 view .LVU901
 2877              		.syntax unified
 2878              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 2879 001c 85F31188 			msr basepri, r5	
 2880              	@ 0 "" 2
 2881              	.LVL284:
 2882              		.loc 2 231 2 is_stmt 0 view .LVU902
 2883              		.thumb
 2884              		.syntax unified
 2885              	.LBE58:
 2886              	.LBE57:
1926:FreeRTOS/src/queue.c **** }
 2887              		.loc 1 1926 2 is_stmt 1 view .LVU903
1927:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2888              		.loc 1 1927 1 is_stmt 0 view .LVU904
 2889 0020 70BD     		pop	{r4, r5, r6, pc}
 2890              	.LVL285:
 2891              	.L211:
1927:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2892              		.loc 1 1927 1 view .LVU905
 2893 0022 0446     		mov	r4, r0
1908:FreeRTOS/src/queue.c **** 
 2894              		.loc 1 1908 39 is_stmt 1 view .LVU906
1912:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2895              		.loc 1 1912 4 view .LVU907
1912:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2896              		.loc 1 1912 27 is_stmt 0 view .LVU908
 2897 0024 C668     		ldr	r6, [r0, #12]
 2898              	.LVL286:
1913:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2899              		.loc 1 1913 4 is_stmt 1 view .LVU909
 2900 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2901              	.LVL287:
1914:FreeRTOS/src/queue.c **** 
 2902              		.loc 1 1914 4 view .LVU910
1914:FreeRTOS/src/queue.c **** 
 2903              		.loc 1 1914 33 is_stmt 0 view .LVU911
 2904 002a E660     		str	r6, [r4, #12]
1916:FreeRTOS/src/queue.c **** 		}
 2905              		.loc 1 1916 4 is_stmt 1 view .LVU912
 2906              	.LVL288:
1916:FreeRTOS/src/queue.c **** 		}
 2907              		.loc 1 1916 12 is_stmt 0 view .LVU913
 2908 002c 0120     		movs	r0, #1
 2909 002e F5E7     		b	.L208
 2910              		.cfi_endproc
 2911              	.LFE19:
 2913              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2914              		.align	1
 2915              		.global	uxQueueMessagesWaiting
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 112


 2916              		.syntax unified
 2917              		.thumb
 2918              		.thumb_func
 2919              		.fpu fpv4-sp-d16
 2921              	uxQueueMessagesWaiting:
 2922              	.LVL289:
 2923              	.LFB20:
1931:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2924              		.loc 1 1931 1 is_stmt 1 view -0
 2925              		.cfi_startproc
 2926              		@ args = 0, pretend = 0, frame = 0
 2927              		@ frame_needed = 0, uses_anonymous_args = 0
1931:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2928              		.loc 1 1931 1 is_stmt 0 view .LVU915
 2929 0000 10B5     		push	{r4, lr}
 2930              	.LCFI37:
 2931              		.cfi_def_cfa_offset 8
 2932              		.cfi_offset 4, -8
 2933              		.cfi_offset 14, -4
 2934 0002 0446     		mov	r4, r0
1932:FreeRTOS/src/queue.c **** 
 2935              		.loc 1 1932 1 is_stmt 1 view .LVU916
1934:FreeRTOS/src/queue.c **** 
 2936              		.loc 1 1934 24 view .LVU917
1936:FreeRTOS/src/queue.c **** 	{
 2937              		.loc 1 1936 2 view .LVU918
 2938 0004 FFF7FEFF 		bl	vPortEnterCritical
 2939              	.LVL290:
1938:FreeRTOS/src/queue.c **** 	}
 2940              		.loc 1 1938 3 view .LVU919
1938:FreeRTOS/src/queue.c **** 	}
 2941              		.loc 1 1938 12 is_stmt 0 view .LVU920
 2942 0008 A46B     		ldr	r4, [r4, #56]
 2943              	.LVL291:
1940:FreeRTOS/src/queue.c **** 
 2944              		.loc 1 1940 2 is_stmt 1 view .LVU921
 2945 000a FFF7FEFF 		bl	vPortExitCritical
 2946              	.LVL292:
1942:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2947              		.loc 1 1942 2 view .LVU922
1943:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2948              		.loc 1 1943 1 is_stmt 0 view .LVU923
 2949 000e 2046     		mov	r0, r4
 2950 0010 10BD     		pop	{r4, pc}
1943:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2951              		.loc 1 1943 1 view .LVU924
 2952              		.cfi_endproc
 2953              	.LFE20:
 2955              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2956              		.align	1
 2957              		.global	uxQueueSpacesAvailable
 2958              		.syntax unified
 2959              		.thumb
 2960              		.thumb_func
 2961              		.fpu fpv4-sp-d16
 2963              	uxQueueSpacesAvailable:
 2964              	.LVL293:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 113


 2965              	.LFB21:
1947:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2966              		.loc 1 1947 1 is_stmt 1 view -0
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 0
 2969              		@ frame_needed = 0, uses_anonymous_args = 0
1947:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2970              		.loc 1 1947 1 is_stmt 0 view .LVU926
 2971 0000 38B5     		push	{r3, r4, r5, lr}
 2972              	.LCFI38:
 2973              		.cfi_def_cfa_offset 16
 2974              		.cfi_offset 3, -16
 2975              		.cfi_offset 4, -12
 2976              		.cfi_offset 5, -8
 2977              		.cfi_offset 14, -4
 2978 0002 0546     		mov	r5, r0
1948:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2979              		.loc 1 1948 1 is_stmt 1 view .LVU927
1949:FreeRTOS/src/queue.c **** 
 2980              		.loc 1 1949 1 view .LVU928
 2981              	.LVL294:
1951:FreeRTOS/src/queue.c **** 
 2982              		.loc 1 1951 25 view .LVU929
1953:FreeRTOS/src/queue.c **** 	{
 2983              		.loc 1 1953 2 view .LVU930
 2984 0004 FFF7FEFF 		bl	vPortEnterCritical
 2985              	.LVL295:
1955:FreeRTOS/src/queue.c **** 	}
 2986              		.loc 1 1955 3 view .LVU931
1955:FreeRTOS/src/queue.c **** 	}
 2987              		.loc 1 1955 21 is_stmt 0 view .LVU932
 2988 0008 EC6B     		ldr	r4, [r5, #60]
1955:FreeRTOS/src/queue.c **** 	}
 2989              		.loc 1 1955 41 view .LVU933
 2990 000a AB6B     		ldr	r3, [r5, #56]
1955:FreeRTOS/src/queue.c **** 	}
 2991              		.loc 1 1955 12 view .LVU934
 2992 000c E41A     		subs	r4, r4, r3
 2993              	.LVL296:
1957:FreeRTOS/src/queue.c **** 
 2994              		.loc 1 1957 2 is_stmt 1 view .LVU935
 2995 000e FFF7FEFF 		bl	vPortExitCritical
 2996              	.LVL297:
1959:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2997              		.loc 1 1959 2 view .LVU936
1960:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2998              		.loc 1 1960 1 is_stmt 0 view .LVU937
 2999 0012 2046     		mov	r0, r4
 3000 0014 38BD     		pop	{r3, r4, r5, pc}
1960:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 3001              		.loc 1 1960 1 view .LVU938
 3002              		.cfi_endproc
 3003              	.LFE21:
 3005              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3006              		.align	1
 3007              		.global	uxQueueMessagesWaitingFromISR
 3008              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 114


 3009              		.thumb
 3010              		.thumb_func
 3011              		.fpu fpv4-sp-d16
 3013              	uxQueueMessagesWaitingFromISR:
 3014              	.LVL298:
 3015              	.LFB22:
1964:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 3016              		.loc 1 1964 1 is_stmt 1 view -0
 3017              		.cfi_startproc
 3018              		@ args = 0, pretend = 0, frame = 0
 3019              		@ frame_needed = 0, uses_anonymous_args = 0
 3020              		@ link register save eliminated.
1965:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3021              		.loc 1 1965 1 view .LVU940
1966:FreeRTOS/src/queue.c **** 
 3022              		.loc 1 1966 1 view .LVU941
1968:FreeRTOS/src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 3023              		.loc 1 1968 25 view .LVU942
1969:FreeRTOS/src/queue.c **** 
 3024              		.loc 1 1969 2 view .LVU943
1969:FreeRTOS/src/queue.c **** 
 3025              		.loc 1 1969 11 is_stmt 0 view .LVU944
 3026 0000 806B     		ldr	r0, [r0, #56]
 3027              	.LVL299:
1971:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3028              		.loc 1 1971 2 is_stmt 1 view .LVU945
1972:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 3029              		.loc 1 1972 1 is_stmt 0 view .LVU946
 3030 0002 7047     		bx	lr
 3031              		.cfi_endproc
 3032              	.LFE22:
 3034              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3035              		.align	1
 3036              		.global	xQueueIsQueueEmptyFromISR
 3037              		.syntax unified
 3038              		.thumb
 3039              		.thumb_func
 3040              		.fpu fpv4-sp-d16
 3042              	xQueueIsQueueEmptyFromISR:
 3043              	.LVL300:
 3044              	.LFB29:
2313:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 3045              		.loc 1 2313 1 is_stmt 1 view -0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 0, uses_anonymous_args = 0
 3049              		@ link register save eliminated.
2314:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3050              		.loc 1 2314 1 view .LVU948
2315:FreeRTOS/src/queue.c **** 
 3051              		.loc 1 2315 1 view .LVU949
2317:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3052              		.loc 1 2317 25 view .LVU950
2318:FreeRTOS/src/queue.c **** 	{
 3053              		.loc 1 2318 2 view .LVU951
2318:FreeRTOS/src/queue.c **** 	{
 3054              		.loc 1 2318 13 is_stmt 0 view .LVU952
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 115


 3055 0000 836B     		ldr	r3, [r0, #56]
2318:FreeRTOS/src/queue.c **** 	{
 3056              		.loc 1 2318 4 view .LVU953
 3057 0002 0BB9     		cbnz	r3, .L219
2320:FreeRTOS/src/queue.c **** 	}
 3058              		.loc 1 2320 11 view .LVU954
 3059 0004 0120     		movs	r0, #1
 3060              	.LVL301:
2320:FreeRTOS/src/queue.c **** 	}
 3061              		.loc 1 2320 11 view .LVU955
 3062 0006 7047     		bx	lr
 3063              	.LVL302:
 3064              	.L219:
2324:FreeRTOS/src/queue.c **** 	}
 3065              		.loc 1 2324 11 view .LVU956
 3066 0008 0020     		movs	r0, #0
 3067              	.LVL303:
2327:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3068              		.loc 1 2327 2 is_stmt 1 view .LVU957
2328:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 3069              		.loc 1 2328 1 is_stmt 0 view .LVU958
 3070 000a 7047     		bx	lr
 3071              		.cfi_endproc
 3072              	.LFE29:
 3074              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3075              		.align	1
 3076              		.global	xQueueIsQueueFullFromISR
 3077              		.syntax unified
 3078              		.thumb
 3079              		.thumb_func
 3080              		.fpu fpv4-sp-d16
 3082              	xQueueIsQueueFullFromISR:
 3083              	.LVL304:
 3084              	.LFB31:
2350:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2351:FreeRTOS/src/queue.c **** 
2352:FreeRTOS/src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2353:FreeRTOS/src/queue.c **** {
 3085              		.loc 1 2353 1 is_stmt 1 view -0
 3086              		.cfi_startproc
 3087              		@ args = 0, pretend = 0, frame = 0
 3088              		@ frame_needed = 0, uses_anonymous_args = 0
 3089              		@ link register save eliminated.
2354:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 3090              		.loc 1 2354 1 view .LVU960
2355:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3091              		.loc 1 2355 1 view .LVU961
2356:FreeRTOS/src/queue.c **** 
2357:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 3092              		.loc 1 2357 25 view .LVU962
2358:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3093              		.loc 1 2358 2 view .LVU963
 3094              		.loc 1 2358 13 is_stmt 0 view .LVU964
 3095 0000 826B     		ldr	r2, [r0, #56]
 3096              		.loc 1 2358 43 view .LVU965
 3097 0002 C36B     		ldr	r3, [r0, #60]
 3098              		.loc 1 2358 4 view .LVU966
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 116


 3099 0004 9A42     		cmp	r2, r3
 3100 0006 01D0     		beq	.L223
2359:FreeRTOS/src/queue.c **** 	{
2360:FreeRTOS/src/queue.c **** 		xReturn = pdTRUE;
2361:FreeRTOS/src/queue.c **** 	}
2362:FreeRTOS/src/queue.c **** 	else
2363:FreeRTOS/src/queue.c **** 	{
2364:FreeRTOS/src/queue.c **** 		xReturn = pdFALSE;
 3101              		.loc 1 2364 11 view .LVU967
 3102 0008 0020     		movs	r0, #0
 3103              	.LVL305:
2365:FreeRTOS/src/queue.c **** 	}
2366:FreeRTOS/src/queue.c **** 
2367:FreeRTOS/src/queue.c **** 	return xReturn;
 3104              		.loc 1 2367 2 is_stmt 1 view .LVU968
2368:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3105              		.loc 1 2368 1 is_stmt 0 view .LVU969
 3106 000a 7047     		bx	lr
 3107              	.LVL306:
 3108              	.L223:
2360:FreeRTOS/src/queue.c **** 	}
 3109              		.loc 1 2360 11 view .LVU970
 3110 000c 0120     		movs	r0, #1
 3111              	.LVL307:
2360:FreeRTOS/src/queue.c **** 	}
 3112              		.loc 1 2360 11 view .LVU971
 3113 000e 7047     		bx	lr
 3114              		.cfi_endproc
 3115              	.LFE31:
 3117              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3118              		.align	1
 3119              		.global	vQueueAddToRegistry
 3120              		.syntax unified
 3121              		.thumb
 3122              		.thumb_func
 3123              		.fpu fpv4-sp-d16
 3125              	vQueueAddToRegistry:
 3126              	.LVL308:
 3127              	.LFB32:
2369:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2370:FreeRTOS/src/queue.c **** 
2371:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2372:FreeRTOS/src/queue.c **** 
2373:FreeRTOS/src/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2374:FreeRTOS/src/queue.c **** 	{
2375:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
2376:FreeRTOS/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2377:FreeRTOS/src/queue.c **** 
2378:FreeRTOS/src/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2379:FreeRTOS/src/queue.c **** 		is required to prevent an interrupt removing something from the queue
2380:FreeRTOS/src/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2381:FreeRTOS/src/queue.c **** 		portDISABLE_INTERRUPTS();
2382:FreeRTOS/src/queue.c **** 		{
2383:FreeRTOS/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2384:FreeRTOS/src/queue.c **** 			{
2385:FreeRTOS/src/queue.c **** 				/* The queue is full - do we want to block or just leave without
2386:FreeRTOS/src/queue.c **** 				posting? */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 117


2387:FreeRTOS/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2388:FreeRTOS/src/queue.c **** 				{
2389:FreeRTOS/src/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2390:FreeRTOS/src/queue.c **** 					return indicating that we need to block. */
2391:FreeRTOS/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2392:FreeRTOS/src/queue.c **** 					portENABLE_INTERRUPTS();
2393:FreeRTOS/src/queue.c **** 					return errQUEUE_BLOCKED;
2394:FreeRTOS/src/queue.c **** 				}
2395:FreeRTOS/src/queue.c **** 				else
2396:FreeRTOS/src/queue.c **** 				{
2397:FreeRTOS/src/queue.c **** 					portENABLE_INTERRUPTS();
2398:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
2399:FreeRTOS/src/queue.c **** 				}
2400:FreeRTOS/src/queue.c **** 			}
2401:FreeRTOS/src/queue.c **** 		}
2402:FreeRTOS/src/queue.c **** 		portENABLE_INTERRUPTS();
2403:FreeRTOS/src/queue.c **** 
2404:FreeRTOS/src/queue.c **** 		portDISABLE_INTERRUPTS();
2405:FreeRTOS/src/queue.c **** 		{
2406:FreeRTOS/src/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2407:FreeRTOS/src/queue.c **** 			{
2408:FreeRTOS/src/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2409:FreeRTOS/src/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2410:FreeRTOS/src/queue.c **** 				xReturn = pdPASS;
2411:FreeRTOS/src/queue.c **** 
2412:FreeRTOS/src/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2413:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2414:FreeRTOS/src/queue.c **** 				{
2415:FreeRTOS/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2416:FreeRTOS/src/queue.c **** 					into the ready list as we are within a critical section.
2417:FreeRTOS/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2418:FreeRTOS/src/queue.c **** 					the event were caused from within an interrupt. */
2419:FreeRTOS/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2420:FreeRTOS/src/queue.c **** 					{
2421:FreeRTOS/src/queue.c **** 						/* The co-routine waiting has a higher priority so record
2422:FreeRTOS/src/queue.c **** 						that a yield might be appropriate. */
2423:FreeRTOS/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2424:FreeRTOS/src/queue.c **** 					}
2425:FreeRTOS/src/queue.c **** 					else
2426:FreeRTOS/src/queue.c **** 					{
2427:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2428:FreeRTOS/src/queue.c **** 					}
2429:FreeRTOS/src/queue.c **** 				}
2430:FreeRTOS/src/queue.c **** 				else
2431:FreeRTOS/src/queue.c **** 				{
2432:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2433:FreeRTOS/src/queue.c **** 				}
2434:FreeRTOS/src/queue.c **** 			}
2435:FreeRTOS/src/queue.c **** 			else
2436:FreeRTOS/src/queue.c **** 			{
2437:FreeRTOS/src/queue.c **** 				xReturn = errQUEUE_FULL;
2438:FreeRTOS/src/queue.c **** 			}
2439:FreeRTOS/src/queue.c **** 		}
2440:FreeRTOS/src/queue.c **** 		portENABLE_INTERRUPTS();
2441:FreeRTOS/src/queue.c **** 
2442:FreeRTOS/src/queue.c **** 		return xReturn;
2443:FreeRTOS/src/queue.c **** 	}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 118


2444:FreeRTOS/src/queue.c **** 
2445:FreeRTOS/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2446:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2447:FreeRTOS/src/queue.c **** 
2448:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2449:FreeRTOS/src/queue.c **** 
2450:FreeRTOS/src/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2451:FreeRTOS/src/queue.c **** 	{
2452:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
2453:FreeRTOS/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2454:FreeRTOS/src/queue.c **** 
2455:FreeRTOS/src/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2456:FreeRTOS/src/queue.c **** 		is required to prevent an interrupt adding something to the queue
2457:FreeRTOS/src/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2458:FreeRTOS/src/queue.c **** 		portDISABLE_INTERRUPTS();
2459:FreeRTOS/src/queue.c **** 		{
2460:FreeRTOS/src/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2461:FreeRTOS/src/queue.c **** 			{
2462:FreeRTOS/src/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2463:FreeRTOS/src/queue.c **** 				leave with nothing? */
2464:FreeRTOS/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2465:FreeRTOS/src/queue.c **** 				{
2466:FreeRTOS/src/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2467:FreeRTOS/src/queue.c **** 					indicating that we need to block. */
2468:FreeRTOS/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2469:FreeRTOS/src/queue.c **** 					portENABLE_INTERRUPTS();
2470:FreeRTOS/src/queue.c **** 					return errQUEUE_BLOCKED;
2471:FreeRTOS/src/queue.c **** 				}
2472:FreeRTOS/src/queue.c **** 				else
2473:FreeRTOS/src/queue.c **** 				{
2474:FreeRTOS/src/queue.c **** 					portENABLE_INTERRUPTS();
2475:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
2476:FreeRTOS/src/queue.c **** 				}
2477:FreeRTOS/src/queue.c **** 			}
2478:FreeRTOS/src/queue.c **** 			else
2479:FreeRTOS/src/queue.c **** 			{
2480:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2481:FreeRTOS/src/queue.c **** 			}
2482:FreeRTOS/src/queue.c **** 		}
2483:FreeRTOS/src/queue.c **** 		portENABLE_INTERRUPTS();
2484:FreeRTOS/src/queue.c **** 
2485:FreeRTOS/src/queue.c **** 		portDISABLE_INTERRUPTS();
2486:FreeRTOS/src/queue.c **** 		{
2487:FreeRTOS/src/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2488:FreeRTOS/src/queue.c **** 			{
2489:FreeRTOS/src/queue.c **** 				/* Data is available from the queue. */
2490:FreeRTOS/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2491:FreeRTOS/src/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2492:FreeRTOS/src/queue.c **** 				{
2493:FreeRTOS/src/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2494:FreeRTOS/src/queue.c **** 				}
2495:FreeRTOS/src/queue.c **** 				else
2496:FreeRTOS/src/queue.c **** 				{
2497:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2498:FreeRTOS/src/queue.c **** 				}
2499:FreeRTOS/src/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2500:FreeRTOS/src/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 119


2501:FreeRTOS/src/queue.c **** 
2502:FreeRTOS/src/queue.c **** 				xReturn = pdPASS;
2503:FreeRTOS/src/queue.c **** 
2504:FreeRTOS/src/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2505:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2506:FreeRTOS/src/queue.c **** 				{
2507:FreeRTOS/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2508:FreeRTOS/src/queue.c **** 					into the ready list as we are within a critical section.
2509:FreeRTOS/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2510:FreeRTOS/src/queue.c **** 					the event were caused from within an interrupt. */
2511:FreeRTOS/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2512:FreeRTOS/src/queue.c **** 					{
2513:FreeRTOS/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2514:FreeRTOS/src/queue.c **** 					}
2515:FreeRTOS/src/queue.c **** 					else
2516:FreeRTOS/src/queue.c **** 					{
2517:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2518:FreeRTOS/src/queue.c **** 					}
2519:FreeRTOS/src/queue.c **** 				}
2520:FreeRTOS/src/queue.c **** 				else
2521:FreeRTOS/src/queue.c **** 				{
2522:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2523:FreeRTOS/src/queue.c **** 				}
2524:FreeRTOS/src/queue.c **** 			}
2525:FreeRTOS/src/queue.c **** 			else
2526:FreeRTOS/src/queue.c **** 			{
2527:FreeRTOS/src/queue.c **** 				xReturn = pdFAIL;
2528:FreeRTOS/src/queue.c **** 			}
2529:FreeRTOS/src/queue.c **** 		}
2530:FreeRTOS/src/queue.c **** 		portENABLE_INTERRUPTS();
2531:FreeRTOS/src/queue.c **** 
2532:FreeRTOS/src/queue.c **** 		return xReturn;
2533:FreeRTOS/src/queue.c **** 	}
2534:FreeRTOS/src/queue.c **** 
2535:FreeRTOS/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2536:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2537:FreeRTOS/src/queue.c **** 
2538:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2539:FreeRTOS/src/queue.c **** 
2540:FreeRTOS/src/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2541:FreeRTOS/src/queue.c **** 	{
2542:FreeRTOS/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2543:FreeRTOS/src/queue.c **** 
2544:FreeRTOS/src/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2545:FreeRTOS/src/queue.c **** 		exit without doing anything. */
2546:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2547:FreeRTOS/src/queue.c **** 		{
2548:FreeRTOS/src/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2549:FreeRTOS/src/queue.c **** 
2550:FreeRTOS/src/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2551:FreeRTOS/src/queue.c **** 			co-routine has not already been woken. */
2552:FreeRTOS/src/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2553:FreeRTOS/src/queue.c **** 			{
2554:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2555:FreeRTOS/src/queue.c **** 				{
2556:FreeRTOS/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2557:FreeRTOS/src/queue.c **** 					{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 120


2558:FreeRTOS/src/queue.c **** 						return pdTRUE;
2559:FreeRTOS/src/queue.c **** 					}
2560:FreeRTOS/src/queue.c **** 					else
2561:FreeRTOS/src/queue.c **** 					{
2562:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2563:FreeRTOS/src/queue.c **** 					}
2564:FreeRTOS/src/queue.c **** 				}
2565:FreeRTOS/src/queue.c **** 				else
2566:FreeRTOS/src/queue.c **** 				{
2567:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2568:FreeRTOS/src/queue.c **** 				}
2569:FreeRTOS/src/queue.c **** 			}
2570:FreeRTOS/src/queue.c **** 			else
2571:FreeRTOS/src/queue.c **** 			{
2572:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2573:FreeRTOS/src/queue.c **** 			}
2574:FreeRTOS/src/queue.c **** 		}
2575:FreeRTOS/src/queue.c **** 		else
2576:FreeRTOS/src/queue.c **** 		{
2577:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2578:FreeRTOS/src/queue.c **** 		}
2579:FreeRTOS/src/queue.c **** 
2580:FreeRTOS/src/queue.c **** 		return xCoRoutinePreviouslyWoken;
2581:FreeRTOS/src/queue.c **** 	}
2582:FreeRTOS/src/queue.c **** 
2583:FreeRTOS/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2584:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2585:FreeRTOS/src/queue.c **** 
2586:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2587:FreeRTOS/src/queue.c **** 
2588:FreeRTOS/src/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2589:FreeRTOS/src/queue.c **** 	{
2590:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
2591:FreeRTOS/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
2592:FreeRTOS/src/queue.c **** 
2593:FreeRTOS/src/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2594:FreeRTOS/src/queue.c **** 		not then just leave without doing anything. */
2595:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2596:FreeRTOS/src/queue.c **** 		{
2597:FreeRTOS/src/queue.c **** 			/* Copy the data from the queue. */
2598:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2599:FreeRTOS/src/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2600:FreeRTOS/src/queue.c **** 			{
2601:FreeRTOS/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2602:FreeRTOS/src/queue.c **** 			}
2603:FreeRTOS/src/queue.c **** 			else
2604:FreeRTOS/src/queue.c **** 			{
2605:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2606:FreeRTOS/src/queue.c **** 			}
2607:FreeRTOS/src/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2608:FreeRTOS/src/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2609:FreeRTOS/src/queue.c **** 
2610:FreeRTOS/src/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2611:FreeRTOS/src/queue.c **** 			{
2612:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2613:FreeRTOS/src/queue.c **** 				{
2614:FreeRTOS/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 121


2615:FreeRTOS/src/queue.c **** 					{
2616:FreeRTOS/src/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2617:FreeRTOS/src/queue.c **** 					}
2618:FreeRTOS/src/queue.c **** 					else
2619:FreeRTOS/src/queue.c **** 					{
2620:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2621:FreeRTOS/src/queue.c **** 					}
2622:FreeRTOS/src/queue.c **** 				}
2623:FreeRTOS/src/queue.c **** 				else
2624:FreeRTOS/src/queue.c **** 				{
2625:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2626:FreeRTOS/src/queue.c **** 				}
2627:FreeRTOS/src/queue.c **** 			}
2628:FreeRTOS/src/queue.c **** 			else
2629:FreeRTOS/src/queue.c **** 			{
2630:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:FreeRTOS/src/queue.c **** 			}
2632:FreeRTOS/src/queue.c **** 
2633:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
2634:FreeRTOS/src/queue.c **** 		}
2635:FreeRTOS/src/queue.c **** 		else
2636:FreeRTOS/src/queue.c **** 		{
2637:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
2638:FreeRTOS/src/queue.c **** 		}
2639:FreeRTOS/src/queue.c **** 
2640:FreeRTOS/src/queue.c **** 		return xReturn;
2641:FreeRTOS/src/queue.c **** 	}
2642:FreeRTOS/src/queue.c **** 
2643:FreeRTOS/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2644:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2645:FreeRTOS/src/queue.c **** 
2646:FreeRTOS/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2647:FreeRTOS/src/queue.c **** 
2648:FreeRTOS/src/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2649:FreeRTOS/src/queue.c **** 	{
 3128              		.loc 1 2649 2 is_stmt 1 view -0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 0
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132              		@ link register save eliminated.
2650:FreeRTOS/src/queue.c **** 	UBaseType_t ux;
 3133              		.loc 1 2650 2 view .LVU973
2651:FreeRTOS/src/queue.c **** 
2652:FreeRTOS/src/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2653:FreeRTOS/src/queue.c **** 		a free slot. */
2654:FreeRTOS/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3134              		.loc 1 2654 3 view .LVU974
 3135              		.loc 1 2654 11 is_stmt 0 view .LVU975
 3136 0000 0023     		movs	r3, #0
 3137              	.LVL309:
 3138              	.L225:
 3139              		.loc 1 2654 3 discriminator 1 view .LVU976
 3140 0002 092B     		cmp	r3, #9
 3141 0004 0CD8     		bhi	.L229
2655:FreeRTOS/src/queue.c **** 		{
2656:FreeRTOS/src/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3142              		.loc 1 2656 4 is_stmt 1 view .LVU977
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 122


 3143              		.loc 1 2656 28 is_stmt 0 view .LVU978
 3144 0006 074A     		ldr	r2, .L231
 3145 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3146              		.loc 1 2656 6 view .LVU979
 3147 000c 0AB1     		cbz	r2, .L230
2657:FreeRTOS/src/queue.c **** 			{
2658:FreeRTOS/src/queue.c **** 				/* Store the information on this queue. */
2659:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2660:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2661:FreeRTOS/src/queue.c **** 
2662:FreeRTOS/src/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2663:FreeRTOS/src/queue.c **** 				break;
2664:FreeRTOS/src/queue.c **** 			}
2665:FreeRTOS/src/queue.c **** 			else
2666:FreeRTOS/src/queue.c **** 			{
2667:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 3148              		.loc 1 2667 29 is_stmt 1 discriminator 2 view .LVU980
2654:FreeRTOS/src/queue.c **** 		{
 3149              		.loc 1 2654 83 is_stmt 0 discriminator 2 view .LVU981
 3150 000e 0133     		adds	r3, r3, #1
 3151              	.LVL310:
2654:FreeRTOS/src/queue.c **** 		{
 3152              		.loc 1 2654 83 discriminator 2 view .LVU982
 3153 0010 F7E7     		b	.L225
 3154              	.L230:
2659:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3155              		.loc 1 2659 5 is_stmt 1 view .LVU983
2659:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3156              		.loc 1 2659 38 is_stmt 0 view .LVU984
 3157 0012 044A     		ldr	r2, .L231
 3158 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2660:FreeRTOS/src/queue.c **** 
 3159              		.loc 1 2660 5 is_stmt 1 view .LVU985
2660:FreeRTOS/src/queue.c **** 
 3160              		.loc 1 2660 34 is_stmt 0 view .LVU986
 3161 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3162              	.LVL311:
2660:FreeRTOS/src/queue.c **** 
 3163              		.loc 1 2660 34 view .LVU987
 3164 001c 5860     		str	r0, [r3, #4]
2662:FreeRTOS/src/queue.c **** 				break;
 3165              		.loc 1 2662 51 is_stmt 1 view .LVU988
2663:FreeRTOS/src/queue.c **** 			}
 3166              		.loc 1 2663 5 view .LVU989
 3167 001e 7047     		bx	lr
 3168              	.LVL312:
 3169              	.L229:
2668:FreeRTOS/src/queue.c **** 			}
2669:FreeRTOS/src/queue.c **** 		}
2670:FreeRTOS/src/queue.c **** 	}
 3170              		.loc 1 2670 2 is_stmt 0 view .LVU990
 3171 0020 7047     		bx	lr
 3172              	.L232:
 3173 0022 00BF     		.align	2
 3174              	.L231:
 3175 0024 00000000 		.word	xQueueRegistry
 3176              		.cfi_endproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 123


 3177              	.LFE32:
 3179              		.section	.text.pcQueueGetName,"ax",%progbits
 3180              		.align	1
 3181              		.global	pcQueueGetName
 3182              		.syntax unified
 3183              		.thumb
 3184              		.thumb_func
 3185              		.fpu fpv4-sp-d16
 3187              	pcQueueGetName:
 3188              	.LVL313:
 3189              	.LFB33:
2671:FreeRTOS/src/queue.c **** 
2672:FreeRTOS/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2673:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2674:FreeRTOS/src/queue.c **** 
2675:FreeRTOS/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2676:FreeRTOS/src/queue.c **** 
2677:FreeRTOS/src/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2678:FreeRTOS/src/queue.c **** 	{
 3190              		.loc 1 2678 2 is_stmt 1 view -0
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 0, uses_anonymous_args = 0
 3194              		@ link register save eliminated.
2679:FreeRTOS/src/queue.c **** 	UBaseType_t ux;
 3195              		.loc 1 2679 2 view .LVU992
2680:FreeRTOS/src/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 3196              		.loc 1 2680 2 view .LVU993
2681:FreeRTOS/src/queue.c **** 
2682:FreeRTOS/src/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2683:FreeRTOS/src/queue.c **** 		removing entries from the registry while it is being searched. */
2684:FreeRTOS/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3197              		.loc 1 2684 3 view .LVU994
 3198              		.loc 1 2684 11 is_stmt 0 view .LVU995
 3199 0000 0023     		movs	r3, #0
 3200              	.LVL314:
 3201              	.L234:
 3202              		.loc 1 2684 3 discriminator 1 view .LVU996
 3203 0002 092B     		cmp	r3, #9
 3204 0004 0BD8     		bhi	.L238
2685:FreeRTOS/src/queue.c **** 		{
2686:FreeRTOS/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3205              		.loc 1 2686 4 is_stmt 1 view .LVU997
 3206              		.loc 1 2686 28 is_stmt 0 view .LVU998
 3207 0006 074A     		ldr	r2, .L240
 3208 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3209 000c 5268     		ldr	r2, [r2, #4]
 3210              		.loc 1 2686 6 view .LVU999
 3211 000e 8242     		cmp	r2, r0
 3212 0010 01D0     		beq	.L239
2687:FreeRTOS/src/queue.c **** 			{
2688:FreeRTOS/src/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2689:FreeRTOS/src/queue.c **** 				break;
2690:FreeRTOS/src/queue.c **** 			}
2691:FreeRTOS/src/queue.c **** 			else
2692:FreeRTOS/src/queue.c **** 			{
2693:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 124


 3213              		.loc 1 2693 29 is_stmt 1 discriminator 2 view .LVU1000
2684:FreeRTOS/src/queue.c **** 		{
 3214              		.loc 1 2684 83 is_stmt 0 discriminator 2 view .LVU1001
 3215 0012 0133     		adds	r3, r3, #1
 3216              	.LVL315:
2684:FreeRTOS/src/queue.c **** 		{
 3217              		.loc 1 2684 83 discriminator 2 view .LVU1002
 3218 0014 F5E7     		b	.L234
 3219              	.L239:
2688:FreeRTOS/src/queue.c **** 				break;
 3220              		.loc 1 2688 5 is_stmt 1 view .LVU1003
2688:FreeRTOS/src/queue.c **** 				break;
 3221              		.loc 1 2688 14 is_stmt 0 view .LVU1004
 3222 0016 034A     		ldr	r2, .L240
 3223 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3224              	.LVL316:
2689:FreeRTOS/src/queue.c **** 			}
 3225              		.loc 1 2689 5 is_stmt 1 view .LVU1005
 3226 001c 7047     		bx	lr
 3227              	.LVL317:
 3228              	.L238:
2680:FreeRTOS/src/queue.c **** 
 3229              		.loc 1 2680 14 is_stmt 0 view .LVU1006
 3230 001e 0020     		movs	r0, #0
 3231              	.LVL318:
2694:FreeRTOS/src/queue.c **** 			}
2695:FreeRTOS/src/queue.c **** 		}
2696:FreeRTOS/src/queue.c **** 
2697:FreeRTOS/src/queue.c **** 		return pcReturn;
 3232              		.loc 1 2697 3 is_stmt 1 view .LVU1007
2698:FreeRTOS/src/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3233              		.loc 1 2698 2 is_stmt 0 view .LVU1008
 3234 0020 7047     		bx	lr
 3235              	.L241:
 3236 0022 00BF     		.align	2
 3237              	.L240:
 3238 0024 00000000 		.word	xQueueRegistry
 3239              		.cfi_endproc
 3240              	.LFE33:
 3242              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3243              		.align	1
 3244              		.global	vQueueUnregisterQueue
 3245              		.syntax unified
 3246              		.thumb
 3247              		.thumb_func
 3248              		.fpu fpv4-sp-d16
 3250              	vQueueUnregisterQueue:
 3251              	.LVL319:
 3252              	.LFB34:
2699:FreeRTOS/src/queue.c **** 
2700:FreeRTOS/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2701:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2702:FreeRTOS/src/queue.c **** 
2703:FreeRTOS/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2704:FreeRTOS/src/queue.c **** 
2705:FreeRTOS/src/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2706:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 125


 3253              		.loc 1 2706 2 is_stmt 1 view -0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 0
 3256              		@ frame_needed = 0, uses_anonymous_args = 0
 3257              		@ link register save eliminated.
2707:FreeRTOS/src/queue.c **** 	UBaseType_t ux;
 3258              		.loc 1 2707 2 view .LVU1010
2708:FreeRTOS/src/queue.c **** 
2709:FreeRTOS/src/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2710:FreeRTOS/src/queue.c **** 		registry. */
2711:FreeRTOS/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3259              		.loc 1 2711 3 view .LVU1011
 3260              		.loc 1 2711 11 is_stmt 0 view .LVU1012
 3261 0000 0023     		movs	r3, #0
 3262              	.LVL320:
 3263              	.L243:
 3264              		.loc 1 2711 3 discriminator 1 view .LVU1013
 3265 0002 092B     		cmp	r3, #9
 3266 0004 0FD8     		bhi	.L247
2712:FreeRTOS/src/queue.c **** 		{
2713:FreeRTOS/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3267              		.loc 1 2713 4 is_stmt 1 view .LVU1014
 3268              		.loc 1 2713 28 is_stmt 0 view .LVU1015
 3269 0006 084A     		ldr	r2, .L249
 3270 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3271 000c 5268     		ldr	r2, [r2, #4]
 3272              		.loc 1 2713 6 view .LVU1016
 3273 000e 8242     		cmp	r2, r0
 3274 0010 01D0     		beq	.L248
2714:FreeRTOS/src/queue.c **** 			{
2715:FreeRTOS/src/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2716:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2717:FreeRTOS/src/queue.c **** 
2718:FreeRTOS/src/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2719:FreeRTOS/src/queue.c **** 				appear in the registry twice if it is added, removed, then
2720:FreeRTOS/src/queue.c **** 				added again. */
2721:FreeRTOS/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2722:FreeRTOS/src/queue.c **** 				break;
2723:FreeRTOS/src/queue.c **** 			}
2724:FreeRTOS/src/queue.c **** 			else
2725:FreeRTOS/src/queue.c **** 			{
2726:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 3275              		.loc 1 2726 29 is_stmt 1 discriminator 2 view .LVU1017
2711:FreeRTOS/src/queue.c **** 		{
 3276              		.loc 1 2711 83 is_stmt 0 discriminator 2 view .LVU1018
 3277 0012 0133     		adds	r3, r3, #1
 3278              	.LVL321:
2711:FreeRTOS/src/queue.c **** 		{
 3279              		.loc 1 2711 83 discriminator 2 view .LVU1019
 3280 0014 F5E7     		b	.L243
 3281              	.L248:
2716:FreeRTOS/src/queue.c **** 
 3282              		.loc 1 2716 5 is_stmt 1 view .LVU1020
2716:FreeRTOS/src/queue.c **** 
 3283              		.loc 1 2716 38 is_stmt 0 view .LVU1021
 3284 0016 044A     		ldr	r2, .L249
 3285 0018 0021     		movs	r1, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 126


 3286 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2721:FreeRTOS/src/queue.c **** 				break;
 3287              		.loc 1 2721 5 is_stmt 1 view .LVU1022
2721:FreeRTOS/src/queue.c **** 				break;
 3288              		.loc 1 2721 34 is_stmt 0 view .LVU1023
 3289 001e 02EBC303 		add	r3, r2, r3, lsl #3
 3290              	.LVL322:
2721:FreeRTOS/src/queue.c **** 				break;
 3291              		.loc 1 2721 34 view .LVU1024
 3292 0022 5960     		str	r1, [r3, #4]
2722:FreeRTOS/src/queue.c **** 			}
 3293              		.loc 1 2722 5 is_stmt 1 view .LVU1025
 3294 0024 7047     		bx	lr
 3295              	.LVL323:
 3296              	.L247:
2727:FreeRTOS/src/queue.c **** 			}
2728:FreeRTOS/src/queue.c **** 		}
2729:FreeRTOS/src/queue.c **** 
2730:FreeRTOS/src/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3297              		.loc 1 2730 2 is_stmt 0 view .LVU1026
 3298 0026 7047     		bx	lr
 3299              	.L250:
 3300              		.align	2
 3301              	.L249:
 3302 0028 00000000 		.word	xQueueRegistry
 3303              		.cfi_endproc
 3304              	.LFE34:
 3306              		.section	.text.vQueueDelete,"ax",%progbits
 3307              		.align	1
 3308              		.global	vQueueDelete
 3309              		.syntax unified
 3310              		.thumb
 3311              		.thumb_func
 3312              		.fpu fpv4-sp-d16
 3314              	vQueueDelete:
 3315              	.LVL324:
 3316              	.LFB23:
1976:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3317              		.loc 1 1976 1 is_stmt 1 view -0
 3318              		.cfi_startproc
 3319              		@ args = 0, pretend = 0, frame = 0
 3320              		@ frame_needed = 0, uses_anonymous_args = 0
1976:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 3321              		.loc 1 1976 1 is_stmt 0 view .LVU1028
 3322 0000 10B5     		push	{r4, lr}
 3323              	.LCFI39:
 3324              		.cfi_def_cfa_offset 8
 3325              		.cfi_offset 4, -8
 3326              		.cfi_offset 14, -4
 3327 0002 0446     		mov	r4, r0
1977:FreeRTOS/src/queue.c **** 
 3328              		.loc 1 1977 1 is_stmt 1 view .LVU1029
 3329              	.LVL325:
1979:FreeRTOS/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3330              		.loc 1 1979 25 view .LVU1030
1980:FreeRTOS/src/queue.c **** 
 3331              		.loc 1 1980 30 view .LVU1031
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 127


1984:FreeRTOS/src/queue.c **** 	}
 3332              		.loc 1 1984 3 view .LVU1032
 3333 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 3334              	.LVL326:
1992:FreeRTOS/src/queue.c **** 	}
 3335              		.loc 1 1992 3 view .LVU1033
 3336 0008 2046     		mov	r0, r4
 3337 000a FFF7FEFF 		bl	vPortFree
 3338              	.LVL327:
2014:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 3339              		.loc 1 2014 1 is_stmt 0 view .LVU1034
 3340 000e 10BD     		pop	{r4, pc}
2014:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 3341              		.loc 1 2014 1 view .LVU1035
 3342              		.cfi_endproc
 3343              	.LFE23:
 3345              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3346              		.align	1
 3347              		.global	vQueueWaitForMessageRestricted
 3348              		.syntax unified
 3349              		.thumb
 3350              		.thumb_func
 3351              		.fpu fpv4-sp-d16
 3353              	vQueueWaitForMessageRestricted:
 3354              	.LVL328:
 3355              	.LFB35:
2731:FreeRTOS/src/queue.c **** 
2732:FreeRTOS/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2733:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2734:FreeRTOS/src/queue.c **** 
2735:FreeRTOS/src/queue.c **** #if ( configUSE_TIMERS == 1 )
2736:FreeRTOS/src/queue.c **** 
2737:FreeRTOS/src/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2738:FreeRTOS/src/queue.c **** 	{
 3356              		.loc 1 2738 2 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              		.loc 1 2738 2 is_stmt 0 view .LVU1037
 3361 0000 70B5     		push	{r4, r5, r6, lr}
 3362              	.LCFI40:
 3363              		.cfi_def_cfa_offset 16
 3364              		.cfi_offset 4, -16
 3365              		.cfi_offset 5, -12
 3366              		.cfi_offset 6, -8
 3367              		.cfi_offset 14, -4
 3368 0002 0446     		mov	r4, r0
 3369 0004 0D46     		mov	r5, r1
 3370 0006 1646     		mov	r6, r2
2739:FreeRTOS/src/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3371              		.loc 1 2739 2 is_stmt 1 view .LVU1038
 3372              	.LVL329:
2740:FreeRTOS/src/queue.c **** 
2741:FreeRTOS/src/queue.c **** 		/* This function should not be called by application code hence the
2742:FreeRTOS/src/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2743:FreeRTOS/src/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2744:FreeRTOS/src/queue.c **** 		It can result in vListInsert() being called on a list that can only
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 128


2745:FreeRTOS/src/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2746:FreeRTOS/src/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2747:FreeRTOS/src/queue.c **** 		section. */
2748:FreeRTOS/src/queue.c **** 
2749:FreeRTOS/src/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2750:FreeRTOS/src/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2751:FreeRTOS/src/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2752:FreeRTOS/src/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2753:FreeRTOS/src/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2754:FreeRTOS/src/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2755:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 3373              		.loc 1 2755 3 view .LVU1039
 3374 0008 FFF7FEFF 		bl	vPortEnterCritical
 3375              	.LVL330:
 3376              		.loc 1 2755 3 view .LVU1040
 3377 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3378 0010 5BB2     		sxtb	r3, r3
 3379 0012 B3F1FF3F 		cmp	r3, #-1
 3380 0016 0DD0     		beq	.L258
 3381              	.L254:
 3382              		.loc 1 2755 3 discriminator 3 view .LVU1041
 3383 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3384 001c 5BB2     		sxtb	r3, r3
 3385 001e B3F1FF3F 		cmp	r3, #-1
 3386 0022 0BD0     		beq	.L259
 3387              	.L255:
 3388              		.loc 1 2755 3 discriminator 6 view .LVU1042
 3389 0024 FFF7FEFF 		bl	vPortExitCritical
 3390              	.LVL331:
2756:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3391              		.loc 1 2756 3 discriminator 6 view .LVU1043
 3392              		.loc 1 2756 14 is_stmt 0 discriminator 6 view .LVU1044
 3393 0028 A36B     		ldr	r3, [r4, #56]
 3394              		.loc 1 2756 5 discriminator 6 view .LVU1045
 3395 002a 5BB1     		cbz	r3, .L260
 3396              	.L256:
2757:FreeRTOS/src/queue.c **** 		{
2758:FreeRTOS/src/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2759:FreeRTOS/src/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2760:FreeRTOS/src/queue.c **** 		}
2761:FreeRTOS/src/queue.c **** 		else
2762:FreeRTOS/src/queue.c **** 		{
2763:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 3397              		.loc 1 2763 28 is_stmt 1 view .LVU1046
2764:FreeRTOS/src/queue.c **** 		}
2765:FreeRTOS/src/queue.c **** 		prvUnlockQueue( pxQueue );
 3398              		.loc 1 2765 3 view .LVU1047
 3399 002c 2046     		mov	r0, r4
 3400 002e FFF7FEFF 		bl	prvUnlockQueue
 3401              	.LVL332:
2766:FreeRTOS/src/queue.c **** 	}
 3402              		.loc 1 2766 2 is_stmt 0 view .LVU1048
 3403 0032 70BD     		pop	{r4, r5, r6, pc}
 3404              	.LVL333:
 3405              	.L258:
2755:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3406              		.loc 1 2755 3 is_stmt 1 discriminator 1 view .LVU1049
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 129


 3407 0034 0023     		movs	r3, #0
 3408 0036 84F84430 		strb	r3, [r4, #68]
 3409 003a EDE7     		b	.L254
 3410              	.L259:
2755:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3411              		.loc 1 2755 3 discriminator 4 view .LVU1050
 3412 003c 0023     		movs	r3, #0
 3413 003e 84F84530 		strb	r3, [r4, #69]
 3414 0042 EFE7     		b	.L255
 3415              	.L260:
2759:FreeRTOS/src/queue.c **** 		}
 3416              		.loc 1 2759 4 view .LVU1051
 3417 0044 3246     		mov	r2, r6
 3418 0046 2946     		mov	r1, r5
 3419 0048 04F12400 		add	r0, r4, #36
 3420 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3421              	.LVL334:
 3422 0050 ECE7     		b	.L256
 3423              		.cfi_endproc
 3424              	.LFE35:
 3426              		.comm	xQueueRegistry,80,4
 3427              		.text
 3428              	.Letext0:
 3429              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 3430              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 3431              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 3432              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 3433              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 3434              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 3435              		.file 9 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 3436              		.file 10 "FreeRTOS/inc/list.h"
 3437              		.file 11 "FreeRTOS/inc/task.h"
 3438              		.file 12 "FreeRTOS/inc/queue.h"
 3439              		.file 13 "FreeRTOS/inc/portable.h"
 3440              		.file 14 "<built-in>"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 130


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:18     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:25     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:62     .text.prvIsQueueFull:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:68     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:116    .text.prvIsQueueEmpty:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:122    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:167    .text.prvCopyDataToQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:173    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:330    .text.prvCopyDataFromQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:336    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:397    .text.prvUnlockQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:403    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:530    .text.xQueueGenericReset:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:537    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:648    .text.xQueueGenericReset:000000000000006c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:653    .text.prvInitialiseNewQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:659    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:712    .text.xQueueGenericCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:719    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:791    .text.xQueueCreateCountingSemaphore:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:798    .text.xQueueCreateCountingSemaphore:0000000000000000 xQueueCreateCountingSemaphore
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:844    .text.xQueueGenericSend:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:851    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1124   .text.xQueueGenericSend:0000000000000114 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1129   .text.prvInitialiseMutex:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1135   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1183   .text.xQueueCreateMutex:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1190   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1229   .text.xQueueGiveMutexRecursive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1236   .text.xQueueGiveMutexRecursive:0000000000000000 xQueueGiveMutexRecursive
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1305   .text.xQueueGenericSendFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1312   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1470   .text.xQueueGiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1477   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1644   .text.xQueueReceive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1651   .text.xQueueReceive:0000000000000000 xQueueReceive
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1922   .text.xQueueReceive:0000000000000108 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1927   .text.xQueueSemaphoreTake:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:1934   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2272   .text.xQueueSemaphoreTake:0000000000000140 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2277   .text.xQueueTakeMutexRecursive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2284   .text.xQueueTakeMutexRecursive:0000000000000000 xQueueTakeMutexRecursive
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2357   .text.xQueuePeek:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2364   .text.xQueuePeek:0000000000000000 xQueuePeek
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2637   .text.xQueuePeek:0000000000000108 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2642   .text.xQueueReceiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2649   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2807   .text.xQueuePeekFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2814   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2914   .text.uxQueueMessagesWaiting:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2921   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2956   .text.uxQueueSpacesAvailable:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:2963   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3006   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3013   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s 			page 131


C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3035   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3042   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3075   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3082   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3118   .text.vQueueAddToRegistry:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3125   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3175   .text.vQueueAddToRegistry:0000000000000024 $d
                            *COM*:0000000000000050 xQueueRegistry
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3180   .text.pcQueueGetName:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3187   .text.pcQueueGetName:0000000000000000 pcQueueGetName
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3238   .text.pcQueueGetName:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3243   .text.vQueueUnregisterQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3250   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3302   .text.vQueueUnregisterQueue:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3307   .text.vQueueDelete:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3314   .text.vQueueDelete:0000000000000000 vQueueDelete
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3346   .text.vQueueWaitForMessageRestricted:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccxrO9wm.s:3353   .text.vQueueWaitForMessageRestricted:0000000000000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
