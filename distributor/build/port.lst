ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvTaskExitError:
  26              	.LFB5:
  27              		.file 1 "FreeRTOS/src/port.c"
   1:FreeRTOS/src/port.c **** /*
   2:FreeRTOS/src/port.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/port.c ****  *
   5:FreeRTOS/src/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/port.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/port.c ****  * subject to the following conditions:
  11:FreeRTOS/src/port.c ****  *
  12:FreeRTOS/src/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/port.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/port.c ****  *
  15:FreeRTOS/src/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/port.c ****  *
  22:FreeRTOS/src/port.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/port.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/port.c ****  *
  25:FreeRTOS/src/port.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/port.c ****  */
  27:FreeRTOS/src/port.c **** 
  28:FreeRTOS/src/port.c **** /*-----------------------------------------------------------
  29:FreeRTOS/src/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  30:FreeRTOS/src/port.c ****  *----------------------------------------------------------*/
  31:FreeRTOS/src/port.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 2


  32:FreeRTOS/src/port.c **** /* Scheduler includes. */
  33:FreeRTOS/src/port.c **** #include "FreeRTOS.h"
  34:FreeRTOS/src/port.c **** #include "task.h"
  35:FreeRTOS/src/port.c **** 
  36:FreeRTOS/src/port.c **** #ifndef __VFP_FP__
  37:FreeRTOS/src/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  38:FreeRTOS/src/port.c **** #endif
  39:FreeRTOS/src/port.c **** 
  40:FreeRTOS/src/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  41:FreeRTOS/src/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  42:FreeRTOS/src/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  43:FreeRTOS/src/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  44:FreeRTOS/src/port.c **** #else
  45:FreeRTOS/src/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  46:FreeRTOS/src/port.c **** 	as the core. */
  47:FreeRTOS/src/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  48:FreeRTOS/src/port.c **** #endif
  49:FreeRTOS/src/port.c **** 
  50:FreeRTOS/src/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  52:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  53:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  54:FreeRTOS/src/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:FreeRTOS/src/port.c **** /* ...then bits in the registers. */
  56:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  57:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  58:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  59:FreeRTOS/src/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  60:FreeRTOS/src/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  61:FreeRTOS/src/port.c **** 
  62:FreeRTOS/src/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  63:FreeRTOS/src/port.c **** r0p1 port. */
  64:FreeRTOS/src/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
  65:FreeRTOS/src/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
  66:FreeRTOS/src/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
  67:FreeRTOS/src/port.c **** 
  68:FreeRTOS/src/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  69:FreeRTOS/src/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  70:FreeRTOS/src/port.c **** 
  71:FreeRTOS/src/port.c **** /* Constants required to check the validity of an interrupt priority. */
  72:FreeRTOS/src/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  73:FreeRTOS/src/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  74:FreeRTOS/src/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  75:FreeRTOS/src/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  76:FreeRTOS/src/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  77:FreeRTOS/src/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  78:FreeRTOS/src/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  79:FreeRTOS/src/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  80:FreeRTOS/src/port.c **** 
  81:FreeRTOS/src/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  82:FreeRTOS/src/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  83:FreeRTOS/src/port.c **** 
  84:FreeRTOS/src/port.c **** /* Constants required to manipulate the VFP. */
  85:FreeRTOS/src/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
  86:FreeRTOS/src/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
  87:FreeRTOS/src/port.c **** 
  88:FreeRTOS/src/port.c **** /* Constants required to set up the initial stack. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 3


  89:FreeRTOS/src/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
  90:FreeRTOS/src/port.c **** #define portINITIAL_EXC_RETURN				( 0xfffffffd )
  91:FreeRTOS/src/port.c **** 
  92:FreeRTOS/src/port.c **** /* The systick is a 24-bit counter. */
  93:FreeRTOS/src/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  94:FreeRTOS/src/port.c **** 
  95:FreeRTOS/src/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  96:FreeRTOS/src/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  97:FreeRTOS/src/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
  98:FreeRTOS/src/port.c **** 
  99:FreeRTOS/src/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 100:FreeRTOS/src/port.c **** occurred while the SysTick counter is stopped during tickless idle
 101:FreeRTOS/src/port.c **** calculations. */
 102:FreeRTOS/src/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 103:FreeRTOS/src/port.c **** 
 104:FreeRTOS/src/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 105:FreeRTOS/src/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 106:FreeRTOS/src/port.c **** debugger. */
 107:FreeRTOS/src/port.c **** #ifdef configTASK_RETURN_ADDRESS
 108:FreeRTOS/src/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 109:FreeRTOS/src/port.c **** #else
 110:FreeRTOS/src/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 111:FreeRTOS/src/port.c **** #endif
 112:FreeRTOS/src/port.c **** 
 113:FreeRTOS/src/port.c **** /*
 114:FreeRTOS/src/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 115:FreeRTOS/src/port.c ****  * file is weak to allow application writers to change the timer used to
 116:FreeRTOS/src/port.c ****  * generate the tick interrupt.
 117:FreeRTOS/src/port.c ****  */
 118:FreeRTOS/src/port.c **** void vPortSetupTimerInterrupt( void );
 119:FreeRTOS/src/port.c **** 
 120:FreeRTOS/src/port.c **** /*
 121:FreeRTOS/src/port.c ****  * Exception handlers.
 122:FreeRTOS/src/port.c ****  */
 123:FreeRTOS/src/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 124:FreeRTOS/src/port.c **** void xPortSysTickHandler( void );
 125:FreeRTOS/src/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 126:FreeRTOS/src/port.c **** 
 127:FreeRTOS/src/port.c **** /*
 128:FreeRTOS/src/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 129:FreeRTOS/src/port.c ****  */
 130:FreeRTOS/src/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 131:FreeRTOS/src/port.c **** 
 132:FreeRTOS/src/port.c **** /*
 133:FreeRTOS/src/port.c ****  * Function to enable the VFP.
 134:FreeRTOS/src/port.c ****  */
 135:FreeRTOS/src/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 136:FreeRTOS/src/port.c **** 
 137:FreeRTOS/src/port.c **** /*
 138:FreeRTOS/src/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 139:FreeRTOS/src/port.c ****  */
 140:FreeRTOS/src/port.c **** static void prvTaskExitError( void );
 141:FreeRTOS/src/port.c **** 
 142:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 143:FreeRTOS/src/port.c **** 
 144:FreeRTOS/src/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 145:FreeRTOS/src/port.c **** variable. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 4


 146:FreeRTOS/src/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 147:FreeRTOS/src/port.c **** 
 148:FreeRTOS/src/port.c **** /*
 149:FreeRTOS/src/port.c ****  * The number of SysTick increments that make up one tick period.
 150:FreeRTOS/src/port.c ****  */
 151:FreeRTOS/src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 152:FreeRTOS/src/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 153:FreeRTOS/src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:FreeRTOS/src/port.c **** 
 155:FreeRTOS/src/port.c **** /*
 156:FreeRTOS/src/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 157:FreeRTOS/src/port.c ****  * 24 bit resolution of the SysTick timer.
 158:FreeRTOS/src/port.c ****  */
 159:FreeRTOS/src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 160:FreeRTOS/src/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 161:FreeRTOS/src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:FreeRTOS/src/port.c **** 
 163:FreeRTOS/src/port.c **** /*
 164:FreeRTOS/src/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 165:FreeRTOS/src/port.c ****  * power functionality only.
 166:FreeRTOS/src/port.c ****  */
 167:FreeRTOS/src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 168:FreeRTOS/src/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 169:FreeRTOS/src/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 170:FreeRTOS/src/port.c **** 
 171:FreeRTOS/src/port.c **** /*
 172:FreeRTOS/src/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 173:FreeRTOS/src/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 174:FreeRTOS/src/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 175:FreeRTOS/src/port.c ****  */
 176:FreeRTOS/src/port.c **** #if( configASSERT_DEFINED == 1 )
 177:FreeRTOS/src/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 178:FreeRTOS/src/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 179:FreeRTOS/src/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 180:FreeRTOS/src/port.c **** #endif /* configASSERT_DEFINED */
 181:FreeRTOS/src/port.c **** 
 182:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 183:FreeRTOS/src/port.c **** 
 184:FreeRTOS/src/port.c **** /*
 185:FreeRTOS/src/port.c ****  * See header file for description.
 186:FreeRTOS/src/port.c ****  */
 187:FreeRTOS/src/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 188:FreeRTOS/src/port.c **** {
 189:FreeRTOS/src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 190:FreeRTOS/src/port.c **** 	interrupt. */
 191:FreeRTOS/src/port.c **** 
 192:FreeRTOS/src/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 193:FreeRTOS/src/port.c **** 	of interrupts, and to ensure alignment. */
 194:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 195:FreeRTOS/src/port.c **** 
 196:FreeRTOS/src/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 197:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 198:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 199:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 200:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 201:FreeRTOS/src/port.c **** 
 202:FreeRTOS/src/port.c **** 	/* Save code space by skipping register initialisation. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 5


 203:FreeRTOS/src/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 204:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 205:FreeRTOS/src/port.c **** 
 206:FreeRTOS/src/port.c **** 	/* A save method is being used that requires each task to maintain its
 207:FreeRTOS/src/port.c **** 	own exec return value. */
 208:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 209:FreeRTOS/src/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 210:FreeRTOS/src/port.c **** 
 211:FreeRTOS/src/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 212:FreeRTOS/src/port.c **** 
 213:FreeRTOS/src/port.c **** 	return pxTopOfStack;
 214:FreeRTOS/src/port.c **** }
 215:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/src/port.c **** 
 217:FreeRTOS/src/port.c **** static void prvTaskExitError( void )
 218:FreeRTOS/src/port.c **** {
  28              		.loc 1 218 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 82B0     		sub	sp, sp, #8
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
 219:FreeRTOS/src/port.c **** volatile uint32_t ulDummy = 0;
  36              		.loc 1 219 1 view .LVU1
  37              		.loc 1 219 19 is_stmt 0 view .LVU2
  38 0002 0023     		movs	r3, #0
  39 0004 0193     		str	r3, [sp, #4]
 220:FreeRTOS/src/port.c **** 
 221:FreeRTOS/src/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 222:FreeRTOS/src/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 223:FreeRTOS/src/port.c **** 	should instead call vTaskDelete( NULL ).
 224:FreeRTOS/src/port.c **** 
 225:FreeRTOS/src/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 226:FreeRTOS/src/port.c **** 	defined, then stop here so application writers can catch the error. */
 227:FreeRTOS/src/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  40              		.loc 1 227 43 is_stmt 1 view .LVU3
 228:FreeRTOS/src/port.c **** 	portDISABLE_INTERRUPTS();
  41              		.loc 1 228 2 view .LVU4
  42              	.LBB12:
  43              	.LBI12:
  44              		.file 2 "FreeRTOS/inc/portmacro.h"
   1:FreeRTOS/inc/portmacro.h **** /*
   2:FreeRTOS/inc/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/inc/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/inc/portmacro.h ****  *
   5:FreeRTOS/inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/inc/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/inc/portmacro.h ****  *
  12:FreeRTOS/inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/inc/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/inc/portmacro.h ****  *
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 6


  15:FreeRTOS/inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/inc/portmacro.h ****  *
  22:FreeRTOS/inc/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/inc/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/inc/portmacro.h ****  *
  25:FreeRTOS/inc/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/inc/portmacro.h ****  */
  27:FreeRTOS/inc/portmacro.h **** 
  28:FreeRTOS/inc/portmacro.h **** 
  29:FreeRTOS/inc/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/inc/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/inc/portmacro.h **** 
  32:FreeRTOS/inc/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/inc/portmacro.h **** extern "C" {
  34:FreeRTOS/inc/portmacro.h **** #endif
  35:FreeRTOS/inc/portmacro.h **** 
  36:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/inc/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/inc/portmacro.h ****  *
  39:FreeRTOS/inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/inc/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/inc/portmacro.h ****  *
  42:FreeRTOS/inc/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/inc/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/inc/portmacro.h ****  */
  45:FreeRTOS/inc/portmacro.h **** 
  46:FreeRTOS/inc/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/inc/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/inc/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/inc/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/inc/portmacro.h **** #define portLONG		long
  51:FreeRTOS/inc/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/inc/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/inc/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/inc/portmacro.h **** 
  55:FreeRTOS/inc/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/inc/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/inc/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/inc/portmacro.h **** 
  59:FreeRTOS/inc/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/inc/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/inc/portmacro.h **** #else
  63:FreeRTOS/inc/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/inc/portmacro.h **** 
  66:FreeRTOS/inc/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/inc/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/inc/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/inc/portmacro.h **** #endif
  70:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 7


  72:FreeRTOS/inc/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/inc/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/inc/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/inc/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/inc/portmacro.h **** 
  78:FreeRTOS/inc/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/inc/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/inc/portmacro.h **** {																				\
  81:FreeRTOS/inc/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/inc/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/inc/portmacro.h **** 																				\
  84:FreeRTOS/inc/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/inc/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/inc/portmacro.h **** }
  89:FreeRTOS/inc/portmacro.h **** 
  90:FreeRTOS/inc/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/inc/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/inc/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/inc/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/inc/portmacro.h **** 
  96:FreeRTOS/inc/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/inc/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/inc/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/inc/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/inc/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/inc/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/inc/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/inc/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/inc/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/inc/portmacro.h **** 
 106:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/inc/portmacro.h **** 
 108:FreeRTOS/inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/inc/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/inc/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/inc/portmacro.h **** 
 115:FreeRTOS/inc/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/inc/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/inc/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/inc/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/inc/portmacro.h **** #endif
 120:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/inc/portmacro.h **** 
 122:FreeRTOS/inc/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/inc/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/inc/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/inc/portmacro.h **** #endif
 126:FreeRTOS/inc/portmacro.h **** 
 127:FreeRTOS/inc/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 8


 129:FreeRTOS/inc/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/inc/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/inc/portmacro.h **** 	{
 132:FreeRTOS/inc/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/inc/portmacro.h **** 
 134:FreeRTOS/inc/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/inc/portmacro.h **** 	}
 137:FreeRTOS/inc/portmacro.h **** 
 138:FreeRTOS/inc/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/inc/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/inc/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/inc/portmacro.h **** 	#endif
 142:FreeRTOS/inc/portmacro.h **** 
 143:FreeRTOS/inc/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/inc/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/inc/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/inc/portmacro.h **** 
 147:FreeRTOS/inc/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/inc/portmacro.h **** 
 149:FreeRTOS/inc/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/inc/portmacro.h **** 
 151:FreeRTOS/inc/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/inc/portmacro.h **** 
 153:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/inc/portmacro.h **** 
 155:FreeRTOS/inc/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/inc/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/inc/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/inc/portmacro.h **** #endif
 159:FreeRTOS/inc/portmacro.h **** 
 160:FreeRTOS/inc/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/inc/portmacro.h **** #define portNOP()
 162:FreeRTOS/inc/portmacro.h **** 
 163:FreeRTOS/inc/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/inc/portmacro.h **** 
 165:FreeRTOS/inc/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/inc/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/inc/portmacro.h **** #endif
 168:FreeRTOS/inc/portmacro.h **** 
 169:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:FreeRTOS/inc/portmacro.h **** {
 171:FreeRTOS/inc/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:FreeRTOS/inc/portmacro.h **** BaseType_t xReturn;
 173:FreeRTOS/inc/portmacro.h **** 
 174:FreeRTOS/inc/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:FreeRTOS/inc/portmacro.h **** 
 177:FreeRTOS/inc/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:FreeRTOS/inc/portmacro.h **** 	{
 179:FreeRTOS/inc/portmacro.h **** 		xReturn = pdFALSE;
 180:FreeRTOS/inc/portmacro.h **** 	}
 181:FreeRTOS/inc/portmacro.h **** 	else
 182:FreeRTOS/inc/portmacro.h **** 	{
 183:FreeRTOS/inc/portmacro.h **** 		xReturn = pdTRUE;
 184:FreeRTOS/inc/portmacro.h **** 	}
 185:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 9


 186:FreeRTOS/inc/portmacro.h **** 	return xReturn;
 187:FreeRTOS/inc/portmacro.h **** }
 188:FreeRTOS/inc/portmacro.h **** 
 189:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 190:FreeRTOS/inc/portmacro.h **** 
 191:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  45              		.loc 2 191 30 view .LVU5
  46              	.LBB13:
 192:FreeRTOS/inc/portmacro.h **** {
 193:FreeRTOS/inc/portmacro.h **** uint32_t ulNewBASEPRI;
  47              		.loc 2 193 1 view .LVU6
 194:FreeRTOS/inc/portmacro.h **** 
 195:FreeRTOS/inc/portmacro.h **** 	__asm volatile
  48              		.loc 2 195 2 view .LVU7
  49              		.syntax unified
  50              	@ 195 "FreeRTOS/inc/portmacro.h" 1
  51 0006 4FF0BF03 			mov r3, #191												
  52 000a 83F31188 		msr basepri, r3											
  53 000e BFF36F8F 		isb														
  54 0012 BFF34F8F 		dsb														
  55              	
  56              	@ 0 "" 2
  57              	.LVL0:
  58              		.thumb
  59              		.syntax unified
  60              	.L2:
  61              		.loc 2 195 2 is_stmt 0 view .LVU8
  62              	.LBE13:
  63              	.LBE12:
 229:FreeRTOS/src/port.c **** 	while( ulDummy == 0 )
 230:FreeRTOS/src/port.c **** 	{
 231:FreeRTOS/src/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 232:FreeRTOS/src/port.c **** 		started to remove a compiler warning about the function being defined
 233:FreeRTOS/src/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 234:FreeRTOS/src/port.c **** 		about code appearing after this function is called - making ulDummy
 235:FreeRTOS/src/port.c **** 		volatile makes the compiler think the function could return and
 236:FreeRTOS/src/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 237:FreeRTOS/src/port.c **** 		after it. */
 238:FreeRTOS/src/port.c **** 	}
  64              		.loc 1 238 2 is_stmt 1 discriminator 1 view .LVU9
 229:FreeRTOS/src/port.c **** 	while( ulDummy == 0 )
  65              		.loc 1 229 17 is_stmt 0 discriminator 1 view .LVU10
  66 0016 019B     		ldr	r3, [sp, #4]
 229:FreeRTOS/src/port.c **** 	while( ulDummy == 0 )
  67              		.loc 1 229 7 discriminator 1 view .LVU11
  68 0018 002B     		cmp	r3, #0
  69 001a FCD0     		beq	.L2
 239:FreeRTOS/src/port.c **** }
  70              		.loc 1 239 1 view .LVU12
  71 001c 02B0     		add	sp, sp, #8
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 0
  74              		@ sp needed
  75 001e 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE5:
  79              		.section	.text.prvPortStartFirstTask,"ax",%progbits
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 10


  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	prvPortStartFirstTask:
  87              	.LFB7:
 240:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 241:FreeRTOS/src/port.c **** 
 242:FreeRTOS/src/port.c **** void vPortSVCHandler( void )
 243:FreeRTOS/src/port.c **** {
 244:FreeRTOS/src/port.c **** 	__asm volatile (
 245:FreeRTOS/src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 246:FreeRTOS/src/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 247:FreeRTOS/src/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 248:FreeRTOS/src/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 249:FreeRTOS/src/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 250:FreeRTOS/src/port.c **** 					"	isb								\n"
 251:FreeRTOS/src/port.c **** 					"	mov r0, #0 						\n"
 252:FreeRTOS/src/port.c **** 					"	msr	basepri, r0					\n"
 253:FreeRTOS/src/port.c **** 					"	bx r14							\n"
 254:FreeRTOS/src/port.c **** 					"									\n"
 255:FreeRTOS/src/port.c **** 					"	.align 4						\n"
 256:FreeRTOS/src/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 257:FreeRTOS/src/port.c **** 				);
 258:FreeRTOS/src/port.c **** }
 259:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 260:FreeRTOS/src/port.c **** 
 261:FreeRTOS/src/port.c **** static void prvPortStartFirstTask( void )
 262:FreeRTOS/src/port.c **** {
  88              		.loc 1 262 1 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ Naked Function: prologue and epilogue provided by programmer.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
 263:FreeRTOS/src/port.c **** 	/* Start the first task.  This also clears the bit that indicates the FPU is
 264:FreeRTOS/src/port.c **** 	in use in case the FPU was used before the scheduler was started - which
 265:FreeRTOS/src/port.c **** 	would otherwise result in the unnecessary leaving of space in the SVC stack
 266:FreeRTOS/src/port.c **** 	for lazy saving of FPU registers. */
 267:FreeRTOS/src/port.c **** 	__asm volatile(
  93              		.loc 1 267 2 view .LVU14
  94              		.syntax unified
  95              	@ 267 "FreeRTOS/src/port.c" 1
  96 0000 0848     		 ldr r0, =0xE000ED08 	
  97 0002 0068     	 ldr r0, [r0] 			
  98 0004 0068     	 ldr r0, [r0] 			
  99 0006 80F30888 	 msr msp, r0			
 100 000a 4FF00000 	 mov r0, #0			
 101 000e 80F31488 	 msr control, r0		
 102 0012 62B6     	 cpsie i				
 103 0014 61B6     	 cpsie f				
 104 0016 BFF34F8F 	 dsb					
 105 001a BFF36F8F 	 isb					
 106 001e 00DF     	 svc 0					
 107 0020 00BF     	 nop					
 108              	
 109              	@ 0 "" 2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 11


 268:FreeRTOS/src/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 269:FreeRTOS/src/port.c **** 					" ldr r0, [r0] 			\n"
 270:FreeRTOS/src/port.c **** 					" ldr r0, [r0] 			\n"
 271:FreeRTOS/src/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 272:FreeRTOS/src/port.c **** 					" mov r0, #0			\n" /* Clear the bit that indicates the FPU is in use, see comment above. */
 273:FreeRTOS/src/port.c **** 					" msr control, r0		\n"
 274:FreeRTOS/src/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 275:FreeRTOS/src/port.c **** 					" cpsie f				\n"
 276:FreeRTOS/src/port.c **** 					" dsb					\n"
 277:FreeRTOS/src/port.c **** 					" isb					\n"
 278:FreeRTOS/src/port.c **** 					" svc 0					\n" /* System call to start first task. */
 279:FreeRTOS/src/port.c **** 					" nop					\n"
 280:FreeRTOS/src/port.c **** 				);
 281:FreeRTOS/src/port.c **** }
 110              		.loc 1 281 1 is_stmt 0 view .LVU15
 111              		.thumb
 112              		.syntax unified
 113              		.cfi_endproc
 114              	.LFE7:
 116 0022 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 117              		.align	1
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 121              		.fpu fpv4-sp-d16
 123              	vPortEnableVFP:
 124              	.LFB15:
 282:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 283:FreeRTOS/src/port.c **** 
 284:FreeRTOS/src/port.c **** /*
 285:FreeRTOS/src/port.c ****  * See header file for description.
 286:FreeRTOS/src/port.c ****  */
 287:FreeRTOS/src/port.c **** BaseType_t xPortStartScheduler( void )
 288:FreeRTOS/src/port.c **** {
 289:FreeRTOS/src/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 290:FreeRTOS/src/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 291:FreeRTOS/src/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 292:FreeRTOS/src/port.c **** 
 293:FreeRTOS/src/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 294:FreeRTOS/src/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 295:FreeRTOS/src/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 296:FreeRTOS/src/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 297:FreeRTOS/src/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 298:FreeRTOS/src/port.c **** 
 299:FreeRTOS/src/port.c **** 	#if( configASSERT_DEFINED == 1 )
 300:FreeRTOS/src/port.c **** 	{
 301:FreeRTOS/src/port.c **** 		volatile uint32_t ulOriginalPriority;
 302:FreeRTOS/src/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 303:FreeRTOS/src/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 304:FreeRTOS/src/port.c **** 
 305:FreeRTOS/src/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 306:FreeRTOS/src/port.c **** 		functions can be called.  ISR safe functions are those that end in
 307:FreeRTOS/src/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 308:FreeRTOS/src/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 309:FreeRTOS/src/port.c **** 
 310:FreeRTOS/src/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 311:FreeRTOS/src/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 12


 312:FreeRTOS/src/port.c **** 
 313:FreeRTOS/src/port.c **** 		/* Determine the number of priority bits available.  First write to all
 314:FreeRTOS/src/port.c **** 		possible bits. */
 315:FreeRTOS/src/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 316:FreeRTOS/src/port.c **** 
 317:FreeRTOS/src/port.c **** 		/* Read the value back to see how many bits stuck. */
 318:FreeRTOS/src/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 319:FreeRTOS/src/port.c **** 
 320:FreeRTOS/src/port.c **** 		/* Use the same mask on the maximum system call priority. */
 321:FreeRTOS/src/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 322:FreeRTOS/src/port.c **** 
 323:FreeRTOS/src/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 324:FreeRTOS/src/port.c **** 		of bits read back. */
 325:FreeRTOS/src/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 326:FreeRTOS/src/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 327:FreeRTOS/src/port.c **** 		{
 328:FreeRTOS/src/port.c **** 			ulMaxPRIGROUPValue--;
 329:FreeRTOS/src/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 330:FreeRTOS/src/port.c **** 		}
 331:FreeRTOS/src/port.c **** 
 332:FreeRTOS/src/port.c **** 		#ifdef __NVIC_PRIO_BITS
 333:FreeRTOS/src/port.c **** 		{
 334:FreeRTOS/src/port.c **** 			/* Check the CMSIS configuration that defines the number of
 335:FreeRTOS/src/port.c **** 			priority bits matches the number of priority bits actually queried
 336:FreeRTOS/src/port.c **** 			from the hardware. */
 337:FreeRTOS/src/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 338:FreeRTOS/src/port.c **** 		}
 339:FreeRTOS/src/port.c **** 		#endif
 340:FreeRTOS/src/port.c **** 
 341:FreeRTOS/src/port.c **** 		#ifdef configPRIO_BITS
 342:FreeRTOS/src/port.c **** 		{
 343:FreeRTOS/src/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 344:FreeRTOS/src/port.c **** 			priority bits matches the number of priority bits actually queried
 345:FreeRTOS/src/port.c **** 			from the hardware. */
 346:FreeRTOS/src/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 347:FreeRTOS/src/port.c **** 		}
 348:FreeRTOS/src/port.c **** 		#endif
 349:FreeRTOS/src/port.c **** 
 350:FreeRTOS/src/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 351:FreeRTOS/src/port.c **** 		register. */
 352:FreeRTOS/src/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 353:FreeRTOS/src/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 354:FreeRTOS/src/port.c **** 
 355:FreeRTOS/src/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 356:FreeRTOS/src/port.c **** 		value. */
 357:FreeRTOS/src/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 358:FreeRTOS/src/port.c **** 	}
 359:FreeRTOS/src/port.c **** 	#endif /* conifgASSERT_DEFINED */
 360:FreeRTOS/src/port.c **** 
 361:FreeRTOS/src/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 362:FreeRTOS/src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 363:FreeRTOS/src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 364:FreeRTOS/src/port.c **** 
 365:FreeRTOS/src/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 366:FreeRTOS/src/port.c **** 	here already. */
 367:FreeRTOS/src/port.c **** 	vPortSetupTimerInterrupt();
 368:FreeRTOS/src/port.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 13


 369:FreeRTOS/src/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 370:FreeRTOS/src/port.c **** 	uxCriticalNesting = 0;
 371:FreeRTOS/src/port.c **** 
 372:FreeRTOS/src/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 373:FreeRTOS/src/port.c **** 	vPortEnableVFP();
 374:FreeRTOS/src/port.c **** 
 375:FreeRTOS/src/port.c **** 	/* Lazy save always. */
 376:FreeRTOS/src/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 377:FreeRTOS/src/port.c **** 
 378:FreeRTOS/src/port.c **** 	/* Start the first task. */
 379:FreeRTOS/src/port.c **** 	prvPortStartFirstTask();
 380:FreeRTOS/src/port.c **** 
 381:FreeRTOS/src/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 382:FreeRTOS/src/port.c **** 	exit error function to prevent compiler warnings about a static function
 383:FreeRTOS/src/port.c **** 	not being called in the case that the application writer overrides this
 384:FreeRTOS/src/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 385:FreeRTOS/src/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 386:FreeRTOS/src/port.c **** 	symbol. */
 387:FreeRTOS/src/port.c **** 	vTaskSwitchContext();
 388:FreeRTOS/src/port.c **** 	prvTaskExitError();
 389:FreeRTOS/src/port.c **** 
 390:FreeRTOS/src/port.c **** 	/* Should not get here! */
 391:FreeRTOS/src/port.c **** 	return 0;
 392:FreeRTOS/src/port.c **** }
 393:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 394:FreeRTOS/src/port.c **** 
 395:FreeRTOS/src/port.c **** void vPortEndScheduler( void )
 396:FreeRTOS/src/port.c **** {
 397:FreeRTOS/src/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:FreeRTOS/src/port.c **** 	Artificially force an assert. */
 399:FreeRTOS/src/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 400:FreeRTOS/src/port.c **** }
 401:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 402:FreeRTOS/src/port.c **** 
 403:FreeRTOS/src/port.c **** void vPortEnterCritical( void )
 404:FreeRTOS/src/port.c **** {
 405:FreeRTOS/src/port.c **** 	portDISABLE_INTERRUPTS();
 406:FreeRTOS/src/port.c **** 	uxCriticalNesting++;
 407:FreeRTOS/src/port.c **** 
 408:FreeRTOS/src/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:FreeRTOS/src/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:FreeRTOS/src/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 411:FreeRTOS/src/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:FreeRTOS/src/port.c **** 	assert function also uses a critical section. */
 413:FreeRTOS/src/port.c **** 	if( uxCriticalNesting == 1 )
 414:FreeRTOS/src/port.c **** 	{
 415:FreeRTOS/src/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 416:FreeRTOS/src/port.c **** 	}
 417:FreeRTOS/src/port.c **** }
 418:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 419:FreeRTOS/src/port.c **** 
 420:FreeRTOS/src/port.c **** void vPortExitCritical( void )
 421:FreeRTOS/src/port.c **** {
 422:FreeRTOS/src/port.c **** 	configASSERT( uxCriticalNesting );
 423:FreeRTOS/src/port.c **** 	uxCriticalNesting--;
 424:FreeRTOS/src/port.c **** 	if( uxCriticalNesting == 0 )
 425:FreeRTOS/src/port.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 14


 426:FreeRTOS/src/port.c **** 		portENABLE_INTERRUPTS();
 427:FreeRTOS/src/port.c **** 	}
 428:FreeRTOS/src/port.c **** }
 429:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 430:FreeRTOS/src/port.c **** 
 431:FreeRTOS/src/port.c **** void xPortPendSVHandler( void )
 432:FreeRTOS/src/port.c **** {
 433:FreeRTOS/src/port.c **** 	/* This is a naked function. */
 434:FreeRTOS/src/port.c **** 
 435:FreeRTOS/src/port.c **** 	__asm volatile
 436:FreeRTOS/src/port.c **** 	(
 437:FreeRTOS/src/port.c **** 	"	mrs r0, psp							\n"
 438:FreeRTOS/src/port.c **** 	"	isb									\n"
 439:FreeRTOS/src/port.c **** 	"										\n"
 440:FreeRTOS/src/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:FreeRTOS/src/port.c **** 	"	ldr	r2, [r3]						\n"
 442:FreeRTOS/src/port.c **** 	"										\n"
 443:FreeRTOS/src/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:FreeRTOS/src/port.c **** 	"	it eq								\n"
 445:FreeRTOS/src/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:FreeRTOS/src/port.c **** 	"										\n"
 447:FreeRTOS/src/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:FreeRTOS/src/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 449:FreeRTOS/src/port.c **** 	"										\n"
 450:FreeRTOS/src/port.c **** 	"	stmdb sp!, {r0, r3}					\n"
 451:FreeRTOS/src/port.c **** 	"	mov r0, %0 							\n"
 452:FreeRTOS/src/port.c **** 	"	msr basepri, r0						\n"
 453:FreeRTOS/src/port.c **** 	"	dsb									\n"
 454:FreeRTOS/src/port.c **** 	"	isb									\n"
 455:FreeRTOS/src/port.c **** 	"	bl vTaskSwitchContext				\n"
 456:FreeRTOS/src/port.c **** 	"	mov r0, #0							\n"
 457:FreeRTOS/src/port.c **** 	"	msr basepri, r0						\n"
 458:FreeRTOS/src/port.c **** 	"	ldmia sp!, {r0, r3}					\n"
 459:FreeRTOS/src/port.c **** 	"										\n"
 460:FreeRTOS/src/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 461:FreeRTOS/src/port.c **** 	"	ldr r0, [r1]						\n"
 462:FreeRTOS/src/port.c **** 	"										\n"
 463:FreeRTOS/src/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 464:FreeRTOS/src/port.c **** 	"										\n"
 465:FreeRTOS/src/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 466:FreeRTOS/src/port.c **** 	"	it eq								\n"
 467:FreeRTOS/src/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 468:FreeRTOS/src/port.c **** 	"										\n"
 469:FreeRTOS/src/port.c **** 	"	msr psp, r0							\n"
 470:FreeRTOS/src/port.c **** 	"	isb									\n"
 471:FreeRTOS/src/port.c **** 	"										\n"
 472:FreeRTOS/src/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 473:FreeRTOS/src/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 474:FreeRTOS/src/port.c **** 	"			push { r14 }				\n"
 475:FreeRTOS/src/port.c **** 	"			pop { pc }					\n"
 476:FreeRTOS/src/port.c **** 		#endif
 477:FreeRTOS/src/port.c **** 	#endif
 478:FreeRTOS/src/port.c **** 	"										\n"
 479:FreeRTOS/src/port.c **** 	"	bx r14								\n"
 480:FreeRTOS/src/port.c **** 	"										\n"
 481:FreeRTOS/src/port.c **** 	"	.align 4							\n"
 482:FreeRTOS/src/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 15


 483:FreeRTOS/src/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 484:FreeRTOS/src/port.c **** 	);
 485:FreeRTOS/src/port.c **** }
 486:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 487:FreeRTOS/src/port.c **** 
 488:FreeRTOS/src/port.c **** void xPortSysTickHandler( void )
 489:FreeRTOS/src/port.c **** {
 490:FreeRTOS/src/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 491:FreeRTOS/src/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 492:FreeRTOS/src/port.c **** 	save and then restore the interrupt mask value as its value is already
 493:FreeRTOS/src/port.c **** 	known. */
 494:FreeRTOS/src/port.c **** 	portDISABLE_INTERRUPTS();
 495:FreeRTOS/src/port.c **** 	{
 496:FreeRTOS/src/port.c **** 		/* Increment the RTOS tick. */
 497:FreeRTOS/src/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 498:FreeRTOS/src/port.c **** 		{
 499:FreeRTOS/src/port.c **** 			/* A context switch is required.  Context switching is performed in
 500:FreeRTOS/src/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 501:FreeRTOS/src/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 502:FreeRTOS/src/port.c **** 		}
 503:FreeRTOS/src/port.c **** 	}
 504:FreeRTOS/src/port.c **** 	portENABLE_INTERRUPTS();
 505:FreeRTOS/src/port.c **** }
 506:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 507:FreeRTOS/src/port.c **** 
 508:FreeRTOS/src/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 509:FreeRTOS/src/port.c **** 
 510:FreeRTOS/src/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 511:FreeRTOS/src/port.c **** 	{
 512:FreeRTOS/src/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 513:FreeRTOS/src/port.c **** 	TickType_t xModifiableIdleTime;
 514:FreeRTOS/src/port.c **** 
 515:FreeRTOS/src/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 516:FreeRTOS/src/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 517:FreeRTOS/src/port.c **** 		{
 518:FreeRTOS/src/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 519:FreeRTOS/src/port.c **** 		}
 520:FreeRTOS/src/port.c **** 
 521:FreeRTOS/src/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 522:FreeRTOS/src/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 523:FreeRTOS/src/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 524:FreeRTOS/src/port.c **** 		kernel with respect to calendar time. */
 525:FreeRTOS/src/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 526:FreeRTOS/src/port.c **** 
 527:FreeRTOS/src/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 528:FreeRTOS/src/port.c **** 		tick periods.  -1 is used because this code will execute part way
 529:FreeRTOS/src/port.c **** 		through one of the tick periods. */
 530:FreeRTOS/src/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 531:FreeRTOS/src/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 532:FreeRTOS/src/port.c **** 		{
 533:FreeRTOS/src/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 534:FreeRTOS/src/port.c **** 		}
 535:FreeRTOS/src/port.c **** 
 536:FreeRTOS/src/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 537:FreeRTOS/src/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 538:FreeRTOS/src/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 539:FreeRTOS/src/port.c **** 		__asm volatile( "dsb" );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 16


 540:FreeRTOS/src/port.c **** 		__asm volatile( "isb" );
 541:FreeRTOS/src/port.c **** 
 542:FreeRTOS/src/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 543:FreeRTOS/src/port.c **** 		to be unsuspended then abandon the low power entry. */
 544:FreeRTOS/src/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 545:FreeRTOS/src/port.c **** 		{
 546:FreeRTOS/src/port.c **** 			/* Restart from whatever is left in the count register to complete
 547:FreeRTOS/src/port.c **** 			this tick period. */
 548:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 549:FreeRTOS/src/port.c **** 
 550:FreeRTOS/src/port.c **** 			/* Restart SysTick. */
 551:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 552:FreeRTOS/src/port.c **** 
 553:FreeRTOS/src/port.c **** 			/* Reset the reload register to the value required for normal tick
 554:FreeRTOS/src/port.c **** 			periods. */
 555:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 556:FreeRTOS/src/port.c **** 
 557:FreeRTOS/src/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 558:FreeRTOS/src/port.c **** 			above. */
 559:FreeRTOS/src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 560:FreeRTOS/src/port.c **** 		}
 561:FreeRTOS/src/port.c **** 		else
 562:FreeRTOS/src/port.c **** 		{
 563:FreeRTOS/src/port.c **** 			/* Set the new reload value. */
 564:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 565:FreeRTOS/src/port.c **** 
 566:FreeRTOS/src/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 567:FreeRTOS/src/port.c **** 			zero. */
 568:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 569:FreeRTOS/src/port.c **** 
 570:FreeRTOS/src/port.c **** 			/* Restart SysTick. */
 571:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 572:FreeRTOS/src/port.c **** 
 573:FreeRTOS/src/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 574:FreeRTOS/src/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 575:FreeRTOS/src/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 576:FreeRTOS/src/port.c **** 			should not be executed again.  However, the original expected idle
 577:FreeRTOS/src/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 578:FreeRTOS/src/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 579:FreeRTOS/src/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 580:FreeRTOS/src/port.c **** 			if( xModifiableIdleTime > 0 )
 581:FreeRTOS/src/port.c **** 			{
 582:FreeRTOS/src/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 583:FreeRTOS/src/port.c **** 				__asm volatile( "wfi" );
 584:FreeRTOS/src/port.c **** 				__asm volatile( "isb" );
 585:FreeRTOS/src/port.c **** 			}
 586:FreeRTOS/src/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 587:FreeRTOS/src/port.c **** 
 588:FreeRTOS/src/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 589:FreeRTOS/src/port.c **** 			out of sleep mode to execute immediately.  see comments above
 590:FreeRTOS/src/port.c **** 			__disable_interrupt() call above. */
 591:FreeRTOS/src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 592:FreeRTOS/src/port.c **** 			__asm volatile( "dsb" );
 593:FreeRTOS/src/port.c **** 			__asm volatile( "isb" );
 594:FreeRTOS/src/port.c **** 
 595:FreeRTOS/src/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 596:FreeRTOS/src/port.c **** 			and interrupts that execute while the clock is stopped will increase
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 17


 597:FreeRTOS/src/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 598:FreeRTOS/src/port.c **** 			time. */
 599:FreeRTOS/src/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 600:FreeRTOS/src/port.c **** 			__asm volatile( "dsb" );
 601:FreeRTOS/src/port.c **** 			__asm volatile( "isb" );
 602:FreeRTOS/src/port.c **** 
 603:FreeRTOS/src/port.c **** 			/* Disable the SysTick clock without reading the
 604:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 605:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 606:FreeRTOS/src/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 607:FreeRTOS/src/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 608:FreeRTOS/src/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 609:FreeRTOS/src/port.c **** 			time*/
 610:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 611:FreeRTOS/src/port.c **** 
 612:FreeRTOS/src/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 613:FreeRTOS/src/port.c **** 			been set back to the current reload value (the reload back being
 614:FreeRTOS/src/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 615:FreeRTOS/src/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 616:FreeRTOS/src/port.c **** 			must have brought the system out of sleep mode). */
 617:FreeRTOS/src/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 618:FreeRTOS/src/port.c **** 			{
 619:FreeRTOS/src/port.c **** 				uint32_t ulCalculatedLoadValue;
 620:FreeRTOS/src/port.c **** 
 621:FreeRTOS/src/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 622:FreeRTOS/src/port.c **** 				reloaded with ulReloadValue.  Reset the
 623:FreeRTOS/src/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 624:FreeRTOS/src/port.c **** 				period. */
 625:FreeRTOS/src/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 626:FreeRTOS/src/port.c **** 
 627:FreeRTOS/src/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 628:FreeRTOS/src/port.c **** 				underflowed because the post sleep hook did something
 629:FreeRTOS/src/port.c **** 				that took too long. */
 630:FreeRTOS/src/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 631:FreeRTOS/src/port.c **** 				{
 632:FreeRTOS/src/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 633:FreeRTOS/src/port.c **** 				}
 634:FreeRTOS/src/port.c **** 
 635:FreeRTOS/src/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 636:FreeRTOS/src/port.c **** 
 637:FreeRTOS/src/port.c **** 				/* As the pending tick will be processed as soon as this
 638:FreeRTOS/src/port.c **** 				function exits, the tick value maintained by the tick is stepped
 639:FreeRTOS/src/port.c **** 				forward by one less than the time spent waiting. */
 640:FreeRTOS/src/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 641:FreeRTOS/src/port.c **** 			}
 642:FreeRTOS/src/port.c **** 			else
 643:FreeRTOS/src/port.c **** 			{
 644:FreeRTOS/src/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 645:FreeRTOS/src/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 646:FreeRTOS/src/port.c **** 				periods (not the ulReload value which accounted for part
 647:FreeRTOS/src/port.c **** 				ticks). */
 648:FreeRTOS/src/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 649:FreeRTOS/src/port.c **** 
 650:FreeRTOS/src/port.c **** 				/* How many complete tick periods passed while the processor
 651:FreeRTOS/src/port.c **** 				was waiting? */
 652:FreeRTOS/src/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 653:FreeRTOS/src/port.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 18


 654:FreeRTOS/src/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 655:FreeRTOS/src/port.c **** 				period remains. */
 656:FreeRTOS/src/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 657:FreeRTOS/src/port.c **** 			}
 658:FreeRTOS/src/port.c **** 
 659:FreeRTOS/src/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 660:FreeRTOS/src/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 661:FreeRTOS/src/port.c **** 			value. */
 662:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 663:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:FreeRTOS/src/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 665:FreeRTOS/src/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 666:FreeRTOS/src/port.c **** 
 667:FreeRTOS/src/port.c **** 			/* Exit with interrupts enabled. */
 668:FreeRTOS/src/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 669:FreeRTOS/src/port.c **** 		}
 670:FreeRTOS/src/port.c **** 	}
 671:FreeRTOS/src/port.c **** 
 672:FreeRTOS/src/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 673:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 674:FreeRTOS/src/port.c **** 
 675:FreeRTOS/src/port.c **** /*
 676:FreeRTOS/src/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 677:FreeRTOS/src/port.c ****  * frequency.
 678:FreeRTOS/src/port.c ****  */
 679:FreeRTOS/src/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 680:FreeRTOS/src/port.c **** {
 681:FreeRTOS/src/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 682:FreeRTOS/src/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 683:FreeRTOS/src/port.c **** 	{
 684:FreeRTOS/src/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 685:FreeRTOS/src/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 686:FreeRTOS/src/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 687:FreeRTOS/src/port.c **** 	}
 688:FreeRTOS/src/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 689:FreeRTOS/src/port.c **** 
 690:FreeRTOS/src/port.c **** 	/* Stop and clear the SysTick. */
 691:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 692:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 693:FreeRTOS/src/port.c **** 
 694:FreeRTOS/src/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 695:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 696:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 697:FreeRTOS/src/port.c **** }
 698:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 699:FreeRTOS/src/port.c **** 
 700:FreeRTOS/src/port.c **** /* This is a naked function. */
 701:FreeRTOS/src/port.c **** static void vPortEnableVFP( void )
 702:FreeRTOS/src/port.c **** {
 125              		.loc 1 702 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ Naked Function: prologue and epilogue provided by programmer.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 703:FreeRTOS/src/port.c **** 	__asm volatile
 130              		.loc 1 703 2 view .LVU17
 131              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 19


 132              	@ 703 "FreeRTOS/src/port.c" 1
 133 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 134 0004 0168     		ldr r1, [r0]				
 135              									
 136 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 137 000a 0160     		str r1, [r0]				
 138 000c 7047     		bx r14						
 139              	@ 0 "" 2
 704:FreeRTOS/src/port.c **** 	(
 705:FreeRTOS/src/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 706:FreeRTOS/src/port.c **** 		"	ldr r1, [r0]				\n"
 707:FreeRTOS/src/port.c **** 		"								\n"
 708:FreeRTOS/src/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 709:FreeRTOS/src/port.c **** 		"	str r1, [r0]				\n"
 710:FreeRTOS/src/port.c **** 		"	bx r14						"
 711:FreeRTOS/src/port.c **** 	);
 712:FreeRTOS/src/port.c **** }
 140              		.loc 1 712 1 is_stmt 0 view .LVU18
 141              		.thumb
 142              		.syntax unified
 143              		.cfi_endproc
 144              	.LFE15:
 146 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 147              		.align	1
 148              		.global	pxPortInitialiseStack
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	pxPortInitialiseStack:
 155              	.LVL1:
 156              	.LFB4:
 188:FreeRTOS/src/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 157              		.loc 1 188 1 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 194:FreeRTOS/src/port.c **** 
 162              		.loc 1 194 2 view .LVU20
 196:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 163              		.loc 1 196 2 view .LVU21
 196:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 164              		.loc 1 196 16 is_stmt 0 view .LVU22
 165 0000 4FF08073 		mov	r3, #16777216
 166 0004 40F8043C 		str	r3, [r0, #-4]
 197:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 167              		.loc 1 197 2 is_stmt 1 view .LVU23
 168              	.LVL2:
 198:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 169              		.loc 1 198 2 view .LVU24
 198:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 170              		.loc 1 198 45 is_stmt 0 view .LVU25
 171 0008 21F00101 		bic	r1, r1, #1
 172              	.LVL3:
 198:FreeRTOS/src/port.c **** 	pxTopOfStack--;
 173              		.loc 1 198 16 view .LVU26
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 20


 174 000c 40F8081C 		str	r1, [r0, #-8]
 199:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 175              		.loc 1 199 2 is_stmt 1 view .LVU27
 176              	.LVL4:
 200:FreeRTOS/src/port.c **** 
 177              		.loc 1 200 2 view .LVU28
 200:FreeRTOS/src/port.c **** 
 178              		.loc 1 200 18 is_stmt 0 view .LVU29
 179 0010 054B     		ldr	r3, .L7
 200:FreeRTOS/src/port.c **** 
 180              		.loc 1 200 16 view .LVU30
 181 0012 40F80C3C 		str	r3, [r0, #-12]
 203:FreeRTOS/src/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 182              		.loc 1 203 2 is_stmt 1 view .LVU31
 183              	.LVL5:
 204:FreeRTOS/src/port.c **** 
 184              		.loc 1 204 2 view .LVU32
 204:FreeRTOS/src/port.c **** 
 185              		.loc 1 204 16 is_stmt 0 view .LVU33
 186 0016 40F8202C 		str	r2, [r0, #-32]
 208:FreeRTOS/src/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 187              		.loc 1 208 2 is_stmt 1 view .LVU34
 188              	.LVL6:
 209:FreeRTOS/src/port.c **** 
 189              		.loc 1 209 2 view .LVU35
 209:FreeRTOS/src/port.c **** 
 190              		.loc 1 209 16 is_stmt 0 view .LVU36
 191 001a 6FF00203 		mvn	r3, #2
 192 001e 40F8243C 		str	r3, [r0, #-36]
 211:FreeRTOS/src/port.c **** 
 193              		.loc 1 211 2 is_stmt 1 view .LVU37
 194              	.LVL7:
 213:FreeRTOS/src/port.c **** }
 195              		.loc 1 213 2 view .LVU38
 214:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 196              		.loc 1 214 1 is_stmt 0 view .LVU39
 197 0022 4438     		subs	r0, r0, #68
 198              	.LVL8:
 214:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 199              		.loc 1 214 1 view .LVU40
 200 0024 7047     		bx	lr
 201              	.L8:
 202 0026 00BF     		.align	2
 203              	.L7:
 204 0028 00000000 		.word	prvTaskExitError
 205              		.cfi_endproc
 206              	.LFE4:
 208              		.section	.text.SVC_Handler,"ax",%progbits
 209              		.align	1
 210              		.global	SVC_Handler
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv4-sp-d16
 216              	SVC_Handler:
 217              	.LFB6:
 243:FreeRTOS/src/port.c **** 	__asm volatile (
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 21


 218              		.loc 1 243 1 is_stmt 1 view -0
 219              		.cfi_startproc
 220              		@ Naked Function: prologue and epilogue provided by programmer.
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 244:FreeRTOS/src/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 223              		.loc 1 244 2 view .LVU42
 224              		.syntax unified
 225              	@ 244 "FreeRTOS/src/port.c" 1
 226 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 227 0002 1968     		ldr r1, [r3]					
 228 0004 0868     		ldr r0, [r1]					
 229 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 230 000a 80F30988 		msr psp, r0						
 231 000e BFF36F8F 		isb								
 232 0012 4FF00000 		mov r0, #0 						
 233 0016 80F31188 		msr	basepri, r0					
 234 001a 7047     		bx r14							
 235              										
 236 001c AFF30080 		.align 4						
 237 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 238              	
 239              	@ 0 "" 2
 258:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 240              		.loc 1 258 1 is_stmt 0 view .LVU43
 241              		.thumb
 242              		.syntax unified
 243              		.cfi_endproc
 244              	.LFE6:
 246              		.section	.text.vPortEndScheduler,"ax",%progbits
 247              		.align	1
 248              		.global	vPortEndScheduler
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	vPortEndScheduler:
 255              	.LFB9:
 396:FreeRTOS/src/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 256              		.loc 1 396 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 399:FreeRTOS/src/port.c **** }
 261              		.loc 1 399 45 view .LVU45
 400:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 262              		.loc 1 400 1 is_stmt 0 view .LVU46
 263 0000 7047     		bx	lr
 264              		.cfi_endproc
 265              	.LFE9:
 267              		.section	.text.vPortEnterCritical,"ax",%progbits
 268              		.align	1
 269              		.global	vPortEnterCritical
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 22


 273              		.fpu fpv4-sp-d16
 275              	vPortEnterCritical:
 276              	.LFB10:
 404:FreeRTOS/src/port.c **** 	portDISABLE_INTERRUPTS();
 277              		.loc 1 404 1 is_stmt 1 view -0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 405:FreeRTOS/src/port.c **** 	uxCriticalNesting++;
 282              		.loc 1 405 2 view .LVU48
 283              	.LBB14:
 284              	.LBI14:
 191:FreeRTOS/inc/portmacro.h **** {
 285              		.loc 2 191 30 view .LVU49
 286              	.LBB15:
 193:FreeRTOS/inc/portmacro.h **** 
 287              		.loc 2 193 1 view .LVU50
 288              		.loc 2 195 2 view .LVU51
 289              		.syntax unified
 290              	@ 195 "FreeRTOS/inc/portmacro.h" 1
 291 0000 4FF0BF03 			mov r3, #191												
 292 0004 83F31188 		msr basepri, r3											
 293 0008 BFF36F8F 		isb														
 294 000c BFF34F8F 		dsb														
 295              	
 296              	@ 0 "" 2
 297              		.thumb
 298              		.syntax unified
 299              	.LBE15:
 300              	.LBE14:
 406:FreeRTOS/src/port.c **** 
 301              		.loc 1 406 2 view .LVU52
 406:FreeRTOS/src/port.c **** 
 302              		.loc 1 406 19 is_stmt 0 view .LVU53
 303 0010 024A     		ldr	r2, .L12
 304 0012 1368     		ldr	r3, [r2]
 305 0014 0133     		adds	r3, r3, #1
 306 0016 1360     		str	r3, [r2]
 413:FreeRTOS/src/port.c **** 	{
 307              		.loc 1 413 2 is_stmt 1 view .LVU54
 415:FreeRTOS/src/port.c **** 	}
 308              		.loc 1 415 71 view .LVU55
 417:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 309              		.loc 1 417 1 is_stmt 0 view .LVU56
 310 0018 7047     		bx	lr
 311              	.L13:
 312 001a 00BF     		.align	2
 313              	.L12:
 314 001c 00000000 		.word	.LANCHOR0
 315              		.cfi_endproc
 316              	.LFE10:
 318              		.section	.text.vPortExitCritical,"ax",%progbits
 319              		.align	1
 320              		.global	vPortExitCritical
 321              		.syntax unified
 322              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 23


 323              		.thumb_func
 324              		.fpu fpv4-sp-d16
 326              	vPortExitCritical:
 327              	.LFB11:
 421:FreeRTOS/src/port.c **** 	configASSERT( uxCriticalNesting );
 328              		.loc 1 421 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 422:FreeRTOS/src/port.c **** 	uxCriticalNesting--;
 333              		.loc 1 422 35 view .LVU58
 423:FreeRTOS/src/port.c **** 	if( uxCriticalNesting == 0 )
 334              		.loc 1 423 2 view .LVU59
 423:FreeRTOS/src/port.c **** 	if( uxCriticalNesting == 0 )
 335              		.loc 1 423 19 is_stmt 0 view .LVU60
 336 0000 034A     		ldr	r2, .L16
 337 0002 1368     		ldr	r3, [r2]
 338 0004 013B     		subs	r3, r3, #1
 339 0006 1360     		str	r3, [r2]
 424:FreeRTOS/src/port.c **** 	{
 340              		.loc 1 424 2 is_stmt 1 view .LVU61
 424:FreeRTOS/src/port.c **** 	{
 341              		.loc 1 424 4 is_stmt 0 view .LVU62
 342 0008 0BB9     		cbnz	r3, .L14
 426:FreeRTOS/src/port.c **** 	}
 343              		.loc 1 426 3 is_stmt 1 view .LVU63
 344              	.LVL9:
 345              	.LBB16:
 346              	.LBI16:
 196:FreeRTOS/inc/portmacro.h **** 	(
 197:FreeRTOS/inc/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 200:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 201:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:FreeRTOS/inc/portmacro.h **** 	);
 203:FreeRTOS/inc/portmacro.h **** }
 204:FreeRTOS/inc/portmacro.h **** 
 205:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 206:FreeRTOS/inc/portmacro.h **** 
 207:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:FreeRTOS/inc/portmacro.h **** {
 209:FreeRTOS/inc/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:FreeRTOS/inc/portmacro.h **** 
 211:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 212:FreeRTOS/inc/portmacro.h **** 	(
 213:FreeRTOS/inc/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:FreeRTOS/inc/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 217:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 218:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:FreeRTOS/inc/portmacro.h **** 	);
 220:FreeRTOS/inc/portmacro.h **** 
 221:FreeRTOS/inc/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:FreeRTOS/inc/portmacro.h **** 	warnings. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 24


 223:FreeRTOS/inc/portmacro.h **** 	return ulOriginalBASEPRI;
 224:FreeRTOS/inc/portmacro.h **** }
 225:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 226:FreeRTOS/inc/portmacro.h **** 
 227:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 347              		.loc 2 227 30 view .LVU64
 348              	.LBB17:
 228:FreeRTOS/inc/portmacro.h **** {
 229:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 349              		.loc 2 229 2 view .LVU65
 350              		.syntax unified
 351              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 352 000a 83F31188 			msr basepri, r3	
 353              	@ 0 "" 2
 354              	.LVL10:
 355              		.thumb
 356              		.syntax unified
 357              	.L14:
 358              		.loc 2 229 2 is_stmt 0 view .LVU66
 359              	.LBE17:
 360              	.LBE16:
 428:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 361              		.loc 1 428 1 view .LVU67
 362 000e 7047     		bx	lr
 363              	.L17:
 364              		.align	2
 365              	.L16:
 366 0010 00000000 		.word	.LANCHOR0
 367              		.cfi_endproc
 368              	.LFE11:
 370              		.section	.text.PendSV_Handler,"ax",%progbits
 371              		.align	1
 372              		.global	PendSV_Handler
 373              		.syntax unified
 374              		.thumb
 375              		.thumb_func
 376              		.fpu fpv4-sp-d16
 378              	PendSV_Handler:
 379              	.LFB12:
 432:FreeRTOS/src/port.c **** 	/* This is a naked function. */
 380              		.loc 1 432 1 is_stmt 1 view -0
 381              		.cfi_startproc
 382              		@ Naked Function: prologue and epilogue provided by programmer.
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 435:FreeRTOS/src/port.c **** 	(
 385              		.loc 1 435 2 view .LVU69
 386              		.syntax unified
 387              	@ 435 "FreeRTOS/src/port.c" 1
 388 0000 EFF30980 			mrs r0, psp							
 389 0004 BFF36F8F 		isb									
 390              											
 391 0008 154B     		ldr	r3, pxCurrentTCBConst			
 392 000a 1A68     		ldr	r2, [r3]						
 393              											
 394 000c 1EF0100F 		tst r14, #0x10						
 395 0010 08BF     		it eq								
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 25


 396 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 397              											
 398 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 399 001a 1060     		str r0, [r2]						
 400              											
 401 001c 2DE90900 		stmdb sp!, {r0, r3}					
 402 0020 4FF0BF00 		mov r0, #191 							
 403 0024 80F31188 		msr basepri, r0						
 404 0028 BFF34F8F 		dsb									
 405 002c BFF36F8F 		isb									
 406 0030 FFF7FEFF 		bl vTaskSwitchContext				
 407 0034 4FF00000 		mov r0, #0							
 408 0038 80F31188 		msr basepri, r0						
 409 003c 09BC     		ldmia sp!, {r0, r3}					
 410              											
 411 003e 1968     		ldr r1, [r3]						
 412 0040 0868     		ldr r0, [r1]						
 413              											
 414 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 415              											
 416 0046 1EF0100F 		tst r14, #0x10						
 417 004a 08BF     		it eq								
 418 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 419              											
 420 0050 80F30988 		msr psp, r0							
 421 0054 BFF36F8F 		isb									
 422              											
 423              											
 424 0058 7047     		bx r14								
 425              											
 426 005a 00BFAFF3 		.align 4							
 426      0080
 427 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 428              	
 429              	@ 0 "" 2
 485:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 430              		.loc 1 485 1 is_stmt 0 view .LVU70
 431              		.thumb
 432              		.syntax unified
 433              		.cfi_endproc
 434              	.LFE12:
 436              		.section	.text.SysTick_Handler,"ax",%progbits
 437              		.align	1
 438              		.global	SysTick_Handler
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	SysTick_Handler:
 445              	.LFB13:
 489:FreeRTOS/src/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 446              		.loc 1 489 1 is_stmt 1 view -0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 08B5     		push	{r3, lr}
 451              	.LCFI2:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 26


 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 3, -8
 454              		.cfi_offset 14, -4
 494:FreeRTOS/src/port.c **** 	{
 455              		.loc 1 494 2 view .LVU72
 456              	.LBB18:
 457              	.LBI18:
 191:FreeRTOS/inc/portmacro.h **** {
 458              		.loc 2 191 30 view .LVU73
 459              	.LBB19:
 193:FreeRTOS/inc/portmacro.h **** 
 460              		.loc 2 193 1 view .LVU74
 195:FreeRTOS/inc/portmacro.h **** 	(
 461              		.loc 2 195 2 view .LVU75
 462              		.syntax unified
 463              	@ 195 "FreeRTOS/inc/portmacro.h" 1
 464 0002 4FF0BF03 			mov r3, #191												
 465 0006 83F31188 		msr basepri, r3											
 466 000a BFF36F8F 		isb														
 467 000e BFF34F8F 		dsb														
 468              	
 469              	@ 0 "" 2
 470              		.thumb
 471              		.syntax unified
 472              	.LBE19:
 473              	.LBE18:
 497:FreeRTOS/src/port.c **** 		{
 474              		.loc 1 497 3 view .LVU76
 497:FreeRTOS/src/port.c **** 		{
 475              		.loc 1 497 7 is_stmt 0 view .LVU77
 476 0012 FFF7FEFF 		bl	xTaskIncrementTick
 477              	.LVL11:
 497:FreeRTOS/src/port.c **** 		{
 478              		.loc 1 497 5 view .LVU78
 479 0016 18B1     		cbz	r0, .L20
 501:FreeRTOS/src/port.c **** 		}
 480              		.loc 1 501 4 is_stmt 1 view .LVU79
 501:FreeRTOS/src/port.c **** 		}
 481              		.loc 1 501 26 is_stmt 0 view .LVU80
 482 0018 034B     		ldr	r3, .L22
 483 001a 4FF08052 		mov	r2, #268435456
 484 001e 1A60     		str	r2, [r3]
 485              	.L20:
 504:FreeRTOS/src/port.c **** }
 486              		.loc 1 504 2 is_stmt 1 view .LVU81
 487              	.LVL12:
 488              	.LBB20:
 489              	.LBI20:
 227:FreeRTOS/inc/portmacro.h **** {
 490              		.loc 2 227 30 view .LVU82
 491              	.LBB21:
 492              		.loc 2 229 2 view .LVU83
 493 0020 0023     		movs	r3, #0
 494              		.syntax unified
 495              	@ 229 "FreeRTOS/inc/portmacro.h" 1
 496 0022 83F31188 			msr basepri, r3	
 497              	@ 0 "" 2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 27


 498              	.LVL13:
 499              		.loc 2 229 2 is_stmt 0 view .LVU84
 500              		.thumb
 501              		.syntax unified
 502              	.LBE21:
 503              	.LBE20:
 505:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 504              		.loc 1 505 1 view .LVU85
 505 0026 08BD     		pop	{r3, pc}
 506              	.L23:
 507              		.align	2
 508              	.L22:
 509 0028 04ED00E0 		.word	-536810236
 510              		.cfi_endproc
 511              	.LFE13:
 513              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 514              		.align	1
 515              		.weak	vPortSetupTimerInterrupt
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 519              		.fpu fpv4-sp-d16
 521              	vPortSetupTimerInterrupt:
 522              	.LFB14:
 680:FreeRTOS/src/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 523              		.loc 1 680 1 is_stmt 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 691:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 528              		.loc 1 691 2 view .LVU87
 691:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 529              		.loc 1 691 28 is_stmt 0 view .LVU88
 530 0000 054B     		ldr	r3, .L25
 531 0002 0022     		movs	r2, #0
 532 0004 1A60     		str	r2, [r3]
 692:FreeRTOS/src/port.c **** 
 533              		.loc 1 692 2 is_stmt 1 view .LVU89
 692:FreeRTOS/src/port.c **** 
 534              		.loc 1 692 37 is_stmt 0 view .LVU90
 535 0006 0549     		ldr	r1, .L25+4
 536 0008 0A60     		str	r2, [r1]
 695:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 537              		.loc 1 695 2 is_stmt 1 view .LVU91
 695:FreeRTOS/src/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 538              		.loc 1 695 28 is_stmt 0 view .LVU92
 539 000a 054A     		ldr	r2, .L25+8
 540 000c 4BF67F31 		movw	r1, #47999
 541 0010 1160     		str	r1, [r2]
 696:FreeRTOS/src/port.c **** }
 542              		.loc 1 696 2 is_stmt 1 view .LVU93
 696:FreeRTOS/src/port.c **** }
 543              		.loc 1 696 28 is_stmt 0 view .LVU94
 544 0012 0722     		movs	r2, #7
 545 0014 1A60     		str	r2, [r3]
 697:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 28


 546              		.loc 1 697 1 view .LVU95
 547 0016 7047     		bx	lr
 548              	.L26:
 549              		.align	2
 550              	.L25:
 551 0018 10E000E0 		.word	-536813552
 552 001c 18E000E0 		.word	-536813544
 553 0020 14E000E0 		.word	-536813548
 554              		.cfi_endproc
 555              	.LFE14:
 557              		.section	.text.xPortStartScheduler,"ax",%progbits
 558              		.align	1
 559              		.global	xPortStartScheduler
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	xPortStartScheduler:
 566              	.LFB8:
 288:FreeRTOS/src/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 567              		.loc 1 288 1 is_stmt 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571 0000 10B5     		push	{r4, lr}
 572              	.LCFI3:
 573              		.cfi_def_cfa_offset 8
 574              		.cfi_offset 4, -8
 575              		.cfi_offset 14, -4
 291:FreeRTOS/src/port.c **** 
 576              		.loc 1 291 54 view .LVU97
 296:FreeRTOS/src/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 577              		.loc 1 296 52 view .LVU98
 297:FreeRTOS/src/port.c **** 
 578              		.loc 1 297 52 view .LVU99
 362:FreeRTOS/src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 579              		.loc 1 362 2 view .LVU100
 362:FreeRTOS/src/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 580              		.loc 1 362 23 is_stmt 0 view .LVU101
 581 0002 0E4B     		ldr	r3, .L29
 582 0004 1A68     		ldr	r2, [r3]
 583 0006 42F47F02 		orr	r2, r2, #16711680
 584 000a 1A60     		str	r2, [r3]
 363:FreeRTOS/src/port.c **** 
 585              		.loc 1 363 2 is_stmt 1 view .LVU102
 363:FreeRTOS/src/port.c **** 
 586              		.loc 1 363 23 is_stmt 0 view .LVU103
 587 000c 1A68     		ldr	r2, [r3]
 588 000e 42F07F42 		orr	r2, r2, #-16777216
 589 0012 1A60     		str	r2, [r3]
 367:FreeRTOS/src/port.c **** 
 590              		.loc 1 367 2 is_stmt 1 view .LVU104
 591 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 592              	.LVL14:
 370:FreeRTOS/src/port.c **** 
 593              		.loc 1 370 2 view .LVU105
 370:FreeRTOS/src/port.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 29


 594              		.loc 1 370 20 is_stmt 0 view .LVU106
 595 0018 0024     		movs	r4, #0
 596 001a 094B     		ldr	r3, .L29+4
 597 001c 1C60     		str	r4, [r3]
 373:FreeRTOS/src/port.c **** 
 598              		.loc 1 373 2 is_stmt 1 view .LVU107
 599 001e FFF7FEFF 		bl	vPortEnableVFP
 600              	.LVL15:
 376:FreeRTOS/src/port.c **** 
 601              		.loc 1 376 2 view .LVU108
 376:FreeRTOS/src/port.c **** 
 602              		.loc 1 376 17 is_stmt 0 view .LVU109
 603 0022 084A     		ldr	r2, .L29+8
 604 0024 1368     		ldr	r3, [r2]
 605 0026 43F04043 		orr	r3, r3, #-1073741824
 606 002a 1360     		str	r3, [r2]
 379:FreeRTOS/src/port.c **** 
 607              		.loc 1 379 2 is_stmt 1 view .LVU110
 608 002c FFF7FEFF 		bl	prvPortStartFirstTask
 609              	.LVL16:
 387:FreeRTOS/src/port.c **** 	prvTaskExitError();
 610              		.loc 1 387 2 view .LVU111
 611 0030 FFF7FEFF 		bl	vTaskSwitchContext
 612              	.LVL17:
 388:FreeRTOS/src/port.c **** 
 613              		.loc 1 388 2 view .LVU112
 614 0034 FFF7FEFF 		bl	prvTaskExitError
 615              	.LVL18:
 391:FreeRTOS/src/port.c **** }
 616              		.loc 1 391 2 view .LVU113
 392:FreeRTOS/src/port.c **** /*-----------------------------------------------------------*/
 617              		.loc 1 392 1 is_stmt 0 view .LVU114
 618 0038 2046     		mov	r0, r4
 619 003a 10BD     		pop	{r4, pc}
 620              	.L30:
 621              		.align	2
 622              	.L29:
 623 003c 20ED00E0 		.word	-536810208
 624 0040 00000000 		.word	.LANCHOR0
 625 0044 34EF00E0 		.word	-536809676
 626              		.cfi_endproc
 627              	.LFE8:
 629              		.section	.data.uxCriticalNesting,"aw"
 630              		.align	2
 631              		.set	.LANCHOR0,. + 0
 634              	uxCriticalNesting:
 635 0000 AAAAAAAA 		.word	-1431655766
 636              		.text
 637              	.Letext0:
 638              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 639              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 640              		.file 5 "FreeRTOS/inc/projdefs.h"
 641              		.file 6 "FreeRTOS/inc/task.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:18     .text.prvTaskExitError:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:25     .text.prvTaskExitError:0000000000000000 prvTaskExitError
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:80     .text.prvPortStartFirstTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:86     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:117    .text.vPortEnableVFP:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:123    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:147    .text.pxPortInitialiseStack:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:154    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:204    .text.pxPortInitialiseStack:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:209    .text.SVC_Handler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:216    .text.SVC_Handler:0000000000000000 SVC_Handler
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:237    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:237    .text.SVC_Handler:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:247    .text.vPortEndScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:254    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:268    .text.vPortEnterCritical:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:275    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:314    .text.vPortEnterCritical:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:319    .text.vPortExitCritical:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:326    .text.vPortExitCritical:0000000000000000 vPortExitCritical
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:366    .text.vPortExitCritical:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:371    .text.PendSV_Handler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:378    .text.PendSV_Handler:0000000000000000 PendSV_Handler
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:427    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:427    .text.PendSV_Handler:0000000000000060 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:437    .text.SysTick_Handler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:444    .text.SysTick_Handler:0000000000000000 SysTick_Handler
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:509    .text.SysTick_Handler:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:514    .text.vPortSetupTimerInterrupt:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:521    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:551    .text.vPortSetupTimerInterrupt:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:558    .text.xPortStartScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:565    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:623    .text.xPortStartScheduler:000000000000003c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:630    .data.uxCriticalNesting:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:634    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:146    .text.vPortEnableVFP:000000000000000e $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:1948   .text.vPortEnableVFP:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:116    .text.prvPortStartFirstTask:0000000000000022 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccqj1sw1.s:1948   .text.prvPortStartFirstTask:0000000000000024 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
