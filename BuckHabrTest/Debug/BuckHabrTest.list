
BuckHabrTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080018a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  7 .bss          00000048  2000006c  2000006c  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000080  200000b4  200000b4  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000024bf  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000662  00000000  00000000  0002255b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000a8  00000000  00000000  00022bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000009a7  00000000  00000000  00022c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ff6  00000000  00000000  0002360f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024605  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000734  00000000  00000000  00024684  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00024db8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001828 	.word	0x08001828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08001828 	.word	0x08001828

080001d0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4a1f      	ldr	r2, [pc, #124]	; (8000254 <SystemInit+0x84>)
 80001d6:	4b1f      	ldr	r3, [pc, #124]	; (8000254 <SystemInit+0x84>)
 80001d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80001e4:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <SystemInit+0x88>)
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <SystemInit+0x88>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80001f0:	4919      	ldr	r1, [pc, #100]	; (8000258 <SystemInit+0x88>)
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <SystemInit+0x88>)
 80001f4:	685a      	ldr	r2, [r3, #4]
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <SystemInit+0x8c>)
 80001f8:	4013      	ands	r3, r2
 80001fa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80001fc:	4a16      	ldr	r2, [pc, #88]	; (8000258 <SystemInit+0x88>)
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <SystemInit+0x88>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800020a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <SystemInit+0x88>)
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <SystemInit+0x88>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000216:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000218:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <SystemInit+0x88>)
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <SystemInit+0x88>)
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000222:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <SystemInit+0x88>)
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <SystemInit+0x88>)
 8000228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800022a:	f023 030f 	bic.w	r3, r3, #15
 800022e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000230:	4909      	ldr	r1, [pc, #36]	; (8000258 <SystemInit+0x88>)
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <SystemInit+0x88>)
 8000234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <SystemInit+0x90>)
 8000238:	4013      	ands	r3, r2
 800023a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <SystemInit+0x88>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <SystemInit+0x84>)
 8000244:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000248:	609a      	str	r2, [r3, #8]
#endif
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00
 8000258:	40021000 	.word	0x40021000
 800025c:	f87fc00c 	.word	0xf87fc00c
 8000260:	ff00fccc 	.word	0xff00fccc

08000264 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	2300      	movs	r3, #0
 8000278:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <SystemCoreClockUpdate+0xc0>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	f003 030c 	and.w	r3, r3, #12
 8000282:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d007      	beq.n	800029a <SystemCoreClockUpdate+0x36>
 800028a:	2b08      	cmp	r3, #8
 800028c:	d009      	beq.n	80002a2 <SystemCoreClockUpdate+0x3e>
 800028e:	2b00      	cmp	r3, #0
 8000290:	d12f      	bne.n	80002f2 <SystemCoreClockUpdate+0x8e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 8000294:	4a25      	ldr	r2, [pc, #148]	; (800032c <SystemCoreClockUpdate+0xc8>)
 8000296:	601a      	str	r2, [r3, #0]
      break;
 8000298:	e02f      	b.n	80002fa <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800029a:	4b23      	ldr	r3, [pc, #140]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 800029c:	4a23      	ldr	r2, [pc, #140]	; (800032c <SystemCoreClockUpdate+0xc8>)
 800029e:	601a      	str	r2, [r3, #0]
      break;
 80002a0:	e02b      	b.n	80002fa <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80002a2:	4b20      	ldr	r3, [pc, #128]	; (8000324 <SystemCoreClockUpdate+0xc0>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002aa:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <SystemCoreClockUpdate+0xc0>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002b4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	0c9b      	lsrs	r3, r3, #18
 80002ba:	3302      	adds	r3, #2
 80002bc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
      }
#else      
      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d106      	bne.n	80002d2 <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <SystemCoreClockUpdate+0xcc>)
 80002c8:	fb02 f303 	mul.w	r3, r2, r3
 80002cc:	4a16      	ldr	r2, [pc, #88]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 80002ce:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 80002d0:	e013      	b.n	80002fa <SystemCoreClockUpdate+0x96>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <SystemCoreClockUpdate+0xc0>)
 80002d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	3301      	adds	r3, #1
 80002dc:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <SystemCoreClockUpdate+0xc8>)
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e6:	68ba      	ldr	r2, [r7, #8]
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 80002ee:	6013      	str	r3, [r2, #0]
      break;
 80002f0:	e003      	b.n	80002fa <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <SystemCoreClockUpdate+0xc8>)
 80002f6:	601a      	str	r2, [r3, #0]
      break;
 80002f8:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <SystemCoreClockUpdate+0xc0>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <SystemCoreClockUpdate+0xd0>)
 8000306:	5cd3      	ldrb	r3, [r2, r3]
 8000308:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	fa22 f303 	lsr.w	r3, r2, r3
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <SystemCoreClockUpdate+0xc4>)
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000
 8000328:	20000004 	.word	0x20000004
 800032c:	007a1200 	.word	0x007a1200
 8000330:	003d0900 	.word	0x003d0900
 8000334:	08001844 	.word	0x08001844

08000338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000342:	4909      	ldr	r1, [pc, #36]	; (8000368 <NVIC_EnableIRQ+0x30>)
 8000344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000348:	095b      	lsrs	r3, r3, #5
 800034a:	79fa      	ldrb	r2, [r7, #7]
 800034c:	f002 021f 	and.w	r2, r2, #31
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <InitHRPWM>:
uint16_t adcResult = 0;
uint16_t dutyControl = 0;

/*********************************** Used functions *************************************/

void InitHRPWM (void) {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

	RCC->CFGR3   |= RCC_CFGR3_HRTIM1SW_PLL;
 8000370:	4a67      	ldr	r2, [pc, #412]	; (8000510 <InitHRPWM+0x1a4>)
 8000372:	4b67      	ldr	r3, [pc, #412]	; (8000510 <InitHRPWM+0x1a4>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_HRTIM1EN;
 800037c:	4a64      	ldr	r2, [pc, #400]	; (8000510 <InitHRPWM+0x1a4>)
 800037e:	4b64      	ldr	r3, [pc, #400]	; (8000510 <InitHRPWM+0x1a4>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000386:	6193      	str	r3, [r2, #24]

	/************************************************
	 *                Setting GPIO
	 ***********************************************/

	RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 8000388:	4a61      	ldr	r2, [pc, #388]	; (8000510 <InitHRPWM+0x1a4>)
 800038a:	4b61      	ldr	r3, [pc, #388]	; (8000510 <InitHRPWM+0x1a4>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000392:	6153      	str	r3, [r2, #20]

	GPIOA->MODER   &= ~GPIO_MODER_MODER8;
 8000394:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |= GPIO_MODER_MODER8_1;																		// Alternative PP
 80003a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8;																	// Very high speed
 80003b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80003c2:	6093      	str	r3, [r2, #8]

	GPIOA->MODER   &= ~GPIO_MODER_MODER9;
 80003c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80003d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |= GPIO_MODER_MODER9_1;
 80003d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e2:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;
 80003e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80003f2:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[1] |= 0xDD;																						// PA8 and PA9 - AF13
 80003f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003fe:	f043 03dd 	orr.w	r3, r3, #221	; 0xdd
 8000402:	6253      	str	r3, [r2, #36]	; 0x24

	/************************************************
	 *               Setting timer A
	 ***********************************************/

	HRTIM1->sCommonRegs.DLLCR |= HRTIM_DLLCR_CAL | HRTIM_DLLCR_CALEN;
 8000404:	4a43      	ldr	r2, [pc, #268]	; (8000514 <InitHRPWM+0x1a8>)
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <InitHRPWM+0x1a8>)
 8000408:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800040c:	f043 0303 	orr.w	r3, r3, #3
 8000410:	f8c2 33cc 	str.w	r3, [r2, #972]	; 0x3cc
	while ((HRTIM1->sCommonRegs.ISR & HRTIM_ISR_DLLRDY) == RESET);
 8000414:	bf00      	nop
 8000416:	4b3f      	ldr	r3, [pc, #252]	; (8000514 <InitHRPWM+0x1a8>)
 8000418:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800041c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f8      	beq.n	8000416 <InitHRPWM+0xaa>

	HRTIM1->sTimerxRegs[0].PERxR = PeriodTimerA;																// Period for timer A
 8000424:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <InitHRPWM+0x1a8>)
 8000426:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800042a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	HRTIM1->sTimerxRegs[0].CMP1xR = 0;																			// Duty for timer A
 800042e:	4b39      	ldr	r3, [pc, #228]	; (8000514 <InitHRPWM+0x1a8>)
 8000430:	2200      	movs	r2, #0
 8000432:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	HRTIM1->sTimerxRegs[0].OUTxR |= HRTIM_OUTR_DTEN;															// Deadtime enable
 8000436:	4a37      	ldr	r2, [pc, #220]	; (8000514 <InitHRPWM+0x1a8>)
 8000438:	4b36      	ldr	r3, [pc, #216]	; (8000514 <InitHRPWM+0x1a8>)
 800043a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800043e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000442:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	HRTIM1->sTimerxRegs[0].DTxR  |= HRTIM_DTR_DTPRSC_0 | HRTIM_DTR_DTPRSC_1;									// Tdtg = 6.94 ns
 8000446:	4a33      	ldr	r2, [pc, #204]	; (8000514 <InitHRPWM+0x1a8>)
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <InitHRPWM+0x1a8>)
 800044a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800044e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000452:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	HRTIM1->sTimerxRegs[0].DTxR  |= HRTIM_DTR_DTR_0 | HRTIM_DTR_DTR_1 | HRTIM_DTR_DTR_2 | HRTIM_DTR_DTR_3;		// Deadtime rising = 15*Ttg = 104 ns
 8000456:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <InitHRPWM+0x1a8>)
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <InitHRPWM+0x1a8>)
 800045a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800045e:	f043 030f 	orr.w	r3, r3, #15
 8000462:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	HRTIM1->sTimerxRegs[0].DTxR  |= HRTIM_DTR_DTF_0 | HRTIM_DTR_DTF_1 | HRTIM_DTR_DTF_2 | HRTIM_DTR_DTF_3;		// Deadtime falling = 15*Ttg = 104 ns
 8000466:	4a2b      	ldr	r2, [pc, #172]	; (8000514 <InitHRPWM+0x1a8>)
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <InitHRPWM+0x1a8>)
 800046a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800046e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000472:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	HRTIM1->sTimerxRegs[0].DTxR  |= HRTIM_DTR_DTFSLK | HRTIM_DTR_DTRSLK;
 8000476:	4a27      	ldr	r2, [pc, #156]	; (8000514 <InitHRPWM+0x1a8>)
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <InitHRPWM+0x1a8>)
 800047a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800047e:	f043 2340 	orr.w	r3, r3, #1073758208	; 0x40004000
 8000482:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

	HRTIM1->sTimerxRegs[0].SETx1R |= HRTIM_SET1R_PER;															// Event forces the output to active state for TA1
 8000486:	4a23      	ldr	r2, [pc, #140]	; (8000514 <InitHRPWM+0x1a8>)
 8000488:	4b22      	ldr	r3, [pc, #136]	; (8000514 <InitHRPWM+0x1a8>)
 800048a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	HRTIM1->sTimerxRegs[0].RSTx1R |= HRTIM_RST1R_CMP1;															// Event forces the output to inactive state for TA1
 8000496:	4a1f      	ldr	r2, [pc, #124]	; (8000514 <InitHRPWM+0x1a8>)
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <InitHRPWM+0x1a8>)
 800049a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

	/************************************************
	* ADC trigger intialization (with CMP2 event)
	************************************************/

	HRTIM1->sTimerxRegs[0].CMP2xR = PeriodTimerA / 10;															// Samples in middle of ON time
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <InitHRPWM+0x1a8>)
 80004a8:	f241 1294 	movw	r2, #4500	; 0x1194
 80004ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	HRTIM1->sCommonRegs.CR1 |= HRTIM_CR1_ADC1USRC_0;															// ADC trigger 1 update: Timer A
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <InitHRPWM+0x1a8>)
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <InitHRPWM+0x1a8>)
 80004b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80004b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004bc:	f8c2 3380 	str.w	r3, [r2, #896]	; 0x380
	HRTIM1->sCommonRegs.ADC1R |= HRTIM_ADC1R_AD1TAC2;															// ADC trigger 1 event: Timer A compare 2
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <InitHRPWM+0x1a8>)
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <InitHRPWM+0x1a8>)
 80004c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80004c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004cc:	f8c2 33bc 	str.w	r3, [r2, #956]	; 0x3bc

	/************************************************
	 *                 HRTIM start
	 ***********************************************/

	HRTIM1->sCommonRegs.OENR |= HRTIM_OENR_TA1OEN | HRTIM_OENR_TA2OEN;											// Enable output PWM for TA1 and TA2
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <InitHRPWM+0x1a8>)
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <InitHRPWM+0x1a8>)
 80004d4:	f8d3 3394 	ldr.w	r3, [r3, #916]	; 0x394
 80004d8:	f043 0303 	orr.w	r3, r3, #3
 80004dc:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394

	HRTIM1->sTimerxRegs[0].TIMxCR |= HRTIM_TIMCR_CONT;															// Continuous mode
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <InitHRPWM+0x1a8>)
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <InitHRPWM+0x1a8>)
 80004e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e8:	f043 0308 	orr.w	r3, r3, #8
 80004ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	HRTIM1->sMasterRegs.MPER = 65000;																			// Period for master timer
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <InitHRPWM+0x1a8>)
 80004f2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80004f6:	615a      	str	r2, [r3, #20]
	HRTIM1->sMasterRegs.MCR |= HRTIM_MCR_MCEN | HRTIM_MCR_TACEN;												// Enable counter for Master and timer A
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <InitHRPWM+0x1a8>)
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <InitHRPWM+0x1a8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000502:	6013      	str	r3, [r2, #0]

}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40017400 	.word	0x40017400

08000518 <SetDutyTimerA>:

void SetDutyTimerA (uint16_t duty) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]

	HRTIM1->sTimerxRegs[0].CMP1xR = duty;
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <SetDutyTimerA+0x20>)
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40017400 	.word	0x40017400

0800053c <InitBasicADC>:

void InitBasicADC (void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000540:	4a2e      	ldr	r2, [pc, #184]	; (80005fc <InitBasicADC+0xc0>)
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <InitBasicADC+0xc0>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800054c:	4a2b      	ldr	r2, [pc, #172]	; (80005fc <InitBasicADC+0xc0>)
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <InitBasicADC+0xc0>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000556:	6153      	str	r3, [r2, #20]

	/************************************************
	 *                 Calibration
	 ***********************************************/

	ADC2->CR &= ~ADC_CR_ADVREGEN;
 8000558:	4a29      	ldr	r2, [pc, #164]	; (8000600 <InitBasicADC+0xc4>)
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <InitBasicADC+0xc4>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000562:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADVREGEN_0;													// Vref enable
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <InitBasicADC+0xc4>)
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <InitBasicADC+0xc4>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6093      	str	r3, [r2, #8]
	Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 fabd 	bl	8000af0 <Delay>
	ADC2->CR &= ~ADC_CR_ADCALDIF;
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <InitBasicADC+0xc4>)
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <InitBasicADC+0xc4>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000580:	6093      	str	r3, [r2, #8]

	ADC2->CR |= ADC_CR_ADCAL;														// Start calibration
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <InitBasicADC+0xc4>)
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <InitBasicADC+0xc4>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800058c:	6093      	str	r3, [r2, #8]
	while (ADC2->CR & ADC_CR_ADCAL);												// Wait end calibration
 800058e:	bf00      	nop
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <InitBasicADC+0xc4>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dbfb      	blt.n	8000590 <InitBasicADC+0x54>

	/************************************************
	 *       Select event trigger and channel
	 ***********************************************/

	ADC2->CFGR |= ADC_CFGR_EXTEN_0;													// Enable start conversion external trigger
 8000598:	4a19      	ldr	r2, [pc, #100]	; (8000600 <InitBasicADC+0xc4>)
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <InitBasicADC+0xc4>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a2:	60d3      	str	r3, [r2, #12]
	ADC2->CFGR |= ADC_CFGR_EXTSEL_0 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_2;		// Event 7 - HRTIM
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <InitBasicADC+0xc4>)
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <InitBasicADC+0xc4>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80005ae:	60d3      	str	r3, [r2, #12]

	ADC2->SQR1 |= ADC_SQR1_SQ1_0 | ADC_SQR1_SQ1_2;									// Select ADC2 channel IN5
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <InitBasicADC+0xc4>)
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <InitBasicADC+0xc4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2->SQR1 &= ~ADC_SQR1_L;														// Length regular ADC channel = 1
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <InitBasicADC+0xc4>)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <InitBasicADC+0xc4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f023 030f 	bic.w	r3, r3, #15
 80005c6:	6313      	str	r3, [r2, #48]	; 0x30

	ADC2->IER |= ADC_IER_EOCIE;														// Interrupt enable
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <InitBasicADC+0xc4>)
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <InitBasicADC+0xc4>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC1_2_IRQn); 													// enable interrupt ADC1 and ADC2
 80005d4:	2012      	movs	r0, #18
 80005d6:	f7ff feaf 	bl	8000338 <NVIC_EnableIRQ>

	/************************************************
	 *                 Start ADC
	 ***********************************************/

	ADC2->CR |= ADC_CR_ADEN;														// Enable ADC2
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <InitBasicADC+0xc4>)
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <InitBasicADC+0xc4>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6093      	str	r3, [r2, #8]
	Delay(10);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fa82 	bl	8000af0 <Delay>
	ADC2->CR |= ADC_CR_ADSTART;
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <InitBasicADC+0xc4>)
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <InitBasicADC+0xc4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6093      	str	r3, [r2, #8]

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	50000100 	.word	0x50000100

08000604 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	ADC2->ISR |= ADC_ISR_EOC;
 8000608:	4a11      	ldr	r2, [pc, #68]	; (8000650 <ADC1_2_IRQHandler+0x4c>)
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <ADC1_2_IRQHandler+0x4c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6013      	str	r3, [r2, #0]

	adcResult = ADC2->DR;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <ADC1_2_IRQHandler+0x4c>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <ADC1_2_IRQHandler+0x50>)
 800061c:	801a      	strh	r2, [r3, #0]

	if (adcResult > 2000) {
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <ADC1_2_IRQHandler+0x50>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000626:	d906      	bls.n	8000636 <ADC1_2_IRQHandler+0x32>

		dutyControl = dutyControl - 10;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <ADC1_2_IRQHandler+0x54>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	3b0a      	subs	r3, #10
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <ADC1_2_IRQHandler+0x54>)
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	e005      	b.n	8000642 <ADC1_2_IRQHandler+0x3e>
	}
	else
	{
		dutyControl = dutyControl + 10;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <ADC1_2_IRQHandler+0x54>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	330a      	adds	r3, #10
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <ADC1_2_IRQHandler+0x54>)
 8000640:	801a      	strh	r2, [r3, #0]
	}

	SetDutyTimerA(dutyControl);
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <ADC1_2_IRQHandler+0x54>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff66 	bl	8000518 <SetDutyTimerA>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	50000100 	.word	0x50000100
 8000654:	20000088 	.word	0x20000088
 8000658:	2000008a 	.word	0x2000008a

0800065c <NVIC_EnableIRQ>:
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <NVIC_EnableIRQ+0x30>)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	095b      	lsrs	r3, r3, #5
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	f002 021f 	and.w	r2, r2, #31
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <InitBasicPeripherals>:

volatile uint32_t delayCounter = 0;

/*********************************** Used functions *******************************/

void InitBasicPeripherals (void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	InitFaultLED();
 8000694:	f000 f80c 	bl	80006b0 <InitFaultLED>
	InitStatusLED();
 8000698:	f000 f8d2 	bl	8000840 <InitStatusLED>
	StartInitClock();
 800069c:	f000 f90e 	bl	80008bc <StartInitClock>
	InitSignalBuzzer();
 80006a0:	f000 f990 	bl	80009c4 <InitSignalBuzzer>
	InitSysTick();
 80006a4:	f000 f9fe 	bl	8000aa4 <InitSysTick>
	InitBasicUSART1();
 80006a8:	f000 fa36 	bl	8000b18 <InitBasicUSART1>

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <InitFaultLED>:

void InitFaultLED (void) {
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

	RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
 80006b4:	4a23      	ldr	r2, [pc, #140]	; (8000744 <InitFaultLED+0x94>)
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <InitFaultLED+0x94>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006be:	6153      	str	r3, [r2, #20]

	GPIOC->MODER &= ~GPIO_MODER_MODER0;
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <InitFaultLED+0x98>)
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <InitFaultLED+0x98>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f023 0303 	bic.w	r3, r3, #3
 80006ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER0_0;		// Output PP
 80006cc:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <InitFaultLED+0x98>)
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <InitFaultLED+0x98>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER1;
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <InitFaultLED+0x98>)
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <InitFaultLED+0x98>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f023 030c 	bic.w	r3, r3, #12
 80006e2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;		// Output PP
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <InitFaultLED+0x98>)
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <InitFaultLED+0x98>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER2;
 80006f0:	4a15      	ldr	r2, [pc, #84]	; (8000748 <InitFaultLED+0x98>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <InitFaultLED+0x98>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006fa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER2_0;		// Output PP
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <InitFaultLED+0x98>)
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <InitFaultLED+0x98>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER3;
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <InitFaultLED+0x98>)
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <InitFaultLED+0x98>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000712:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER3_0;		// Output PP
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <InitFaultLED+0x98>)
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <InitFaultLED+0x98>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER13;
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <InitFaultLED+0x98>)
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <InitFaultLED+0x98>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800072a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER13_0;		// Output PP
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <InitFaultLED+0x98>)
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <InitFaultLED+0x98>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000736:	6013      	str	r3, [r2, #0]

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <UseFaultLED>:

void UseFaultLED (numberFault number, status statusLED) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]

	if (number == 1) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d111      	bne.n	8000786 <UseFaultLED+0x3a>
		if (statusLED == 0) {GPIOC->BSRR |= GPIO_BSRR_BR_13;}
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <UseFaultLED+0x28>
 8000768:	4a34      	ldr	r2, [pc, #208]	; (800083c <UseFaultLED+0xf0>)
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <UseFaultLED+0xf0>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000772:	6193      	str	r3, [r2, #24]
		if (statusLED == 1) {GPIOC->BSRR |= GPIO_BSRR_BS_13;}
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d105      	bne.n	8000786 <UseFaultLED+0x3a>
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <UseFaultLED+0xf0>)
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <UseFaultLED+0xf0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000784:	6193      	str	r3, [r2, #24]
	}

	if (number == 2) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d111      	bne.n	80007b0 <UseFaultLED+0x64>
		if (statusLED == 0) {GPIOC->BSRR |= GPIO_BSRR_BR_0;}
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d105      	bne.n	800079e <UseFaultLED+0x52>
 8000792:	4a2a      	ldr	r2, [pc, #168]	; (800083c <UseFaultLED+0xf0>)
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <UseFaultLED+0xf0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800079c:	6193      	str	r3, [r2, #24]
		if (statusLED == 1) {GPIOC->BSRR |= GPIO_BSRR_BS_0;}
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d105      	bne.n	80007b0 <UseFaultLED+0x64>
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <UseFaultLED+0xf0>)
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <UseFaultLED+0xf0>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6193      	str	r3, [r2, #24]
	}

	if (number == 3) {
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d111      	bne.n	80007da <UseFaultLED+0x8e>
		if (statusLED == 0) {GPIOC->BSRR |= GPIO_BSRR_BR_1;}
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d105      	bne.n	80007c8 <UseFaultLED+0x7c>
 80007bc:	4a1f      	ldr	r2, [pc, #124]	; (800083c <UseFaultLED+0xf0>)
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <UseFaultLED+0xf0>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c6:	6193      	str	r3, [r2, #24]
		if (statusLED == 1) {GPIOC->BSRR |= GPIO_BSRR_BS_1;}
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d105      	bne.n	80007da <UseFaultLED+0x8e>
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <UseFaultLED+0xf0>)
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <UseFaultLED+0xf0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6193      	str	r3, [r2, #24]
	}

	if (number == 4) {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d111      	bne.n	8000804 <UseFaultLED+0xb8>
		if (statusLED == 0) {GPIOC->BSRR |= GPIO_BSRR_BR_2;}
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d105      	bne.n	80007f2 <UseFaultLED+0xa6>
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <UseFaultLED+0xf0>)
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <UseFaultLED+0xf0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6193      	str	r3, [r2, #24]
		if (statusLED == 1) {GPIOC->BSRR |= GPIO_BSRR_BS_2;}
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d105      	bne.n	8000804 <UseFaultLED+0xb8>
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <UseFaultLED+0xf0>)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <UseFaultLED+0xf0>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
	}

	if (number == 5) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d111      	bne.n	800082e <UseFaultLED+0xe2>
		if (statusLED == 0) {GPIOC->BSRR |= GPIO_BSRR_BR_3;}
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d105      	bne.n	800081c <UseFaultLED+0xd0>
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <UseFaultLED+0xf0>)
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <UseFaultLED+0xf0>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800081a:	6193      	str	r3, [r2, #24]
		if (statusLED == 1) {GPIOC->BSRR |= GPIO_BSRR_BS_3;}
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d105      	bne.n	800082e <UseFaultLED+0xe2>
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <UseFaultLED+0xf0>)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <UseFaultLED+0xf0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6193      	str	r3, [r2, #24]
	}

}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	48000800 	.word	0x48000800

08000840 <InitStatusLED>:

void InitStatusLED (void) {
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

	RCC->AHBENR  |= RCC_AHBENR_GPIOBEN;
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <InitStatusLED+0x34>)
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <InitStatusLED+0x34>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084e:	6153      	str	r3, [r2, #20]

	GPIOB->MODER &= ~GPIO_MODER_MODER5;
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <InitStatusLED+0x38>)
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <InitStatusLED+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800085a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER5_0;		// Output PP
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <InitStatusLED+0x38>)
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <InitStatusLED+0x38>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000866:	6013      	str	r3, [r2, #0]

}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400

0800087c <UseStatusLED>:

void UseStatusLED (status statusLED) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]

	if (statusLED == 0) {GPIOB->BSRR |= GPIO_BSRR_BR_5;}
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <UseStatusLED+0x1c>
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <UseStatusLED+0x3c>)
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <UseStatusLED+0x3c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000896:	6193      	str	r3, [r2, #24]
	if (statusLED == 1) {GPIOB->BSRR |= GPIO_BSRR_BS_5;}
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d105      	bne.n	80008aa <UseStatusLED+0x2e>
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <UseStatusLED+0x3c>)
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <UseStatusLED+0x3c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	6193      	str	r3, [r2, #24]

}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	48000400 	.word	0x48000400

080008bc <StartInitClock>:

void StartInitClock (void) {
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; 																// Enable HSE
 80008c0:	4a24      	ldr	r2, [pc, #144]	; (8000954 <StartInitClock+0x98>)
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <StartInitClock+0x98>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ca:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80008cc:	bf00      	nop
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <StartInitClock+0x98>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f9      	beq.n	80008ce <StartInitClock+0x12>

	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <StartInitClock+0x9c>)
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <StartInitClock+0x9c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6013      	str	r3, [r2, #0]

	RCC->CFGR  |= RCC_CFGR_PLLMUL9;															// PLL mult x9
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <StartInitClock+0x98>)
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <StartInitClock+0x98>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80008f0:	6053      	str	r3, [r2, #4]
	RCC->CFGR  |= RCC_CFGR_PLLSRC;															// Source HSE
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <StartInitClock+0x98>)
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <StartInitClock+0x98>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fc:	6053      	str	r3, [r2, #4]
	RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV10;													// ADC source AHB/10
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <StartInitClock+0x98>)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <StartInitClock+0x98>)
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	f443 73a8 	orr.w	r3, r3, #336	; 0x150
 8000908:	62d3      	str	r3, [r2, #44]	; 0x2c

	RCC->CR |= RCC_CR_PLLON;
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <StartInitClock+0x98>)
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <StartInitClock+0x98>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000914:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0){}
 8000916:	bf00      	nop
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <StartInitClock+0x98>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f9      	beq.n	8000918 <StartInitClock+0x5c>

	RCC->CFGR &= ~RCC_CFGR_SW;
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <StartInitClock+0x98>)
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <StartInitClock+0x98>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f023 0303 	bic.w	r3, r3, #3
 800092e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL; 															// Select source SYSCLK = PLL
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <StartInitClock+0x98>)
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <StartInitClock+0x98>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1) {} 									// Wait till PLL is used
 800093c:	bf00      	nop
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <StartInitClock+0x98>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 030c 	and.w	r3, r3, #12
 8000946:	2b08      	cmp	r3, #8
 8000948:	d1f9      	bne.n	800093e <StartInitClock+0x82>

}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	40022000 	.word	0x40022000

0800095c <EnableOutputMCO>:

void EnableOutputMCO (void) {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;							// Enable clock port A
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <EnableOutputMCO+0x64>)
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <EnableOutputMCO+0x64>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6153      	str	r3, [r2, #20]

	GPIOA->MODER   &= ~GPIO_MODER_MODER8;
 800096c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800097a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |= GPIO_MODER_MODER8_1;						// Alternative PP
 800097c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8;					// Very high speed
 800098c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800099a:	6093      	str	r3, [r2, #8]

	RCC->CFGR |= RCC_CFGR_MCO_PLL;								// Source PLL
 800099c:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <EnableOutputMCO+0x64>)
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <EnableOutputMCO+0x64>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLNODIV;								// PLL div 1 for MCO
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <EnableOutputMCO+0x64>)
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <EnableOutputMCO+0x64>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b2:	6053      	str	r3, [r2, #4]

//	RCC->CFGR |= RCC_CFGR_MCO_SYSCLK;							// Source SYSCLK

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <InitSignalBuzzer>:

void InitSignalBuzzer (void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

	RCC->AHBENR  |= RCC_AHBENR_GPIOCEN;
 80009c8:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <InitSignalBuzzer+0x64>)
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <InitSignalBuzzer+0x64>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d2:	6153      	str	r3, [r2, #20]

	GPIOC->MODER &= ~GPIO_MODER_MODER10;
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <InitSignalBuzzer+0x68>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <InitSignalBuzzer+0x68>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80009de:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER10_0;		// Output PP
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <InitSignalBuzzer+0x68>)
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <InitSignalBuzzer+0x68>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ea:	6013      	str	r3, [r2, #0]


	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;			// enable clock for basic TIM6
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <InitSignalBuzzer+0x64>)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <InitSignalBuzzer+0x64>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 18-1;							// div, frequency 4 kHz
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <InitSignalBuzzer+0x6c>)
 80009fa:	2211      	movs	r2, #17
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000; 							// count to 1000
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <InitSignalBuzzer+0x6c>)
 8000a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= TIM_DIER_UIE; 				// enable interrupt for timer
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <InitSignalBuzzer+0x6c>)
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <InitSignalBuzzer+0x6c>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= TIM_CR1_CEN; 					// start count
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <InitSignalBuzzer+0x6c>)
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <InitSignalBuzzer+0x6c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM3_IRQn); 					// enable interrupt TIM3_IRQHandler
 8000a1e:	201d      	movs	r0, #29
 8000a20:	f7ff fe1c 	bl	800065c <NVIC_EnableIRQ>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000800 	.word	0x48000800
 8000a30:	40000400 	.word	0x40000400

08000a34 <UseSignalBuzzer>:

void UseSignalBuzzer (status statusBuzzer) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]

	if (statusBuzzer == 0) {TIM3->CR1 &= ~TIM_CR1_CEN;}
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <UseSignalBuzzer+0x1c>
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <UseSignalBuzzer+0x3c>)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <UseSignalBuzzer+0x3c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]
	if (statusBuzzer == 1) {TIM3->CR1 |= TIM_CR1_CEN;}
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d105      	bne.n	8000a62 <UseSignalBuzzer+0x2e>
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <UseSignalBuzzer+0x3c>)
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <UseSignalBuzzer+0x3c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]

}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40000400 	.word	0x40000400

08000a74 <TIM3_IRQHandler>:


void TIM3_IRQHandler (void) {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

	TIM3->SR &= ~TIM_SR_UIF;
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <TIM3_IRQHandler+0x28>)
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <TIM3_IRQHandler+0x28>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	6113      	str	r3, [r2, #16]

	GPIOC->ODR ^= GPIO_ODR_10;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <TIM3_IRQHandler+0x2c>)
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <TIM3_IRQHandler+0x2c>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000a8e:	6153      	str	r3, [r2, #20]

}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40000400 	.word	0x40000400
 8000aa0:	48000800 	.word	0x48000800

08000aa4 <InitSysTick>:

void InitSysTick (void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

	SysTick->LOAD = 72000000UL/1000 - 1; 		// 1 ms
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <InitSysTick+0x28>)
 8000aaa:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <InitSysTick+0x2c>)
 8000aac:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 72000000UL/1000 - 1; 		// Set value
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <InitSysTick+0x28>)
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <InitSysTick+0x2c>)
 8000ab2:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk  | SysTick_CTRL_ENABLE_Msk;
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <InitSysTick+0x28>)
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <InitSysTick+0x28>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f043 0307 	orr.w	r3, r3, #7
 8000abe:	6013      	str	r3, [r2, #0]

}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010
 8000ad0:	0001193f 	.word	0x0001193f

08000ad4 <SysTick_Handler>:

void SysTick_Handler (void) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

	delayCounter--;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Handler+0x18>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <SysTick_Handler+0x18>)
 8000ae0:	6013      	str	r3, [r2, #0]

}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	2000008c 	.word	0x2000008c

08000af0 <Delay>:

void Delay (uint32_t setDelay) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	delayCounter = setDelay;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <Delay+0x24>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
	while (delayCounter != 0);
 8000afe:	bf00      	nop
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <Delay+0x24>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1fb      	bne.n	8000b00 <Delay+0x10>

}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	2000008c 	.word	0x2000008c

08000b18 <InitBasicUSART1>:

void InitBasicUSART1 (void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

	RCC->AHBENR  |= RCC_AHBENR_GPIOBEN;
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <InitBasicUSART1+0x60>)
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <InitBasicUSART1+0x60>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b26:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <InitBasicUSART1+0x60>)
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <InitBasicUSART1+0x60>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6193      	str	r3, [r2, #24]

	/************************************
	 *    UART1: TX - PB6, RX - PB7
	 ***********************************/

	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 8000b34:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b3e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER6_1;		// Output AF PP
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b4a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |= (7 << 28) | (7 << 24);		// Alternative function: TX->PB6, RX->PB7
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <InitBasicUSART1+0x64>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	f043 43ee 	orr.w	r3, r3, #1996488704	; 0x77000000
 8000b56:	6213      	str	r3, [r2, #32]

	/************************************
	 *    		Setting UART1
	 ***********************************/

	USART1->BRR = 0x1D4C;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <InitBasicUSART1+0x68>)
 8000b5a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b5e:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_UE | USART_CR1_TE;
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <InitBasicUSART1+0x68>)
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <InitBasicUSART1+0x68>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f043 0309 	orr.w	r3, r3, #9
 8000b6a:	6013      	str	r3, [r2, #0]

}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000400 	.word	0x48000400
 8000b80:	40013800 	.word	0x40013800

08000b84 <SendDataUSART1>:

void SendDataUSART1 (uint8_t data) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]

	while (!(USART1->ISR & USART_ISR_TC));
 8000b8e:	bf00      	nop
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <SendDataUSART1+0x2c>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f9      	beq.n	8000b90 <SendDataUSART1+0xc>
	USART1->TDR = data;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SendDataUSART1+0x2c>)
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	851a      	strh	r2, [r3, #40]	; 0x28

}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <SendCharUSART1>:

void SendCharUSART1 (char chr) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]

	while (!(USART1->ISR & USART_ISR_TC));
 8000bbe:	bf00      	nop
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <SendCharUSART1+0x2c>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f9      	beq.n	8000bc0 <SendCharUSART1+0xc>
	USART1->TDR = chr;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SendCharUSART1+0x2c>)
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	851a      	strh	r2, [r3, #40]	; 0x28

}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40013800 	.word	0x40013800

08000be4 <SendStringUSART1>:

void SendStringUSART1 (char* str) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

	while(str[i])
 8000bf0:	e009      	b.n	8000c06 <SendStringUSART1+0x22>
	SendCharUSART1 (str[i++]);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	73fa      	strb	r2, [r7, #15]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffd7 	bl	8000bb4 <SendCharUSART1>
	while(str[i])
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1ef      	bne.n	8000bf2 <SendStringUSART1+0xe>

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop

08000c1c <main>:
#include "main.h"

extern uint16_t adcResult;
char buffer[20];

int main (void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

	InitBasicPeripherals();
 8000c20:	f7ff fd36 	bl	8000690 <InitBasicPeripherals>
//	UseFaultLED (Fault2, Enable);
//	UseFaultLED (Fault3, Enable);
//	UseFaultLED (Fault4, Enable);
//	UseFaultLED (Fault5, Enable);

	UseSignalBuzzer(Disable);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff05 	bl	8000a34 <UseSignalBuzzer>

	InitHRPWM();
 8000c2a:	f7ff fb9f 	bl	800036c <InitHRPWM>
	InitBasicADC();
 8000c2e:	f7ff fc85 	bl	800053c <InitBasicADC>


	while(1)
	{

		Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f7ff ff5b 	bl	8000af0 <Delay>
		UseStatusLED(Enable);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fe1e 	bl	800087c <UseStatusLED>
		Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f7ff ff54 	bl	8000af0 <Delay>
		UseStatusLED(Disable);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fe17 	bl	800087c <UseStatusLED>

		sprintf(buffer, "%d\r\n", adcResult);
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <main+0x48>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <main+0x4c>)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <main+0x50>)
 8000c58:	f000 f8d8 	bl	8000e0c <siprintf>
		SendStringUSART1(buffer);
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <main+0x50>)
 8000c5e:	f7ff ffc1 	bl	8000be4 <SendStringUSART1>
		Delay(1000);
 8000c62:	e7e6      	b.n	8000c32 <main+0x16>
 8000c64:	20000088 	.word	0x20000088
 8000c68:	0800185c 	.word	0x0800185c
 8000c6c:	2000009c 	.word	0x2000009c
 8000c70:	080018a4 	.word	0x080018a4
 8000c74:	20000000 	.word	0x20000000
 8000c78:	2000006c 	.word	0x2000006c
 8000c7c:	2000006c 	.word	0x2000006c
 8000c80:	200000b4 	.word	0x200000b4
	...

08000c90 <memchr>:
 8000c90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c94:	2a10      	cmp	r2, #16
 8000c96:	db2b      	blt.n	8000cf0 <memchr+0x60>
 8000c98:	f010 0f07 	tst.w	r0, #7
 8000c9c:	d008      	beq.n	8000cb0 <memchr+0x20>
 8000c9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ca2:	3a01      	subs	r2, #1
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d02d      	beq.n	8000d04 <memchr+0x74>
 8000ca8:	f010 0f07 	tst.w	r0, #7
 8000cac:	b342      	cbz	r2, 8000d00 <memchr+0x70>
 8000cae:	d1f6      	bne.n	8000c9e <memchr+0xe>
 8000cb0:	b4f0      	push	{r4, r5, r6, r7}
 8000cb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000cb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000cba:	f022 0407 	bic.w	r4, r2, #7
 8000cbe:	f07f 0700 	mvns.w	r7, #0
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000cc8:	3c08      	subs	r4, #8
 8000cca:	ea85 0501 	eor.w	r5, r5, r1
 8000cce:	ea86 0601 	eor.w	r6, r6, r1
 8000cd2:	fa85 f547 	uadd8	r5, r5, r7
 8000cd6:	faa3 f587 	sel	r5, r3, r7
 8000cda:	fa86 f647 	uadd8	r6, r6, r7
 8000cde:	faa5 f687 	sel	r6, r5, r7
 8000ce2:	b98e      	cbnz	r6, 8000d08 <memchr+0x78>
 8000ce4:	d1ee      	bne.n	8000cc4 <memchr+0x34>
 8000ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ce8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000cec:	f002 0207 	and.w	r2, r2, #7
 8000cf0:	b132      	cbz	r2, 8000d00 <memchr+0x70>
 8000cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	ea83 0301 	eor.w	r3, r3, r1
 8000cfc:	b113      	cbz	r3, 8000d04 <memchr+0x74>
 8000cfe:	d1f8      	bne.n	8000cf2 <memchr+0x62>
 8000d00:	2000      	movs	r0, #0
 8000d02:	4770      	bx	lr
 8000d04:	3801      	subs	r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	bf06      	itte	eq
 8000d0c:	4635      	moveq	r5, r6
 8000d0e:	3803      	subeq	r0, #3
 8000d10:	3807      	subne	r0, #7
 8000d12:	f015 0f01 	tst.w	r5, #1
 8000d16:	d107      	bne.n	8000d28 <memchr+0x98>
 8000d18:	3001      	adds	r0, #1
 8000d1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000d1e:	bf02      	ittt	eq
 8000d20:	3001      	addeq	r0, #1
 8000d22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000d26:	3001      	addeq	r0, #1
 8000d28:	bcf0      	pop	{r4, r5, r6, r7}
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
	ldr	r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopForever+0x16>)
	cmp	r2, r3
 8000d56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f7ff fa39 	bl	80001d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f000 f811 	bl	8000d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff ff5b 	bl	8000c1c <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000d6c:	080018a4 	.word	0x080018a4
	ldr	r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d74:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8000d78:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8000d7c:	200000b4 	.word	0x200000b4

08000d80 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <BusFault_Handler>
	...

08000d84 <__libc_init_array>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	4e0d      	ldr	r6, [pc, #52]	; (8000dbc <__libc_init_array+0x38>)
 8000d88:	4c0d      	ldr	r4, [pc, #52]	; (8000dc0 <__libc_init_array+0x3c>)
 8000d8a:	1ba4      	subs	r4, r4, r6
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	2500      	movs	r5, #0
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	d109      	bne.n	8000da8 <__libc_init_array+0x24>
 8000d94:	4e0b      	ldr	r6, [pc, #44]	; (8000dc4 <__libc_init_array+0x40>)
 8000d96:	4c0c      	ldr	r4, [pc, #48]	; (8000dc8 <__libc_init_array+0x44>)
 8000d98:	f000 fd48 	bl	800182c <_init>
 8000d9c:	1ba4      	subs	r4, r4, r6
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	2500      	movs	r5, #0
 8000da2:	42a5      	cmp	r5, r4
 8000da4:	d105      	bne.n	8000db2 <__libc_init_array+0x2e>
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dac:	4798      	blx	r3
 8000dae:	3501      	adds	r5, #1
 8000db0:	e7ee      	b.n	8000d90 <__libc_init_array+0xc>
 8000db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db6:	4798      	blx	r3
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7f2      	b.n	8000da2 <__libc_init_array+0x1e>
 8000dbc:	0800189c 	.word	0x0800189c
 8000dc0:	0800189c 	.word	0x0800189c
 8000dc4:	0800189c 	.word	0x0800189c
 8000dc8:	080018a0 	.word	0x080018a0

08000dcc <_siprintf_r>:
 8000dcc:	b40c      	push	{r2, r3}
 8000dce:	b510      	push	{r4, lr}
 8000dd0:	b09c      	sub	sp, #112	; 0x70
 8000dd2:	ab1e      	add	r3, sp, #120	; 0x78
 8000dd4:	9102      	str	r1, [sp, #8]
 8000dd6:	9106      	str	r1, [sp, #24]
 8000dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ddc:	9104      	str	r1, [sp, #16]
 8000dde:	9107      	str	r1, [sp, #28]
 8000de0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000de8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8000dec:	f44f 7402 	mov.w	r4, #520	; 0x208
 8000df0:	a902      	add	r1, sp, #8
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f8ad 4014 	strh.w	r4, [sp, #20]
 8000df8:	f000 f902 	bl	8001000 <_svfiprintf_r>
 8000dfc:	9b02      	ldr	r3, [sp, #8]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	b01c      	add	sp, #112	; 0x70
 8000e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e08:	b002      	add	sp, #8
 8000e0a:	4770      	bx	lr

08000e0c <siprintf>:
 8000e0c:	b40e      	push	{r1, r2, r3}
 8000e0e:	b500      	push	{lr}
 8000e10:	b09c      	sub	sp, #112	; 0x70
 8000e12:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000e16:	ab1d      	add	r3, sp, #116	; 0x74
 8000e18:	f8ad 1014 	strh.w	r1, [sp, #20]
 8000e1c:	9002      	str	r0, [sp, #8]
 8000e1e:	9006      	str	r0, [sp, #24]
 8000e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <siprintf+0x44>)
 8000e26:	9104      	str	r1, [sp, #16]
 8000e28:	9107      	str	r1, [sp, #28]
 8000e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e32:	f8ad 1016 	strh.w	r1, [sp, #22]
 8000e36:	6800      	ldr	r0, [r0, #0]
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	a902      	add	r1, sp, #8
 8000e3c:	f000 f8e0 	bl	8001000 <_svfiprintf_r>
 8000e40:	9b02      	ldr	r3, [sp, #8]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	b01c      	add	sp, #112	; 0x70
 8000e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e4c:	b003      	add	sp, #12
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008

08000e54 <__ssputs_r>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	688e      	ldr	r6, [r1, #8]
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	4682      	mov	sl, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	4691      	mov	r9, r2
 8000e62:	4698      	mov	r8, r3
 8000e64:	d835      	bhi.n	8000ed2 <__ssputs_r+0x7e>
 8000e66:	898a      	ldrh	r2, [r1, #12]
 8000e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000e6c:	d031      	beq.n	8000ed2 <__ssputs_r+0x7e>
 8000e6e:	6825      	ldr	r5, [r4, #0]
 8000e70:	6909      	ldr	r1, [r1, #16]
 8000e72:	1a6f      	subs	r7, r5, r1
 8000e74:	6965      	ldr	r5, [r4, #20]
 8000e76:	2302      	movs	r3, #2
 8000e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8000e80:	f108 0301 	add.w	r3, r8, #1
 8000e84:	443b      	add	r3, r7
 8000e86:	429d      	cmp	r5, r3
 8000e88:	bf38      	it	cc
 8000e8a:	461d      	movcc	r5, r3
 8000e8c:	0553      	lsls	r3, r2, #21
 8000e8e:	d531      	bpl.n	8000ef4 <__ssputs_r+0xa0>
 8000e90:	4629      	mov	r1, r5
 8000e92:	f000 fbb3 	bl	80015fc <_malloc_r>
 8000e96:	4606      	mov	r6, r0
 8000e98:	b950      	cbnz	r0, 8000eb0 <__ssputs_r+0x5c>
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	f8ca 3000 	str.w	r3, [sl]
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	463a      	mov	r2, r7
 8000eb2:	6921      	ldr	r1, [r4, #16]
 8000eb4:	f000 fb2e 	bl	8001514 <memcpy>
 8000eb8:	89a3      	ldrh	r3, [r4, #12]
 8000eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec2:	81a3      	strh	r3, [r4, #12]
 8000ec4:	6126      	str	r6, [r4, #16]
 8000ec6:	6165      	str	r5, [r4, #20]
 8000ec8:	443e      	add	r6, r7
 8000eca:	1bed      	subs	r5, r5, r7
 8000ecc:	6026      	str	r6, [r4, #0]
 8000ece:	60a5      	str	r5, [r4, #8]
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	4546      	cmp	r6, r8
 8000ed4:	bf28      	it	cs
 8000ed6:	4646      	movcs	r6, r8
 8000ed8:	4632      	mov	r2, r6
 8000eda:	4649      	mov	r1, r9
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	f000 fb24 	bl	800152a <memmove>
 8000ee2:	68a3      	ldr	r3, [r4, #8]
 8000ee4:	1b9b      	subs	r3, r3, r6
 8000ee6:	60a3      	str	r3, [r4, #8]
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	441e      	add	r6, r3
 8000eec:	6026      	str	r6, [r4, #0]
 8000eee:	2000      	movs	r0, #0
 8000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef4:	462a      	mov	r2, r5
 8000ef6:	f000 fbdf 	bl	80016b8 <_realloc_r>
 8000efa:	4606      	mov	r6, r0
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d1e1      	bne.n	8000ec4 <__ssputs_r+0x70>
 8000f00:	6921      	ldr	r1, [r4, #16]
 8000f02:	4650      	mov	r0, sl
 8000f04:	f000 fb2c 	bl	8001560 <_free_r>
 8000f08:	e7c7      	b.n	8000e9a <__ssputs_r+0x46>

08000f0a <__ssprint_r>:
 8000f0a:	6893      	ldr	r3, [r2, #8]
 8000f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f10:	4681      	mov	r9, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4617      	mov	r7, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d060      	beq.n	8000fdc <__ssprint_r+0xd2>
 8000f1a:	f04f 0b00 	mov.w	fp, #0
 8000f1e:	f8d2 a000 	ldr.w	sl, [r2]
 8000f22:	465e      	mov	r6, fp
 8000f24:	b356      	cbz	r6, 8000f7c <__ssprint_r+0x72>
 8000f26:	68a3      	ldr	r3, [r4, #8]
 8000f28:	429e      	cmp	r6, r3
 8000f2a:	d344      	bcc.n	8000fb6 <__ssprint_r+0xac>
 8000f2c:	89a2      	ldrh	r2, [r4, #12]
 8000f2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f32:	d03e      	beq.n	8000fb2 <__ssprint_r+0xa8>
 8000f34:	6825      	ldr	r5, [r4, #0]
 8000f36:	6921      	ldr	r1, [r4, #16]
 8000f38:	eba5 0801 	sub.w	r8, r5, r1
 8000f3c:	6965      	ldr	r5, [r4, #20]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f44:	fb95 f5f3 	sdiv	r5, r5, r3
 8000f48:	f108 0301 	add.w	r3, r8, #1
 8000f4c:	4433      	add	r3, r6
 8000f4e:	429d      	cmp	r5, r3
 8000f50:	bf38      	it	cc
 8000f52:	461d      	movcc	r5, r3
 8000f54:	0553      	lsls	r3, r2, #21
 8000f56:	d546      	bpl.n	8000fe6 <__ssprint_r+0xdc>
 8000f58:	4629      	mov	r1, r5
 8000f5a:	4648      	mov	r0, r9
 8000f5c:	f000 fb4e 	bl	80015fc <_malloc_r>
 8000f60:	b998      	cbnz	r0, 8000f8a <__ssprint_r+0x80>
 8000f62:	230c      	movs	r3, #12
 8000f64:	f8c9 3000 	str.w	r3, [r9]
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6e:	81a3      	strh	r3, [r4, #12]
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	e031      	b.n	8000fe0 <__ssprint_r+0xd6>
 8000f7c:	f8da b000 	ldr.w	fp, [sl]
 8000f80:	f8da 6004 	ldr.w	r6, [sl, #4]
 8000f84:	f10a 0a08 	add.w	sl, sl, #8
 8000f88:	e7cc      	b.n	8000f24 <__ssprint_r+0x1a>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	6921      	ldr	r1, [r4, #16]
 8000f8e:	9001      	str	r0, [sp, #4]
 8000f90:	f000 fac0 	bl	8001514 <memcpy>
 8000f94:	89a2      	ldrh	r2, [r4, #12]
 8000f96:	9b01      	ldr	r3, [sp, #4]
 8000f98:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8000f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa0:	81a2      	strh	r2, [r4, #12]
 8000fa2:	6123      	str	r3, [r4, #16]
 8000fa4:	6165      	str	r5, [r4, #20]
 8000fa6:	4443      	add	r3, r8
 8000fa8:	eba5 0508 	sub.w	r5, r5, r8
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	60a5      	str	r5, [r4, #8]
 8000fb0:	4633      	mov	r3, r6
 8000fb2:	429e      	cmp	r6, r3
 8000fb4:	d200      	bcs.n	8000fb8 <__ssprint_r+0xae>
 8000fb6:	4633      	mov	r3, r6
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4659      	mov	r1, fp
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f000 fab3 	bl	800152a <memmove>
 8000fc4:	68a2      	ldr	r2, [r4, #8]
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	60a2      	str	r2, [r4, #8]
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1b9e      	subs	r6, r3, r6
 8000fd6:	60be      	str	r6, [r7, #8]
 8000fd8:	2e00      	cmp	r6, #0
 8000fda:	d1cf      	bne.n	8000f7c <__ssprint_r+0x72>
 8000fdc:	2000      	movs	r0, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	b003      	add	sp, #12
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe6:	462a      	mov	r2, r5
 8000fe8:	4648      	mov	r0, r9
 8000fea:	f000 fb65 	bl	80016b8 <_realloc_r>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1d6      	bne.n	8000fa2 <__ssprint_r+0x98>
 8000ff4:	6921      	ldr	r1, [r4, #16]
 8000ff6:	4648      	mov	r0, r9
 8000ff8:	f000 fab2 	bl	8001560 <_free_r>
 8000ffc:	e7b1      	b.n	8000f62 <__ssprint_r+0x58>
	...

08001000 <_svfiprintf_r>:
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b09d      	sub	sp, #116	; 0x74
 8001006:	4680      	mov	r8, r0
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	898b      	ldrh	r3, [r1, #12]
 800100c:	061c      	lsls	r4, r3, #24
 800100e:	460d      	mov	r5, r1
 8001010:	4616      	mov	r6, r2
 8001012:	d50f      	bpl.n	8001034 <_svfiprintf_r+0x34>
 8001014:	690b      	ldr	r3, [r1, #16]
 8001016:	b96b      	cbnz	r3, 8001034 <_svfiprintf_r+0x34>
 8001018:	2140      	movs	r1, #64	; 0x40
 800101a:	f000 faef 	bl	80015fc <_malloc_r>
 800101e:	6028      	str	r0, [r5, #0]
 8001020:	6128      	str	r0, [r5, #16]
 8001022:	b928      	cbnz	r0, 8001030 <_svfiprintf_r+0x30>
 8001024:	230c      	movs	r3, #12
 8001026:	f8c8 3000 	str.w	r3, [r8]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	e0c5      	b.n	80011bc <_svfiprintf_r+0x1bc>
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	616b      	str	r3, [r5, #20]
 8001034:	2300      	movs	r3, #0
 8001036:	9309      	str	r3, [sp, #36]	; 0x24
 8001038:	2320      	movs	r3, #32
 800103a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800103e:	2330      	movs	r3, #48	; 0x30
 8001040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001044:	f04f 0b01 	mov.w	fp, #1
 8001048:	4637      	mov	r7, r6
 800104a:	463c      	mov	r4, r7
 800104c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d13c      	bne.n	80010ce <_svfiprintf_r+0xce>
 8001054:	ebb7 0a06 	subs.w	sl, r7, r6
 8001058:	d00b      	beq.n	8001072 <_svfiprintf_r+0x72>
 800105a:	4653      	mov	r3, sl
 800105c:	4632      	mov	r2, r6
 800105e:	4629      	mov	r1, r5
 8001060:	4640      	mov	r0, r8
 8001062:	f7ff fef7 	bl	8000e54 <__ssputs_r>
 8001066:	3001      	adds	r0, #1
 8001068:	f000 80a3 	beq.w	80011b2 <_svfiprintf_r+0x1b2>
 800106c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800106e:	4453      	add	r3, sl
 8001070:	9309      	str	r3, [sp, #36]	; 0x24
 8001072:	783b      	ldrb	r3, [r7, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 809c 	beq.w	80011b2 <_svfiprintf_r+0x1b2>
 800107a:	2300      	movs	r3, #0
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	9304      	str	r3, [sp, #16]
 8001082:	9307      	str	r3, [sp, #28]
 8001084:	9205      	str	r2, [sp, #20]
 8001086:	9306      	str	r3, [sp, #24]
 8001088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800108c:	931a      	str	r3, [sp, #104]	; 0x68
 800108e:	2205      	movs	r2, #5
 8001090:	7821      	ldrb	r1, [r4, #0]
 8001092:	4850      	ldr	r0, [pc, #320]	; (80011d4 <_svfiprintf_r+0x1d4>)
 8001094:	f7ff fdfc 	bl	8000c90 <memchr>
 8001098:	1c67      	adds	r7, r4, #1
 800109a:	9b04      	ldr	r3, [sp, #16]
 800109c:	b9d8      	cbnz	r0, 80010d6 <_svfiprintf_r+0xd6>
 800109e:	06d9      	lsls	r1, r3, #27
 80010a0:	bf44      	itt	mi
 80010a2:	2220      	movmi	r2, #32
 80010a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80010a8:	071a      	lsls	r2, r3, #28
 80010aa:	bf44      	itt	mi
 80010ac:	222b      	movmi	r2, #43	; 0x2b
 80010ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80010b2:	7822      	ldrb	r2, [r4, #0]
 80010b4:	2a2a      	cmp	r2, #42	; 0x2a
 80010b6:	d016      	beq.n	80010e6 <_svfiprintf_r+0xe6>
 80010b8:	9a07      	ldr	r2, [sp, #28]
 80010ba:	2100      	movs	r1, #0
 80010bc:	200a      	movs	r0, #10
 80010be:	4627      	mov	r7, r4
 80010c0:	3401      	adds	r4, #1
 80010c2:	783b      	ldrb	r3, [r7, #0]
 80010c4:	3b30      	subs	r3, #48	; 0x30
 80010c6:	2b09      	cmp	r3, #9
 80010c8:	d951      	bls.n	800116e <_svfiprintf_r+0x16e>
 80010ca:	b1c9      	cbz	r1, 8001100 <_svfiprintf_r+0x100>
 80010cc:	e011      	b.n	80010f2 <_svfiprintf_r+0xf2>
 80010ce:	2b25      	cmp	r3, #37	; 0x25
 80010d0:	d0c0      	beq.n	8001054 <_svfiprintf_r+0x54>
 80010d2:	4627      	mov	r7, r4
 80010d4:	e7b9      	b.n	800104a <_svfiprintf_r+0x4a>
 80010d6:	4a3f      	ldr	r2, [pc, #252]	; (80011d4 <_svfiprintf_r+0x1d4>)
 80010d8:	1a80      	subs	r0, r0, r2
 80010da:	fa0b f000 	lsl.w	r0, fp, r0
 80010de:	4318      	orrs	r0, r3
 80010e0:	9004      	str	r0, [sp, #16]
 80010e2:	463c      	mov	r4, r7
 80010e4:	e7d3      	b.n	800108e <_svfiprintf_r+0x8e>
 80010e6:	9a03      	ldr	r2, [sp, #12]
 80010e8:	1d11      	adds	r1, r2, #4
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	9103      	str	r1, [sp, #12]
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	db01      	blt.n	80010f6 <_svfiprintf_r+0xf6>
 80010f2:	9207      	str	r2, [sp, #28]
 80010f4:	e004      	b.n	8001100 <_svfiprintf_r+0x100>
 80010f6:	4252      	negs	r2, r2
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	9207      	str	r2, [sp, #28]
 80010fe:	9304      	str	r3, [sp, #16]
 8001100:	783b      	ldrb	r3, [r7, #0]
 8001102:	2b2e      	cmp	r3, #46	; 0x2e
 8001104:	d10e      	bne.n	8001124 <_svfiprintf_r+0x124>
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	2b2a      	cmp	r3, #42	; 0x2a
 800110a:	f107 0101 	add.w	r1, r7, #1
 800110e:	d132      	bne.n	8001176 <_svfiprintf_r+0x176>
 8001110:	9b03      	ldr	r3, [sp, #12]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	9203      	str	r2, [sp, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	bfb8      	it	lt
 800111c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001120:	3702      	adds	r7, #2
 8001122:	9305      	str	r3, [sp, #20]
 8001124:	4c2c      	ldr	r4, [pc, #176]	; (80011d8 <_svfiprintf_r+0x1d8>)
 8001126:	7839      	ldrb	r1, [r7, #0]
 8001128:	2203      	movs	r2, #3
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fdb0 	bl	8000c90 <memchr>
 8001130:	b138      	cbz	r0, 8001142 <_svfiprintf_r+0x142>
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	1b00      	subs	r0, r0, r4
 8001136:	fa03 f000 	lsl.w	r0, r3, r0
 800113a:	9b04      	ldr	r3, [sp, #16]
 800113c:	4303      	orrs	r3, r0
 800113e:	9304      	str	r3, [sp, #16]
 8001140:	3701      	adds	r7, #1
 8001142:	7839      	ldrb	r1, [r7, #0]
 8001144:	4825      	ldr	r0, [pc, #148]	; (80011dc <_svfiprintf_r+0x1dc>)
 8001146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800114a:	2206      	movs	r2, #6
 800114c:	1c7e      	adds	r6, r7, #1
 800114e:	f7ff fd9f 	bl	8000c90 <memchr>
 8001152:	2800      	cmp	r0, #0
 8001154:	d035      	beq.n	80011c2 <_svfiprintf_r+0x1c2>
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <_svfiprintf_r+0x1e0>)
 8001158:	b9fb      	cbnz	r3, 800119a <_svfiprintf_r+0x19a>
 800115a:	9b03      	ldr	r3, [sp, #12]
 800115c:	3307      	adds	r3, #7
 800115e:	f023 0307 	bic.w	r3, r3, #7
 8001162:	3308      	adds	r3, #8
 8001164:	9303      	str	r3, [sp, #12]
 8001166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001168:	444b      	add	r3, r9
 800116a:	9309      	str	r3, [sp, #36]	; 0x24
 800116c:	e76c      	b.n	8001048 <_svfiprintf_r+0x48>
 800116e:	fb00 3202 	mla	r2, r0, r2, r3
 8001172:	2101      	movs	r1, #1
 8001174:	e7a3      	b.n	80010be <_svfiprintf_r+0xbe>
 8001176:	2300      	movs	r3, #0
 8001178:	9305      	str	r3, [sp, #20]
 800117a:	4618      	mov	r0, r3
 800117c:	240a      	movs	r4, #10
 800117e:	460f      	mov	r7, r1
 8001180:	3101      	adds	r1, #1
 8001182:	783a      	ldrb	r2, [r7, #0]
 8001184:	3a30      	subs	r2, #48	; 0x30
 8001186:	2a09      	cmp	r2, #9
 8001188:	d903      	bls.n	8001192 <_svfiprintf_r+0x192>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0ca      	beq.n	8001124 <_svfiprintf_r+0x124>
 800118e:	9005      	str	r0, [sp, #20]
 8001190:	e7c8      	b.n	8001124 <_svfiprintf_r+0x124>
 8001192:	fb04 2000 	mla	r0, r4, r0, r2
 8001196:	2301      	movs	r3, #1
 8001198:	e7f1      	b.n	800117e <_svfiprintf_r+0x17e>
 800119a:	ab03      	add	r3, sp, #12
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	462a      	mov	r2, r5
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_svfiprintf_r+0x1e4>)
 80011a2:	a904      	add	r1, sp, #16
 80011a4:	4640      	mov	r0, r8
 80011a6:	f3af 8000 	nop.w
 80011aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80011ae:	4681      	mov	r9, r0
 80011b0:	d1d9      	bne.n	8001166 <_svfiprintf_r+0x166>
 80011b2:	89ab      	ldrh	r3, [r5, #12]
 80011b4:	065b      	lsls	r3, r3, #25
 80011b6:	f53f af38 	bmi.w	800102a <_svfiprintf_r+0x2a>
 80011ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011bc:	b01d      	add	sp, #116	; 0x74
 80011be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	462a      	mov	r2, r5
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <_svfiprintf_r+0x1e4>)
 80011ca:	a904      	add	r1, sp, #16
 80011cc:	4640      	mov	r0, r8
 80011ce:	f000 f881 	bl	80012d4 <_printf_i>
 80011d2:	e7ea      	b.n	80011aa <_svfiprintf_r+0x1aa>
 80011d4:	08001868 	.word	0x08001868
 80011d8:	0800186e 	.word	0x0800186e
 80011dc:	08001872 	.word	0x08001872
 80011e0:	00000000 	.word	0x00000000
 80011e4:	08000e55 	.word	0x08000e55

080011e8 <_printf_common>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	4691      	mov	r9, r2
 80011ee:	461f      	mov	r7, r3
 80011f0:	688a      	ldr	r2, [r1, #8]
 80011f2:	690b      	ldr	r3, [r1, #16]
 80011f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011f8:	4293      	cmp	r3, r2
 80011fa:	bfb8      	it	lt
 80011fc:	4613      	movlt	r3, r2
 80011fe:	f8c9 3000 	str.w	r3, [r9]
 8001202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001206:	4606      	mov	r6, r0
 8001208:	460c      	mov	r4, r1
 800120a:	b112      	cbz	r2, 8001212 <_printf_common+0x2a>
 800120c:	3301      	adds	r3, #1
 800120e:	f8c9 3000 	str.w	r3, [r9]
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	0699      	lsls	r1, r3, #26
 8001216:	bf42      	ittt	mi
 8001218:	f8d9 3000 	ldrmi.w	r3, [r9]
 800121c:	3302      	addmi	r3, #2
 800121e:	f8c9 3000 	strmi.w	r3, [r9]
 8001222:	6825      	ldr	r5, [r4, #0]
 8001224:	f015 0506 	ands.w	r5, r5, #6
 8001228:	d107      	bne.n	800123a <_printf_common+0x52>
 800122a:	f104 0a19 	add.w	sl, r4, #25
 800122e:	68e3      	ldr	r3, [r4, #12]
 8001230:	f8d9 2000 	ldr.w	r2, [r9]
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	429d      	cmp	r5, r3
 8001238:	db29      	blt.n	800128e <_printf_common+0xa6>
 800123a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	3300      	adds	r3, #0
 8001242:	bf18      	it	ne
 8001244:	2301      	movne	r3, #1
 8001246:	0692      	lsls	r2, r2, #26
 8001248:	d42e      	bmi.n	80012a8 <_printf_common+0xc0>
 800124a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800124e:	4639      	mov	r1, r7
 8001250:	4630      	mov	r0, r6
 8001252:	47c0      	blx	r8
 8001254:	3001      	adds	r0, #1
 8001256:	d021      	beq.n	800129c <_printf_common+0xb4>
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	68e5      	ldr	r5, [r4, #12]
 800125c:	f8d9 2000 	ldr.w	r2, [r9]
 8001260:	f003 0306 	and.w	r3, r3, #6
 8001264:	2b04      	cmp	r3, #4
 8001266:	bf08      	it	eq
 8001268:	1aad      	subeq	r5, r5, r2
 800126a:	68a3      	ldr	r3, [r4, #8]
 800126c:	6922      	ldr	r2, [r4, #16]
 800126e:	bf0c      	ite	eq
 8001270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001274:	2500      	movne	r5, #0
 8001276:	4293      	cmp	r3, r2
 8001278:	bfc4      	itt	gt
 800127a:	1a9b      	subgt	r3, r3, r2
 800127c:	18ed      	addgt	r5, r5, r3
 800127e:	f04f 0900 	mov.w	r9, #0
 8001282:	341a      	adds	r4, #26
 8001284:	454d      	cmp	r5, r9
 8001286:	d11b      	bne.n	80012c0 <_printf_common+0xd8>
 8001288:	2000      	movs	r0, #0
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128e:	2301      	movs	r3, #1
 8001290:	4652      	mov	r2, sl
 8001292:	4639      	mov	r1, r7
 8001294:	4630      	mov	r0, r6
 8001296:	47c0      	blx	r8
 8001298:	3001      	adds	r0, #1
 800129a:	d103      	bne.n	80012a4 <_printf_common+0xbc>
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a4:	3501      	adds	r5, #1
 80012a6:	e7c2      	b.n	800122e <_printf_common+0x46>
 80012a8:	18e1      	adds	r1, r4, r3
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	2030      	movs	r0, #48	; 0x30
 80012ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012b2:	4422      	add	r2, r4
 80012b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012bc:	3302      	adds	r3, #2
 80012be:	e7c4      	b.n	800124a <_printf_common+0x62>
 80012c0:	2301      	movs	r3, #1
 80012c2:	4622      	mov	r2, r4
 80012c4:	4639      	mov	r1, r7
 80012c6:	4630      	mov	r0, r6
 80012c8:	47c0      	blx	r8
 80012ca:	3001      	adds	r0, #1
 80012cc:	d0e6      	beq.n	800129c <_printf_common+0xb4>
 80012ce:	f109 0901 	add.w	r9, r9, #1
 80012d2:	e7d7      	b.n	8001284 <_printf_common+0x9c>

080012d4 <_printf_i>:
 80012d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d8:	4617      	mov	r7, r2
 80012da:	7e0a      	ldrb	r2, [r1, #24]
 80012dc:	b085      	sub	sp, #20
 80012de:	2a6e      	cmp	r2, #110	; 0x6e
 80012e0:	4698      	mov	r8, r3
 80012e2:	4606      	mov	r6, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012e8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80012ec:	f000 80bc 	beq.w	8001468 <_printf_i+0x194>
 80012f0:	d81a      	bhi.n	8001328 <_printf_i+0x54>
 80012f2:	2a63      	cmp	r2, #99	; 0x63
 80012f4:	d02e      	beq.n	8001354 <_printf_i+0x80>
 80012f6:	d80a      	bhi.n	800130e <_printf_i+0x3a>
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	f000 80c8 	beq.w	800148e <_printf_i+0x1ba>
 80012fe:	2a58      	cmp	r2, #88	; 0x58
 8001300:	f000 808a 	beq.w	8001418 <_printf_i+0x144>
 8001304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001308:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800130c:	e02a      	b.n	8001364 <_printf_i+0x90>
 800130e:	2a64      	cmp	r2, #100	; 0x64
 8001310:	d001      	beq.n	8001316 <_printf_i+0x42>
 8001312:	2a69      	cmp	r2, #105	; 0x69
 8001314:	d1f6      	bne.n	8001304 <_printf_i+0x30>
 8001316:	6821      	ldr	r1, [r4, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800131e:	d023      	beq.n	8001368 <_printf_i+0x94>
 8001320:	1d11      	adds	r1, r2, #4
 8001322:	6019      	str	r1, [r3, #0]
 8001324:	6813      	ldr	r3, [r2, #0]
 8001326:	e027      	b.n	8001378 <_printf_i+0xa4>
 8001328:	2a73      	cmp	r2, #115	; 0x73
 800132a:	f000 80b4 	beq.w	8001496 <_printf_i+0x1c2>
 800132e:	d808      	bhi.n	8001342 <_printf_i+0x6e>
 8001330:	2a6f      	cmp	r2, #111	; 0x6f
 8001332:	d02a      	beq.n	800138a <_printf_i+0xb6>
 8001334:	2a70      	cmp	r2, #112	; 0x70
 8001336:	d1e5      	bne.n	8001304 <_printf_i+0x30>
 8001338:	680a      	ldr	r2, [r1, #0]
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	600a      	str	r2, [r1, #0]
 8001340:	e003      	b.n	800134a <_printf_i+0x76>
 8001342:	2a75      	cmp	r2, #117	; 0x75
 8001344:	d021      	beq.n	800138a <_printf_i+0xb6>
 8001346:	2a78      	cmp	r2, #120	; 0x78
 8001348:	d1dc      	bne.n	8001304 <_printf_i+0x30>
 800134a:	2278      	movs	r2, #120	; 0x78
 800134c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001350:	496e      	ldr	r1, [pc, #440]	; (800150c <_printf_i+0x238>)
 8001352:	e064      	b.n	800141e <_printf_i+0x14a>
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800135a:	1d11      	adds	r1, r2, #4
 800135c:	6019      	str	r1, [r3, #0]
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001364:	2301      	movs	r3, #1
 8001366:	e0a3      	b.n	80014b0 <_printf_i+0x1dc>
 8001368:	f011 0f40 	tst.w	r1, #64	; 0x40
 800136c:	f102 0104 	add.w	r1, r2, #4
 8001370:	6019      	str	r1, [r3, #0]
 8001372:	d0d7      	beq.n	8001324 <_printf_i+0x50>
 8001374:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001378:	2b00      	cmp	r3, #0
 800137a:	da03      	bge.n	8001384 <_printf_i+0xb0>
 800137c:	222d      	movs	r2, #45	; 0x2d
 800137e:	425b      	negs	r3, r3
 8001380:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001384:	4962      	ldr	r1, [pc, #392]	; (8001510 <_printf_i+0x23c>)
 8001386:	220a      	movs	r2, #10
 8001388:	e017      	b.n	80013ba <_printf_i+0xe6>
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	6819      	ldr	r1, [r3, #0]
 800138e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001392:	d003      	beq.n	800139c <_printf_i+0xc8>
 8001394:	1d08      	adds	r0, r1, #4
 8001396:	6018      	str	r0, [r3, #0]
 8001398:	680b      	ldr	r3, [r1, #0]
 800139a:	e006      	b.n	80013aa <_printf_i+0xd6>
 800139c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80013a0:	f101 0004 	add.w	r0, r1, #4
 80013a4:	6018      	str	r0, [r3, #0]
 80013a6:	d0f7      	beq.n	8001398 <_printf_i+0xc4>
 80013a8:	880b      	ldrh	r3, [r1, #0]
 80013aa:	4959      	ldr	r1, [pc, #356]	; (8001510 <_printf_i+0x23c>)
 80013ac:	2a6f      	cmp	r2, #111	; 0x6f
 80013ae:	bf14      	ite	ne
 80013b0:	220a      	movne	r2, #10
 80013b2:	2208      	moveq	r2, #8
 80013b4:	2000      	movs	r0, #0
 80013b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80013ba:	6865      	ldr	r5, [r4, #4]
 80013bc:	60a5      	str	r5, [r4, #8]
 80013be:	2d00      	cmp	r5, #0
 80013c0:	f2c0 809c 	blt.w	80014fc <_printf_i+0x228>
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	f020 0004 	bic.w	r0, r0, #4
 80013ca:	6020      	str	r0, [r4, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d13f      	bne.n	8001450 <_printf_i+0x17c>
 80013d0:	2d00      	cmp	r5, #0
 80013d2:	f040 8095 	bne.w	8001500 <_printf_i+0x22c>
 80013d6:	4675      	mov	r5, lr
 80013d8:	2a08      	cmp	r2, #8
 80013da:	d10b      	bne.n	80013f4 <_printf_i+0x120>
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	07da      	lsls	r2, r3, #31
 80013e0:	d508      	bpl.n	80013f4 <_printf_i+0x120>
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	6862      	ldr	r2, [r4, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	bfde      	ittt	le
 80013ea:	2330      	movle	r3, #48	; 0x30
 80013ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013f4:	ebae 0305 	sub.w	r3, lr, r5
 80013f8:	6123      	str	r3, [r4, #16]
 80013fa:	f8cd 8000 	str.w	r8, [sp]
 80013fe:	463b      	mov	r3, r7
 8001400:	aa03      	add	r2, sp, #12
 8001402:	4621      	mov	r1, r4
 8001404:	4630      	mov	r0, r6
 8001406:	f7ff feef 	bl	80011e8 <_printf_common>
 800140a:	3001      	adds	r0, #1
 800140c:	d155      	bne.n	80014ba <_printf_i+0x1e6>
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	b005      	add	sp, #20
 8001414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001418:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800141c:	493c      	ldr	r1, [pc, #240]	; (8001510 <_printf_i+0x23c>)
 800141e:	6822      	ldr	r2, [r4, #0]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001426:	f100 0504 	add.w	r5, r0, #4
 800142a:	601d      	str	r5, [r3, #0]
 800142c:	d001      	beq.n	8001432 <_printf_i+0x15e>
 800142e:	6803      	ldr	r3, [r0, #0]
 8001430:	e002      	b.n	8001438 <_printf_i+0x164>
 8001432:	0655      	lsls	r5, r2, #25
 8001434:	d5fb      	bpl.n	800142e <_printf_i+0x15a>
 8001436:	8803      	ldrh	r3, [r0, #0]
 8001438:	07d0      	lsls	r0, r2, #31
 800143a:	bf44      	itt	mi
 800143c:	f042 0220 	orrmi.w	r2, r2, #32
 8001440:	6022      	strmi	r2, [r4, #0]
 8001442:	b91b      	cbnz	r3, 800144c <_printf_i+0x178>
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	f022 0220 	bic.w	r2, r2, #32
 800144a:	6022      	str	r2, [r4, #0]
 800144c:	2210      	movs	r2, #16
 800144e:	e7b1      	b.n	80013b4 <_printf_i+0xe0>
 8001450:	4675      	mov	r5, lr
 8001452:	fbb3 f0f2 	udiv	r0, r3, r2
 8001456:	fb02 3310 	mls	r3, r2, r0, r3
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001460:	4603      	mov	r3, r0
 8001462:	2800      	cmp	r0, #0
 8001464:	d1f5      	bne.n	8001452 <_printf_i+0x17e>
 8001466:	e7b7      	b.n	80013d8 <_printf_i+0x104>
 8001468:	6808      	ldr	r0, [r1, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	6949      	ldr	r1, [r1, #20]
 800146e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001472:	d004      	beq.n	800147e <_printf_i+0x1aa>
 8001474:	1d10      	adds	r0, r2, #4
 8001476:	6018      	str	r0, [r3, #0]
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	6019      	str	r1, [r3, #0]
 800147c:	e007      	b.n	800148e <_printf_i+0x1ba>
 800147e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001482:	f102 0004 	add.w	r0, r2, #4
 8001486:	6018      	str	r0, [r3, #0]
 8001488:	6813      	ldr	r3, [r2, #0]
 800148a:	d0f6      	beq.n	800147a <_printf_i+0x1a6>
 800148c:	8019      	strh	r1, [r3, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	6123      	str	r3, [r4, #16]
 8001492:	4675      	mov	r5, lr
 8001494:	e7b1      	b.n	80013fa <_printf_i+0x126>
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	1d11      	adds	r1, r2, #4
 800149a:	6019      	str	r1, [r3, #0]
 800149c:	6815      	ldr	r5, [r2, #0]
 800149e:	6862      	ldr	r2, [r4, #4]
 80014a0:	2100      	movs	r1, #0
 80014a2:	4628      	mov	r0, r5
 80014a4:	f7ff fbf4 	bl	8000c90 <memchr>
 80014a8:	b108      	cbz	r0, 80014ae <_printf_i+0x1da>
 80014aa:	1b40      	subs	r0, r0, r5
 80014ac:	6060      	str	r0, [r4, #4]
 80014ae:	6863      	ldr	r3, [r4, #4]
 80014b0:	6123      	str	r3, [r4, #16]
 80014b2:	2300      	movs	r3, #0
 80014b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014b8:	e79f      	b.n	80013fa <_printf_i+0x126>
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	462a      	mov	r2, r5
 80014be:	4639      	mov	r1, r7
 80014c0:	4630      	mov	r0, r6
 80014c2:	47c0      	blx	r8
 80014c4:	3001      	adds	r0, #1
 80014c6:	d0a2      	beq.n	800140e <_printf_i+0x13a>
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	079b      	lsls	r3, r3, #30
 80014cc:	d507      	bpl.n	80014de <_printf_i+0x20a>
 80014ce:	2500      	movs	r5, #0
 80014d0:	f104 0919 	add.w	r9, r4, #25
 80014d4:	68e3      	ldr	r3, [r4, #12]
 80014d6:	9a03      	ldr	r2, [sp, #12]
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	429d      	cmp	r5, r3
 80014dc:	db05      	blt.n	80014ea <_printf_i+0x216>
 80014de:	68e0      	ldr	r0, [r4, #12]
 80014e0:	9b03      	ldr	r3, [sp, #12]
 80014e2:	4298      	cmp	r0, r3
 80014e4:	bfb8      	it	lt
 80014e6:	4618      	movlt	r0, r3
 80014e8:	e793      	b.n	8001412 <_printf_i+0x13e>
 80014ea:	2301      	movs	r3, #1
 80014ec:	464a      	mov	r2, r9
 80014ee:	4639      	mov	r1, r7
 80014f0:	4630      	mov	r0, r6
 80014f2:	47c0      	blx	r8
 80014f4:	3001      	adds	r0, #1
 80014f6:	d08a      	beq.n	800140e <_printf_i+0x13a>
 80014f8:	3501      	adds	r5, #1
 80014fa:	e7eb      	b.n	80014d4 <_printf_i+0x200>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1a7      	bne.n	8001450 <_printf_i+0x17c>
 8001500:	780b      	ldrb	r3, [r1, #0]
 8001502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800150a:	e765      	b.n	80013d8 <_printf_i+0x104>
 800150c:	0800188a 	.word	0x0800188a
 8001510:	08001879 	.word	0x08001879

08001514 <memcpy>:
 8001514:	b510      	push	{r4, lr}
 8001516:	1e43      	subs	r3, r0, #1
 8001518:	440a      	add	r2, r1
 800151a:	4291      	cmp	r1, r2
 800151c:	d100      	bne.n	8001520 <memcpy+0xc>
 800151e:	bd10      	pop	{r4, pc}
 8001520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001528:	e7f7      	b.n	800151a <memcpy+0x6>

0800152a <memmove>:
 800152a:	4288      	cmp	r0, r1
 800152c:	b510      	push	{r4, lr}
 800152e:	eb01 0302 	add.w	r3, r1, r2
 8001532:	d803      	bhi.n	800153c <memmove+0x12>
 8001534:	1e42      	subs	r2, r0, #1
 8001536:	4299      	cmp	r1, r3
 8001538:	d10c      	bne.n	8001554 <memmove+0x2a>
 800153a:	bd10      	pop	{r4, pc}
 800153c:	4298      	cmp	r0, r3
 800153e:	d2f9      	bcs.n	8001534 <memmove+0xa>
 8001540:	1881      	adds	r1, r0, r2
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	42d3      	cmn	r3, r2
 8001546:	d100      	bne.n	800154a <memmove+0x20>
 8001548:	bd10      	pop	{r4, pc}
 800154a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800154e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001552:	e7f7      	b.n	8001544 <memmove+0x1a>
 8001554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001558:	f802 4f01 	strb.w	r4, [r2, #1]!
 800155c:	e7eb      	b.n	8001536 <memmove+0xc>
	...

08001560 <_free_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	2900      	cmp	r1, #0
 8001566:	d045      	beq.n	80015f4 <_free_r+0x94>
 8001568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800156c:	1f0c      	subs	r4, r1, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	bfb8      	it	lt
 8001572:	18e4      	addlt	r4, r4, r3
 8001574:	f000 f8d6 	bl	8001724 <__malloc_lock>
 8001578:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <_free_r+0x98>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	4610      	mov	r0, r2
 800157e:	b933      	cbnz	r3, 800158e <_free_r+0x2e>
 8001580:	6063      	str	r3, [r4, #4]
 8001582:	6014      	str	r4, [r2, #0]
 8001584:	4628      	mov	r0, r5
 8001586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800158a:	f000 b8cc 	b.w	8001726 <__malloc_unlock>
 800158e:	42a3      	cmp	r3, r4
 8001590:	d90c      	bls.n	80015ac <_free_r+0x4c>
 8001592:	6821      	ldr	r1, [r4, #0]
 8001594:	1862      	adds	r2, r4, r1
 8001596:	4293      	cmp	r3, r2
 8001598:	bf04      	itt	eq
 800159a:	681a      	ldreq	r2, [r3, #0]
 800159c:	685b      	ldreq	r3, [r3, #4]
 800159e:	6063      	str	r3, [r4, #4]
 80015a0:	bf04      	itt	eq
 80015a2:	1852      	addeq	r2, r2, r1
 80015a4:	6022      	streq	r2, [r4, #0]
 80015a6:	6004      	str	r4, [r0, #0]
 80015a8:	e7ec      	b.n	8001584 <_free_r+0x24>
 80015aa:	4613      	mov	r3, r2
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	b10a      	cbz	r2, 80015b4 <_free_r+0x54>
 80015b0:	42a2      	cmp	r2, r4
 80015b2:	d9fa      	bls.n	80015aa <_free_r+0x4a>
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	1858      	adds	r0, r3, r1
 80015b8:	42a0      	cmp	r0, r4
 80015ba:	d10b      	bne.n	80015d4 <_free_r+0x74>
 80015bc:	6820      	ldr	r0, [r4, #0]
 80015be:	4401      	add	r1, r0
 80015c0:	1858      	adds	r0, r3, r1
 80015c2:	4282      	cmp	r2, r0
 80015c4:	6019      	str	r1, [r3, #0]
 80015c6:	d1dd      	bne.n	8001584 <_free_r+0x24>
 80015c8:	6810      	ldr	r0, [r2, #0]
 80015ca:	6852      	ldr	r2, [r2, #4]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	4401      	add	r1, r0
 80015d0:	6019      	str	r1, [r3, #0]
 80015d2:	e7d7      	b.n	8001584 <_free_r+0x24>
 80015d4:	d902      	bls.n	80015dc <_free_r+0x7c>
 80015d6:	230c      	movs	r3, #12
 80015d8:	602b      	str	r3, [r5, #0]
 80015da:	e7d3      	b.n	8001584 <_free_r+0x24>
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	1821      	adds	r1, r4, r0
 80015e0:	428a      	cmp	r2, r1
 80015e2:	bf04      	itt	eq
 80015e4:	6811      	ldreq	r1, [r2, #0]
 80015e6:	6852      	ldreq	r2, [r2, #4]
 80015e8:	6062      	str	r2, [r4, #4]
 80015ea:	bf04      	itt	eq
 80015ec:	1809      	addeq	r1, r1, r0
 80015ee:	6021      	streq	r1, [r4, #0]
 80015f0:	605c      	str	r4, [r3, #4]
 80015f2:	e7c7      	b.n	8001584 <_free_r+0x24>
 80015f4:	bd38      	pop	{r3, r4, r5, pc}
 80015f6:	bf00      	nop
 80015f8:	20000090 	.word	0x20000090

080015fc <_malloc_r>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	1ccd      	adds	r5, r1, #3
 8001600:	f025 0503 	bic.w	r5, r5, #3
 8001604:	3508      	adds	r5, #8
 8001606:	2d0c      	cmp	r5, #12
 8001608:	bf38      	it	cc
 800160a:	250c      	movcc	r5, #12
 800160c:	2d00      	cmp	r5, #0
 800160e:	4606      	mov	r6, r0
 8001610:	db01      	blt.n	8001616 <_malloc_r+0x1a>
 8001612:	42a9      	cmp	r1, r5
 8001614:	d903      	bls.n	800161e <_malloc_r+0x22>
 8001616:	230c      	movs	r3, #12
 8001618:	6033      	str	r3, [r6, #0]
 800161a:	2000      	movs	r0, #0
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	f000 f881 	bl	8001724 <__malloc_lock>
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <_malloc_r+0xb4>)
 8001624:	6814      	ldr	r4, [r2, #0]
 8001626:	4621      	mov	r1, r4
 8001628:	b991      	cbnz	r1, 8001650 <_malloc_r+0x54>
 800162a:	4c22      	ldr	r4, [pc, #136]	; (80016b4 <_malloc_r+0xb8>)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	b91b      	cbnz	r3, 8001638 <_malloc_r+0x3c>
 8001630:	4630      	mov	r0, r6
 8001632:	f000 f867 	bl	8001704 <_sbrk_r>
 8001636:	6020      	str	r0, [r4, #0]
 8001638:	4629      	mov	r1, r5
 800163a:	4630      	mov	r0, r6
 800163c:	f000 f862 	bl	8001704 <_sbrk_r>
 8001640:	1c43      	adds	r3, r0, #1
 8001642:	d126      	bne.n	8001692 <_malloc_r+0x96>
 8001644:	230c      	movs	r3, #12
 8001646:	6033      	str	r3, [r6, #0]
 8001648:	4630      	mov	r0, r6
 800164a:	f000 f86c 	bl	8001726 <__malloc_unlock>
 800164e:	e7e4      	b.n	800161a <_malloc_r+0x1e>
 8001650:	680b      	ldr	r3, [r1, #0]
 8001652:	1b5b      	subs	r3, r3, r5
 8001654:	d41a      	bmi.n	800168c <_malloc_r+0x90>
 8001656:	2b0b      	cmp	r3, #11
 8001658:	d90f      	bls.n	800167a <_malloc_r+0x7e>
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	50cd      	str	r5, [r1, r3]
 800165e:	18cc      	adds	r4, r1, r3
 8001660:	4630      	mov	r0, r6
 8001662:	f000 f860 	bl	8001726 <__malloc_unlock>
 8001666:	f104 000b 	add.w	r0, r4, #11
 800166a:	1d23      	adds	r3, r4, #4
 800166c:	f020 0007 	bic.w	r0, r0, #7
 8001670:	1ac3      	subs	r3, r0, r3
 8001672:	d01b      	beq.n	80016ac <_malloc_r+0xb0>
 8001674:	425a      	negs	r2, r3
 8001676:	50e2      	str	r2, [r4, r3]
 8001678:	bd70      	pop	{r4, r5, r6, pc}
 800167a:	428c      	cmp	r4, r1
 800167c:	bf0d      	iteet	eq
 800167e:	6863      	ldreq	r3, [r4, #4]
 8001680:	684b      	ldrne	r3, [r1, #4]
 8001682:	6063      	strne	r3, [r4, #4]
 8001684:	6013      	streq	r3, [r2, #0]
 8001686:	bf18      	it	ne
 8001688:	460c      	movne	r4, r1
 800168a:	e7e9      	b.n	8001660 <_malloc_r+0x64>
 800168c:	460c      	mov	r4, r1
 800168e:	6849      	ldr	r1, [r1, #4]
 8001690:	e7ca      	b.n	8001628 <_malloc_r+0x2c>
 8001692:	1cc4      	adds	r4, r0, #3
 8001694:	f024 0403 	bic.w	r4, r4, #3
 8001698:	42a0      	cmp	r0, r4
 800169a:	d005      	beq.n	80016a8 <_malloc_r+0xac>
 800169c:	1a21      	subs	r1, r4, r0
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 f830 	bl	8001704 <_sbrk_r>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d0cd      	beq.n	8001644 <_malloc_r+0x48>
 80016a8:	6025      	str	r5, [r4, #0]
 80016aa:	e7d9      	b.n	8001660 <_malloc_r+0x64>
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	bf00      	nop
 80016b0:	20000090 	.word	0x20000090
 80016b4:	20000094 	.word	0x20000094

080016b8 <_realloc_r>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	4607      	mov	r7, r0
 80016bc:	4614      	mov	r4, r2
 80016be:	460e      	mov	r6, r1
 80016c0:	b921      	cbnz	r1, 80016cc <_realloc_r+0x14>
 80016c2:	4611      	mov	r1, r2
 80016c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80016c8:	f7ff bf98 	b.w	80015fc <_malloc_r>
 80016cc:	b922      	cbnz	r2, 80016d8 <_realloc_r+0x20>
 80016ce:	f7ff ff47 	bl	8001560 <_free_r>
 80016d2:	4625      	mov	r5, r4
 80016d4:	4628      	mov	r0, r5
 80016d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d8:	f000 f826 	bl	8001728 <_malloc_usable_size_r>
 80016dc:	4284      	cmp	r4, r0
 80016de:	d90f      	bls.n	8001700 <_realloc_r+0x48>
 80016e0:	4621      	mov	r1, r4
 80016e2:	4638      	mov	r0, r7
 80016e4:	f7ff ff8a 	bl	80015fc <_malloc_r>
 80016e8:	4605      	mov	r5, r0
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d0f2      	beq.n	80016d4 <_realloc_r+0x1c>
 80016ee:	4631      	mov	r1, r6
 80016f0:	4622      	mov	r2, r4
 80016f2:	f7ff ff0f 	bl	8001514 <memcpy>
 80016f6:	4631      	mov	r1, r6
 80016f8:	4638      	mov	r0, r7
 80016fa:	f7ff ff31 	bl	8001560 <_free_r>
 80016fe:	e7e9      	b.n	80016d4 <_realloc_r+0x1c>
 8001700:	4635      	mov	r5, r6
 8001702:	e7e7      	b.n	80016d4 <_realloc_r+0x1c>

08001704 <_sbrk_r>:
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4c06      	ldr	r4, [pc, #24]	; (8001720 <_sbrk_r+0x1c>)
 8001708:	2300      	movs	r3, #0
 800170a:	4605      	mov	r5, r0
 800170c:	4608      	mov	r0, r1
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	f000 f87c 	bl	800180c <_sbrk>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d102      	bne.n	800171e <_sbrk_r+0x1a>
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	b103      	cbz	r3, 800171e <_sbrk_r+0x1a>
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	200000b0 	.word	0x200000b0

08001724 <__malloc_lock>:
 8001724:	4770      	bx	lr

08001726 <__malloc_unlock>:
 8001726:	4770      	bx	lr

08001728 <_malloc_usable_size_r>:
 8001728:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800172c:	2800      	cmp	r0, #0
 800172e:	f1a0 0004 	sub.w	r0, r0, #4
 8001732:	bfbc      	itt	lt
 8001734:	580b      	ldrlt	r3, [r1, r0]
 8001736:	18c0      	addlt	r0, r0, r3
 8001738:	4770      	bx	lr

0800173a <cleanup_glue>:
 800173a:	b538      	push	{r3, r4, r5, lr}
 800173c:	460c      	mov	r4, r1
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4605      	mov	r5, r0
 8001742:	b109      	cbz	r1, 8001748 <cleanup_glue+0xe>
 8001744:	f7ff fff9 	bl	800173a <cleanup_glue>
 8001748:	4621      	mov	r1, r4
 800174a:	4628      	mov	r0, r5
 800174c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001750:	f7ff bf06 	b.w	8001560 <_free_r>

08001754 <_reclaim_reent>:
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <_reclaim_reent+0xb4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4283      	cmp	r3, r0
 800175a:	b570      	push	{r4, r5, r6, lr}
 800175c:	4604      	mov	r4, r0
 800175e:	d051      	beq.n	8001804 <_reclaim_reent+0xb0>
 8001760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001762:	b1ab      	cbz	r3, 8001790 <_reclaim_reent+0x3c>
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	b16b      	cbz	r3, 8001784 <_reclaim_reent+0x30>
 8001768:	2500      	movs	r5, #0
 800176a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	5959      	ldr	r1, [r3, r5]
 8001770:	2900      	cmp	r1, #0
 8001772:	d141      	bne.n	80017f8 <_reclaim_reent+0xa4>
 8001774:	3504      	adds	r5, #4
 8001776:	2d80      	cmp	r5, #128	; 0x80
 8001778:	d1f7      	bne.n	800176a <_reclaim_reent+0x16>
 800177a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800177c:	4620      	mov	r0, r4
 800177e:	68d9      	ldr	r1, [r3, #12]
 8001780:	f7ff feee 	bl	8001560 <_free_r>
 8001784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001786:	6819      	ldr	r1, [r3, #0]
 8001788:	b111      	cbz	r1, 8001790 <_reclaim_reent+0x3c>
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fee8 	bl	8001560 <_free_r>
 8001790:	6961      	ldr	r1, [r4, #20]
 8001792:	b111      	cbz	r1, 800179a <_reclaim_reent+0x46>
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff fee3 	bl	8001560 <_free_r>
 800179a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800179c:	b111      	cbz	r1, 80017a4 <_reclaim_reent+0x50>
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fede 	bl	8001560 <_free_r>
 80017a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80017a6:	b111      	cbz	r1, 80017ae <_reclaim_reent+0x5a>
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fed9 	bl	8001560 <_free_r>
 80017ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017b0:	b111      	cbz	r1, 80017b8 <_reclaim_reent+0x64>
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff fed4 	bl	8001560 <_free_r>
 80017b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80017ba:	b111      	cbz	r1, 80017c2 <_reclaim_reent+0x6e>
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fecf 	bl	8001560 <_free_r>
 80017c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80017c4:	b111      	cbz	r1, 80017cc <_reclaim_reent+0x78>
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff feca 	bl	8001560 <_free_r>
 80017cc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80017ce:	b111      	cbz	r1, 80017d6 <_reclaim_reent+0x82>
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff fec5 	bl	8001560 <_free_r>
 80017d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017d8:	b111      	cbz	r1, 80017e0 <_reclaim_reent+0x8c>
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fec0 	bl	8001560 <_free_r>
 80017e0:	69a3      	ldr	r3, [r4, #24]
 80017e2:	b17b      	cbz	r3, 8001804 <_reclaim_reent+0xb0>
 80017e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017e6:	4620      	mov	r0, r4
 80017e8:	4798      	blx	r3
 80017ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80017ec:	b151      	cbz	r1, 8001804 <_reclaim_reent+0xb0>
 80017ee:	4620      	mov	r0, r4
 80017f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80017f4:	f7ff bfa1 	b.w	800173a <cleanup_glue>
 80017f8:	680e      	ldr	r6, [r1, #0]
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff feb0 	bl	8001560 <_free_r>
 8001800:	4631      	mov	r1, r6
 8001802:	e7b5      	b.n	8001770 <_reclaim_reent+0x1c>
 8001804:	bd70      	pop	{r4, r5, r6, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <_sbrk>:
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <_sbrk+0x14>)
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	4602      	mov	r2, r0
 8001812:	b909      	cbnz	r1, 8001818 <_sbrk+0xc>
 8001814:	4903      	ldr	r1, [pc, #12]	; (8001824 <_sbrk+0x18>)
 8001816:	6019      	str	r1, [r3, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	4402      	add	r2, r0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	4770      	bx	lr
 8001820:	20000098 	.word	0x20000098
 8001824:	200000b4 	.word	0x200000b4

08001828 <__EH_FRAME_BEGIN__>:
 8001828:	00000000                                ....

0800182c <_init>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr

08001838 <_fini>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr
