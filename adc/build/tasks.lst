ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTaskIsTaskSuspended:
  24              	.LVL0:
  25              	.LFB80:
  26              		.file 1 "FreeRTOS/src/tasks.c"
   1:FreeRTOS/src/tasks.c **** /*
   2:FreeRTOS/src/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/tasks.c ****  *
   5:FreeRTOS/src/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/tasks.c ****  * subject to the following conditions:
  11:FreeRTOS/src/tasks.c ****  *
  12:FreeRTOS/src/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/tasks.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/tasks.c ****  *
  15:FreeRTOS/src/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/tasks.c ****  *
  22:FreeRTOS/src/tasks.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/tasks.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/tasks.c ****  *
  25:FreeRTOS/src/tasks.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/tasks.c ****  */
  27:FreeRTOS/src/tasks.c **** 
  28:FreeRTOS/src/tasks.c **** /* Standard includes. */
  29:FreeRTOS/src/tasks.c **** #include <stdlib.h>
  30:FreeRTOS/src/tasks.c **** #include <string.h>
  31:FreeRTOS/src/tasks.c **** 
  32:FreeRTOS/src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 2


  33:FreeRTOS/src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:FreeRTOS/src/tasks.c **** task.h is included from an application file. */
  35:FreeRTOS/src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:FreeRTOS/src/tasks.c **** 
  37:FreeRTOS/src/tasks.c **** /* FreeRTOS includes. */
  38:FreeRTOS/src/tasks.c **** #include "FreeRTOS.h"
  39:FreeRTOS/src/tasks.c **** #include "task.h"
  40:FreeRTOS/src/tasks.c **** #include "timers.h"
  41:FreeRTOS/src/tasks.c **** #include "stack_macros.h"
  42:FreeRTOS/src/tasks.c **** 
  43:FreeRTOS/src/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:FreeRTOS/src/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:FreeRTOS/src/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:FreeRTOS/src/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:FreeRTOS/src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:FreeRTOS/src/tasks.c **** 
  49:FreeRTOS/src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:FreeRTOS/src/tasks.c **** functions but without including stdio.h here. */
  51:FreeRTOS/src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:FreeRTOS/src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:FreeRTOS/src/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:FreeRTOS/src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:FreeRTOS/src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:FreeRTOS/src/tasks.c **** 	#include <stdio.h>
  57:FreeRTOS/src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:FreeRTOS/src/tasks.c **** 
  59:FreeRTOS/src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:FreeRTOS/src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:FreeRTOS/src/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:FreeRTOS/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:FreeRTOS/src/tasks.c **** #else
  64:FreeRTOS/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:FreeRTOS/src/tasks.c **** #endif
  66:FreeRTOS/src/tasks.c **** 
  67:FreeRTOS/src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:FreeRTOS/src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:FreeRTOS/src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:FreeRTOS/src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:FreeRTOS/src/tasks.c **** 
  72:FreeRTOS/src/tasks.c **** /*
  73:FreeRTOS/src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:FreeRTOS/src/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:FreeRTOS/src/tasks.c ****  */
  76:FreeRTOS/src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:FreeRTOS/src/tasks.c **** 
  78:FreeRTOS/src/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:FreeRTOS/src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:FreeRTOS/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:FreeRTOS/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:FreeRTOS/src/tasks.c **** 
  83:FreeRTOS/src/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:FreeRTOS/src/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:FreeRTOS/src/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:FreeRTOS/src/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:FreeRTOS/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:FreeRTOS/src/tasks.c **** #else
  89:FreeRTOS/src/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 3


  90:FreeRTOS/src/tasks.c **** #endif
  91:FreeRTOS/src/tasks.c **** 
  92:FreeRTOS/src/tasks.c **** /*
  93:FreeRTOS/src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:FreeRTOS/src/tasks.c ****  */
  95:FreeRTOS/src/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:FreeRTOS/src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:FreeRTOS/src/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:FreeRTOS/src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:FreeRTOS/src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:FreeRTOS/src/tasks.c **** 
 101:FreeRTOS/src/tasks.c **** /*
 102:FreeRTOS/src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:FreeRTOS/src/tasks.c ****  * global, rather than file scope.
 104:FreeRTOS/src/tasks.c ****  */
 105:FreeRTOS/src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:FreeRTOS/src/tasks.c **** 	#define static
 107:FreeRTOS/src/tasks.c **** #endif
 108:FreeRTOS/src/tasks.c **** 
 109:FreeRTOS/src/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:FreeRTOS/src/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:FreeRTOS/src/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:FreeRTOS/src/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:FreeRTOS/src/tasks.c **** #endif
 114:FreeRTOS/src/tasks.c **** 
 115:FreeRTOS/src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:FreeRTOS/src/tasks.c **** 
 117:FreeRTOS/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:FreeRTOS/src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:FreeRTOS/src/tasks.c **** 	microcontroller architecture. */
 120:FreeRTOS/src/tasks.c **** 
 121:FreeRTOS/src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:FreeRTOS/src/tasks.c **** 	state task. */
 123:FreeRTOS/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:FreeRTOS/src/tasks.c **** 	{																									\
 125:FreeRTOS/src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:FreeRTOS/src/tasks.c **** 		{																								\
 127:FreeRTOS/src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:FreeRTOS/src/tasks.c **** 		}																								\
 129:FreeRTOS/src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:FreeRTOS/src/tasks.c **** 
 131:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 132:FreeRTOS/src/tasks.c **** 
 133:FreeRTOS/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:FreeRTOS/src/tasks.c **** 	{																									\
 135:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:FreeRTOS/src/tasks.c **** 																										\
 137:FreeRTOS/src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:FreeRTOS/src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:FreeRTOS/src/tasks.c **** 		{																								\
 140:FreeRTOS/src/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:FreeRTOS/src/tasks.c **** 			--uxTopPriority;																			\
 142:FreeRTOS/src/tasks.c **** 		}																								\
 143:FreeRTOS/src/tasks.c **** 																										\
 144:FreeRTOS/src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:FreeRTOS/src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:FreeRTOS/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 4


 147:FreeRTOS/src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:FreeRTOS/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:FreeRTOS/src/tasks.c **** 
 150:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 151:FreeRTOS/src/tasks.c **** 
 152:FreeRTOS/src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:FreeRTOS/src/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:FreeRTOS/src/tasks.c **** 	being used. */
 155:FreeRTOS/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:FreeRTOS/src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:FreeRTOS/src/tasks.c **** 
 158:FreeRTOS/src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:FreeRTOS/src/tasks.c **** 
 160:FreeRTOS/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:FreeRTOS/src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:FreeRTOS/src/tasks.c **** 	architecture being used. */
 163:FreeRTOS/src/tasks.c **** 
 164:FreeRTOS/src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:FreeRTOS/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:FreeRTOS/src/tasks.c **** 
 167:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 168:FreeRTOS/src/tasks.c **** 
 169:FreeRTOS/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:FreeRTOS/src/tasks.c **** 	{																								\
 171:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:FreeRTOS/src/tasks.c **** 																									\
 173:FreeRTOS/src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:FreeRTOS/src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:FreeRTOS/src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:FreeRTOS/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:FreeRTOS/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:FreeRTOS/src/tasks.c **** 
 179:FreeRTOS/src/tasks.c **** 	/*-----------------------------------------------------------*/
 180:FreeRTOS/src/tasks.c **** 
 181:FreeRTOS/src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:FreeRTOS/src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:FreeRTOS/src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:FreeRTOS/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:FreeRTOS/src/tasks.c **** 	{																									\
 186:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:FreeRTOS/src/tasks.c **** 		{																								\
 188:FreeRTOS/src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:FreeRTOS/src/tasks.c **** 		}																								\
 190:FreeRTOS/src/tasks.c **** 	}
 191:FreeRTOS/src/tasks.c **** 
 192:FreeRTOS/src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:FreeRTOS/src/tasks.c **** 
 194:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 195:FreeRTOS/src/tasks.c **** 
 196:FreeRTOS/src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:FreeRTOS/src/tasks.c **** count overflows. */
 198:FreeRTOS/src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:FreeRTOS/src/tasks.c **** {																									\
 200:FreeRTOS/src/tasks.c **** 	List_t *pxTemp;																					\
 201:FreeRTOS/src/tasks.c **** 																									\
 202:FreeRTOS/src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:FreeRTOS/src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 5


 204:FreeRTOS/src/tasks.c **** 																									\
 205:FreeRTOS/src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:FreeRTOS/src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:FreeRTOS/src/tasks.c **** 	xNumOfOverflows++;																				\
 209:FreeRTOS/src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:FreeRTOS/src/tasks.c **** }
 211:FreeRTOS/src/tasks.c **** 
 212:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 213:FreeRTOS/src/tasks.c **** 
 214:FreeRTOS/src/tasks.c **** /*
 215:FreeRTOS/src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:FreeRTOS/src/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:FreeRTOS/src/tasks.c ****  */
 218:FreeRTOS/src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:FreeRTOS/src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:FreeRTOS/src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:FreeRTOS/src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:FreeRTOS/src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 224:FreeRTOS/src/tasks.c **** 
 225:FreeRTOS/src/tasks.c **** /*
 226:FreeRTOS/src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:FreeRTOS/src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:FreeRTOS/src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:FreeRTOS/src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:FreeRTOS/src/tasks.c ****  */
 231:FreeRTOS/src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:FreeRTOS/src/tasks.c **** 
 233:FreeRTOS/src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:FreeRTOS/src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:FreeRTOS/src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:FreeRTOS/src/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:FreeRTOS/src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:FreeRTOS/src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:FreeRTOS/src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:FreeRTOS/src/tasks.c **** to its original value when it is released. */
 241:FreeRTOS/src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:FreeRTOS/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:FreeRTOS/src/tasks.c **** #else
 244:FreeRTOS/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:FreeRTOS/src/tasks.c **** #endif
 246:FreeRTOS/src/tasks.c **** 
 247:FreeRTOS/src/tasks.c **** /*
 248:FreeRTOS/src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:FreeRTOS/src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:FreeRTOS/src/tasks.c ****  * (the task's run time environment, including register values)
 251:FreeRTOS/src/tasks.c ****  */
 252:FreeRTOS/src/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:FreeRTOS/src/tasks.c **** {
 254:FreeRTOS/src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:FreeRTOS/src/tasks.c **** 
 256:FreeRTOS/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:FreeRTOS/src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:FreeRTOS/src/tasks.c **** 	#endif
 259:FreeRTOS/src/tasks.c **** 
 260:FreeRTOS/src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 6


 261:FreeRTOS/src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:FreeRTOS/src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:FreeRTOS/src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:FreeRTOS/src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:FreeRTOS/src/tasks.c **** 
 266:FreeRTOS/src/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:FreeRTOS/src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:FreeRTOS/src/tasks.c **** 	#endif
 269:FreeRTOS/src/tasks.c **** 
 270:FreeRTOS/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:FreeRTOS/src/tasks.c **** 	#endif
 273:FreeRTOS/src/tasks.c **** 
 274:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:FreeRTOS/src/tasks.c **** 	#endif
 278:FreeRTOS/src/tasks.c **** 
 279:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:FreeRTOS/src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:FreeRTOS/src/tasks.c **** 	#endif
 283:FreeRTOS/src/tasks.c **** 
 284:FreeRTOS/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:FreeRTOS/src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:FreeRTOS/src/tasks.c **** 	#endif
 287:FreeRTOS/src/tasks.c **** 
 288:FreeRTOS/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:FreeRTOS/src/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:FreeRTOS/src/tasks.c **** 	#endif
 291:FreeRTOS/src/tasks.c **** 
 292:FreeRTOS/src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:FreeRTOS/src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:FreeRTOS/src/tasks.c **** 	#endif
 295:FreeRTOS/src/tasks.c **** 
 296:FreeRTOS/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:FreeRTOS/src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:FreeRTOS/src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:FreeRTOS/src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:FreeRTOS/src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:FreeRTOS/src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:FreeRTOS/src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:FreeRTOS/src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:FreeRTOS/src/tasks.c **** 
 305:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:FreeRTOS/src/tasks.c **** 		for additional information. */
 307:FreeRTOS/src/tasks.c **** 		struct	_reent xNewLib_reent;
 308:FreeRTOS/src/tasks.c **** 	#endif
 309:FreeRTOS/src/tasks.c **** 
 310:FreeRTOS/src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:FreeRTOS/src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:FreeRTOS/src/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:FreeRTOS/src/tasks.c **** 	#endif
 314:FreeRTOS/src/tasks.c **** 
 315:FreeRTOS/src/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:FreeRTOS/src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:FreeRTOS/src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 7


 318:FreeRTOS/src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:FreeRTOS/src/tasks.c **** 	#endif
 320:FreeRTOS/src/tasks.c **** 
 321:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:FreeRTOS/src/tasks.c **** 		uint8_t ucDelayAborted;
 323:FreeRTOS/src/tasks.c **** 	#endif
 324:FreeRTOS/src/tasks.c **** 
 325:FreeRTOS/src/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:FreeRTOS/src/tasks.c **** 		int iTaskErrno;
 327:FreeRTOS/src/tasks.c **** 	#endif
 328:FreeRTOS/src/tasks.c **** 
 329:FreeRTOS/src/tasks.c **** } tskTCB;
 330:FreeRTOS/src/tasks.c **** 
 331:FreeRTOS/src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:FreeRTOS/src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:FreeRTOS/src/tasks.c **** typedef tskTCB TCB_t;
 334:FreeRTOS/src/tasks.c **** 
 335:FreeRTOS/src/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:FreeRTOS/src/tasks.c **** which static variables must be declared volatile. */
 337:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:FreeRTOS/src/tasks.c **** 
 339:FreeRTOS/src/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:FreeRTOS/src/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:FreeRTOS/src/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:FreeRTOS/src/tasks.c **** the static qualifier. */
 343:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:FreeRTOS/src/tasks.c **** 
 350:FreeRTOS/src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:FreeRTOS/src/tasks.c **** 
 352:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:FreeRTOS/src/tasks.c **** 
 355:FreeRTOS/src/tasks.c **** #endif
 356:FreeRTOS/src/tasks.c **** 
 357:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:FreeRTOS/src/tasks.c **** 
 359:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:FreeRTOS/src/tasks.c **** 
 361:FreeRTOS/src/tasks.c **** #endif
 362:FreeRTOS/src/tasks.c **** 
 363:FreeRTOS/src/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:FreeRTOS/src/tasks.c **** the errno of the currently running task. */
 365:FreeRTOS/src/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:FreeRTOS/src/tasks.c **** 	int FreeRTOS_errno = 0;
 367:FreeRTOS/src/tasks.c **** #endif
 368:FreeRTOS/src/tasks.c **** 
 369:FreeRTOS/src/tasks.c **** /* Other file private variables. --------------------------------*/
 370:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 8


 375:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:FreeRTOS/src/tasks.c **** 
 381:FreeRTOS/src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:FreeRTOS/src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:FreeRTOS/src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:FreeRTOS/src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:FreeRTOS/src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:FreeRTOS/src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:FreeRTOS/src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:FreeRTOS/src/tasks.c **** accessed from a critical section. */
 389:FreeRTOS/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:FreeRTOS/src/tasks.c **** 
 391:FreeRTOS/src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:FreeRTOS/src/tasks.c **** 
 393:FreeRTOS/src/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:FreeRTOS/src/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:FreeRTOS/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:FreeRTOS/src/tasks.c **** 
 398:FreeRTOS/src/tasks.c **** #endif
 399:FreeRTOS/src/tasks.c **** 
 400:FreeRTOS/src/tasks.c **** /*lint -restore */
 401:FreeRTOS/src/tasks.c **** 
 402:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 403:FreeRTOS/src/tasks.c **** 
 404:FreeRTOS/src/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:FreeRTOS/src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:FreeRTOS/src/tasks.c **** 
 407:FreeRTOS/src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:FreeRTOS/src/tasks.c **** 
 409:FreeRTOS/src/tasks.c **** #endif
 410:FreeRTOS/src/tasks.c **** 
 411:FreeRTOS/src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:FreeRTOS/src/tasks.c **** 
 413:FreeRTOS/src/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:FreeRTOS/src/tasks.c **** 
 415:FreeRTOS/src/tasks.c **** #endif
 416:FreeRTOS/src/tasks.c **** 
 417:FreeRTOS/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:FreeRTOS/src/tasks.c **** 
 419:FreeRTOS/src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:FreeRTOS/src/tasks.c **** 
 421:FreeRTOS/src/tasks.c **** #endif
 422:FreeRTOS/src/tasks.c **** 
 423:FreeRTOS/src/tasks.c **** /* File private functions. --------------------------------*/
 424:FreeRTOS/src/tasks.c **** 
 425:FreeRTOS/src/tasks.c **** /**
 426:FreeRTOS/src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:FreeRTOS/src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:FreeRTOS/src/tasks.c ****  * is in any other state.
 429:FreeRTOS/src/tasks.c ****  */
 430:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 9


 432:FreeRTOS/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:FreeRTOS/src/tasks.c **** 
 434:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:FreeRTOS/src/tasks.c **** 
 436:FreeRTOS/src/tasks.c **** /*
 437:FreeRTOS/src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:FreeRTOS/src/tasks.c ****  * automatically upon the creation of the first task.
 439:FreeRTOS/src/tasks.c ****  */
 440:FreeRTOS/src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:FreeRTOS/src/tasks.c **** 
 442:FreeRTOS/src/tasks.c **** /*
 443:FreeRTOS/src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:FreeRTOS/src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:FreeRTOS/src/tasks.c ****  * creation of the first user task.
 446:FreeRTOS/src/tasks.c ****  *
 447:FreeRTOS/src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:FreeRTOS/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:FreeRTOS/src/tasks.c ****  *
 450:FreeRTOS/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:FreeRTOS/src/tasks.c ****  *
 452:FreeRTOS/src/tasks.c ****  */
 453:FreeRTOS/src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:FreeRTOS/src/tasks.c **** 
 455:FreeRTOS/src/tasks.c **** /*
 456:FreeRTOS/src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:FreeRTOS/src/tasks.c ****  * including the stack pointed to by the TCB.
 458:FreeRTOS/src/tasks.c ****  *
 459:FreeRTOS/src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:FreeRTOS/src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:FreeRTOS/src/tasks.c ****  */
 462:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:FreeRTOS/src/tasks.c **** 
 464:FreeRTOS/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:FreeRTOS/src/tasks.c **** 
 466:FreeRTOS/src/tasks.c **** #endif
 467:FreeRTOS/src/tasks.c **** 
 468:FreeRTOS/src/tasks.c **** /*
 469:FreeRTOS/src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:FreeRTOS/src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:FreeRTOS/src/tasks.c ****  * and its TCB deleted.
 472:FreeRTOS/src/tasks.c ****  */
 473:FreeRTOS/src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:FreeRTOS/src/tasks.c **** 
 475:FreeRTOS/src/tasks.c **** /*
 476:FreeRTOS/src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:FreeRTOS/src/tasks.c ****  * either the current or the overflow delayed task list.
 478:FreeRTOS/src/tasks.c ****  */
 479:FreeRTOS/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:FreeRTOS/src/tasks.c **** 
 481:FreeRTOS/src/tasks.c **** /*
 482:FreeRTOS/src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:FreeRTOS/src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:FreeRTOS/src/tasks.c ****  * a suspended list, etc.).
 485:FreeRTOS/src/tasks.c ****  *
 486:FreeRTOS/src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:FreeRTOS/src/tasks.c ****  * NORMAL APPLICATION CODE.
 488:FreeRTOS/src/tasks.c ****  */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 10


 489:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:FreeRTOS/src/tasks.c **** 
 491:FreeRTOS/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:FreeRTOS/src/tasks.c **** 
 493:FreeRTOS/src/tasks.c **** #endif
 494:FreeRTOS/src/tasks.c **** 
 495:FreeRTOS/src/tasks.c **** /*
 496:FreeRTOS/src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:FreeRTOS/src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:FreeRTOS/src/tasks.c ****  */
 499:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:FreeRTOS/src/tasks.c **** 
 501:FreeRTOS/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:FreeRTOS/src/tasks.c **** 
 503:FreeRTOS/src/tasks.c **** #endif
 504:FreeRTOS/src/tasks.c **** 
 505:FreeRTOS/src/tasks.c **** /*
 506:FreeRTOS/src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:FreeRTOS/src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:FreeRTOS/src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:FreeRTOS/src/tasks.c ****  */
 510:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:FreeRTOS/src/tasks.c **** 
 512:FreeRTOS/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:FreeRTOS/src/tasks.c **** 
 514:FreeRTOS/src/tasks.c **** #endif
 515:FreeRTOS/src/tasks.c **** 
 516:FreeRTOS/src/tasks.c **** /*
 517:FreeRTOS/src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:FreeRTOS/src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:FreeRTOS/src/tasks.c ****  *
 520:FreeRTOS/src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:FreeRTOS/src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:FreeRTOS/src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:FreeRTOS/src/tasks.c ****  * set to a value other than 1.
 524:FreeRTOS/src/tasks.c ****  */
 525:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:FreeRTOS/src/tasks.c **** 
 527:FreeRTOS/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:FreeRTOS/src/tasks.c **** 
 529:FreeRTOS/src/tasks.c **** #endif
 530:FreeRTOS/src/tasks.c **** 
 531:FreeRTOS/src/tasks.c **** /*
 532:FreeRTOS/src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:FreeRTOS/src/tasks.c ****  * will exit the Blocked state.
 534:FreeRTOS/src/tasks.c ****  */
 535:FreeRTOS/src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:FreeRTOS/src/tasks.c **** 
 537:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:FreeRTOS/src/tasks.c **** 
 539:FreeRTOS/src/tasks.c **** 	/*
 540:FreeRTOS/src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:FreeRTOS/src/tasks.c **** 	 * human readable tables of task information.
 542:FreeRTOS/src/tasks.c **** 	 */
 543:FreeRTOS/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:FreeRTOS/src/tasks.c **** 
 545:FreeRTOS/src/tasks.c **** #endif
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 11


 546:FreeRTOS/src/tasks.c **** 
 547:FreeRTOS/src/tasks.c **** /*
 548:FreeRTOS/src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:FreeRTOS/src/tasks.c ****  * dynamically to fill in the structure's members.
 550:FreeRTOS/src/tasks.c ****  */
 551:FreeRTOS/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:FreeRTOS/src/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 554:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 555:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
 556:FreeRTOS/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:FreeRTOS/src/tasks.c **** 									TCB_t *pxNewTCB,
 558:FreeRTOS/src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:FreeRTOS/src/tasks.c **** 
 560:FreeRTOS/src/tasks.c **** /*
 561:FreeRTOS/src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:FreeRTOS/src/tasks.c ****  * under the control of the scheduler.
 563:FreeRTOS/src/tasks.c ****  */
 564:FreeRTOS/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:FreeRTOS/src/tasks.c **** 
 566:FreeRTOS/src/tasks.c **** /*
 567:FreeRTOS/src/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:FreeRTOS/src/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:FreeRTOS/src/tasks.c ****  * called by the function.
 570:FreeRTOS/src/tasks.c ****  */
 571:FreeRTOS/src/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:FreeRTOS/src/tasks.c **** 
 573:FreeRTOS/src/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:FreeRTOS/src/tasks.c **** 
 575:FreeRTOS/src/tasks.c **** #endif
 576:FreeRTOS/src/tasks.c **** 
 577:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 578:FreeRTOS/src/tasks.c **** 
 579:FreeRTOS/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:FreeRTOS/src/tasks.c **** 
 581:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:FreeRTOS/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 584:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 585:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
 586:FreeRTOS/src/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:FreeRTOS/src/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:FreeRTOS/src/tasks.c **** 	{
 589:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 590:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
 591:FreeRTOS/src/tasks.c **** 
 592:FreeRTOS/src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:FreeRTOS/src/tasks.c **** 
 595:FreeRTOS/src/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:FreeRTOS/src/tasks.c **** 		{
 597:FreeRTOS/src/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:FreeRTOS/src/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:FreeRTOS/src/tasks.c **** 			structure. */
 600:FreeRTOS/src/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:FreeRTOS/src/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:FreeRTOS/src/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 12


 603:FreeRTOS/src/tasks.c **** 		}
 604:FreeRTOS/src/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:FreeRTOS/src/tasks.c **** 
 606:FreeRTOS/src/tasks.c **** 
 607:FreeRTOS/src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:FreeRTOS/src/tasks.c **** 		{
 609:FreeRTOS/src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:FreeRTOS/src/tasks.c **** 			function - use them. */
 611:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:FreeRTOS/src/tasks.c **** 
 614:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:FreeRTOS/src/tasks.c **** 			{
 616:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:FreeRTOS/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:FreeRTOS/src/tasks.c **** 			}
 620:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:FreeRTOS/src/tasks.c **** 
 622:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:FreeRTOS/src/tasks.c **** 		}
 625:FreeRTOS/src/tasks.c **** 		else
 626:FreeRTOS/src/tasks.c **** 		{
 627:FreeRTOS/src/tasks.c **** 			xReturn = NULL;
 628:FreeRTOS/src/tasks.c **** 		}
 629:FreeRTOS/src/tasks.c **** 
 630:FreeRTOS/src/tasks.c **** 		return xReturn;
 631:FreeRTOS/src/tasks.c **** 	}
 632:FreeRTOS/src/tasks.c **** 
 633:FreeRTOS/src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 635:FreeRTOS/src/tasks.c **** 
 636:FreeRTOS/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:FreeRTOS/src/tasks.c **** 
 638:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:FreeRTOS/src/tasks.c **** 	{
 640:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 641:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:FreeRTOS/src/tasks.c **** 
 643:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:FreeRTOS/src/tasks.c **** 
 646:FreeRTOS/src/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:FreeRTOS/src/tasks.c **** 		{
 648:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:FreeRTOS/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:FreeRTOS/src/tasks.c **** 			not static allocation is being used. */
 651:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:FreeRTOS/src/tasks.c **** 
 653:FreeRTOS/src/tasks.c **** 			/* Store the stack location in the TCB. */
 654:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:FreeRTOS/src/tasks.c **** 
 656:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:FreeRTOS/src/tasks.c **** 			{
 658:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:FreeRTOS/src/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 13


 660:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:FreeRTOS/src/tasks.c **** 			}
 662:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:FreeRTOS/src/tasks.c **** 
 664:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->pcName,
 666:FreeRTOS/src/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:FreeRTOS/src/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:FreeRTOS/src/tasks.c **** 									pxTaskDefinition->xRegions );
 671:FreeRTOS/src/tasks.c **** 
 672:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 674:FreeRTOS/src/tasks.c **** 		}
 675:FreeRTOS/src/tasks.c **** 
 676:FreeRTOS/src/tasks.c **** 		return xReturn;
 677:FreeRTOS/src/tasks.c **** 	}
 678:FreeRTOS/src/tasks.c **** 
 679:FreeRTOS/src/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 681:FreeRTOS/src/tasks.c **** 
 682:FreeRTOS/src/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:FreeRTOS/src/tasks.c **** 
 684:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:FreeRTOS/src/tasks.c **** 	{
 686:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 687:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:FreeRTOS/src/tasks.c **** 
 689:FreeRTOS/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:FreeRTOS/src/tasks.c **** 
 691:FreeRTOS/src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:FreeRTOS/src/tasks.c **** 		{
 693:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:FreeRTOS/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:FreeRTOS/src/tasks.c **** 			not static allocation is being used. */
 696:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:FreeRTOS/src/tasks.c **** 
 698:FreeRTOS/src/tasks.c **** 			if( pxNewTCB != NULL )
 699:FreeRTOS/src/tasks.c **** 			{
 700:FreeRTOS/src/tasks.c **** 				/* Store the stack location in the TCB. */
 701:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:FreeRTOS/src/tasks.c **** 
 703:FreeRTOS/src/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:FreeRTOS/src/tasks.c **** 				{
 705:FreeRTOS/src/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:FreeRTOS/src/tasks.c **** 					this task had a statically allocated stack in case it is
 707:FreeRTOS/src/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:FreeRTOS/src/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:FreeRTOS/src/tasks.c **** 				}
 710:FreeRTOS/src/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:FreeRTOS/src/tasks.c **** 
 712:FreeRTOS/src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->pcName,
 714:FreeRTOS/src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 14


 717:FreeRTOS/src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:FreeRTOS/src/tasks.c **** 										pxTaskDefinition->xRegions );
 719:FreeRTOS/src/tasks.c **** 
 720:FreeRTOS/src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 722:FreeRTOS/src/tasks.c **** 			}
 723:FreeRTOS/src/tasks.c **** 		}
 724:FreeRTOS/src/tasks.c **** 
 725:FreeRTOS/src/tasks.c **** 		return xReturn;
 726:FreeRTOS/src/tasks.c **** 	}
 727:FreeRTOS/src/tasks.c **** 
 728:FreeRTOS/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 730:FreeRTOS/src/tasks.c **** 
 731:FreeRTOS/src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:FreeRTOS/src/tasks.c **** 
 733:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:FreeRTOS/src/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:FreeRTOS/src/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:FreeRTOS/src/tasks.c **** 							void * const pvParameters,
 737:FreeRTOS/src/tasks.c **** 							UBaseType_t uxPriority,
 738:FreeRTOS/src/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:FreeRTOS/src/tasks.c **** 	{
 740:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 741:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 742:FreeRTOS/src/tasks.c **** 
 743:FreeRTOS/src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:FreeRTOS/src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:FreeRTOS/src/tasks.c **** 		the TCB then the stack. */
 746:FreeRTOS/src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:FreeRTOS/src/tasks.c **** 		{
 748:FreeRTOS/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:FreeRTOS/src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:FreeRTOS/src/tasks.c **** 			allocation is being used. */
 751:FreeRTOS/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:FreeRTOS/src/tasks.c **** 
 753:FreeRTOS/src/tasks.c **** 			if( pxNewTCB != NULL )
 754:FreeRTOS/src/tasks.c **** 			{
 755:FreeRTOS/src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:FreeRTOS/src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:FreeRTOS/src/tasks.c **** 				be deleted later if required. */
 758:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:FreeRTOS/src/tasks.c **** 
 760:FreeRTOS/src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:FreeRTOS/src/tasks.c **** 				{
 762:FreeRTOS/src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:FreeRTOS/src/tasks.c **** 					vPortFree( pxNewTCB );
 764:FreeRTOS/src/tasks.c **** 					pxNewTCB = NULL;
 765:FreeRTOS/src/tasks.c **** 				}
 766:FreeRTOS/src/tasks.c **** 			}
 767:FreeRTOS/src/tasks.c **** 		}
 768:FreeRTOS/src/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:FreeRTOS/src/tasks.c **** 		{
 770:FreeRTOS/src/tasks.c **** 		StackType_t *pxStack;
 771:FreeRTOS/src/tasks.c **** 
 772:FreeRTOS/src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:FreeRTOS/src/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 15


 774:FreeRTOS/src/tasks.c **** 
 775:FreeRTOS/src/tasks.c **** 			if( pxStack != NULL )
 776:FreeRTOS/src/tasks.c **** 			{
 777:FreeRTOS/src/tasks.c **** 				/* Allocate space for the TCB. */
 778:FreeRTOS/src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:FreeRTOS/src/tasks.c **** 
 780:FreeRTOS/src/tasks.c **** 				if( pxNewTCB != NULL )
 781:FreeRTOS/src/tasks.c **** 				{
 782:FreeRTOS/src/tasks.c **** 					/* Store the stack location in the TCB. */
 783:FreeRTOS/src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:FreeRTOS/src/tasks.c **** 				}
 785:FreeRTOS/src/tasks.c **** 				else
 786:FreeRTOS/src/tasks.c **** 				{
 787:FreeRTOS/src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:FreeRTOS/src/tasks.c **** 					it again. */
 789:FreeRTOS/src/tasks.c **** 					vPortFree( pxStack );
 790:FreeRTOS/src/tasks.c **** 				}
 791:FreeRTOS/src/tasks.c **** 			}
 792:FreeRTOS/src/tasks.c **** 			else
 793:FreeRTOS/src/tasks.c **** 			{
 794:FreeRTOS/src/tasks.c **** 				pxNewTCB = NULL;
 795:FreeRTOS/src/tasks.c **** 			}
 796:FreeRTOS/src/tasks.c **** 		}
 797:FreeRTOS/src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:FreeRTOS/src/tasks.c **** 
 799:FreeRTOS/src/tasks.c **** 		if( pxNewTCB != NULL )
 800:FreeRTOS/src/tasks.c **** 		{
 801:FreeRTOS/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:FreeRTOS/src/tasks.c **** 			{
 803:FreeRTOS/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:FreeRTOS/src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:FreeRTOS/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:FreeRTOS/src/tasks.c **** 			}
 807:FreeRTOS/src/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:FreeRTOS/src/tasks.c **** 
 809:FreeRTOS/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 812:FreeRTOS/src/tasks.c **** 		}
 813:FreeRTOS/src/tasks.c **** 		else
 814:FreeRTOS/src/tasks.c **** 		{
 815:FreeRTOS/src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:FreeRTOS/src/tasks.c **** 		}
 817:FreeRTOS/src/tasks.c **** 
 818:FreeRTOS/src/tasks.c **** 		return xReturn;
 819:FreeRTOS/src/tasks.c **** 	}
 820:FreeRTOS/src/tasks.c **** 
 821:FreeRTOS/src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 823:FreeRTOS/src/tasks.c **** 
 824:FreeRTOS/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:FreeRTOS/src/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:FreeRTOS/src/tasks.c **** 									const uint32_t ulStackDepth,
 827:FreeRTOS/src/tasks.c **** 									void * const pvParameters,
 828:FreeRTOS/src/tasks.c **** 									UBaseType_t uxPriority,
 829:FreeRTOS/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:FreeRTOS/src/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 16


 831:FreeRTOS/src/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:FreeRTOS/src/tasks.c **** {
 833:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 834:FreeRTOS/src/tasks.c **** UBaseType_t x;
 835:FreeRTOS/src/tasks.c **** 
 836:FreeRTOS/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:FreeRTOS/src/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:FreeRTOS/src/tasks.c **** 		BaseType_t xRunPrivileged;
 839:FreeRTOS/src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:FreeRTOS/src/tasks.c **** 		{
 841:FreeRTOS/src/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:FreeRTOS/src/tasks.c **** 		}
 843:FreeRTOS/src/tasks.c **** 		else
 844:FreeRTOS/src/tasks.c **** 		{
 845:FreeRTOS/src/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:FreeRTOS/src/tasks.c **** 		}
 847:FreeRTOS/src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:FreeRTOS/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:FreeRTOS/src/tasks.c **** 
 850:FreeRTOS/src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:FreeRTOS/src/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:FreeRTOS/src/tasks.c **** 	{
 853:FreeRTOS/src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:FreeRTOS/src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:FreeRTOS/src/tasks.c **** 	}
 856:FreeRTOS/src/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:FreeRTOS/src/tasks.c **** 
 858:FreeRTOS/src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:FreeRTOS/src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:FreeRTOS/src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:FreeRTOS/src/tasks.c **** 	by the port. */
 862:FreeRTOS/src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:FreeRTOS/src/tasks.c **** 	{
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:FreeRTOS/src/tasks.c **** 
 867:FreeRTOS/src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:FreeRTOS/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:FreeRTOS/src/tasks.c **** 
 870:FreeRTOS/src/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:FreeRTOS/src/tasks.c **** 		{
 872:FreeRTOS/src/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:FreeRTOS/src/tasks.c **** 			debugging. */
 874:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:FreeRTOS/src/tasks.c **** 		}
 876:FreeRTOS/src/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:FreeRTOS/src/tasks.c **** 	}
 878:FreeRTOS/src/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:FreeRTOS/src/tasks.c **** 	{
 880:FreeRTOS/src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:FreeRTOS/src/tasks.c **** 
 882:FreeRTOS/src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:FreeRTOS/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:FreeRTOS/src/tasks.c **** 
 885:FreeRTOS/src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:FreeRTOS/src/tasks.c **** 		performed. */
 887:FreeRTOS/src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 17


 888:FreeRTOS/src/tasks.c **** 	}
 889:FreeRTOS/src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:FreeRTOS/src/tasks.c **** 
 891:FreeRTOS/src/tasks.c **** 	/* Store the task name in the TCB. */
 892:FreeRTOS/src/tasks.c **** 	if( pcName != NULL )
 893:FreeRTOS/src/tasks.c **** 	{
 894:FreeRTOS/src/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:FreeRTOS/src/tasks.c **** 		{
 896:FreeRTOS/src/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:FreeRTOS/src/tasks.c **** 
 898:FreeRTOS/src/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:FreeRTOS/src/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:FreeRTOS/src/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:FreeRTOS/src/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:FreeRTOS/src/tasks.c **** 			{
 903:FreeRTOS/src/tasks.c **** 				break;
 904:FreeRTOS/src/tasks.c **** 			}
 905:FreeRTOS/src/tasks.c **** 			else
 906:FreeRTOS/src/tasks.c **** 			{
 907:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:FreeRTOS/src/tasks.c **** 			}
 909:FreeRTOS/src/tasks.c **** 		}
 910:FreeRTOS/src/tasks.c **** 
 911:FreeRTOS/src/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:FreeRTOS/src/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:FreeRTOS/src/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:FreeRTOS/src/tasks.c **** 	}
 915:FreeRTOS/src/tasks.c **** 	else
 916:FreeRTOS/src/tasks.c **** 	{
 917:FreeRTOS/src/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:FreeRTOS/src/tasks.c **** 		terminator when it is read out. */
 919:FreeRTOS/src/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:FreeRTOS/src/tasks.c **** 	}
 921:FreeRTOS/src/tasks.c **** 
 922:FreeRTOS/src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:FreeRTOS/src/tasks.c **** 	remove the privilege bit if one is present. */
 924:FreeRTOS/src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:FreeRTOS/src/tasks.c **** 	{
 926:FreeRTOS/src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:FreeRTOS/src/tasks.c **** 	}
 928:FreeRTOS/src/tasks.c **** 	else
 929:FreeRTOS/src/tasks.c **** 	{
 930:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:FreeRTOS/src/tasks.c **** 	}
 932:FreeRTOS/src/tasks.c **** 
 933:FreeRTOS/src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:FreeRTOS/src/tasks.c **** 	{
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:FreeRTOS/src/tasks.c **** 	}
 939:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:FreeRTOS/src/tasks.c **** 
 941:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:FreeRTOS/src/tasks.c **** 
 944:FreeRTOS/src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 18


 945:FreeRTOS/src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:FreeRTOS/src/tasks.c **** 
 948:FreeRTOS/src/tasks.c **** 	/* Event lists are always in priority order. */
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:FreeRTOS/src/tasks.c **** 
 952:FreeRTOS/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:FreeRTOS/src/tasks.c **** 	{
 954:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:FreeRTOS/src/tasks.c **** 	}
 956:FreeRTOS/src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:FreeRTOS/src/tasks.c **** 
 958:FreeRTOS/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:FreeRTOS/src/tasks.c **** 	{
 960:FreeRTOS/src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:FreeRTOS/src/tasks.c **** 	}
 962:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:FreeRTOS/src/tasks.c **** 
 964:FreeRTOS/src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:FreeRTOS/src/tasks.c **** 	{
 966:FreeRTOS/src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:FreeRTOS/src/tasks.c **** 	}
 968:FreeRTOS/src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:FreeRTOS/src/tasks.c **** 
 970:FreeRTOS/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:FreeRTOS/src/tasks.c **** 	{
 972:FreeRTOS/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:FreeRTOS/src/tasks.c **** 	}
 974:FreeRTOS/src/tasks.c **** 	#else
 975:FreeRTOS/src/tasks.c **** 	{
 976:FreeRTOS/src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:FreeRTOS/src/tasks.c **** 		( void ) xRegions;
 978:FreeRTOS/src/tasks.c **** 	}
 979:FreeRTOS/src/tasks.c **** 	#endif
 980:FreeRTOS/src/tasks.c **** 
 981:FreeRTOS/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:FreeRTOS/src/tasks.c **** 	{
 983:FreeRTOS/src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:FreeRTOS/src/tasks.c **** 		{
 985:FreeRTOS/src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:FreeRTOS/src/tasks.c **** 		}
 987:FreeRTOS/src/tasks.c **** 	}
 988:FreeRTOS/src/tasks.c **** 	#endif
 989:FreeRTOS/src/tasks.c **** 
 990:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:FreeRTOS/src/tasks.c **** 	{
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:FreeRTOS/src/tasks.c **** 	}
 995:FreeRTOS/src/tasks.c **** 	#endif
 996:FreeRTOS/src/tasks.c **** 
 997:FreeRTOS/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:FreeRTOS/src/tasks.c **** 	{
 999:FreeRTOS/src/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:FreeRTOS/src/tasks.c **** 		for additional information. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 19


1002:FreeRTOS/src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:FreeRTOS/src/tasks.c **** 	}
1004:FreeRTOS/src/tasks.c **** 	#endif
1005:FreeRTOS/src/tasks.c **** 
1006:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:FreeRTOS/src/tasks.c **** 	{
1008:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:FreeRTOS/src/tasks.c **** 	}
1010:FreeRTOS/src/tasks.c **** 	#endif
1011:FreeRTOS/src/tasks.c **** 
1012:FreeRTOS/src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:FreeRTOS/src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:FreeRTOS/src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:FreeRTOS/src/tasks.c **** 	the top of stack variable is updated. */
1016:FreeRTOS/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:FreeRTOS/src/tasks.c **** 	{
1018:FreeRTOS/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:FreeRTOS/src/tasks.c **** 		pass the stack end address to the stack initialization
1020:FreeRTOS/src/tasks.c **** 		function as well. */
1021:FreeRTOS/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:FreeRTOS/src/tasks.c **** 		{
1023:FreeRTOS/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:FreeRTOS/src/tasks.c **** 			{
1025:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:FreeRTOS/src/tasks.c **** 			}
1027:FreeRTOS/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:FreeRTOS/src/tasks.c **** 			{
1029:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:FreeRTOS/src/tasks.c **** 			}
1031:FreeRTOS/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:FreeRTOS/src/tasks.c **** 		}
1033:FreeRTOS/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:FreeRTOS/src/tasks.c **** 		{
1035:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:FreeRTOS/src/tasks.c **** 		}
1037:FreeRTOS/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:FreeRTOS/src/tasks.c **** 	}
1039:FreeRTOS/src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:FreeRTOS/src/tasks.c **** 	{
1041:FreeRTOS/src/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:FreeRTOS/src/tasks.c **** 		pass the stack end address to the stack initialization
1043:FreeRTOS/src/tasks.c **** 		function as well. */
1044:FreeRTOS/src/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:FreeRTOS/src/tasks.c **** 		{
1046:FreeRTOS/src/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:FreeRTOS/src/tasks.c **** 			{
1048:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:FreeRTOS/src/tasks.c **** 			}
1050:FreeRTOS/src/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:FreeRTOS/src/tasks.c **** 			{
1052:FreeRTOS/src/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:FreeRTOS/src/tasks.c **** 			}
1054:FreeRTOS/src/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:FreeRTOS/src/tasks.c **** 		}
1056:FreeRTOS/src/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:FreeRTOS/src/tasks.c **** 		{
1058:FreeRTOS/src/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 20


1059:FreeRTOS/src/tasks.c **** 		}
1060:FreeRTOS/src/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:FreeRTOS/src/tasks.c **** 	}
1062:FreeRTOS/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:FreeRTOS/src/tasks.c **** 
1064:FreeRTOS/src/tasks.c **** 	if( pxCreatedTask != NULL )
1065:FreeRTOS/src/tasks.c **** 	{
1066:FreeRTOS/src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:FreeRTOS/src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:FreeRTOS/src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:FreeRTOS/src/tasks.c **** 	}
1070:FreeRTOS/src/tasks.c **** 	else
1071:FreeRTOS/src/tasks.c **** 	{
1072:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:FreeRTOS/src/tasks.c **** 	}
1074:FreeRTOS/src/tasks.c **** }
1075:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1076:FreeRTOS/src/tasks.c **** 
1077:FreeRTOS/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:FreeRTOS/src/tasks.c **** {
1079:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:FreeRTOS/src/tasks.c **** 	updated. */
1081:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
1082:FreeRTOS/src/tasks.c **** 	{
1083:FreeRTOS/src/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:FreeRTOS/src/tasks.c **** 		{
1086:FreeRTOS/src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:FreeRTOS/src/tasks.c **** 			the suspended state - make this the current task. */
1088:FreeRTOS/src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:FreeRTOS/src/tasks.c **** 
1090:FreeRTOS/src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:FreeRTOS/src/tasks.c **** 			{
1092:FreeRTOS/src/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:FreeRTOS/src/tasks.c **** 				initialisation required.  We will not recover if this call
1094:FreeRTOS/src/tasks.c **** 				fails, but we will report the failure. */
1095:FreeRTOS/src/tasks.c **** 				prvInitialiseTaskLists();
1096:FreeRTOS/src/tasks.c **** 			}
1097:FreeRTOS/src/tasks.c **** 			else
1098:FreeRTOS/src/tasks.c **** 			{
1099:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:FreeRTOS/src/tasks.c **** 			}
1101:FreeRTOS/src/tasks.c **** 		}
1102:FreeRTOS/src/tasks.c **** 		else
1103:FreeRTOS/src/tasks.c **** 		{
1104:FreeRTOS/src/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:FreeRTOS/src/tasks.c **** 			current task if it is the highest priority task to be created
1106:FreeRTOS/src/tasks.c **** 			so far. */
1107:FreeRTOS/src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:FreeRTOS/src/tasks.c **** 			{
1109:FreeRTOS/src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:FreeRTOS/src/tasks.c **** 				{
1111:FreeRTOS/src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:FreeRTOS/src/tasks.c **** 				}
1113:FreeRTOS/src/tasks.c **** 				else
1114:FreeRTOS/src/tasks.c **** 				{
1115:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 21


1116:FreeRTOS/src/tasks.c **** 				}
1117:FreeRTOS/src/tasks.c **** 			}
1118:FreeRTOS/src/tasks.c **** 			else
1119:FreeRTOS/src/tasks.c **** 			{
1120:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:FreeRTOS/src/tasks.c **** 			}
1122:FreeRTOS/src/tasks.c **** 		}
1123:FreeRTOS/src/tasks.c **** 
1124:FreeRTOS/src/tasks.c **** 		uxTaskNumber++;
1125:FreeRTOS/src/tasks.c **** 
1126:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:FreeRTOS/src/tasks.c **** 		{
1128:FreeRTOS/src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:FreeRTOS/src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:FreeRTOS/src/tasks.c **** 		}
1131:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:FreeRTOS/src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:FreeRTOS/src/tasks.c **** 
1134:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:FreeRTOS/src/tasks.c **** 
1136:FreeRTOS/src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:FreeRTOS/src/tasks.c **** 	}
1138:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
1139:FreeRTOS/src/tasks.c **** 
1140:FreeRTOS/src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:FreeRTOS/src/tasks.c **** 	{
1142:FreeRTOS/src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:FreeRTOS/src/tasks.c **** 		then it should run now. */
1144:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:FreeRTOS/src/tasks.c **** 		{
1146:FreeRTOS/src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:FreeRTOS/src/tasks.c **** 		}
1148:FreeRTOS/src/tasks.c **** 		else
1149:FreeRTOS/src/tasks.c **** 		{
1150:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:FreeRTOS/src/tasks.c **** 		}
1152:FreeRTOS/src/tasks.c **** 	}
1153:FreeRTOS/src/tasks.c **** 	else
1154:FreeRTOS/src/tasks.c **** 	{
1155:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:FreeRTOS/src/tasks.c **** 	}
1157:FreeRTOS/src/tasks.c **** }
1158:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1159:FreeRTOS/src/tasks.c **** 
1160:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:FreeRTOS/src/tasks.c **** 
1162:FreeRTOS/src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:FreeRTOS/src/tasks.c **** 	{
1164:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1165:FreeRTOS/src/tasks.c **** 
1166:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1167:FreeRTOS/src/tasks.c **** 		{
1168:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:FreeRTOS/src/tasks.c **** 			being deleted. */
1170:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:FreeRTOS/src/tasks.c **** 
1172:FreeRTOS/src/tasks.c **** 			/* Remove task from the ready/delayed list. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 22


1173:FreeRTOS/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:FreeRTOS/src/tasks.c **** 			{
1175:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:FreeRTOS/src/tasks.c **** 			}
1177:FreeRTOS/src/tasks.c **** 			else
1178:FreeRTOS/src/tasks.c **** 			{
1179:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:FreeRTOS/src/tasks.c **** 			}
1181:FreeRTOS/src/tasks.c **** 
1182:FreeRTOS/src/tasks.c **** 			/* Is the task waiting on an event also? */
1183:FreeRTOS/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:FreeRTOS/src/tasks.c **** 			{
1185:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:FreeRTOS/src/tasks.c **** 			}
1187:FreeRTOS/src/tasks.c **** 			else
1188:FreeRTOS/src/tasks.c **** 			{
1189:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:FreeRTOS/src/tasks.c **** 			}
1191:FreeRTOS/src/tasks.c **** 
1192:FreeRTOS/src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:FreeRTOS/src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:FreeRTOS/src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:FreeRTOS/src/tasks.c **** 			not return. */
1196:FreeRTOS/src/tasks.c **** 			uxTaskNumber++;
1197:FreeRTOS/src/tasks.c **** 
1198:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:FreeRTOS/src/tasks.c **** 			{
1200:FreeRTOS/src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:FreeRTOS/src/tasks.c **** 				task itself, as a context switch to another task is required.
1202:FreeRTOS/src/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:FreeRTOS/src/tasks.c **** 				check the termination list and free up any memory allocated by
1204:FreeRTOS/src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:FreeRTOS/src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:FreeRTOS/src/tasks.c **** 
1207:FreeRTOS/src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:FreeRTOS/src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:FreeRTOS/src/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:FreeRTOS/src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:FreeRTOS/src/tasks.c **** 
1212:FreeRTOS/src/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:FreeRTOS/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:FreeRTOS/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:FreeRTOS/src/tasks.c **** 
1216:FreeRTOS/src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:FreeRTOS/src/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:FreeRTOS/src/tasks.c **** 				after which it is not possible to yield away from this task -
1219:FreeRTOS/src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:FreeRTOS/src/tasks.c **** 				required. */
1221:FreeRTOS/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:FreeRTOS/src/tasks.c **** 			}
1223:FreeRTOS/src/tasks.c **** 			else
1224:FreeRTOS/src/tasks.c **** 			{
1225:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:FreeRTOS/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:FreeRTOS/src/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:FreeRTOS/src/tasks.c **** 
1229:FreeRTOS/src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 23


1230:FreeRTOS/src/tasks.c **** 				the task that has just been deleted. */
1231:FreeRTOS/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:FreeRTOS/src/tasks.c **** 			}
1233:FreeRTOS/src/tasks.c **** 		}
1234:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1235:FreeRTOS/src/tasks.c **** 
1236:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:FreeRTOS/src/tasks.c **** 		been deleted. */
1238:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:FreeRTOS/src/tasks.c **** 		{
1240:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:FreeRTOS/src/tasks.c **** 			{
1242:FreeRTOS/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
1244:FreeRTOS/src/tasks.c **** 			}
1245:FreeRTOS/src/tasks.c **** 			else
1246:FreeRTOS/src/tasks.c **** 			{
1247:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:FreeRTOS/src/tasks.c **** 			}
1249:FreeRTOS/src/tasks.c **** 		}
1250:FreeRTOS/src/tasks.c **** 	}
1251:FreeRTOS/src/tasks.c **** 
1252:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1254:FreeRTOS/src/tasks.c **** 
1255:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:FreeRTOS/src/tasks.c **** 
1257:FreeRTOS/src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:FreeRTOS/src/tasks.c **** 	{
1259:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
1260:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:FreeRTOS/src/tasks.c **** 
1262:FreeRTOS/src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:FreeRTOS/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:FreeRTOS/src/tasks.c **** 
1266:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
1267:FreeRTOS/src/tasks.c **** 		{
1268:FreeRTOS/src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:FreeRTOS/src/tasks.c **** 			block. */
1270:FreeRTOS/src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:FreeRTOS/src/tasks.c **** 
1272:FreeRTOS/src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:FreeRTOS/src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:FreeRTOS/src/tasks.c **** 
1275:FreeRTOS/src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:FreeRTOS/src/tasks.c **** 			{
1277:FreeRTOS/src/tasks.c **** 				/* The tick count has overflowed since this function was
1278:FreeRTOS/src/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:FreeRTOS/src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:FreeRTOS/src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:FreeRTOS/src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:FreeRTOS/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:FreeRTOS/src/tasks.c **** 				{
1284:FreeRTOS/src/tasks.c **** 					xShouldDelay = pdTRUE;
1285:FreeRTOS/src/tasks.c **** 				}
1286:FreeRTOS/src/tasks.c **** 				else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 24


1287:FreeRTOS/src/tasks.c **** 				{
1288:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:FreeRTOS/src/tasks.c **** 				}
1290:FreeRTOS/src/tasks.c **** 			}
1291:FreeRTOS/src/tasks.c **** 			else
1292:FreeRTOS/src/tasks.c **** 			{
1293:FreeRTOS/src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:FreeRTOS/src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:FreeRTOS/src/tasks.c **** 				tick time is less than the wake time. */
1296:FreeRTOS/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:FreeRTOS/src/tasks.c **** 				{
1298:FreeRTOS/src/tasks.c **** 					xShouldDelay = pdTRUE;
1299:FreeRTOS/src/tasks.c **** 				}
1300:FreeRTOS/src/tasks.c **** 				else
1301:FreeRTOS/src/tasks.c **** 				{
1302:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:FreeRTOS/src/tasks.c **** 				}
1304:FreeRTOS/src/tasks.c **** 			}
1305:FreeRTOS/src/tasks.c **** 
1306:FreeRTOS/src/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:FreeRTOS/src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:FreeRTOS/src/tasks.c **** 
1309:FreeRTOS/src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:FreeRTOS/src/tasks.c **** 			{
1311:FreeRTOS/src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:FreeRTOS/src/tasks.c **** 
1313:FreeRTOS/src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:FreeRTOS/src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:FreeRTOS/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:FreeRTOS/src/tasks.c **** 			}
1317:FreeRTOS/src/tasks.c **** 			else
1318:FreeRTOS/src/tasks.c **** 			{
1319:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:FreeRTOS/src/tasks.c **** 			}
1321:FreeRTOS/src/tasks.c **** 		}
1322:FreeRTOS/src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:FreeRTOS/src/tasks.c **** 
1324:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:FreeRTOS/src/tasks.c **** 		have put ourselves to sleep. */
1326:FreeRTOS/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:FreeRTOS/src/tasks.c **** 		{
1328:FreeRTOS/src/tasks.c **** 			portYIELD_WITHIN_API();
1329:FreeRTOS/src/tasks.c **** 		}
1330:FreeRTOS/src/tasks.c **** 		else
1331:FreeRTOS/src/tasks.c **** 		{
1332:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:FreeRTOS/src/tasks.c **** 		}
1334:FreeRTOS/src/tasks.c **** 	}
1335:FreeRTOS/src/tasks.c **** 
1336:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1338:FreeRTOS/src/tasks.c **** 
1339:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:FreeRTOS/src/tasks.c **** 
1341:FreeRTOS/src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:FreeRTOS/src/tasks.c **** 	{
1343:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 25


1344:FreeRTOS/src/tasks.c **** 
1345:FreeRTOS/src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:FreeRTOS/src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:FreeRTOS/src/tasks.c **** 		{
1348:FreeRTOS/src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:FreeRTOS/src/tasks.c **** 			vTaskSuspendAll();
1350:FreeRTOS/src/tasks.c **** 			{
1351:FreeRTOS/src/tasks.c **** 				traceTASK_DELAY();
1352:FreeRTOS/src/tasks.c **** 
1353:FreeRTOS/src/tasks.c **** 				/* A task that is removed from the event list while the
1354:FreeRTOS/src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:FreeRTOS/src/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:FreeRTOS/src/tasks.c **** 				is resumed.
1357:FreeRTOS/src/tasks.c **** 
1358:FreeRTOS/src/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:FreeRTOS/src/tasks.c **** 				executing task. */
1360:FreeRTOS/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:FreeRTOS/src/tasks.c **** 			}
1362:FreeRTOS/src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:FreeRTOS/src/tasks.c **** 		}
1364:FreeRTOS/src/tasks.c **** 		else
1365:FreeRTOS/src/tasks.c **** 		{
1366:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:FreeRTOS/src/tasks.c **** 		}
1368:FreeRTOS/src/tasks.c **** 
1369:FreeRTOS/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:FreeRTOS/src/tasks.c **** 		have put ourselves to sleep. */
1371:FreeRTOS/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:FreeRTOS/src/tasks.c **** 		{
1373:FreeRTOS/src/tasks.c **** 			portYIELD_WITHIN_API();
1374:FreeRTOS/src/tasks.c **** 		}
1375:FreeRTOS/src/tasks.c **** 		else
1376:FreeRTOS/src/tasks.c **** 		{
1377:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:FreeRTOS/src/tasks.c **** 		}
1379:FreeRTOS/src/tasks.c **** 	}
1380:FreeRTOS/src/tasks.c **** 
1381:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1383:FreeRTOS/src/tasks.c **** 
1384:FreeRTOS/src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:FreeRTOS/src/tasks.c **** 
1386:FreeRTOS/src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:FreeRTOS/src/tasks.c **** 	{
1388:FreeRTOS/src/tasks.c **** 	eTaskState eReturn;
1389:FreeRTOS/src/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:FreeRTOS/src/tasks.c **** 
1392:FreeRTOS/src/tasks.c **** 		configASSERT( pxTCB );
1393:FreeRTOS/src/tasks.c **** 
1394:FreeRTOS/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:FreeRTOS/src/tasks.c **** 		{
1396:FreeRTOS/src/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:FreeRTOS/src/tasks.c **** 			eReturn = eRunning;
1398:FreeRTOS/src/tasks.c **** 		}
1399:FreeRTOS/src/tasks.c **** 		else
1400:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 26


1401:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1402:FreeRTOS/src/tasks.c **** 			{
1403:FreeRTOS/src/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:FreeRTOS/src/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:FreeRTOS/src/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:FreeRTOS/src/tasks.c **** 			}
1407:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1408:FreeRTOS/src/tasks.c **** 
1409:FreeRTOS/src/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:FreeRTOS/src/tasks.c **** 			{
1411:FreeRTOS/src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:FreeRTOS/src/tasks.c **** 				lists. */
1413:FreeRTOS/src/tasks.c **** 				eReturn = eBlocked;
1414:FreeRTOS/src/tasks.c **** 			}
1415:FreeRTOS/src/tasks.c **** 
1416:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:FreeRTOS/src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:FreeRTOS/src/tasks.c **** 				{
1419:FreeRTOS/src/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:FreeRTOS/src/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:FreeRTOS/src/tasks.c **** 					indefinitely? */
1422:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:FreeRTOS/src/tasks.c **** 					{
1424:FreeRTOS/src/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:FreeRTOS/src/tasks.c **** 						{
1426:FreeRTOS/src/tasks.c **** 							/* The task does not appear on the event list item of
1427:FreeRTOS/src/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:FreeRTOS/src/tasks.c **** 							blocked state if it is waiting on its notification
1429:FreeRTOS/src/tasks.c **** 							rather than waiting on an object. */
1430:FreeRTOS/src/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:FreeRTOS/src/tasks.c **** 							{
1432:FreeRTOS/src/tasks.c **** 								eReturn = eBlocked;
1433:FreeRTOS/src/tasks.c **** 							}
1434:FreeRTOS/src/tasks.c **** 							else
1435:FreeRTOS/src/tasks.c **** 							{
1436:FreeRTOS/src/tasks.c **** 								eReturn = eSuspended;
1437:FreeRTOS/src/tasks.c **** 							}
1438:FreeRTOS/src/tasks.c **** 						}
1439:FreeRTOS/src/tasks.c **** 						#else
1440:FreeRTOS/src/tasks.c **** 						{
1441:FreeRTOS/src/tasks.c **** 							eReturn = eSuspended;
1442:FreeRTOS/src/tasks.c **** 						}
1443:FreeRTOS/src/tasks.c **** 						#endif
1444:FreeRTOS/src/tasks.c **** 					}
1445:FreeRTOS/src/tasks.c **** 					else
1446:FreeRTOS/src/tasks.c **** 					{
1447:FreeRTOS/src/tasks.c **** 						eReturn = eBlocked;
1448:FreeRTOS/src/tasks.c **** 					}
1449:FreeRTOS/src/tasks.c **** 				}
1450:FreeRTOS/src/tasks.c **** 			#endif
1451:FreeRTOS/src/tasks.c **** 
1452:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:FreeRTOS/src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:FreeRTOS/src/tasks.c **** 				{
1455:FreeRTOS/src/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:FreeRTOS/src/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:FreeRTOS/src/tasks.c **** 					all. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 27


1458:FreeRTOS/src/tasks.c **** 					eReturn = eDeleted;
1459:FreeRTOS/src/tasks.c **** 				}
1460:FreeRTOS/src/tasks.c **** 			#endif
1461:FreeRTOS/src/tasks.c **** 
1462:FreeRTOS/src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:FreeRTOS/src/tasks.c **** 			{
1464:FreeRTOS/src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:FreeRTOS/src/tasks.c **** 				Ready (including pending ready) state. */
1466:FreeRTOS/src/tasks.c **** 				eReturn = eReady;
1467:FreeRTOS/src/tasks.c **** 			}
1468:FreeRTOS/src/tasks.c **** 		}
1469:FreeRTOS/src/tasks.c **** 
1470:FreeRTOS/src/tasks.c **** 		return eReturn;
1471:FreeRTOS/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:FreeRTOS/src/tasks.c **** 
1473:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1475:FreeRTOS/src/tasks.c **** 
1476:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:FreeRTOS/src/tasks.c **** 
1478:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:FreeRTOS/src/tasks.c **** 	{
1480:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
1481:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
1482:FreeRTOS/src/tasks.c **** 
1483:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1484:FreeRTOS/src/tasks.c **** 		{
1485:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:FreeRTOS/src/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:FreeRTOS/src/tasks.c **** 		}
1490:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1491:FreeRTOS/src/tasks.c **** 
1492:FreeRTOS/src/tasks.c **** 		return uxReturn;
1493:FreeRTOS/src/tasks.c **** 	}
1494:FreeRTOS/src/tasks.c **** 
1495:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1497:FreeRTOS/src/tasks.c **** 
1498:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:FreeRTOS/src/tasks.c **** 
1500:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:FreeRTOS/src/tasks.c **** 	{
1502:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
1503:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:FreeRTOS/src/tasks.c **** 
1505:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 28


1515:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:FreeRTOS/src/tasks.c **** 		provided on the following link:
1520:FreeRTOS/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:FreeRTOS/src/tasks.c **** 
1523:FreeRTOS/src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:FreeRTOS/src/tasks.c **** 		{
1525:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:FreeRTOS/src/tasks.c **** 			task that is being queried. */
1527:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:FreeRTOS/src/tasks.c **** 		}
1530:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:FreeRTOS/src/tasks.c **** 
1532:FreeRTOS/src/tasks.c **** 		return uxReturn;
1533:FreeRTOS/src/tasks.c **** 	}
1534:FreeRTOS/src/tasks.c **** 
1535:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1537:FreeRTOS/src/tasks.c **** 
1538:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:FreeRTOS/src/tasks.c **** 
1540:FreeRTOS/src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:FreeRTOS/src/tasks.c **** 	{
1542:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1543:FreeRTOS/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:FreeRTOS/src/tasks.c **** 
1546:FreeRTOS/src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:FreeRTOS/src/tasks.c **** 
1548:FreeRTOS/src/tasks.c **** 		/* Ensure the new priority is valid. */
1549:FreeRTOS/src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:FreeRTOS/src/tasks.c **** 		{
1551:FreeRTOS/src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:FreeRTOS/src/tasks.c **** 		}
1553:FreeRTOS/src/tasks.c **** 		else
1554:FreeRTOS/src/tasks.c **** 		{
1555:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:FreeRTOS/src/tasks.c **** 		}
1557:FreeRTOS/src/tasks.c **** 
1558:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1559:FreeRTOS/src/tasks.c **** 		{
1560:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:FreeRTOS/src/tasks.c **** 			task that is being changed. */
1562:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:FreeRTOS/src/tasks.c **** 
1564:FreeRTOS/src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:FreeRTOS/src/tasks.c **** 
1566:FreeRTOS/src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:FreeRTOS/src/tasks.c **** 			{
1568:FreeRTOS/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:FreeRTOS/src/tasks.c **** 			}
1570:FreeRTOS/src/tasks.c **** 			#else
1571:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 29


1572:FreeRTOS/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:FreeRTOS/src/tasks.c **** 			}
1574:FreeRTOS/src/tasks.c **** 			#endif
1575:FreeRTOS/src/tasks.c **** 
1576:FreeRTOS/src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:FreeRTOS/src/tasks.c **** 			{
1578:FreeRTOS/src/tasks.c **** 				/* The priority change may have readied a task of higher
1579:FreeRTOS/src/tasks.c **** 				priority than the calling task. */
1580:FreeRTOS/src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:FreeRTOS/src/tasks.c **** 				{
1582:FreeRTOS/src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:FreeRTOS/src/tasks.c **** 					{
1584:FreeRTOS/src/tasks.c **** 						/* The priority of a task other than the currently
1585:FreeRTOS/src/tasks.c **** 						running task is being raised.  Is the priority being
1586:FreeRTOS/src/tasks.c **** 						raised above that of the running task? */
1587:FreeRTOS/src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:FreeRTOS/src/tasks.c **** 						{
1589:FreeRTOS/src/tasks.c **** 							xYieldRequired = pdTRUE;
1590:FreeRTOS/src/tasks.c **** 						}
1591:FreeRTOS/src/tasks.c **** 						else
1592:FreeRTOS/src/tasks.c **** 						{
1593:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:FreeRTOS/src/tasks.c **** 						}
1595:FreeRTOS/src/tasks.c **** 					}
1596:FreeRTOS/src/tasks.c **** 					else
1597:FreeRTOS/src/tasks.c **** 					{
1598:FreeRTOS/src/tasks.c **** 						/* The priority of the running task is being raised,
1599:FreeRTOS/src/tasks.c **** 						but the running task must already be the highest
1600:FreeRTOS/src/tasks.c **** 						priority task able to run so no yield is required. */
1601:FreeRTOS/src/tasks.c **** 					}
1602:FreeRTOS/src/tasks.c **** 				}
1603:FreeRTOS/src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:FreeRTOS/src/tasks.c **** 				{
1605:FreeRTOS/src/tasks.c **** 					/* Setting the priority of the running task down means
1606:FreeRTOS/src/tasks.c **** 					there may now be another task of higher priority that
1607:FreeRTOS/src/tasks.c **** 					is ready to execute. */
1608:FreeRTOS/src/tasks.c **** 					xYieldRequired = pdTRUE;
1609:FreeRTOS/src/tasks.c **** 				}
1610:FreeRTOS/src/tasks.c **** 				else
1611:FreeRTOS/src/tasks.c **** 				{
1612:FreeRTOS/src/tasks.c **** 					/* Setting the priority of any other task down does not
1613:FreeRTOS/src/tasks.c **** 					require a yield as the running task must be above the
1614:FreeRTOS/src/tasks.c **** 					new priority of the task being modified. */
1615:FreeRTOS/src/tasks.c **** 				}
1616:FreeRTOS/src/tasks.c **** 
1617:FreeRTOS/src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:FreeRTOS/src/tasks.c **** 				before its uxPriority member is changed so the
1619:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:FreeRTOS/src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:FreeRTOS/src/tasks.c **** 
1622:FreeRTOS/src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:FreeRTOS/src/tasks.c **** 				{
1624:FreeRTOS/src/tasks.c **** 					/* Only change the priority being used if the task is not
1625:FreeRTOS/src/tasks.c **** 					currently using an inherited priority. */
1626:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:FreeRTOS/src/tasks.c **** 					{
1628:FreeRTOS/src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 30


1629:FreeRTOS/src/tasks.c **** 					}
1630:FreeRTOS/src/tasks.c **** 					else
1631:FreeRTOS/src/tasks.c **** 					{
1632:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:FreeRTOS/src/tasks.c **** 					}
1634:FreeRTOS/src/tasks.c **** 
1635:FreeRTOS/src/tasks.c **** 					/* The base priority gets set whatever. */
1636:FreeRTOS/src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:FreeRTOS/src/tasks.c **** 				}
1638:FreeRTOS/src/tasks.c **** 				#else
1639:FreeRTOS/src/tasks.c **** 				{
1640:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:FreeRTOS/src/tasks.c **** 				}
1642:FreeRTOS/src/tasks.c **** 				#endif
1643:FreeRTOS/src/tasks.c **** 
1644:FreeRTOS/src/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:FreeRTOS/src/tasks.c **** 				being used for anything else. */
1646:FreeRTOS/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:FreeRTOS/src/tasks.c **** 				{
1648:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:FreeRTOS/src/tasks.c **** 				}
1650:FreeRTOS/src/tasks.c **** 				else
1651:FreeRTOS/src/tasks.c **** 				{
1652:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:FreeRTOS/src/tasks.c **** 				}
1654:FreeRTOS/src/tasks.c **** 
1655:FreeRTOS/src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:FreeRTOS/src/tasks.c **** 				nothing more than change its priority variable. However, if
1657:FreeRTOS/src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:FreeRTOS/src/tasks.c **** 				in the list appropriate to its new priority. */
1659:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:FreeRTOS/src/tasks.c **** 				{
1661:FreeRTOS/src/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:FreeRTOS/src/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:FreeRTOS/src/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:FreeRTOS/src/tasks.c **** 					{
1666:FreeRTOS/src/tasks.c **** 						/* It is known that the task is in its ready list so
1667:FreeRTOS/src/tasks.c **** 						there is no need to check again and the port level
1668:FreeRTOS/src/tasks.c **** 						reset macro can be called directly. */
1669:FreeRTOS/src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:FreeRTOS/src/tasks.c **** 					}
1671:FreeRTOS/src/tasks.c **** 					else
1672:FreeRTOS/src/tasks.c **** 					{
1673:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:FreeRTOS/src/tasks.c **** 					}
1675:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:FreeRTOS/src/tasks.c **** 				}
1677:FreeRTOS/src/tasks.c **** 				else
1678:FreeRTOS/src/tasks.c **** 				{
1679:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:FreeRTOS/src/tasks.c **** 				}
1681:FreeRTOS/src/tasks.c **** 
1682:FreeRTOS/src/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:FreeRTOS/src/tasks.c **** 				{
1684:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 31


1686:FreeRTOS/src/tasks.c **** 				else
1687:FreeRTOS/src/tasks.c **** 				{
1688:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:FreeRTOS/src/tasks.c **** 				}
1690:FreeRTOS/src/tasks.c **** 
1691:FreeRTOS/src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:FreeRTOS/src/tasks.c **** 				optimised task selection is not being used. */
1693:FreeRTOS/src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:FreeRTOS/src/tasks.c **** 			}
1695:FreeRTOS/src/tasks.c **** 		}
1696:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1697:FreeRTOS/src/tasks.c **** 	}
1698:FreeRTOS/src/tasks.c **** 
1699:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1701:FreeRTOS/src/tasks.c **** 
1702:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:FreeRTOS/src/tasks.c **** 
1704:FreeRTOS/src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:FreeRTOS/src/tasks.c **** 	{
1706:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
1707:FreeRTOS/src/tasks.c **** 
1708:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
1709:FreeRTOS/src/tasks.c **** 		{
1710:FreeRTOS/src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:FreeRTOS/src/tasks.c **** 			being suspended. */
1712:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:FreeRTOS/src/tasks.c **** 
1714:FreeRTOS/src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:FreeRTOS/src/tasks.c **** 
1716:FreeRTOS/src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:FreeRTOS/src/tasks.c **** 			suspended list. */
1718:FreeRTOS/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:FreeRTOS/src/tasks.c **** 			{
1720:FreeRTOS/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:FreeRTOS/src/tasks.c **** 			}
1722:FreeRTOS/src/tasks.c **** 			else
1723:FreeRTOS/src/tasks.c **** 			{
1724:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:FreeRTOS/src/tasks.c **** 			}
1726:FreeRTOS/src/tasks.c **** 
1727:FreeRTOS/src/tasks.c **** 			/* Is the task waiting on an event also? */
1728:FreeRTOS/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:FreeRTOS/src/tasks.c **** 			{
1730:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:FreeRTOS/src/tasks.c **** 			}
1732:FreeRTOS/src/tasks.c **** 			else
1733:FreeRTOS/src/tasks.c **** 			{
1734:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:FreeRTOS/src/tasks.c **** 			}
1736:FreeRTOS/src/tasks.c **** 
1737:FreeRTOS/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:FreeRTOS/src/tasks.c **** 
1739:FreeRTOS/src/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:FreeRTOS/src/tasks.c **** 			{
1741:FreeRTOS/src/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 32


1743:FreeRTOS/src/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:FreeRTOS/src/tasks.c **** 					now suspended, so no notification was received. */
1745:FreeRTOS/src/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:FreeRTOS/src/tasks.c **** 				}
1747:FreeRTOS/src/tasks.c **** 			}
1748:FreeRTOS/src/tasks.c **** 			#endif
1749:FreeRTOS/src/tasks.c **** 		}
1750:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
1751:FreeRTOS/src/tasks.c **** 
1752:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:FreeRTOS/src/tasks.c **** 		{
1754:FreeRTOS/src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:FreeRTOS/src/tasks.c **** 			task that is now in the Suspended state. */
1756:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1757:FreeRTOS/src/tasks.c **** 			{
1758:FreeRTOS/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:FreeRTOS/src/tasks.c **** 			}
1760:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1761:FreeRTOS/src/tasks.c **** 		}
1762:FreeRTOS/src/tasks.c **** 		else
1763:FreeRTOS/src/tasks.c **** 		{
1764:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:FreeRTOS/src/tasks.c **** 		}
1766:FreeRTOS/src/tasks.c **** 
1767:FreeRTOS/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:FreeRTOS/src/tasks.c **** 		{
1769:FreeRTOS/src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:FreeRTOS/src/tasks.c **** 			{
1771:FreeRTOS/src/tasks.c **** 				/* The current task has just been suspended. */
1772:FreeRTOS/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
1774:FreeRTOS/src/tasks.c **** 			}
1775:FreeRTOS/src/tasks.c **** 			else
1776:FreeRTOS/src/tasks.c **** 			{
1777:FreeRTOS/src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:FreeRTOS/src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:FreeRTOS/src/tasks.c **** 				must be adjusted to point to a different task. */
1780:FreeRTOS/src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:FreeRTOS/src/tasks.c **** 				{
1782:FreeRTOS/src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:FreeRTOS/src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:FreeRTOS/src/tasks.c **** 					be set to point to it no matter what its relative priority
1785:FreeRTOS/src/tasks.c **** 					is. */
1786:FreeRTOS/src/tasks.c **** 					pxCurrentTCB = NULL;
1787:FreeRTOS/src/tasks.c **** 				}
1788:FreeRTOS/src/tasks.c **** 				else
1789:FreeRTOS/src/tasks.c **** 				{
1790:FreeRTOS/src/tasks.c **** 					vTaskSwitchContext();
1791:FreeRTOS/src/tasks.c **** 				}
1792:FreeRTOS/src/tasks.c **** 			}
1793:FreeRTOS/src/tasks.c **** 		}
1794:FreeRTOS/src/tasks.c **** 		else
1795:FreeRTOS/src/tasks.c **** 		{
1796:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:FreeRTOS/src/tasks.c **** 		}
1798:FreeRTOS/src/tasks.c **** 	}
1799:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 33


1800:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1802:FreeRTOS/src/tasks.c **** 
1803:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:FreeRTOS/src/tasks.c **** 
1805:FreeRTOS/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:FreeRTOS/src/tasks.c **** 	{
  27              		.loc 1 1806 2 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1807:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1807 2 view .LVU1
1808:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  33              		.loc 1 1808 2 view .LVU2
1809:FreeRTOS/src/tasks.c **** 
1810:FreeRTOS/src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:FreeRTOS/src/tasks.c **** 		section. */
1812:FreeRTOS/src/tasks.c **** 
1813:FreeRTOS/src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:FreeRTOS/src/tasks.c **** 		configASSERT( xTask );
  34              		.loc 1 1814 24 view .LVU3
1815:FreeRTOS/src/tasks.c **** 
1816:FreeRTOS/src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:FreeRTOS/src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1817 3 view .LVU4
  36              		.loc 1 1817 7 is_stmt 0 view .LVU5
  37 0000 4269     		ldr	r2, [r0, #20]
  38              		.loc 1 1817 5 view .LVU6
  39 0002 084B     		ldr	r3, .L7
  40 0004 9A42     		cmp	r2, r3
  41 0006 01D0     		beq	.L6
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  42              		.loc 1 1807 13 view .LVU7
  43 0008 0020     		movs	r0, #0
  44              	.LVL1:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1807 13 view .LVU8
  46 000a 7047     		bx	lr
  47              	.LVL2:
  48              	.L6:
1818:FreeRTOS/src/tasks.c **** 		{
1819:FreeRTOS/src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:FreeRTOS/src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  49              		.loc 1 1820 4 is_stmt 1 view .LVU9
  50              		.loc 1 1820 8 is_stmt 0 view .LVU10
  51 000c 836A     		ldr	r3, [r0, #40]
  52              		.loc 1 1820 6 view .LVU11
  53 000e 064A     		ldr	r2, .L7+4
  54 0010 9342     		cmp	r3, r2
  55 0012 02D0     		beq	.L4
1821:FreeRTOS/src/tasks.c **** 			{
1822:FreeRTOS/src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:FreeRTOS/src/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  56              		.loc 1 1824 5 is_stmt 1 view .LVU12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 34


  57              		.loc 1 1824 7 is_stmt 0 view .LVU13
  58 0014 1BB1     		cbz	r3, .L5
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  59              		.loc 1 1807 13 view .LVU14
  60 0016 0020     		movs	r0, #0
  61              	.LVL3:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  62              		.loc 1 1807 13 view .LVU15
  63 0018 7047     		bx	lr
  64              	.LVL4:
  65              	.L4:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  66              		.loc 1 1807 13 view .LVU16
  67 001a 0020     		movs	r0, #0
  68              	.LVL5:
1807:FreeRTOS/src/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  69              		.loc 1 1807 13 view .LVU17
  70 001c 7047     		bx	lr
  71              	.LVL6:
  72              	.L5:
1825:FreeRTOS/src/tasks.c **** 				{
1826:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
  73              		.loc 1 1826 14 view .LVU18
  74 001e 0120     		movs	r0, #1
  75              	.LVL7:
1827:FreeRTOS/src/tasks.c **** 				}
1828:FreeRTOS/src/tasks.c **** 				else
1829:FreeRTOS/src/tasks.c **** 				{
1830:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:FreeRTOS/src/tasks.c **** 				}
1832:FreeRTOS/src/tasks.c **** 			}
1833:FreeRTOS/src/tasks.c **** 			else
1834:FreeRTOS/src/tasks.c **** 			{
1835:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:FreeRTOS/src/tasks.c **** 			}
1837:FreeRTOS/src/tasks.c **** 		}
1838:FreeRTOS/src/tasks.c **** 		else
1839:FreeRTOS/src/tasks.c **** 		{
1840:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
  76              		.loc 1 1840 28 is_stmt 1 view .LVU19
1841:FreeRTOS/src/tasks.c **** 		}
1842:FreeRTOS/src/tasks.c **** 
1843:FreeRTOS/src/tasks.c **** 		return xReturn;
  77              		.loc 1 1843 3 view .LVU20
1844:FreeRTOS/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  78              		.loc 1 1844 2 is_stmt 0 view .LVU21
  79 0020 7047     		bx	lr
  80              	.L8:
  81 0022 00BF     		.align	2
  82              	.L7:
  83 0024 00000000 		.word	.LANCHOR0
  84 0028 00000000 		.word	.LANCHOR1
  85              		.cfi_endproc
  86              	.LFE80:
  88              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 35


  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	prvResetNextTaskUnblockTime:
  96              	.LFB106:
1845:FreeRTOS/src/tasks.c **** 
1846:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1848:FreeRTOS/src/tasks.c **** 
1849:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:FreeRTOS/src/tasks.c **** 
1851:FreeRTOS/src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:FreeRTOS/src/tasks.c **** 	{
1853:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:FreeRTOS/src/tasks.c **** 
1855:FreeRTOS/src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToResume );
1857:FreeRTOS/src/tasks.c **** 
1858:FreeRTOS/src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:FreeRTOS/src/tasks.c **** 		currently executing task. */
1860:FreeRTOS/src/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:FreeRTOS/src/tasks.c **** 		{
1862:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
1863:FreeRTOS/src/tasks.c **** 			{
1864:FreeRTOS/src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:FreeRTOS/src/tasks.c **** 				{
1866:FreeRTOS/src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:FreeRTOS/src/tasks.c **** 
1868:FreeRTOS/src/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:FreeRTOS/src/tasks.c **** 					suspended because this is inside a critical section. */
1870:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:FreeRTOS/src/tasks.c **** 
1873:FreeRTOS/src/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:FreeRTOS/src/tasks.c **** 					{
1876:FreeRTOS/src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:FreeRTOS/src/tasks.c **** 						but will leave the lists in the correct state for the
1878:FreeRTOS/src/tasks.c **** 						next yield. */
1879:FreeRTOS/src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:FreeRTOS/src/tasks.c **** 					}
1881:FreeRTOS/src/tasks.c **** 					else
1882:FreeRTOS/src/tasks.c **** 					{
1883:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:FreeRTOS/src/tasks.c **** 					}
1885:FreeRTOS/src/tasks.c **** 				}
1886:FreeRTOS/src/tasks.c **** 				else
1887:FreeRTOS/src/tasks.c **** 				{
1888:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:FreeRTOS/src/tasks.c **** 				}
1890:FreeRTOS/src/tasks.c **** 			}
1891:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
1892:FreeRTOS/src/tasks.c **** 		}
1893:FreeRTOS/src/tasks.c **** 		else
1894:FreeRTOS/src/tasks.c **** 		{
1895:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 36


1897:FreeRTOS/src/tasks.c **** 	}
1898:FreeRTOS/src/tasks.c **** 
1899:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:FreeRTOS/src/tasks.c **** 
1901:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1902:FreeRTOS/src/tasks.c **** 
1903:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:FreeRTOS/src/tasks.c **** 
1905:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:FreeRTOS/src/tasks.c **** 	{
1907:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:FreeRTOS/src/tasks.c **** 
1911:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToResume );
1912:FreeRTOS/src/tasks.c **** 
1913:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:FreeRTOS/src/tasks.c **** 		provided on the following link:
1928:FreeRTOS/src/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:FreeRTOS/src/tasks.c **** 
1931:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:FreeRTOS/src/tasks.c **** 		{
1933:FreeRTOS/src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:FreeRTOS/src/tasks.c **** 			{
1935:FreeRTOS/src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:FreeRTOS/src/tasks.c **** 
1937:FreeRTOS/src/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:FreeRTOS/src/tasks.c **** 				{
1940:FreeRTOS/src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:FreeRTOS/src/tasks.c **** 					suspended list to the ready list directly. */
1942:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:FreeRTOS/src/tasks.c **** 					{
1944:FreeRTOS/src/tasks.c **** 						xYieldRequired = pdTRUE;
1945:FreeRTOS/src/tasks.c **** 					}
1946:FreeRTOS/src/tasks.c **** 					else
1947:FreeRTOS/src/tasks.c **** 					{
1948:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:FreeRTOS/src/tasks.c **** 					}
1950:FreeRTOS/src/tasks.c **** 
1951:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 37


1954:FreeRTOS/src/tasks.c **** 				else
1955:FreeRTOS/src/tasks.c **** 				{
1956:FreeRTOS/src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:FreeRTOS/src/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:FreeRTOS/src/tasks.c **** 					unsuspended. */
1959:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:FreeRTOS/src/tasks.c **** 				}
1961:FreeRTOS/src/tasks.c **** 			}
1962:FreeRTOS/src/tasks.c **** 			else
1963:FreeRTOS/src/tasks.c **** 			{
1964:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:FreeRTOS/src/tasks.c **** 			}
1966:FreeRTOS/src/tasks.c **** 		}
1967:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:FreeRTOS/src/tasks.c **** 
1969:FreeRTOS/src/tasks.c **** 		return xYieldRequired;
1970:FreeRTOS/src/tasks.c **** 	}
1971:FreeRTOS/src/tasks.c **** 
1972:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
1974:FreeRTOS/src/tasks.c **** 
1975:FreeRTOS/src/tasks.c **** void vTaskStartScheduler( void )
1976:FreeRTOS/src/tasks.c **** {
1977:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
1978:FreeRTOS/src/tasks.c **** 
1979:FreeRTOS/src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:FreeRTOS/src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:FreeRTOS/src/tasks.c **** 	{
1982:FreeRTOS/src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:FreeRTOS/src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:FreeRTOS/src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:FreeRTOS/src/tasks.c **** 
1986:FreeRTOS/src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:FreeRTOS/src/tasks.c **** 		address of the RAM then create the idle task. */
1988:FreeRTOS/src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:FreeRTOS/src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:FreeRTOS/src/tasks.c **** 												configIDLE_TASK_NAME,
1991:FreeRTOS/src/tasks.c **** 												ulIdleTaskStackSize,
1992:FreeRTOS/src/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:FreeRTOS/src/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:FreeRTOS/src/tasks.c **** 												pxIdleTaskStackBuffer,
1995:FreeRTOS/src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:FreeRTOS/src/tasks.c **** 
1997:FreeRTOS/src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:FreeRTOS/src/tasks.c **** 		{
1999:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
2000:FreeRTOS/src/tasks.c **** 		}
2001:FreeRTOS/src/tasks.c **** 		else
2002:FreeRTOS/src/tasks.c **** 		{
2003:FreeRTOS/src/tasks.c **** 			xReturn = pdFAIL;
2004:FreeRTOS/src/tasks.c **** 		}
2005:FreeRTOS/src/tasks.c **** 	}
2006:FreeRTOS/src/tasks.c **** 	#else
2007:FreeRTOS/src/tasks.c **** 	{
2008:FreeRTOS/src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:FreeRTOS/src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 38


2011:FreeRTOS/src/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:FreeRTOS/src/tasks.c **** 								( void * ) NULL,
2013:FreeRTOS/src/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:FreeRTOS/src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:FreeRTOS/src/tasks.c **** 	}
2016:FreeRTOS/src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:FreeRTOS/src/tasks.c **** 
2018:FreeRTOS/src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:FreeRTOS/src/tasks.c **** 	{
2020:FreeRTOS/src/tasks.c **** 		if( xReturn == pdPASS )
2021:FreeRTOS/src/tasks.c **** 		{
2022:FreeRTOS/src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:FreeRTOS/src/tasks.c **** 		}
2024:FreeRTOS/src/tasks.c **** 		else
2025:FreeRTOS/src/tasks.c **** 		{
2026:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:FreeRTOS/src/tasks.c **** 		}
2028:FreeRTOS/src/tasks.c **** 	}
2029:FreeRTOS/src/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:FreeRTOS/src/tasks.c **** 
2031:FreeRTOS/src/tasks.c **** 	if( xReturn == pdPASS )
2032:FreeRTOS/src/tasks.c **** 	{
2033:FreeRTOS/src/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:FreeRTOS/src/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:FreeRTOS/src/tasks.c **** 		the only macro called by the function. */
2036:FreeRTOS/src/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:FreeRTOS/src/tasks.c **** 		{
2038:FreeRTOS/src/tasks.c **** 			freertos_tasks_c_additions_init();
2039:FreeRTOS/src/tasks.c **** 		}
2040:FreeRTOS/src/tasks.c **** 		#endif
2041:FreeRTOS/src/tasks.c **** 
2042:FreeRTOS/src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:FreeRTOS/src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:FreeRTOS/src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:FreeRTOS/src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:FreeRTOS/src/tasks.c **** 		starts to run. */
2047:FreeRTOS/src/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:FreeRTOS/src/tasks.c **** 
2049:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:FreeRTOS/src/tasks.c **** 		{
2051:FreeRTOS/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:FreeRTOS/src/tasks.c **** 			structure specific to the task that will run first.
2053:FreeRTOS/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:FreeRTOS/src/tasks.c **** 			for additional information. */
2055:FreeRTOS/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:FreeRTOS/src/tasks.c **** 		}
2057:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:FreeRTOS/src/tasks.c **** 
2059:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:FreeRTOS/src/tasks.c **** 
2063:FreeRTOS/src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:FreeRTOS/src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:FreeRTOS/src/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:FreeRTOS/src/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:FreeRTOS/src/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 39


2068:FreeRTOS/src/tasks.c **** 		FreeRTOSConfig.h file. */
2069:FreeRTOS/src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:FreeRTOS/src/tasks.c **** 
2071:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:FreeRTOS/src/tasks.c **** 
2073:FreeRTOS/src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:FreeRTOS/src/tasks.c **** 		portable interface. */
2075:FreeRTOS/src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:FreeRTOS/src/tasks.c **** 		{
2077:FreeRTOS/src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:FreeRTOS/src/tasks.c **** 			function will not return. */
2079:FreeRTOS/src/tasks.c **** 		}
2080:FreeRTOS/src/tasks.c **** 		else
2081:FreeRTOS/src/tasks.c **** 		{
2082:FreeRTOS/src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:FreeRTOS/src/tasks.c **** 		}
2084:FreeRTOS/src/tasks.c **** 	}
2085:FreeRTOS/src/tasks.c **** 	else
2086:FreeRTOS/src/tasks.c **** 	{
2087:FreeRTOS/src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:FreeRTOS/src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:FreeRTOS/src/tasks.c **** 		or the timer task. */
2090:FreeRTOS/src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:FreeRTOS/src/tasks.c **** 	}
2092:FreeRTOS/src/tasks.c **** 
2093:FreeRTOS/src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:FreeRTOS/src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:FreeRTOS/src/tasks.c **** 	( void ) xIdleTaskHandle;
2096:FreeRTOS/src/tasks.c **** }
2097:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2098:FreeRTOS/src/tasks.c **** 
2099:FreeRTOS/src/tasks.c **** void vTaskEndScheduler( void )
2100:FreeRTOS/src/tasks.c **** {
2101:FreeRTOS/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:FreeRTOS/src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:FreeRTOS/src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:FreeRTOS/src/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:FreeRTOS/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
2107:FreeRTOS/src/tasks.c **** }
2108:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2109:FreeRTOS/src/tasks.c **** 
2110:FreeRTOS/src/tasks.c **** void vTaskSuspendAll( void )
2111:FreeRTOS/src/tasks.c **** {
2112:FreeRTOS/src/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:FreeRTOS/src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:FreeRTOS/src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:FreeRTOS/src/tasks.c **** 	http://goo.gl/wu4acr */
2116:FreeRTOS/src/tasks.c **** 
2117:FreeRTOS/src/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:FreeRTOS/src/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:FreeRTOS/src/tasks.c **** 	portSOFTWARE_BARRIER();
2120:FreeRTOS/src/tasks.c **** 
2121:FreeRTOS/src/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:FreeRTOS/src/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:FreeRTOS/src/tasks.c **** 	++uxSchedulerSuspended;
2124:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 40


2125:FreeRTOS/src/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:FreeRTOS/src/tasks.c **** 	the above increment elsewhere. */
2127:FreeRTOS/src/tasks.c **** 	portMEMORY_BARRIER();
2128:FreeRTOS/src/tasks.c **** }
2129:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2130:FreeRTOS/src/tasks.c **** 
2131:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:FreeRTOS/src/tasks.c **** 
2133:FreeRTOS/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:FreeRTOS/src/tasks.c **** 	{
2135:FreeRTOS/src/tasks.c **** 	TickType_t xReturn;
2136:FreeRTOS/src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:FreeRTOS/src/tasks.c **** 
2138:FreeRTOS/src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:FreeRTOS/src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:FreeRTOS/src/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:FreeRTOS/src/tasks.c **** 		running. */
2142:FreeRTOS/src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:FreeRTOS/src/tasks.c **** 		{
2144:FreeRTOS/src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:FreeRTOS/src/tasks.c **** 			{
2146:FreeRTOS/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:FreeRTOS/src/tasks.c **** 			}
2148:FreeRTOS/src/tasks.c **** 		}
2149:FreeRTOS/src/tasks.c **** 		#else
2150:FreeRTOS/src/tasks.c **** 		{
2151:FreeRTOS/src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:FreeRTOS/src/tasks.c **** 
2153:FreeRTOS/src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:FreeRTOS/src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:FreeRTOS/src/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:FreeRTOS/src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:FreeRTOS/src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:FreeRTOS/src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:FreeRTOS/src/tasks.c **** 			{
2160:FreeRTOS/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:FreeRTOS/src/tasks.c **** 			}
2162:FreeRTOS/src/tasks.c **** 		}
2163:FreeRTOS/src/tasks.c **** 		#endif
2164:FreeRTOS/src/tasks.c **** 
2165:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:FreeRTOS/src/tasks.c **** 		{
2167:FreeRTOS/src/tasks.c **** 			xReturn = 0;
2168:FreeRTOS/src/tasks.c **** 		}
2169:FreeRTOS/src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:FreeRTOS/src/tasks.c **** 		{
2171:FreeRTOS/src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:FreeRTOS/src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:FreeRTOS/src/tasks.c **** 			processed. */
2174:FreeRTOS/src/tasks.c **** 			xReturn = 0;
2175:FreeRTOS/src/tasks.c **** 		}
2176:FreeRTOS/src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:FreeRTOS/src/tasks.c **** 		{
2178:FreeRTOS/src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:FreeRTOS/src/tasks.c **** 			idle priority.  This path can only be reached if
2180:FreeRTOS/src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:FreeRTOS/src/tasks.c **** 			xReturn = 0;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 41


2182:FreeRTOS/src/tasks.c **** 		}
2183:FreeRTOS/src/tasks.c **** 		else
2184:FreeRTOS/src/tasks.c **** 		{
2185:FreeRTOS/src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:FreeRTOS/src/tasks.c **** 		}
2187:FreeRTOS/src/tasks.c **** 
2188:FreeRTOS/src/tasks.c **** 		return xReturn;
2189:FreeRTOS/src/tasks.c **** 	}
2190:FreeRTOS/src/tasks.c **** 
2191:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2193:FreeRTOS/src/tasks.c **** 
2194:FreeRTOS/src/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:FreeRTOS/src/tasks.c **** {
2196:FreeRTOS/src/tasks.c **** TCB_t *pxTCB = NULL;
2197:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:FreeRTOS/src/tasks.c **** 
2199:FreeRTOS/src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:FreeRTOS/src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:FreeRTOS/src/tasks.c **** 
2203:FreeRTOS/src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:FreeRTOS/src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:FreeRTOS/src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:FreeRTOS/src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:FreeRTOS/src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
2209:FreeRTOS/src/tasks.c **** 	{
2210:FreeRTOS/src/tasks.c **** 		--uxSchedulerSuspended;
2211:FreeRTOS/src/tasks.c **** 
2212:FreeRTOS/src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:FreeRTOS/src/tasks.c **** 		{
2214:FreeRTOS/src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:FreeRTOS/src/tasks.c **** 			{
2216:FreeRTOS/src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:FreeRTOS/src/tasks.c **** 				appropriate ready list. */
2218:FreeRTOS/src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:FreeRTOS/src/tasks.c **** 				{
2220:FreeRTOS/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:FreeRTOS/src/tasks.c **** 
2225:FreeRTOS/src/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:FreeRTOS/src/tasks.c **** 					task then a yield must be performed. */
2227:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:FreeRTOS/src/tasks.c **** 					{
2229:FreeRTOS/src/tasks.c **** 						xYieldPending = pdTRUE;
2230:FreeRTOS/src/tasks.c **** 					}
2231:FreeRTOS/src/tasks.c **** 					else
2232:FreeRTOS/src/tasks.c **** 					{
2233:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:FreeRTOS/src/tasks.c **** 					}
2235:FreeRTOS/src/tasks.c **** 				}
2236:FreeRTOS/src/tasks.c **** 
2237:FreeRTOS/src/tasks.c **** 				if( pxTCB != NULL )
2238:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 42


2239:FreeRTOS/src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:FreeRTOS/src/tasks.c **** 					which may have prevented the next unblock time from being
2241:FreeRTOS/src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:FreeRTOS/src/tasks.c **** 					important for low power tickless implementations, where
2243:FreeRTOS/src/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:FreeRTOS/src/tasks.c **** 					state. */
2245:FreeRTOS/src/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:FreeRTOS/src/tasks.c **** 				}
2247:FreeRTOS/src/tasks.c **** 
2248:FreeRTOS/src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:FreeRTOS/src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:FreeRTOS/src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:FreeRTOS/src/tasks.c **** 				time. */
2252:FreeRTOS/src/tasks.c **** 				{
2253:FreeRTOS/src/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:FreeRTOS/src/tasks.c **** 
2255:FreeRTOS/src/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:FreeRTOS/src/tasks.c **** 					{
2257:FreeRTOS/src/tasks.c **** 						do
2258:FreeRTOS/src/tasks.c **** 						{
2259:FreeRTOS/src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:FreeRTOS/src/tasks.c **** 							{
2261:FreeRTOS/src/tasks.c **** 								xYieldPending = pdTRUE;
2262:FreeRTOS/src/tasks.c **** 							}
2263:FreeRTOS/src/tasks.c **** 							else
2264:FreeRTOS/src/tasks.c **** 							{
2265:FreeRTOS/src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:FreeRTOS/src/tasks.c **** 							}
2267:FreeRTOS/src/tasks.c **** 							--xPendedCounts;
2268:FreeRTOS/src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:FreeRTOS/src/tasks.c **** 
2270:FreeRTOS/src/tasks.c **** 						xPendedTicks = 0;
2271:FreeRTOS/src/tasks.c **** 					}
2272:FreeRTOS/src/tasks.c **** 					else
2273:FreeRTOS/src/tasks.c **** 					{
2274:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:FreeRTOS/src/tasks.c **** 					}
2276:FreeRTOS/src/tasks.c **** 				}
2277:FreeRTOS/src/tasks.c **** 
2278:FreeRTOS/src/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:FreeRTOS/src/tasks.c **** 				{
2280:FreeRTOS/src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:FreeRTOS/src/tasks.c **** 					{
2282:FreeRTOS/src/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:FreeRTOS/src/tasks.c **** 					}
2284:FreeRTOS/src/tasks.c **** 					#endif
2285:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:FreeRTOS/src/tasks.c **** 				}
2287:FreeRTOS/src/tasks.c **** 				else
2288:FreeRTOS/src/tasks.c **** 				{
2289:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:FreeRTOS/src/tasks.c **** 				}
2291:FreeRTOS/src/tasks.c **** 			}
2292:FreeRTOS/src/tasks.c **** 		}
2293:FreeRTOS/src/tasks.c **** 		else
2294:FreeRTOS/src/tasks.c **** 		{
2295:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 43


2296:FreeRTOS/src/tasks.c **** 		}
2297:FreeRTOS/src/tasks.c **** 	}
2298:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
2299:FreeRTOS/src/tasks.c **** 
2300:FreeRTOS/src/tasks.c **** 	return xAlreadyYielded;
2301:FreeRTOS/src/tasks.c **** }
2302:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2303:FreeRTOS/src/tasks.c **** 
2304:FreeRTOS/src/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:FreeRTOS/src/tasks.c **** {
2306:FreeRTOS/src/tasks.c **** TickType_t xTicks;
2307:FreeRTOS/src/tasks.c **** 
2308:FreeRTOS/src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:FreeRTOS/src/tasks.c **** 	{
2311:FreeRTOS/src/tasks.c **** 		xTicks = xTickCount;
2312:FreeRTOS/src/tasks.c **** 	}
2313:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:FreeRTOS/src/tasks.c **** 
2315:FreeRTOS/src/tasks.c **** 	return xTicks;
2316:FreeRTOS/src/tasks.c **** }
2317:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2318:FreeRTOS/src/tasks.c **** 
2319:FreeRTOS/src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:FreeRTOS/src/tasks.c **** {
2321:FreeRTOS/src/tasks.c **** TickType_t xReturn;
2322:FreeRTOS/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:FreeRTOS/src/tasks.c **** 
2324:FreeRTOS/src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:FreeRTOS/src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:FreeRTOS/src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:FreeRTOS/src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:FreeRTOS/src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:FreeRTOS/src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:FreeRTOS/src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:FreeRTOS/src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:FreeRTOS/src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:FreeRTOS/src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:FreeRTOS/src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:FreeRTOS/src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:FreeRTOS/src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:FreeRTOS/src/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:FreeRTOS/src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:FreeRTOS/src/tasks.c **** 
2340:FreeRTOS/src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:FreeRTOS/src/tasks.c **** 	{
2342:FreeRTOS/src/tasks.c **** 		xReturn = xTickCount;
2343:FreeRTOS/src/tasks.c **** 	}
2344:FreeRTOS/src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:FreeRTOS/src/tasks.c **** 
2346:FreeRTOS/src/tasks.c **** 	return xReturn;
2347:FreeRTOS/src/tasks.c **** }
2348:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2349:FreeRTOS/src/tasks.c **** 
2350:FreeRTOS/src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:FreeRTOS/src/tasks.c **** {
2352:FreeRTOS/src/tasks.c **** 	/* A critical section is not required because the variables are of type
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 44


2353:FreeRTOS/src/tasks.c **** 	BaseType_t. */
2354:FreeRTOS/src/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:FreeRTOS/src/tasks.c **** }
2356:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2357:FreeRTOS/src/tasks.c **** 
2358:FreeRTOS/src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:FreeRTOS/src/tasks.c **** {
2360:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
2361:FreeRTOS/src/tasks.c **** 
2362:FreeRTOS/src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:FreeRTOS/src/tasks.c **** 	queried. */
2364:FreeRTOS/src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
2366:FreeRTOS/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:FreeRTOS/src/tasks.c **** }
2368:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2369:FreeRTOS/src/tasks.c **** 
2370:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:FreeRTOS/src/tasks.c **** 
2372:FreeRTOS/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:FreeRTOS/src/tasks.c **** 	{
2374:FreeRTOS/src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:FreeRTOS/src/tasks.c **** 	UBaseType_t x;
2376:FreeRTOS/src/tasks.c **** 	char cNextChar;
2377:FreeRTOS/src/tasks.c **** 	BaseType_t xBreakLoop;
2378:FreeRTOS/src/tasks.c **** 
2379:FreeRTOS/src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:FreeRTOS/src/tasks.c **** 
2381:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:FreeRTOS/src/tasks.c **** 		{
2383:FreeRTOS/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:FreeRTOS/src/tasks.c **** 
2385:FreeRTOS/src/tasks.c **** 			do
2386:FreeRTOS/src/tasks.c **** 			{
2387:FreeRTOS/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:FreeRTOS/src/tasks.c **** 
2389:FreeRTOS/src/tasks.c **** 				/* Check each character in the name looking for a match or
2390:FreeRTOS/src/tasks.c **** 				mismatch. */
2391:FreeRTOS/src/tasks.c **** 				xBreakLoop = pdFALSE;
2392:FreeRTOS/src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:FreeRTOS/src/tasks.c **** 				{
2394:FreeRTOS/src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:FreeRTOS/src/tasks.c **** 
2396:FreeRTOS/src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:FreeRTOS/src/tasks.c **** 					{
2398:FreeRTOS/src/tasks.c **** 						/* Characters didn't match. */
2399:FreeRTOS/src/tasks.c **** 						xBreakLoop = pdTRUE;
2400:FreeRTOS/src/tasks.c **** 					}
2401:FreeRTOS/src/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:FreeRTOS/src/tasks.c **** 					{
2403:FreeRTOS/src/tasks.c **** 						/* Both strings terminated, a match must have been
2404:FreeRTOS/src/tasks.c **** 						found. */
2405:FreeRTOS/src/tasks.c **** 						pxReturn = pxNextTCB;
2406:FreeRTOS/src/tasks.c **** 						xBreakLoop = pdTRUE;
2407:FreeRTOS/src/tasks.c **** 					}
2408:FreeRTOS/src/tasks.c **** 					else
2409:FreeRTOS/src/tasks.c **** 					{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 45


2410:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:FreeRTOS/src/tasks.c **** 					}
2412:FreeRTOS/src/tasks.c **** 
2413:FreeRTOS/src/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:FreeRTOS/src/tasks.c **** 					{
2415:FreeRTOS/src/tasks.c **** 						break;
2416:FreeRTOS/src/tasks.c **** 					}
2417:FreeRTOS/src/tasks.c **** 				}
2418:FreeRTOS/src/tasks.c **** 
2419:FreeRTOS/src/tasks.c **** 				if( pxReturn != NULL )
2420:FreeRTOS/src/tasks.c **** 				{
2421:FreeRTOS/src/tasks.c **** 					/* The handle has been found. */
2422:FreeRTOS/src/tasks.c **** 					break;
2423:FreeRTOS/src/tasks.c **** 				}
2424:FreeRTOS/src/tasks.c **** 
2425:FreeRTOS/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:FreeRTOS/src/tasks.c **** 		}
2427:FreeRTOS/src/tasks.c **** 		else
2428:FreeRTOS/src/tasks.c **** 		{
2429:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:FreeRTOS/src/tasks.c **** 		}
2431:FreeRTOS/src/tasks.c **** 
2432:FreeRTOS/src/tasks.c **** 		return pxReturn;
2433:FreeRTOS/src/tasks.c **** 	}
2434:FreeRTOS/src/tasks.c **** 
2435:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2437:FreeRTOS/src/tasks.c **** 
2438:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:FreeRTOS/src/tasks.c **** 
2440:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:FreeRTOS/src/tasks.c **** 	{
2442:FreeRTOS/src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:FreeRTOS/src/tasks.c **** 	TCB_t* pxTCB;
2444:FreeRTOS/src/tasks.c **** 
2445:FreeRTOS/src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:FreeRTOS/src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:FreeRTOS/src/tasks.c **** 
2448:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2449:FreeRTOS/src/tasks.c **** 		{
2450:FreeRTOS/src/tasks.c **** 			/* Search the ready lists. */
2451:FreeRTOS/src/tasks.c **** 			do
2452:FreeRTOS/src/tasks.c **** 			{
2453:FreeRTOS/src/tasks.c **** 				uxQueue--;
2454:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:FreeRTOS/src/tasks.c **** 
2456:FreeRTOS/src/tasks.c **** 				if( pxTCB != NULL )
2457:FreeRTOS/src/tasks.c **** 				{
2458:FreeRTOS/src/tasks.c **** 					/* Found the handle. */
2459:FreeRTOS/src/tasks.c **** 					break;
2460:FreeRTOS/src/tasks.c **** 				}
2461:FreeRTOS/src/tasks.c **** 
2462:FreeRTOS/src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:FreeRTOS/src/tasks.c **** 
2464:FreeRTOS/src/tasks.c **** 			/* Search the delayed lists. */
2465:FreeRTOS/src/tasks.c **** 			if( pxTCB == NULL )
2466:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 46


2467:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:FreeRTOS/src/tasks.c **** 			}
2469:FreeRTOS/src/tasks.c **** 
2470:FreeRTOS/src/tasks.c **** 			if( pxTCB == NULL )
2471:FreeRTOS/src/tasks.c **** 			{
2472:FreeRTOS/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:FreeRTOS/src/tasks.c **** 			}
2474:FreeRTOS/src/tasks.c **** 
2475:FreeRTOS/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:FreeRTOS/src/tasks.c **** 			{
2477:FreeRTOS/src/tasks.c **** 				if( pxTCB == NULL )
2478:FreeRTOS/src/tasks.c **** 				{
2479:FreeRTOS/src/tasks.c **** 					/* Search the suspended list. */
2480:FreeRTOS/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:FreeRTOS/src/tasks.c **** 				}
2482:FreeRTOS/src/tasks.c **** 			}
2483:FreeRTOS/src/tasks.c **** 			#endif
2484:FreeRTOS/src/tasks.c **** 
2485:FreeRTOS/src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:FreeRTOS/src/tasks.c **** 			{
2487:FreeRTOS/src/tasks.c **** 				if( pxTCB == NULL )
2488:FreeRTOS/src/tasks.c **** 				{
2489:FreeRTOS/src/tasks.c **** 					/* Search the deleted list. */
2490:FreeRTOS/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:FreeRTOS/src/tasks.c **** 				}
2492:FreeRTOS/src/tasks.c **** 			}
2493:FreeRTOS/src/tasks.c **** 			#endif
2494:FreeRTOS/src/tasks.c **** 		}
2495:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2496:FreeRTOS/src/tasks.c **** 
2497:FreeRTOS/src/tasks.c **** 		return pxTCB;
2498:FreeRTOS/src/tasks.c **** 	}
2499:FreeRTOS/src/tasks.c **** 
2500:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2502:FreeRTOS/src/tasks.c **** 
2503:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:FreeRTOS/src/tasks.c **** 
2505:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:FreeRTOS/src/tasks.c **** 	{
2507:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:FreeRTOS/src/tasks.c **** 
2509:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2510:FreeRTOS/src/tasks.c **** 		{
2511:FreeRTOS/src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:FreeRTOS/src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:FreeRTOS/src/tasks.c **** 			{
2514:FreeRTOS/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:FreeRTOS/src/tasks.c **** 				task in the Ready state. */
2516:FreeRTOS/src/tasks.c **** 				do
2517:FreeRTOS/src/tasks.c **** 				{
2518:FreeRTOS/src/tasks.c **** 					uxQueue--;
2519:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:FreeRTOS/src/tasks.c **** 
2521:FreeRTOS/src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:FreeRTOS/src/tasks.c **** 
2523:FreeRTOS/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 47


2524:FreeRTOS/src/tasks.c **** 				task in the Blocked state. */
2525:FreeRTOS/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:FreeRTOS/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:FreeRTOS/src/tasks.c **** 
2528:FreeRTOS/src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:FreeRTOS/src/tasks.c **** 				{
2530:FreeRTOS/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:FreeRTOS/src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:FreeRTOS/src/tasks.c **** 				}
2534:FreeRTOS/src/tasks.c **** 				#endif
2535:FreeRTOS/src/tasks.c **** 
2536:FreeRTOS/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:FreeRTOS/src/tasks.c **** 				{
2538:FreeRTOS/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:FreeRTOS/src/tasks.c **** 					each task in the Suspended state. */
2540:FreeRTOS/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:FreeRTOS/src/tasks.c **** 				}
2542:FreeRTOS/src/tasks.c **** 				#endif
2543:FreeRTOS/src/tasks.c **** 
2544:FreeRTOS/src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:FreeRTOS/src/tasks.c **** 				{
2546:FreeRTOS/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:FreeRTOS/src/tasks.c **** 					{
2548:FreeRTOS/src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:FreeRTOS/src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:FreeRTOS/src/tasks.c **** 						#else
2551:FreeRTOS/src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:FreeRTOS/src/tasks.c **** 						#endif
2553:FreeRTOS/src/tasks.c **** 					}
2554:FreeRTOS/src/tasks.c **** 				}
2555:FreeRTOS/src/tasks.c **** 				#else
2556:FreeRTOS/src/tasks.c **** 				{
2557:FreeRTOS/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:FreeRTOS/src/tasks.c **** 					{
2559:FreeRTOS/src/tasks.c **** 						*pulTotalRunTime = 0;
2560:FreeRTOS/src/tasks.c **** 					}
2561:FreeRTOS/src/tasks.c **** 				}
2562:FreeRTOS/src/tasks.c **** 				#endif
2563:FreeRTOS/src/tasks.c **** 			}
2564:FreeRTOS/src/tasks.c **** 			else
2565:FreeRTOS/src/tasks.c **** 			{
2566:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:FreeRTOS/src/tasks.c **** 			}
2568:FreeRTOS/src/tasks.c **** 		}
2569:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2570:FreeRTOS/src/tasks.c **** 
2571:FreeRTOS/src/tasks.c **** 		return uxTask;
2572:FreeRTOS/src/tasks.c **** 	}
2573:FreeRTOS/src/tasks.c **** 
2574:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2576:FreeRTOS/src/tasks.c **** 
2577:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:FreeRTOS/src/tasks.c **** 
2579:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:FreeRTOS/src/tasks.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 48


2581:FreeRTOS/src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:FreeRTOS/src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:FreeRTOS/src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:FreeRTOS/src/tasks.c **** 		return xIdleTaskHandle;
2585:FreeRTOS/src/tasks.c **** 	}
2586:FreeRTOS/src/tasks.c **** 
2587:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2589:FreeRTOS/src/tasks.c **** 
2590:FreeRTOS/src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:FreeRTOS/src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:FreeRTOS/src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:FreeRTOS/src/tasks.c **** 1. */
2594:FreeRTOS/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:FreeRTOS/src/tasks.c **** 
2596:FreeRTOS/src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:FreeRTOS/src/tasks.c **** 	{
2598:FreeRTOS/src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:FreeRTOS/src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:FreeRTOS/src/tasks.c **** 		each stepped tick. */
2601:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:FreeRTOS/src/tasks.c **** 		xTickCount += xTicksToJump;
2603:FreeRTOS/src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:FreeRTOS/src/tasks.c **** 	}
2605:FreeRTOS/src/tasks.c **** 
2606:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2608:FreeRTOS/src/tasks.c **** 
2609:FreeRTOS/src/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:FreeRTOS/src/tasks.c **** {
2611:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:FreeRTOS/src/tasks.c **** 
2613:FreeRTOS/src/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:FreeRTOS/src/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:FreeRTOS/src/tasks.c **** 
2617:FreeRTOS/src/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:FreeRTOS/src/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:FreeRTOS/src/tasks.c **** 	vTaskSuspendAll();
2620:FreeRTOS/src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:FreeRTOS/src/tasks.c **** 
2623:FreeRTOS/src/tasks.c **** 	return xYieldRequired;
2624:FreeRTOS/src/tasks.c **** }
2625:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2626:FreeRTOS/src/tasks.c **** 
2627:FreeRTOS/src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:FreeRTOS/src/tasks.c **** 
2629:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:FreeRTOS/src/tasks.c **** 	{
2631:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
2633:FreeRTOS/src/tasks.c **** 
2634:FreeRTOS/src/tasks.c **** 		configASSERT( pxTCB );
2635:FreeRTOS/src/tasks.c **** 
2636:FreeRTOS/src/tasks.c **** 		vTaskSuspendAll();
2637:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 49


2638:FreeRTOS/src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:FreeRTOS/src/tasks.c **** 			it is actually in the Blocked state. */
2640:FreeRTOS/src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:FreeRTOS/src/tasks.c **** 			{
2642:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
2643:FreeRTOS/src/tasks.c **** 
2644:FreeRTOS/src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:FreeRTOS/src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:FreeRTOS/src/tasks.c **** 				scheduler is suspended. */
2647:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:FreeRTOS/src/tasks.c **** 
2649:FreeRTOS/src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:FreeRTOS/src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:FreeRTOS/src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:FreeRTOS/src/tasks.c **** 				is used. */
2653:FreeRTOS/src/tasks.c **** 				taskENTER_CRITICAL();
2654:FreeRTOS/src/tasks.c **** 				{
2655:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:FreeRTOS/src/tasks.c **** 					{
2657:FreeRTOS/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:FreeRTOS/src/tasks.c **** 
2659:FreeRTOS/src/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:FreeRTOS/src/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:FreeRTOS/src/tasks.c **** 						then block again. */
2662:FreeRTOS/src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:FreeRTOS/src/tasks.c **** 					}
2664:FreeRTOS/src/tasks.c **** 					else
2665:FreeRTOS/src/tasks.c **** 					{
2666:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:FreeRTOS/src/tasks.c **** 					}
2668:FreeRTOS/src/tasks.c **** 				}
2669:FreeRTOS/src/tasks.c **** 				taskEXIT_CRITICAL();
2670:FreeRTOS/src/tasks.c **** 
2671:FreeRTOS/src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:FreeRTOS/src/tasks.c **** 
2674:FreeRTOS/src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:FreeRTOS/src/tasks.c **** 				switch if preemption is turned off. */
2676:FreeRTOS/src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:FreeRTOS/src/tasks.c **** 				{
2678:FreeRTOS/src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:FreeRTOS/src/tasks.c **** 					performed if the unblocked task has a priority that is
2680:FreeRTOS/src/tasks.c **** 					equal to or higher than the currently executing task. */
2681:FreeRTOS/src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:FreeRTOS/src/tasks.c **** 					{
2683:FreeRTOS/src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:FreeRTOS/src/tasks.c **** 						is unsuspended. */
2685:FreeRTOS/src/tasks.c **** 						xYieldPending = pdTRUE;
2686:FreeRTOS/src/tasks.c **** 					}
2687:FreeRTOS/src/tasks.c **** 					else
2688:FreeRTOS/src/tasks.c **** 					{
2689:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:FreeRTOS/src/tasks.c **** 					}
2691:FreeRTOS/src/tasks.c **** 				}
2692:FreeRTOS/src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:FreeRTOS/src/tasks.c **** 			}
2694:FreeRTOS/src/tasks.c **** 			else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 50


2695:FreeRTOS/src/tasks.c **** 			{
2696:FreeRTOS/src/tasks.c **** 				xReturn = pdFAIL;
2697:FreeRTOS/src/tasks.c **** 			}
2698:FreeRTOS/src/tasks.c **** 		}
2699:FreeRTOS/src/tasks.c **** 		( void ) xTaskResumeAll();
2700:FreeRTOS/src/tasks.c **** 
2701:FreeRTOS/src/tasks.c **** 		return xReturn;
2702:FreeRTOS/src/tasks.c **** 	}
2703:FreeRTOS/src/tasks.c **** 
2704:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
2706:FreeRTOS/src/tasks.c **** 
2707:FreeRTOS/src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:FreeRTOS/src/tasks.c **** {
2709:FreeRTOS/src/tasks.c **** TCB_t * pxTCB;
2710:FreeRTOS/src/tasks.c **** TickType_t xItemValue;
2711:FreeRTOS/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:FreeRTOS/src/tasks.c **** 
2713:FreeRTOS/src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:FreeRTOS/src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:FreeRTOS/src/tasks.c **** 	tasks to be unblocked. */
2716:FreeRTOS/src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:FreeRTOS/src/tasks.c **** 	{
2719:FreeRTOS/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:FreeRTOS/src/tasks.c **** 		block. */
2721:FreeRTOS/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:FreeRTOS/src/tasks.c **** 
2723:FreeRTOS/src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:FreeRTOS/src/tasks.c **** 		delayed lists if it wraps to 0. */
2725:FreeRTOS/src/tasks.c **** 		xTickCount = xConstTickCount;
2726:FreeRTOS/src/tasks.c **** 
2727:FreeRTOS/src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:FreeRTOS/src/tasks.c **** 		{
2729:FreeRTOS/src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:FreeRTOS/src/tasks.c **** 		}
2731:FreeRTOS/src/tasks.c **** 		else
2732:FreeRTOS/src/tasks.c **** 		{
2733:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:FreeRTOS/src/tasks.c **** 		}
2735:FreeRTOS/src/tasks.c **** 
2736:FreeRTOS/src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:FreeRTOS/src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:FreeRTOS/src/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:FreeRTOS/src/tasks.c **** 		look any further down the list. */
2740:FreeRTOS/src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:FreeRTOS/src/tasks.c **** 		{
2742:FreeRTOS/src/tasks.c **** 			for( ;; )
2743:FreeRTOS/src/tasks.c **** 			{
2744:FreeRTOS/src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:FreeRTOS/src/tasks.c **** 				{
2746:FreeRTOS/src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:FreeRTOS/src/tasks.c **** 					to the maximum possible value so it is extremely
2748:FreeRTOS/src/tasks.c **** 					unlikely that the
2749:FreeRTOS/src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:FreeRTOS/src/tasks.c **** 					next time through. */
2751:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 51


2752:FreeRTOS/src/tasks.c **** 					break;
2753:FreeRTOS/src/tasks.c **** 				}
2754:FreeRTOS/src/tasks.c **** 				else
2755:FreeRTOS/src/tasks.c **** 				{
2756:FreeRTOS/src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:FreeRTOS/src/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:FreeRTOS/src/tasks.c **** 					at which the task at the head of the delayed list must
2759:FreeRTOS/src/tasks.c **** 					be removed from the Blocked state. */
2760:FreeRTOS/src/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:FreeRTOS/src/tasks.c **** 
2763:FreeRTOS/src/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:FreeRTOS/src/tasks.c **** 					{
2765:FreeRTOS/src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:FreeRTOS/src/tasks.c **** 						item value is the time at which the task at the head
2767:FreeRTOS/src/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:FreeRTOS/src/tasks.c **** 						state -	so record the item value in
2769:FreeRTOS/src/tasks.c **** 						xNextTaskUnblockTime. */
2770:FreeRTOS/src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:FreeRTOS/src/tasks.c **** 					}
2773:FreeRTOS/src/tasks.c **** 					else
2774:FreeRTOS/src/tasks.c **** 					{
2775:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:FreeRTOS/src/tasks.c **** 					}
2777:FreeRTOS/src/tasks.c **** 
2778:FreeRTOS/src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:FreeRTOS/src/tasks.c **** 
2781:FreeRTOS/src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:FreeRTOS/src/tasks.c **** 					it from the event list. */
2783:FreeRTOS/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:FreeRTOS/src/tasks.c **** 					{
2785:FreeRTOS/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:FreeRTOS/src/tasks.c **** 					}
2787:FreeRTOS/src/tasks.c **** 					else
2788:FreeRTOS/src/tasks.c **** 					{
2789:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:FreeRTOS/src/tasks.c **** 					}
2791:FreeRTOS/src/tasks.c **** 
2792:FreeRTOS/src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:FreeRTOS/src/tasks.c **** 					list. */
2794:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:FreeRTOS/src/tasks.c **** 
2796:FreeRTOS/src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:FreeRTOS/src/tasks.c **** 					context switch if preemption is turned off. */
2798:FreeRTOS/src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:FreeRTOS/src/tasks.c **** 					{
2800:FreeRTOS/src/tasks.c **** 						/* Preemption is on, but a context switch should
2801:FreeRTOS/src/tasks.c **** 						only be performed if the unblocked task has a
2802:FreeRTOS/src/tasks.c **** 						priority that is equal to or higher than the
2803:FreeRTOS/src/tasks.c **** 						currently executing task. */
2804:FreeRTOS/src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:FreeRTOS/src/tasks.c **** 						{
2806:FreeRTOS/src/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:FreeRTOS/src/tasks.c **** 						}
2808:FreeRTOS/src/tasks.c **** 						else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 52


2809:FreeRTOS/src/tasks.c **** 						{
2810:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:FreeRTOS/src/tasks.c **** 						}
2812:FreeRTOS/src/tasks.c **** 					}
2813:FreeRTOS/src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:FreeRTOS/src/tasks.c **** 				}
2815:FreeRTOS/src/tasks.c **** 			}
2816:FreeRTOS/src/tasks.c **** 		}
2817:FreeRTOS/src/tasks.c **** 
2818:FreeRTOS/src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:FreeRTOS/src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:FreeRTOS/src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:FreeRTOS/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:FreeRTOS/src/tasks.c **** 		{
2823:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:FreeRTOS/src/tasks.c **** 			{
2825:FreeRTOS/src/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:FreeRTOS/src/tasks.c **** 			}
2827:FreeRTOS/src/tasks.c **** 			else
2828:FreeRTOS/src/tasks.c **** 			{
2829:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:FreeRTOS/src/tasks.c **** 			}
2831:FreeRTOS/src/tasks.c **** 		}
2832:FreeRTOS/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:FreeRTOS/src/tasks.c **** 
2834:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:FreeRTOS/src/tasks.c **** 		{
2836:FreeRTOS/src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:FreeRTOS/src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:FreeRTOS/src/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:FreeRTOS/src/tasks.c **** 			{
2840:FreeRTOS/src/tasks.c **** 				vApplicationTickHook();
2841:FreeRTOS/src/tasks.c **** 			}
2842:FreeRTOS/src/tasks.c **** 			else
2843:FreeRTOS/src/tasks.c **** 			{
2844:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:FreeRTOS/src/tasks.c **** 			}
2846:FreeRTOS/src/tasks.c **** 		}
2847:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:FreeRTOS/src/tasks.c **** 
2849:FreeRTOS/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:FreeRTOS/src/tasks.c **** 		{
2851:FreeRTOS/src/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:FreeRTOS/src/tasks.c **** 			{
2853:FreeRTOS/src/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:FreeRTOS/src/tasks.c **** 			}
2855:FreeRTOS/src/tasks.c **** 			else
2856:FreeRTOS/src/tasks.c **** 			{
2857:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:FreeRTOS/src/tasks.c **** 			}
2859:FreeRTOS/src/tasks.c **** 		}
2860:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:FreeRTOS/src/tasks.c **** 	}
2862:FreeRTOS/src/tasks.c **** 	else
2863:FreeRTOS/src/tasks.c **** 	{
2864:FreeRTOS/src/tasks.c **** 		++xPendedTicks;
2865:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 53


2866:FreeRTOS/src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:FreeRTOS/src/tasks.c **** 		scheduler is locked. */
2868:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:FreeRTOS/src/tasks.c **** 		{
2870:FreeRTOS/src/tasks.c **** 			vApplicationTickHook();
2871:FreeRTOS/src/tasks.c **** 		}
2872:FreeRTOS/src/tasks.c **** 		#endif
2873:FreeRTOS/src/tasks.c **** 	}
2874:FreeRTOS/src/tasks.c **** 
2875:FreeRTOS/src/tasks.c **** 	return xSwitchRequired;
2876:FreeRTOS/src/tasks.c **** }
2877:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2878:FreeRTOS/src/tasks.c **** 
2879:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:FreeRTOS/src/tasks.c **** 
2881:FreeRTOS/src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:FreeRTOS/src/tasks.c **** 	{
2883:FreeRTOS/src/tasks.c **** 	TCB_t *xTCB;
2884:FreeRTOS/src/tasks.c **** 
2885:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:FreeRTOS/src/tasks.c **** 		getting set. */
2887:FreeRTOS/src/tasks.c **** 		if( xTask == NULL )
2888:FreeRTOS/src/tasks.c **** 		{
2889:FreeRTOS/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:FreeRTOS/src/tasks.c **** 		}
2891:FreeRTOS/src/tasks.c **** 		else
2892:FreeRTOS/src/tasks.c **** 		{
2893:FreeRTOS/src/tasks.c **** 			xTCB = xTask;
2894:FreeRTOS/src/tasks.c **** 		}
2895:FreeRTOS/src/tasks.c **** 
2896:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2898:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
2899:FreeRTOS/src/tasks.c **** 		{
2900:FreeRTOS/src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:FreeRTOS/src/tasks.c **** 		}
2902:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
2903:FreeRTOS/src/tasks.c **** 	}
2904:FreeRTOS/src/tasks.c **** 
2905:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2907:FreeRTOS/src/tasks.c **** 
2908:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:FreeRTOS/src/tasks.c **** 
2910:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:FreeRTOS/src/tasks.c **** 	{
2912:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
2913:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xReturn;
2914:FreeRTOS/src/tasks.c **** 
2915:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:FreeRTOS/src/tasks.c **** 
2918:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2920:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
2921:FreeRTOS/src/tasks.c **** 		{
2922:FreeRTOS/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 54


2923:FreeRTOS/src/tasks.c **** 		}
2924:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
2925:FreeRTOS/src/tasks.c **** 
2926:FreeRTOS/src/tasks.c **** 		return xReturn;
2927:FreeRTOS/src/tasks.c **** 	}
2928:FreeRTOS/src/tasks.c **** 
2929:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2931:FreeRTOS/src/tasks.c **** 
2932:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:FreeRTOS/src/tasks.c **** 
2934:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:FreeRTOS/src/tasks.c **** 	{
2936:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
2937:FreeRTOS/src/tasks.c **** 	TaskHookFunction_t xReturn;
2938:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:FreeRTOS/src/tasks.c **** 
2940:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:FreeRTOS/src/tasks.c **** 
2943:FreeRTOS/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:FreeRTOS/src/tasks.c **** 		the value can be accessed from an interrupt. */
2945:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:FreeRTOS/src/tasks.c **** 		{
2947:FreeRTOS/src/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:FreeRTOS/src/tasks.c **** 		}
2949:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:FreeRTOS/src/tasks.c **** 
2951:FreeRTOS/src/tasks.c **** 		return xReturn;
2952:FreeRTOS/src/tasks.c **** 	}
2953:FreeRTOS/src/tasks.c **** 
2954:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2956:FreeRTOS/src/tasks.c **** 
2957:FreeRTOS/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:FreeRTOS/src/tasks.c **** 
2959:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:FreeRTOS/src/tasks.c **** 	{
2961:FreeRTOS/src/tasks.c **** 	TCB_t *xTCB;
2962:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
2963:FreeRTOS/src/tasks.c **** 
2964:FreeRTOS/src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:FreeRTOS/src/tasks.c **** 		if( xTask == NULL )
2966:FreeRTOS/src/tasks.c **** 		{
2967:FreeRTOS/src/tasks.c **** 			xTCB = pxCurrentTCB;
2968:FreeRTOS/src/tasks.c **** 		}
2969:FreeRTOS/src/tasks.c **** 		else
2970:FreeRTOS/src/tasks.c **** 		{
2971:FreeRTOS/src/tasks.c **** 			xTCB = xTask;
2972:FreeRTOS/src/tasks.c **** 		}
2973:FreeRTOS/src/tasks.c **** 
2974:FreeRTOS/src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:FreeRTOS/src/tasks.c **** 		{
2976:FreeRTOS/src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:FreeRTOS/src/tasks.c **** 		}
2978:FreeRTOS/src/tasks.c **** 		else
2979:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 55


2980:FreeRTOS/src/tasks.c **** 			xReturn = pdFAIL;
2981:FreeRTOS/src/tasks.c **** 		}
2982:FreeRTOS/src/tasks.c **** 
2983:FreeRTOS/src/tasks.c **** 		return xReturn;
2984:FreeRTOS/src/tasks.c **** 	}
2985:FreeRTOS/src/tasks.c **** 
2986:FreeRTOS/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
2988:FreeRTOS/src/tasks.c **** 
2989:FreeRTOS/src/tasks.c **** void vTaskSwitchContext( void )
2990:FreeRTOS/src/tasks.c **** {
2991:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:FreeRTOS/src/tasks.c **** 	{
2993:FreeRTOS/src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:FreeRTOS/src/tasks.c **** 		switch. */
2995:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
2996:FreeRTOS/src/tasks.c **** 	}
2997:FreeRTOS/src/tasks.c **** 	else
2998:FreeRTOS/src/tasks.c **** 	{
2999:FreeRTOS/src/tasks.c **** 		xYieldPending = pdFALSE;
3000:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:FreeRTOS/src/tasks.c **** 
3002:FreeRTOS/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:FreeRTOS/src/tasks.c **** 		{
3004:FreeRTOS/src/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:FreeRTOS/src/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:FreeRTOS/src/tasks.c **** 			#else
3007:FreeRTOS/src/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:FreeRTOS/src/tasks.c **** 			#endif
3009:FreeRTOS/src/tasks.c **** 
3010:FreeRTOS/src/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:FreeRTOS/src/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:FreeRTOS/src/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:FreeRTOS/src/tasks.c **** 			protection here so count values are only valid until the timer
3014:FreeRTOS/src/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:FreeRTOS/src/tasks.c **** 			against suspect run time stat counter implementations - which
3016:FreeRTOS/src/tasks.c **** 			are provided by the application, not the kernel. */
3017:FreeRTOS/src/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:FreeRTOS/src/tasks.c **** 			{
3019:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:FreeRTOS/src/tasks.c **** 			}
3021:FreeRTOS/src/tasks.c **** 			else
3022:FreeRTOS/src/tasks.c **** 			{
3023:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:FreeRTOS/src/tasks.c **** 			}
3025:FreeRTOS/src/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:FreeRTOS/src/tasks.c **** 		}
3027:FreeRTOS/src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:FreeRTOS/src/tasks.c **** 
3029:FreeRTOS/src/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:FreeRTOS/src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:FreeRTOS/src/tasks.c **** 
3032:FreeRTOS/src/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:FreeRTOS/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:FreeRTOS/src/tasks.c **** 		{
3035:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 56


3037:FreeRTOS/src/tasks.c **** 		#endif
3038:FreeRTOS/src/tasks.c **** 
3039:FreeRTOS/src/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:FreeRTOS/src/tasks.c **** 		optimised asm code. */
3041:FreeRTOS/src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:FreeRTOS/src/tasks.c **** 
3044:FreeRTOS/src/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:FreeRTOS/src/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:FreeRTOS/src/tasks.c **** 		{
3047:FreeRTOS/src/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:FreeRTOS/src/tasks.c **** 		}
3049:FreeRTOS/src/tasks.c **** 		#endif
3050:FreeRTOS/src/tasks.c **** 
3051:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:FreeRTOS/src/tasks.c **** 		{
3053:FreeRTOS/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:FreeRTOS/src/tasks.c **** 			structure specific to this task.
3055:FreeRTOS/src/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:FreeRTOS/src/tasks.c **** 			for additional information. */
3057:FreeRTOS/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:FreeRTOS/src/tasks.c **** 		}
3059:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:FreeRTOS/src/tasks.c **** 	}
3061:FreeRTOS/src/tasks.c **** }
3062:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3063:FreeRTOS/src/tasks.c **** 
3064:FreeRTOS/src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:FreeRTOS/src/tasks.c **** {
3066:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
3067:FreeRTOS/src/tasks.c **** 
3068:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:FreeRTOS/src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:FreeRTOS/src/tasks.c **** 
3071:FreeRTOS/src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:FreeRTOS/src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:FreeRTOS/src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:FreeRTOS/src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:FreeRTOS/src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:FreeRTOS/src/tasks.c **** 
3077:FreeRTOS/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:FreeRTOS/src/tasks.c **** }
3079:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3080:FreeRTOS/src/tasks.c **** 
3081:FreeRTOS/src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:FreeRTOS/src/tasks.c **** {
3083:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
3084:FreeRTOS/src/tasks.c **** 
3085:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:FreeRTOS/src/tasks.c **** 	the event groups implementation. */
3087:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:FreeRTOS/src/tasks.c **** 
3089:FreeRTOS/src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:FreeRTOS/src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:FreeRTOS/src/tasks.c **** 	task that is not in the Blocked state. */
3092:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 57


3094:FreeRTOS/src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:FreeRTOS/src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:FreeRTOS/src/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:FreeRTOS/src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:FreeRTOS/src/tasks.c **** 	the task level). */
3099:FreeRTOS/src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:FreeRTOS/src/tasks.c **** 
3101:FreeRTOS/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:FreeRTOS/src/tasks.c **** }
3103:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3104:FreeRTOS/src/tasks.c **** 
3105:FreeRTOS/src/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:FreeRTOS/src/tasks.c **** 
3107:FreeRTOS/src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:FreeRTOS/src/tasks.c **** 	{
3109:FreeRTOS/src/tasks.c **** 		configASSERT( pxEventList );
3110:FreeRTOS/src/tasks.c **** 
3111:FreeRTOS/src/tasks.c **** 		/* This function should not be called by application code hence the
3112:FreeRTOS/src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:FreeRTOS/src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:FreeRTOS/src/tasks.c **** 		it should be called with the scheduler suspended. */
3115:FreeRTOS/src/tasks.c **** 
3116:FreeRTOS/src/tasks.c **** 
3117:FreeRTOS/src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:FreeRTOS/src/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:FreeRTOS/src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:FreeRTOS/src/tasks.c **** 		can be used in place of vListInsert. */
3121:FreeRTOS/src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:FreeRTOS/src/tasks.c **** 
3123:FreeRTOS/src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:FreeRTOS/src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:FreeRTOS/src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:FreeRTOS/src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:FreeRTOS/src/tasks.c **** 		{
3128:FreeRTOS/src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:FreeRTOS/src/tasks.c **** 		}
3130:FreeRTOS/src/tasks.c **** 
3131:FreeRTOS/src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:FreeRTOS/src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:FreeRTOS/src/tasks.c **** 	}
3134:FreeRTOS/src/tasks.c **** 
3135:FreeRTOS/src/tasks.c **** #endif /* configUSE_TIMERS */
3136:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3137:FreeRTOS/src/tasks.c **** 
3138:FreeRTOS/src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:FreeRTOS/src/tasks.c **** {
3140:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
3141:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
3142:FreeRTOS/src/tasks.c **** 
3143:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:FreeRTOS/src/tasks.c **** 	called from a critical section within an ISR. */
3145:FreeRTOS/src/tasks.c **** 
3146:FreeRTOS/src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:FreeRTOS/src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:FreeRTOS/src/tasks.c **** 	the delayed list, and add it to the ready list.
3149:FreeRTOS/src/tasks.c **** 
3150:FreeRTOS/src/tasks.c **** 	If an event is for a queue that is locked then this function will never
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 58


3151:FreeRTOS/src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:FreeRTOS/src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:FreeRTOS/src/tasks.c **** 
3154:FreeRTOS/src/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:FreeRTOS/src/tasks.c **** 	pxEventList is not empty. */
3156:FreeRTOS/src/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:FreeRTOS/src/tasks.c **** 
3160:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:FreeRTOS/src/tasks.c **** 	{
3162:FreeRTOS/src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:FreeRTOS/src/tasks.c **** 
3165:FreeRTOS/src/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:FreeRTOS/src/tasks.c **** 		{
3167:FreeRTOS/src/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:FreeRTOS/src/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:FreeRTOS/src/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:FreeRTOS/src/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:FreeRTOS/src/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:FreeRTOS/src/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:FreeRTOS/src/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:FreeRTOS/src/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:FreeRTOS/src/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:FreeRTOS/src/tasks.c **** 		}
3177:FreeRTOS/src/tasks.c **** 		#endif
3178:FreeRTOS/src/tasks.c **** 	}
3179:FreeRTOS/src/tasks.c **** 	else
3180:FreeRTOS/src/tasks.c **** 	{
3181:FreeRTOS/src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:FreeRTOS/src/tasks.c **** 		pending until the scheduler is resumed. */
3183:FreeRTOS/src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:FreeRTOS/src/tasks.c **** 	}
3185:FreeRTOS/src/tasks.c **** 
3186:FreeRTOS/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:FreeRTOS/src/tasks.c **** 	{
3188:FreeRTOS/src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:FreeRTOS/src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:FreeRTOS/src/tasks.c **** 		it should force a context switch now. */
3191:FreeRTOS/src/tasks.c **** 		xReturn = pdTRUE;
3192:FreeRTOS/src/tasks.c **** 
3193:FreeRTOS/src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:FreeRTOS/src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
3196:FreeRTOS/src/tasks.c **** 	}
3197:FreeRTOS/src/tasks.c **** 	else
3198:FreeRTOS/src/tasks.c **** 	{
3199:FreeRTOS/src/tasks.c **** 		xReturn = pdFALSE;
3200:FreeRTOS/src/tasks.c **** 	}
3201:FreeRTOS/src/tasks.c **** 
3202:FreeRTOS/src/tasks.c **** 	return xReturn;
3203:FreeRTOS/src/tasks.c **** }
3204:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3205:FreeRTOS/src/tasks.c **** 
3206:FreeRTOS/src/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:FreeRTOS/src/tasks.c **** {
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 59


3208:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
3209:FreeRTOS/src/tasks.c **** 
3210:FreeRTOS/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:FreeRTOS/src/tasks.c **** 	the event flags implementation. */
3212:FreeRTOS/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:FreeRTOS/src/tasks.c **** 
3214:FreeRTOS/src/tasks.c **** 	/* Store the new item value in the event list. */
3215:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:FreeRTOS/src/tasks.c **** 
3217:FreeRTOS/src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:FreeRTOS/src/tasks.c **** 	event flags. */
3219:FreeRTOS/src/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:FreeRTOS/src/tasks.c **** 
3223:FreeRTOS/src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:FreeRTOS/src/tasks.c **** 	{
3225:FreeRTOS/src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:FreeRTOS/src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:FreeRTOS/src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:FreeRTOS/src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:FreeRTOS/src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:FreeRTOS/src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:FreeRTOS/src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:FreeRTOS/src/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:FreeRTOS/src/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:FreeRTOS/src/tasks.c **** 	}
3235:FreeRTOS/src/tasks.c **** 	#endif
3236:FreeRTOS/src/tasks.c **** 
3237:FreeRTOS/src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:FreeRTOS/src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:FreeRTOS/src/tasks.c **** 	lists. */
3240:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:FreeRTOS/src/tasks.c **** 
3243:FreeRTOS/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:FreeRTOS/src/tasks.c **** 	{
3245:FreeRTOS/src/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:FreeRTOS/src/tasks.c **** 		a context switch is required.  This function is called with the
3247:FreeRTOS/src/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:FreeRTOS/src/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:FreeRTOS/src/tasks.c **** 		xYieldPending = pdTRUE;
3250:FreeRTOS/src/tasks.c **** 	}
3251:FreeRTOS/src/tasks.c **** }
3252:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3253:FreeRTOS/src/tasks.c **** 
3254:FreeRTOS/src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:FreeRTOS/src/tasks.c **** {
3256:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
3257:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
3258:FreeRTOS/src/tasks.c **** 	{
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:FreeRTOS/src/tasks.c **** 	}
3262:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
3263:FreeRTOS/src/tasks.c **** }
3264:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 60


3265:FreeRTOS/src/tasks.c **** 
3266:FreeRTOS/src/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:FreeRTOS/src/tasks.c **** {
3268:FreeRTOS/src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:FreeRTOS/src/tasks.c **** }
3272:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3273:FreeRTOS/src/tasks.c **** 
3274:FreeRTOS/src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:FreeRTOS/src/tasks.c **** {
3276:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
3277:FreeRTOS/src/tasks.c **** 
3278:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
3279:FreeRTOS/src/tasks.c **** 	configASSERT( pxTicksToWait );
3280:FreeRTOS/src/tasks.c **** 
3281:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
3282:FreeRTOS/src/tasks.c **** 	{
3283:FreeRTOS/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:FreeRTOS/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:FreeRTOS/src/tasks.c **** 
3287:FreeRTOS/src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:FreeRTOS/src/tasks.c **** 			{
3290:FreeRTOS/src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:FreeRTOS/src/tasks.c **** 				but has the same result. */
3292:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
3294:FreeRTOS/src/tasks.c **** 			}
3295:FreeRTOS/src/tasks.c **** 			else
3296:FreeRTOS/src/tasks.c **** 		#endif
3297:FreeRTOS/src/tasks.c **** 
3298:FreeRTOS/src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:FreeRTOS/src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:FreeRTOS/src/tasks.c **** 			{
3301:FreeRTOS/src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:FreeRTOS/src/tasks.c **** 				specified is the maximum block time then the task should block
3303:FreeRTOS/src/tasks.c **** 				indefinitely, and therefore never time out. */
3304:FreeRTOS/src/tasks.c **** 				xReturn = pdFALSE;
3305:FreeRTOS/src/tasks.c **** 			}
3306:FreeRTOS/src/tasks.c **** 			else
3307:FreeRTOS/src/tasks.c **** 		#endif
3308:FreeRTOS/src/tasks.c **** 
3309:FreeRTOS/src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:FreeRTOS/src/tasks.c **** 		{
3311:FreeRTOS/src/tasks.c **** 			/* The tick count is greater than the time at which
3312:FreeRTOS/src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:FreeRTOS/src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:FreeRTOS/src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:FreeRTOS/src/tasks.c **** 			was called. */
3316:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
3317:FreeRTOS/src/tasks.c **** 		}
3318:FreeRTOS/src/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:FreeRTOS/src/tasks.c **** 		{
3320:FreeRTOS/src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:FreeRTOS/src/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 61


3322:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
3324:FreeRTOS/src/tasks.c **** 		}
3325:FreeRTOS/src/tasks.c **** 		else
3326:FreeRTOS/src/tasks.c **** 		{
3327:FreeRTOS/src/tasks.c **** 			*pxTicksToWait = 0;
3328:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
3329:FreeRTOS/src/tasks.c **** 		}
3330:FreeRTOS/src/tasks.c **** 	}
3331:FreeRTOS/src/tasks.c **** 	taskEXIT_CRITICAL();
3332:FreeRTOS/src/tasks.c **** 
3333:FreeRTOS/src/tasks.c **** 	return xReturn;
3334:FreeRTOS/src/tasks.c **** }
3335:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/src/tasks.c **** 
3337:FreeRTOS/src/tasks.c **** void vTaskMissedYield( void )
3338:FreeRTOS/src/tasks.c **** {
3339:FreeRTOS/src/tasks.c **** 	xYieldPending = pdTRUE;
3340:FreeRTOS/src/tasks.c **** }
3341:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3342:FreeRTOS/src/tasks.c **** 
3343:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:FreeRTOS/src/tasks.c **** 
3345:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:FreeRTOS/src/tasks.c **** 	{
3347:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
3348:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
3349:FreeRTOS/src/tasks.c **** 
3350:FreeRTOS/src/tasks.c **** 		if( xTask != NULL )
3351:FreeRTOS/src/tasks.c **** 		{
3352:FreeRTOS/src/tasks.c **** 			pxTCB = xTask;
3353:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:FreeRTOS/src/tasks.c **** 		}
3355:FreeRTOS/src/tasks.c **** 		else
3356:FreeRTOS/src/tasks.c **** 		{
3357:FreeRTOS/src/tasks.c **** 			uxReturn = 0U;
3358:FreeRTOS/src/tasks.c **** 		}
3359:FreeRTOS/src/tasks.c **** 
3360:FreeRTOS/src/tasks.c **** 		return uxReturn;
3361:FreeRTOS/src/tasks.c **** 	}
3362:FreeRTOS/src/tasks.c **** 
3363:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3365:FreeRTOS/src/tasks.c **** 
3366:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:FreeRTOS/src/tasks.c **** 
3368:FreeRTOS/src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:FreeRTOS/src/tasks.c **** 	{
3370:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
3371:FreeRTOS/src/tasks.c **** 
3372:FreeRTOS/src/tasks.c **** 		if( xTask != NULL )
3373:FreeRTOS/src/tasks.c **** 		{
3374:FreeRTOS/src/tasks.c **** 			pxTCB = xTask;
3375:FreeRTOS/src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:FreeRTOS/src/tasks.c **** 		}
3377:FreeRTOS/src/tasks.c **** 	}
3378:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 62


3379:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:FreeRTOS/src/tasks.c **** 
3381:FreeRTOS/src/tasks.c **** /*
3382:FreeRTOS/src/tasks.c ****  * -----------------------------------------------------------
3383:FreeRTOS/src/tasks.c ****  * The Idle task.
3384:FreeRTOS/src/tasks.c ****  * ----------------------------------------------------------
3385:FreeRTOS/src/tasks.c ****  *
3386:FreeRTOS/src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:FreeRTOS/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:FreeRTOS/src/tasks.c ****  *
3389:FreeRTOS/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:FreeRTOS/src/tasks.c ****  *
3391:FreeRTOS/src/tasks.c ****  */
3392:FreeRTOS/src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:FreeRTOS/src/tasks.c **** {
3394:FreeRTOS/src/tasks.c **** 	/* Stop warnings. */
3395:FreeRTOS/src/tasks.c **** 	( void ) pvParameters;
3396:FreeRTOS/src/tasks.c **** 
3397:FreeRTOS/src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:FreeRTOS/src/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:FreeRTOS/src/tasks.c **** 
3400:FreeRTOS/src/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:FreeRTOS/src/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:FreeRTOS/src/tasks.c **** 	any. */
3403:FreeRTOS/src/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:FreeRTOS/src/tasks.c **** 
3405:FreeRTOS/src/tasks.c **** 	for( ;; )
3406:FreeRTOS/src/tasks.c **** 	{
3407:FreeRTOS/src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:FreeRTOS/src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:FreeRTOS/src/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:FreeRTOS/src/tasks.c **** 
3411:FreeRTOS/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:FreeRTOS/src/tasks.c **** 		{
3413:FreeRTOS/src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:FreeRTOS/src/tasks.c **** 			see if any other task has become available.  If we are using
3415:FreeRTOS/src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:FreeRTOS/src/tasks.c **** 			will automatically get the processor anyway. */
3417:FreeRTOS/src/tasks.c **** 			taskYIELD();
3418:FreeRTOS/src/tasks.c **** 		}
3419:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:FreeRTOS/src/tasks.c **** 
3421:FreeRTOS/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:FreeRTOS/src/tasks.c **** 		{
3423:FreeRTOS/src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:FreeRTOS/src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:FreeRTOS/src/tasks.c **** 			to run then the idle task should yield before the end of the
3426:FreeRTOS/src/tasks.c **** 			timeslice.
3427:FreeRTOS/src/tasks.c **** 
3428:FreeRTOS/src/tasks.c **** 			A critical region is not required here as we are just reading from
3429:FreeRTOS/src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:FreeRTOS/src/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:FreeRTOS/src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:FreeRTOS/src/tasks.c **** 			{
3434:FreeRTOS/src/tasks.c **** 				taskYIELD();
3435:FreeRTOS/src/tasks.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 63


3436:FreeRTOS/src/tasks.c **** 			else
3437:FreeRTOS/src/tasks.c **** 			{
3438:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:FreeRTOS/src/tasks.c **** 			}
3440:FreeRTOS/src/tasks.c **** 		}
3441:FreeRTOS/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:FreeRTOS/src/tasks.c **** 
3443:FreeRTOS/src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:FreeRTOS/src/tasks.c **** 		{
3445:FreeRTOS/src/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:FreeRTOS/src/tasks.c **** 
3447:FreeRTOS/src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:FreeRTOS/src/tasks.c **** 			allows the application designer to add background functionality
3449:FreeRTOS/src/tasks.c **** 			without the overhead of a separate task.
3450:FreeRTOS/src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:FreeRTOS/src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:FreeRTOS/src/tasks.c **** 			vApplicationIdleHook();
3453:FreeRTOS/src/tasks.c **** 		}
3454:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:FreeRTOS/src/tasks.c **** 
3456:FreeRTOS/src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:FreeRTOS/src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:FreeRTOS/src/tasks.c **** 		user defined low power mode	implementations require
3459:FreeRTOS/src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:FreeRTOS/src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:FreeRTOS/src/tasks.c **** 		{
3462:FreeRTOS/src/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:FreeRTOS/src/tasks.c **** 
3464:FreeRTOS/src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:FreeRTOS/src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:FreeRTOS/src/tasks.c **** 			test of the expected idle time is performed without the
3467:FreeRTOS/src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:FreeRTOS/src/tasks.c **** 			valid. */
3469:FreeRTOS/src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:FreeRTOS/src/tasks.c **** 
3471:FreeRTOS/src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:FreeRTOS/src/tasks.c **** 			{
3473:FreeRTOS/src/tasks.c **** 				vTaskSuspendAll();
3474:FreeRTOS/src/tasks.c **** 				{
3475:FreeRTOS/src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:FreeRTOS/src/tasks.c **** 					time can be sampled again, and this time its value can
3477:FreeRTOS/src/tasks.c **** 					be used. */
3478:FreeRTOS/src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:FreeRTOS/src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:FreeRTOS/src/tasks.c **** 
3481:FreeRTOS/src/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:FreeRTOS/src/tasks.c **** 					if the application does not want
3483:FreeRTOS/src/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:FreeRTOS/src/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:FreeRTOS/src/tasks.c **** 
3486:FreeRTOS/src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:FreeRTOS/src/tasks.c **** 					{
3488:FreeRTOS/src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:FreeRTOS/src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:FreeRTOS/src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:FreeRTOS/src/tasks.c **** 					}
3492:FreeRTOS/src/tasks.c **** 					else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 64


3493:FreeRTOS/src/tasks.c **** 					{
3494:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:FreeRTOS/src/tasks.c **** 					}
3496:FreeRTOS/src/tasks.c **** 				}
3497:FreeRTOS/src/tasks.c **** 				( void ) xTaskResumeAll();
3498:FreeRTOS/src/tasks.c **** 			}
3499:FreeRTOS/src/tasks.c **** 			else
3500:FreeRTOS/src/tasks.c **** 			{
3501:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:FreeRTOS/src/tasks.c **** 			}
3503:FreeRTOS/src/tasks.c **** 		}
3504:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:FreeRTOS/src/tasks.c **** 	}
3506:FreeRTOS/src/tasks.c **** }
3507:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3508:FreeRTOS/src/tasks.c **** 
3509:FreeRTOS/src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:FreeRTOS/src/tasks.c **** 
3511:FreeRTOS/src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:FreeRTOS/src/tasks.c **** 	{
3513:FreeRTOS/src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:FreeRTOS/src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:FreeRTOS/src/tasks.c **** 
3517:FreeRTOS/src/tasks.c **** 		/* This function must be called from a critical section. */
3518:FreeRTOS/src/tasks.c **** 
3519:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:FreeRTOS/src/tasks.c **** 		{
3521:FreeRTOS/src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:FreeRTOS/src/tasks.c **** 			eReturn = eAbortSleep;
3523:FreeRTOS/src/tasks.c **** 		}
3524:FreeRTOS/src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:FreeRTOS/src/tasks.c **** 		{
3526:FreeRTOS/src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:FreeRTOS/src/tasks.c **** 			eReturn = eAbortSleep;
3528:FreeRTOS/src/tasks.c **** 		}
3529:FreeRTOS/src/tasks.c **** 		else
3530:FreeRTOS/src/tasks.c **** 		{
3531:FreeRTOS/src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:FreeRTOS/src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:FreeRTOS/src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:FreeRTOS/src/tasks.c **** 			interrupts. */
3535:FreeRTOS/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:FreeRTOS/src/tasks.c **** 			{
3537:FreeRTOS/src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:FreeRTOS/src/tasks.c **** 			}
3539:FreeRTOS/src/tasks.c **** 			else
3540:FreeRTOS/src/tasks.c **** 			{
3541:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:FreeRTOS/src/tasks.c **** 			}
3543:FreeRTOS/src/tasks.c **** 		}
3544:FreeRTOS/src/tasks.c **** 
3545:FreeRTOS/src/tasks.c **** 		return eReturn;
3546:FreeRTOS/src/tasks.c **** 	}
3547:FreeRTOS/src/tasks.c **** 
3548:FreeRTOS/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 65


3550:FreeRTOS/src/tasks.c **** 
3551:FreeRTOS/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:FreeRTOS/src/tasks.c **** 
3553:FreeRTOS/src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:FreeRTOS/src/tasks.c **** 	{
3555:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3556:FreeRTOS/src/tasks.c **** 
3557:FreeRTOS/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:FreeRTOS/src/tasks.c **** 		{
3559:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:FreeRTOS/src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:FreeRTOS/src/tasks.c **** 		}
3563:FreeRTOS/src/tasks.c **** 	}
3564:FreeRTOS/src/tasks.c **** 
3565:FreeRTOS/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3567:FreeRTOS/src/tasks.c **** 
3568:FreeRTOS/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:FreeRTOS/src/tasks.c **** 
3570:FreeRTOS/src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:FreeRTOS/src/tasks.c **** 	{
3572:FreeRTOS/src/tasks.c **** 	void *pvReturn = NULL;
3573:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3574:FreeRTOS/src/tasks.c **** 
3575:FreeRTOS/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:FreeRTOS/src/tasks.c **** 		{
3577:FreeRTOS/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:FreeRTOS/src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:FreeRTOS/src/tasks.c **** 		}
3580:FreeRTOS/src/tasks.c **** 		else
3581:FreeRTOS/src/tasks.c **** 		{
3582:FreeRTOS/src/tasks.c **** 			pvReturn = NULL;
3583:FreeRTOS/src/tasks.c **** 		}
3584:FreeRTOS/src/tasks.c **** 
3585:FreeRTOS/src/tasks.c **** 		return pvReturn;
3586:FreeRTOS/src/tasks.c **** 	}
3587:FreeRTOS/src/tasks.c **** 
3588:FreeRTOS/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3590:FreeRTOS/src/tasks.c **** 
3591:FreeRTOS/src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:FreeRTOS/src/tasks.c **** 
3593:FreeRTOS/src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:FreeRTOS/src/tasks.c **** 	{
3595:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3596:FreeRTOS/src/tasks.c **** 
3597:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:FreeRTOS/src/tasks.c **** 		the calling task. */
3599:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:FreeRTOS/src/tasks.c **** 
3601:FreeRTOS/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:FreeRTOS/src/tasks.c **** 	}
3603:FreeRTOS/src/tasks.c **** 
3604:FreeRTOS/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3606:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 66


3607:FreeRTOS/src/tasks.c **** static void prvInitialiseTaskLists( void )
3608:FreeRTOS/src/tasks.c **** {
3609:FreeRTOS/src/tasks.c **** UBaseType_t uxPriority;
3610:FreeRTOS/src/tasks.c **** 
3611:FreeRTOS/src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:FreeRTOS/src/tasks.c **** 	{
3613:FreeRTOS/src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:FreeRTOS/src/tasks.c **** 	}
3615:FreeRTOS/src/tasks.c **** 
3616:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:FreeRTOS/src/tasks.c **** 
3620:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:FreeRTOS/src/tasks.c **** 	{
3622:FreeRTOS/src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:FreeRTOS/src/tasks.c **** 	}
3624:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:FreeRTOS/src/tasks.c **** 
3626:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:FreeRTOS/src/tasks.c **** 	{
3628:FreeRTOS/src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:FreeRTOS/src/tasks.c **** 	}
3630:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:FreeRTOS/src/tasks.c **** 
3632:FreeRTOS/src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:FreeRTOS/src/tasks.c **** 	using list2. */
3634:FreeRTOS/src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:FreeRTOS/src/tasks.c **** }
3637:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3638:FreeRTOS/src/tasks.c **** 
3639:FreeRTOS/src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:FreeRTOS/src/tasks.c **** {
3641:FreeRTOS/src/tasks.c **** 
3642:FreeRTOS/src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:FreeRTOS/src/tasks.c **** 
3644:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:FreeRTOS/src/tasks.c **** 	{
3646:FreeRTOS/src/tasks.c **** 		TCB_t *pxTCB;
3647:FreeRTOS/src/tasks.c **** 
3648:FreeRTOS/src/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:FreeRTOS/src/tasks.c **** 		being called too often in the idle task. */
3650:FreeRTOS/src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:FreeRTOS/src/tasks.c **** 		{
3652:FreeRTOS/src/tasks.c **** 			taskENTER_CRITICAL();
3653:FreeRTOS/src/tasks.c **** 			{
3654:FreeRTOS/src/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:FreeRTOS/src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:FreeRTOS/src/tasks.c **** 			}
3659:FreeRTOS/src/tasks.c **** 			taskEXIT_CRITICAL();
3660:FreeRTOS/src/tasks.c **** 
3661:FreeRTOS/src/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:FreeRTOS/src/tasks.c **** 		}
3663:FreeRTOS/src/tasks.c **** 	}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 67


3664:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:FreeRTOS/src/tasks.c **** }
3666:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3667:FreeRTOS/src/tasks.c **** 
3668:FreeRTOS/src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:FreeRTOS/src/tasks.c **** 
3670:FreeRTOS/src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:FreeRTOS/src/tasks.c **** 	{
3672:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3673:FreeRTOS/src/tasks.c **** 
3674:FreeRTOS/src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:FreeRTOS/src/tasks.c **** 
3677:FreeRTOS/src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:FreeRTOS/src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:FreeRTOS/src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:FreeRTOS/src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:FreeRTOS/src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:FreeRTOS/src/tasks.c **** 
3683:FreeRTOS/src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:FreeRTOS/src/tasks.c **** 		{
3685:FreeRTOS/src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:FreeRTOS/src/tasks.c **** 		}
3687:FreeRTOS/src/tasks.c **** 		#else
3688:FreeRTOS/src/tasks.c **** 		{
3689:FreeRTOS/src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:FreeRTOS/src/tasks.c **** 		}
3691:FreeRTOS/src/tasks.c **** 		#endif
3692:FreeRTOS/src/tasks.c **** 
3693:FreeRTOS/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:FreeRTOS/src/tasks.c **** 		{
3695:FreeRTOS/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:FreeRTOS/src/tasks.c **** 		}
3697:FreeRTOS/src/tasks.c **** 		#else
3698:FreeRTOS/src/tasks.c **** 		{
3699:FreeRTOS/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:FreeRTOS/src/tasks.c **** 		}
3701:FreeRTOS/src/tasks.c **** 		#endif
3702:FreeRTOS/src/tasks.c **** 
3703:FreeRTOS/src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:FreeRTOS/src/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:FreeRTOS/src/tasks.c **** 		state is just set to whatever is passed in. */
3706:FreeRTOS/src/tasks.c **** 		if( eState != eInvalid )
3707:FreeRTOS/src/tasks.c **** 		{
3708:FreeRTOS/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:FreeRTOS/src/tasks.c **** 			{
3710:FreeRTOS/src/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:FreeRTOS/src/tasks.c **** 			}
3712:FreeRTOS/src/tasks.c **** 			else
3713:FreeRTOS/src/tasks.c **** 			{
3714:FreeRTOS/src/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:FreeRTOS/src/tasks.c **** 
3716:FreeRTOS/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:FreeRTOS/src/tasks.c **** 				{
3718:FreeRTOS/src/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:FreeRTOS/src/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:FreeRTOS/src/tasks.c **** 					it should be reported as being in the Blocked state. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 68


3721:FreeRTOS/src/tasks.c **** 					if( eState == eSuspended )
3722:FreeRTOS/src/tasks.c **** 					{
3723:FreeRTOS/src/tasks.c **** 						vTaskSuspendAll();
3724:FreeRTOS/src/tasks.c **** 						{
3725:FreeRTOS/src/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:FreeRTOS/src/tasks.c **** 							{
3727:FreeRTOS/src/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:FreeRTOS/src/tasks.c **** 							}
3729:FreeRTOS/src/tasks.c **** 						}
3730:FreeRTOS/src/tasks.c **** 						( void ) xTaskResumeAll();
3731:FreeRTOS/src/tasks.c **** 					}
3732:FreeRTOS/src/tasks.c **** 				}
3733:FreeRTOS/src/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:FreeRTOS/src/tasks.c **** 			}
3735:FreeRTOS/src/tasks.c **** 		}
3736:FreeRTOS/src/tasks.c **** 		else
3737:FreeRTOS/src/tasks.c **** 		{
3738:FreeRTOS/src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:FreeRTOS/src/tasks.c **** 		}
3740:FreeRTOS/src/tasks.c **** 
3741:FreeRTOS/src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:FreeRTOS/src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:FreeRTOS/src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:FreeRTOS/src/tasks.c **** 		{
3745:FreeRTOS/src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:FreeRTOS/src/tasks.c **** 			{
3747:FreeRTOS/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:FreeRTOS/src/tasks.c **** 			}
3749:FreeRTOS/src/tasks.c **** 			#else
3750:FreeRTOS/src/tasks.c **** 			{
3751:FreeRTOS/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:FreeRTOS/src/tasks.c **** 			}
3753:FreeRTOS/src/tasks.c **** 			#endif
3754:FreeRTOS/src/tasks.c **** 		}
3755:FreeRTOS/src/tasks.c **** 		else
3756:FreeRTOS/src/tasks.c **** 		{
3757:FreeRTOS/src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:FreeRTOS/src/tasks.c **** 		}
3759:FreeRTOS/src/tasks.c **** 	}
3760:FreeRTOS/src/tasks.c **** 
3761:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3763:FreeRTOS/src/tasks.c **** 
3764:FreeRTOS/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:FreeRTOS/src/tasks.c **** 
3766:FreeRTOS/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:FreeRTOS/src/tasks.c **** 	{
3768:FreeRTOS/src/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTask = 0;
3770:FreeRTOS/src/tasks.c **** 
3771:FreeRTOS/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:FreeRTOS/src/tasks.c **** 		{
3773:FreeRTOS/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:FreeRTOS/src/tasks.c **** 
3775:FreeRTOS/src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:FreeRTOS/src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:FreeRTOS/src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 69


3778:FreeRTOS/src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:FreeRTOS/src/tasks.c **** 			do
3780:FreeRTOS/src/tasks.c **** 			{
3781:FreeRTOS/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:FreeRTOS/src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:FreeRTOS/src/tasks.c **** 				uxTask++;
3784:FreeRTOS/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:FreeRTOS/src/tasks.c **** 		}
3786:FreeRTOS/src/tasks.c **** 		else
3787:FreeRTOS/src/tasks.c **** 		{
3788:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:FreeRTOS/src/tasks.c **** 		}
3790:FreeRTOS/src/tasks.c **** 
3791:FreeRTOS/src/tasks.c **** 		return uxTask;
3792:FreeRTOS/src/tasks.c **** 	}
3793:FreeRTOS/src/tasks.c **** 
3794:FreeRTOS/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3796:FreeRTOS/src/tasks.c **** 
3797:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:FreeRTOS/src/tasks.c **** 
3799:FreeRTOS/src/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:FreeRTOS/src/tasks.c **** 	{
3801:FreeRTOS/src/tasks.c **** 	uint32_t ulCount = 0U;
3802:FreeRTOS/src/tasks.c **** 
3803:FreeRTOS/src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:FreeRTOS/src/tasks.c **** 		{
3805:FreeRTOS/src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:FreeRTOS/src/tasks.c **** 			ulCount++;
3807:FreeRTOS/src/tasks.c **** 		}
3808:FreeRTOS/src/tasks.c **** 
3809:FreeRTOS/src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:FreeRTOS/src/tasks.c **** 
3811:FreeRTOS/src/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:FreeRTOS/src/tasks.c **** 	}
3813:FreeRTOS/src/tasks.c **** 
3814:FreeRTOS/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3816:FreeRTOS/src/tasks.c **** 
3817:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:FreeRTOS/src/tasks.c **** 
3819:FreeRTOS/src/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:FreeRTOS/src/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:FreeRTOS/src/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:FreeRTOS/src/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:FreeRTOS/src/tasks.c **** 	applications that expect an 8-bit return type. */
3824:FreeRTOS/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:FreeRTOS/src/tasks.c **** 	{
3826:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3827:FreeRTOS/src/tasks.c **** 	uint8_t *pucEndOfStack;
3828:FreeRTOS/src/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:FreeRTOS/src/tasks.c **** 
3830:FreeRTOS/src/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:FreeRTOS/src/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:FreeRTOS/src/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:FreeRTOS/src/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:FreeRTOS/src/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 70


3835:FreeRTOS/src/tasks.c **** 		type. */
3836:FreeRTOS/src/tasks.c **** 
3837:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:FreeRTOS/src/tasks.c **** 
3839:FreeRTOS/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:FreeRTOS/src/tasks.c **** 		{
3841:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:FreeRTOS/src/tasks.c **** 		}
3843:FreeRTOS/src/tasks.c **** 		#else
3844:FreeRTOS/src/tasks.c **** 		{
3845:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:FreeRTOS/src/tasks.c **** 		}
3847:FreeRTOS/src/tasks.c **** 		#endif
3848:FreeRTOS/src/tasks.c **** 
3849:FreeRTOS/src/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:FreeRTOS/src/tasks.c **** 
3851:FreeRTOS/src/tasks.c **** 		return uxReturn;
3852:FreeRTOS/src/tasks.c **** 	}
3853:FreeRTOS/src/tasks.c **** 
3854:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3856:FreeRTOS/src/tasks.c **** 
3857:FreeRTOS/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:FreeRTOS/src/tasks.c **** 
3859:FreeRTOS/src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:FreeRTOS/src/tasks.c **** 	{
3861:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
3862:FreeRTOS/src/tasks.c **** 	uint8_t *pucEndOfStack;
3863:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
3864:FreeRTOS/src/tasks.c **** 
3865:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:FreeRTOS/src/tasks.c **** 
3867:FreeRTOS/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:FreeRTOS/src/tasks.c **** 		{
3869:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:FreeRTOS/src/tasks.c **** 		}
3871:FreeRTOS/src/tasks.c **** 		#else
3872:FreeRTOS/src/tasks.c **** 		{
3873:FreeRTOS/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:FreeRTOS/src/tasks.c **** 		}
3875:FreeRTOS/src/tasks.c **** 		#endif
3876:FreeRTOS/src/tasks.c **** 
3877:FreeRTOS/src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:FreeRTOS/src/tasks.c **** 
3879:FreeRTOS/src/tasks.c **** 		return uxReturn;
3880:FreeRTOS/src/tasks.c **** 	}
3881:FreeRTOS/src/tasks.c **** 
3882:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3884:FreeRTOS/src/tasks.c **** 
3885:FreeRTOS/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:FreeRTOS/src/tasks.c **** 
3887:FreeRTOS/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:FreeRTOS/src/tasks.c **** 	{
3889:FreeRTOS/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:FreeRTOS/src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:FreeRTOS/src/tasks.c **** 		want to allocate and clean RAM statically. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 71


3892:FreeRTOS/src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:FreeRTOS/src/tasks.c **** 
3894:FreeRTOS/src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:FreeRTOS/src/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:FreeRTOS/src/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:FreeRTOS/src/tasks.c **** 		for additional information. */
3898:FreeRTOS/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:FreeRTOS/src/tasks.c **** 		{
3900:FreeRTOS/src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:FreeRTOS/src/tasks.c **** 		}
3902:FreeRTOS/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:FreeRTOS/src/tasks.c **** 
3904:FreeRTOS/src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:FreeRTOS/src/tasks.c **** 		{
3906:FreeRTOS/src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:FreeRTOS/src/tasks.c **** 			the stack and TCB. */
3908:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB );
3910:FreeRTOS/src/tasks.c **** 		}
3911:FreeRTOS/src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:FreeRTOS/src/tasks.c **** 		{
3913:FreeRTOS/src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:FreeRTOS/src/tasks.c **** 			check what was statically allocated before trying to free the
3915:FreeRTOS/src/tasks.c **** 			memory. */
3916:FreeRTOS/src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:FreeRTOS/src/tasks.c **** 			{
3918:FreeRTOS/src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:FreeRTOS/src/tasks.c **** 				must be freed. */
3920:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB );
3922:FreeRTOS/src/tasks.c **** 			}
3923:FreeRTOS/src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:FreeRTOS/src/tasks.c **** 			{
3925:FreeRTOS/src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:FreeRTOS/src/tasks.c **** 				only memory that must be freed. */
3927:FreeRTOS/src/tasks.c **** 				vPortFree( pxTCB );
3928:FreeRTOS/src/tasks.c **** 			}
3929:FreeRTOS/src/tasks.c **** 			else
3930:FreeRTOS/src/tasks.c **** 			{
3931:FreeRTOS/src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:FreeRTOS/src/tasks.c **** 				nothing needs to be freed. */
3933:FreeRTOS/src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:FreeRTOS/src/tasks.c **** 			}
3936:FreeRTOS/src/tasks.c **** 		}
3937:FreeRTOS/src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:FreeRTOS/src/tasks.c **** 	}
3939:FreeRTOS/src/tasks.c **** 
3940:FreeRTOS/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3942:FreeRTOS/src/tasks.c **** 
3943:FreeRTOS/src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:FreeRTOS/src/tasks.c **** {
  97              		.loc 1 3944 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 72


 101              		@ link register save eliminated.
3945:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
 102              		.loc 1 3945 1 view .LVU23
3946:FreeRTOS/src/tasks.c **** 
3947:FreeRTOS/src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 103              		.loc 1 3947 2 view .LVU24
 104              		.loc 1 3947 6 is_stmt 0 view .LVU25
 105 0000 084B     		ldr	r3, .L12
 106 0002 1B68     		ldr	r3, [r3]
 107 0004 1B68     		ldr	r3, [r3]
 108              		.loc 1 3947 4 view .LVU26
 109 0006 23B9     		cbnz	r3, .L10
3948:FreeRTOS/src/tasks.c **** 	{
3949:FreeRTOS/src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:FreeRTOS/src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:FreeRTOS/src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:FreeRTOS/src/tasks.c **** 		there is an item in the delayed list. */
3953:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 110              		.loc 1 3953 3 is_stmt 1 view .LVU27
 111              		.loc 1 3953 24 is_stmt 0 view .LVU28
 112 0008 074B     		ldr	r3, .L12+4
 113 000a 4FF0FF32 		mov	r2, #-1
 114 000e 1A60     		str	r2, [r3]
 115 0010 7047     		bx	lr
 116              	.L10:
3954:FreeRTOS/src/tasks.c **** 	}
3955:FreeRTOS/src/tasks.c **** 	else
3956:FreeRTOS/src/tasks.c **** 	{
3957:FreeRTOS/src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:FreeRTOS/src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:FreeRTOS/src/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:FreeRTOS/src/tasks.c **** 		from the Blocked state. */
3961:FreeRTOS/src/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 117              		.loc 1 3961 3 is_stmt 1 view .LVU29
 118              		.loc 1 3961 15 is_stmt 0 view .LVU30
 119 0012 044B     		ldr	r3, .L12
 120 0014 1B68     		ldr	r3, [r3]
 121 0016 DB68     		ldr	r3, [r3, #12]
 122              		.loc 1 3961 13 view .LVU31
 123 0018 DB68     		ldr	r3, [r3, #12]
 124              	.LVL8:
3962:FreeRTOS/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 125              		.loc 1 3962 3 is_stmt 1 view .LVU32
 126              		.loc 1 3962 26 is_stmt 0 view .LVU33
 127 001a 5A68     		ldr	r2, [r3, #4]
 128              		.loc 1 3962 24 view .LVU34
 129 001c 024B     		ldr	r3, .L12+4
 130              	.LVL9:
 131              		.loc 1 3962 24 view .LVU35
 132 001e 1A60     		str	r2, [r3]
3963:FreeRTOS/src/tasks.c **** 	}
3964:FreeRTOS/src/tasks.c **** }
 133              		.loc 1 3964 1 view .LVU36
 134 0020 7047     		bx	lr
 135              	.L13:
 136 0022 00BF     		.align	2
 137              	.L12:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 73


 138 0024 00000000 		.word	.LANCHOR2
 139 0028 00000000 		.word	.LANCHOR3
 140              		.cfi_endproc
 141              	.LFE106:
 143              		.section	.text.prvDeleteTCB,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	prvDeleteTCB:
 151              	.LVL10:
 152              	.LFB105:
3888:FreeRTOS/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 153              		.loc 1 3888 2 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
3888:FreeRTOS/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 157              		.loc 1 3888 2 is_stmt 0 view .LVU38
 158 0000 10B5     		push	{r4, lr}
 159              	.LCFI0:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 4, -8
 162              		.cfi_offset 14, -4
 163 0002 0446     		mov	r4, r0
3892:FreeRTOS/src/tasks.c **** 
 164              		.loc 1 3892 3 is_stmt 1 view .LVU39
3908:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB );
 165              		.loc 1 3908 4 view .LVU40
 166 0004 006B     		ldr	r0, [r0, #48]
 167              	.LVL11:
3908:FreeRTOS/src/tasks.c **** 			vPortFree( pxTCB );
 168              		.loc 1 3908 4 is_stmt 0 view .LVU41
 169 0006 FFF7FEFF 		bl	vPortFree
 170              	.LVL12:
3909:FreeRTOS/src/tasks.c **** 		}
 171              		.loc 1 3909 4 is_stmt 1 view .LVU42
 172 000a 2046     		mov	r0, r4
 173 000c FFF7FEFF 		bl	vPortFree
 174              	.LVL13:
3938:FreeRTOS/src/tasks.c **** 
 175              		.loc 1 3938 2 is_stmt 0 view .LVU43
 176 0010 10BD     		pop	{r4, pc}
3938:FreeRTOS/src/tasks.c **** 
 177              		.loc 1 3938 2 view .LVU44
 178              		.cfi_endproc
 179              	.LFE105:
 181              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 182              		.align	1
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	prvInitialiseNewTask:
 189              	.LVL14:
 190              	.LFB71:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 74


 832:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 191              		.loc 1 832 1 is_stmt 1 view -0
 192              		.cfi_startproc
 193              		@ args = 16, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 832:FreeRTOS/src/tasks.c **** StackType_t *pxTopOfStack;
 195              		.loc 1 832 1 is_stmt 0 view .LVU46
 196 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 197              	.LCFI1:
 198              		.cfi_def_cfa_offset 32
 199              		.cfi_offset 4, -32
 200              		.cfi_offset 5, -28
 201              		.cfi_offset 6, -24
 202              		.cfi_offset 7, -20
 203              		.cfi_offset 8, -16
 204              		.cfi_offset 9, -12
 205              		.cfi_offset 10, -8
 206              		.cfi_offset 14, -4
 207 0004 8046     		mov	r8, r0
 208 0006 9946     		mov	r9, r3
 209 0008 089D     		ldr	r5, [sp, #32]
 210 000a 099F     		ldr	r7, [sp, #36]
 211 000c 0A9C     		ldr	r4, [sp, #40]
 833:FreeRTOS/src/tasks.c **** UBaseType_t x;
 212              		.loc 1 833 1 is_stmt 1 view .LVU47
 834:FreeRTOS/src/tasks.c **** 
 213              		.loc 1 834 1 view .LVU48
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 214              		.loc 1 864 3 view .LVU49
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 215              		.loc 1 864 29 is_stmt 0 view .LVU50
 216 000e 266B     		ldr	r6, [r4, #48]
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 217              		.loc 1 864 18 view .LVU51
 218 0010 02F18042 		add	r2, r2, #1073741824
 219              	.LVL15:
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 220              		.loc 1 864 18 view .LVU52
 221 0014 013A     		subs	r2, r2, #1
 222              	.LVL16:
 864:FreeRTOS/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 223              		.loc 1 864 16 view .LVU53
 224 0016 06EB8206 		add	r6, r6, r2, lsl #2
 225              	.LVL17:
 865:FreeRTOS/src/tasks.c **** 
 226              		.loc 1 865 3 is_stmt 1 view .LVU54
 865:FreeRTOS/src/tasks.c **** 
 227              		.loc 1 865 81 is_stmt 0 view .LVU55
 228 001a 26F00706 		bic	r6, r6, #7
 229              	.LVL18:
 868:FreeRTOS/src/tasks.c **** 
 230              		.loc 1 868 124 is_stmt 1 view .LVU56
 892:FreeRTOS/src/tasks.c **** 	{
 231              		.loc 1 892 2 view .LVU57
 892:FreeRTOS/src/tasks.c **** 	{
 232              		.loc 1 892 4 is_stmt 0 view .LVU58
 233 001e 81B3     		cbz	r1, .L28
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 75


 234 0020 0846     		mov	r0, r1
 235              	.LVL19:
 894:FreeRTOS/src/tasks.c **** 		{
 236              		.loc 1 894 10 view .LVU59
 237 0022 0023     		movs	r3, #0
 238              	.LVL20:
 239              	.L17:
 894:FreeRTOS/src/tasks.c **** 		{
 240              		.loc 1 894 3 discriminator 1 view .LVU60
 241 0024 0F2B     		cmp	r3, #15
 242 0026 06D8     		bhi	.L19
 896:FreeRTOS/src/tasks.c **** 
 243              		.loc 1 896 4 is_stmt 1 view .LVU61
 896:FreeRTOS/src/tasks.c **** 
 244              		.loc 1 896 38 is_stmt 0 view .LVU62
 245 0028 C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 896:FreeRTOS/src/tasks.c **** 
 246              		.loc 1 896 30 view .LVU63
 247 002a E118     		adds	r1, r4, r3
 248 002c 81F83420 		strb	r2, [r1, #52]
 901:FreeRTOS/src/tasks.c **** 			{
 249              		.loc 1 901 4 is_stmt 1 view .LVU64
 901:FreeRTOS/src/tasks.c **** 			{
 250              		.loc 1 901 6 is_stmt 0 view .LVU65
 251 0030 0AB1     		cbz	r2, .L19
 907:FreeRTOS/src/tasks.c **** 			}
 252              		.loc 1 907 29 is_stmt 1 discriminator 2 view .LVU66
 894:FreeRTOS/src/tasks.c **** 		{
 253              		.loc 1 894 77 is_stmt 0 discriminator 2 view .LVU67
 254 0032 0133     		adds	r3, r3, #1
 255              	.LVL21:
 894:FreeRTOS/src/tasks.c **** 		{
 256              		.loc 1 894 77 discriminator 2 view .LVU68
 257 0034 F6E7     		b	.L17
 258              	.L19:
 913:FreeRTOS/src/tasks.c **** 	}
 259              		.loc 1 913 3 is_stmt 1 view .LVU69
 913:FreeRTOS/src/tasks.c **** 	}
 260              		.loc 1 913 55 is_stmt 0 view .LVU70
 261 0036 0023     		movs	r3, #0
 262              	.LVL22:
 913:FreeRTOS/src/tasks.c **** 	}
 263              		.loc 1 913 55 view .LVU71
 264 0038 84F84330 		strb	r3, [r4, #67]
 265              	.LVL23:
 266              	.L21:
 924:FreeRTOS/src/tasks.c **** 	{
 267              		.loc 1 924 2 is_stmt 1 view .LVU72
 924:FreeRTOS/src/tasks.c **** 	{
 268              		.loc 1 924 4 is_stmt 0 view .LVU73
 269 003c 042D     		cmp	r5, #4
 270 003e 00D9     		bls	.L22
 926:FreeRTOS/src/tasks.c **** 	}
 271              		.loc 1 926 14 view .LVU74
 272 0040 0425     		movs	r5, #4
 273              	.L22:
 274              	.LVL24:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 76


 930:FreeRTOS/src/tasks.c **** 	}
 275              		.loc 1 930 27 is_stmt 1 view .LVU75
 933:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 276              		.loc 1 933 2 view .LVU76
 933:FreeRTOS/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 277              		.loc 1 933 23 is_stmt 0 view .LVU77
 278 0042 E562     		str	r5, [r4, #44]
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 279              		.loc 1 936 3 is_stmt 1 view .LVU78
 936:FreeRTOS/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 280              		.loc 1 936 28 is_stmt 0 view .LVU79
 281 0044 6564     		str	r5, [r4, #68]
 937:FreeRTOS/src/tasks.c **** 	}
 282              		.loc 1 937 3 is_stmt 1 view .LVU80
 937:FreeRTOS/src/tasks.c **** 	}
 283              		.loc 1 937 27 is_stmt 0 view .LVU81
 284 0046 4FF0000A 		mov	r10, #0
 285 004a C4F848A0 		str	r10, [r4, #72]
 941:FreeRTOS/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 286              		.loc 1 941 2 is_stmt 1 view .LVU82
 287 004e 201D     		adds	r0, r4, #4
 288 0050 FFF7FEFF 		bl	vListInitialiseItem
 289              	.LVL25:
 942:FreeRTOS/src/tasks.c **** 
 290              		.loc 1 942 2 view .LVU83
 291 0054 04F11800 		add	r0, r4, #24
 292 0058 FFF7FEFF 		bl	vListInitialiseItem
 293              	.LVL26:
 946:FreeRTOS/src/tasks.c **** 
 294              		.loc 1 946 2 view .LVU84
 295 005c 2461     		str	r4, [r4, #16]
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 296              		.loc 1 949 2 view .LVU85
 297 005e C5F10505 		rsb	r5, r5, #5
 298              	.LVL27:
 949:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 299              		.loc 1 949 2 is_stmt 0 view .LVU86
 300 0062 A561     		str	r5, [r4, #24]
 950:FreeRTOS/src/tasks.c **** 
 301              		.loc 1 950 2 is_stmt 1 view .LVU87
 302 0064 6462     		str	r4, [r4, #36]
 977:FreeRTOS/src/tasks.c **** 	}
 303              		.loc 1 977 3 view .LVU88
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 304              		.loc 1 992 3 view .LVU89
 992:FreeRTOS/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 305              		.loc 1 992 29 is_stmt 0 view .LVU90
 306 0066 C4F84CA0 		str	r10, [r4, #76]
 993:FreeRTOS/src/tasks.c **** 	}
 307              		.loc 1 993 3 is_stmt 1 view .LVU91
 993:FreeRTOS/src/tasks.c **** 	}
 308              		.loc 1 993 27 is_stmt 0 view .LVU92
 309 006a 84F850A0 		strb	r10, [r4, #80]
1058:FreeRTOS/src/tasks.c **** 		}
 310              		.loc 1 1058 4 is_stmt 1 view .LVU93
1058:FreeRTOS/src/tasks.c **** 		}
 311              		.loc 1 1058 29 is_stmt 0 view .LVU94
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 77


 312 006e 4A46     		mov	r2, r9
 313 0070 4146     		mov	r1, r8
 314 0072 3046     		mov	r0, r6
 315 0074 FFF7FEFF 		bl	pxPortInitialiseStack
 316              	.LVL28:
1058:FreeRTOS/src/tasks.c **** 		}
 317              		.loc 1 1058 27 view .LVU95
 318 0078 2060     		str	r0, [r4]
1064:FreeRTOS/src/tasks.c **** 	{
 319              		.loc 1 1064 2 is_stmt 1 view .LVU96
1064:FreeRTOS/src/tasks.c **** 	{
 320              		.loc 1 1064 4 is_stmt 0 view .LVU97
 321 007a 07B1     		cbz	r7, .L16
1068:FreeRTOS/src/tasks.c **** 	}
 322              		.loc 1 1068 3 is_stmt 1 view .LVU98
1068:FreeRTOS/src/tasks.c **** 	}
 323              		.loc 1 1068 18 is_stmt 0 view .LVU99
 324 007c 3C60     		str	r4, [r7]
1072:FreeRTOS/src/tasks.c **** 	}
 325              		.loc 1 1072 27 is_stmt 1 view .LVU100
 326              	.L16:
1074:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 327              		.loc 1 1074 1 is_stmt 0 view .LVU101
 328 007e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 329              	.LVL29:
 330              	.L28:
 919:FreeRTOS/src/tasks.c **** 	}
 331              		.loc 1 919 3 is_stmt 1 view .LVU102
 919:FreeRTOS/src/tasks.c **** 	}
 332              		.loc 1 919 29 is_stmt 0 view .LVU103
 333 0082 0023     		movs	r3, #0
 334              	.LVL30:
 919:FreeRTOS/src/tasks.c **** 	}
 335              		.loc 1 919 29 view .LVU104
 336 0084 84F83430 		strb	r3, [r4, #52]
 337 0088 D8E7     		b	.L21
 338              		.cfi_endproc
 339              	.LFE71:
 341              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 342              		.align	1
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu softvfp
 348              	prvInitialiseTaskLists:
 349              	.LFB103:
3608:FreeRTOS/src/tasks.c **** UBaseType_t uxPriority;
 350              		.loc 1 3608 1 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 38B5     		push	{r3, r4, r5, lr}
 355              	.LCFI2:
 356              		.cfi_def_cfa_offset 16
 357              		.cfi_offset 3, -16
 358              		.cfi_offset 4, -12
 359              		.cfi_offset 5, -8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 78


 360              		.cfi_offset 14, -4
3609:FreeRTOS/src/tasks.c **** 
 361              		.loc 1 3609 1 view .LVU106
3611:FreeRTOS/src/tasks.c **** 	{
 362              		.loc 1 3611 2 view .LVU107
 363              	.LVL31:
3611:FreeRTOS/src/tasks.c **** 	{
 364              		.loc 1 3611 18 is_stmt 0 view .LVU108
 365 0002 0024     		movs	r4, #0
 366              	.LVL32:
 367              	.L30:
3611:FreeRTOS/src/tasks.c **** 	{
 368              		.loc 1 3611 2 discriminator 1 view .LVU109
 369 0004 042C     		cmp	r4, #4
 370 0006 08D8     		bhi	.L33
3613:FreeRTOS/src/tasks.c **** 	}
 371              		.loc 1 3613 3 is_stmt 1 discriminator 3 view .LVU110
 372 0008 04EB8402 		add	r2, r4, r4, lsl #2
 373 000c 9300     		lsls	r3, r2, #2
 374 000e 0E48     		ldr	r0, .L34
 375 0010 1844     		add	r0, r0, r3
 376 0012 FFF7FEFF 		bl	vListInitialise
 377              	.LVL33:
3611:FreeRTOS/src/tasks.c **** 	{
 378              		.loc 1 3611 101 is_stmt 0 discriminator 3 view .LVU111
 379 0016 0134     		adds	r4, r4, #1
 380              	.LVL34:
3611:FreeRTOS/src/tasks.c **** 	{
 381              		.loc 1 3611 101 discriminator 3 view .LVU112
 382 0018 F4E7     		b	.L30
 383              	.L33:
3616:FreeRTOS/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 384              		.loc 1 3616 2 is_stmt 1 view .LVU113
 385 001a 0C4D     		ldr	r5, .L34+4
 386 001c 2846     		mov	r0, r5
 387 001e FFF7FEFF 		bl	vListInitialise
 388              	.LVL35:
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 389              		.loc 1 3617 2 view .LVU114
 390 0022 0B4C     		ldr	r4, .L34+8
 391              	.LVL36:
3617:FreeRTOS/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 392              		.loc 1 3617 2 is_stmt 0 view .LVU115
 393 0024 2046     		mov	r0, r4
 394 0026 FFF7FEFF 		bl	vListInitialise
 395              	.LVL37:
3618:FreeRTOS/src/tasks.c **** 
 396              		.loc 1 3618 2 is_stmt 1 view .LVU116
 397 002a 0A48     		ldr	r0, .L34+12
 398 002c FFF7FEFF 		bl	vListInitialise
 399              	.LVL38:
3622:FreeRTOS/src/tasks.c **** 	}
 400              		.loc 1 3622 3 view .LVU117
 401 0030 0948     		ldr	r0, .L34+16
 402 0032 FFF7FEFF 		bl	vListInitialise
 403              	.LVL39:
3628:FreeRTOS/src/tasks.c **** 	}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 79


 404              		.loc 1 3628 3 view .LVU118
 405 0036 0948     		ldr	r0, .L34+20
 406 0038 FFF7FEFF 		bl	vListInitialise
 407              	.LVL40:
3634:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 408              		.loc 1 3634 2 view .LVU119
3634:FreeRTOS/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 409              		.loc 1 3634 20 is_stmt 0 view .LVU120
 410 003c 084B     		ldr	r3, .L34+24
 411 003e 1D60     		str	r5, [r3]
3635:FreeRTOS/src/tasks.c **** }
 412              		.loc 1 3635 2 is_stmt 1 view .LVU121
3635:FreeRTOS/src/tasks.c **** }
 413              		.loc 1 3635 28 is_stmt 0 view .LVU122
 414 0040 084B     		ldr	r3, .L34+28
 415 0042 1C60     		str	r4, [r3]
3636:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 416              		.loc 1 3636 1 view .LVU123
 417 0044 38BD     		pop	{r3, r4, r5, pc}
 418              	.L35:
 419 0046 00BF     		.align	2
 420              	.L34:
 421 0048 00000000 		.word	.LANCHOR4
 422 004c 00000000 		.word	.LANCHOR5
 423 0050 00000000 		.word	.LANCHOR6
 424 0054 00000000 		.word	.LANCHOR1
 425 0058 00000000 		.word	.LANCHOR7
 426 005c 00000000 		.word	.LANCHOR0
 427 0060 00000000 		.word	.LANCHOR2
 428 0064 00000000 		.word	.LANCHOR8
 429              		.cfi_endproc
 430              	.LFE103:
 432              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu softvfp
 439              	prvAddNewTaskToReadyList:
 440              	.LVL41:
 441              	.LFB72:
1078:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 442              		.loc 1 1078 1 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
1078:FreeRTOS/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 446              		.loc 1 1078 1 is_stmt 0 view .LVU125
 447 0000 10B5     		push	{r4, lr}
 448              	.LCFI3:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
 452 0002 0446     		mov	r4, r0
1081:FreeRTOS/src/tasks.c **** 	{
 453              		.loc 1 1081 2 is_stmt 1 view .LVU126
 454 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 80


 455              	.LVL42:
1083:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 456              		.loc 1 1083 3 view .LVU127
1083:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 457              		.loc 1 1083 25 is_stmt 0 view .LVU128
 458 0008 204A     		ldr	r2, .L43
 459 000a 1368     		ldr	r3, [r2]
 460 000c 0133     		adds	r3, r3, #1
 461 000e 1360     		str	r3, [r2]
1084:FreeRTOS/src/tasks.c **** 		{
 462              		.loc 1 1084 3 is_stmt 1 view .LVU129
1084:FreeRTOS/src/tasks.c **** 		{
 463              		.loc 1 1084 20 is_stmt 0 view .LVU130
 464 0010 1F4B     		ldr	r3, .L43+4
 465 0012 1B68     		ldr	r3, [r3]
1084:FreeRTOS/src/tasks.c **** 		{
 466              		.loc 1 1084 5 view .LVU131
 467 0014 5BB1     		cbz	r3, .L41
1107:FreeRTOS/src/tasks.c **** 			{
 468              		.loc 1 1107 4 is_stmt 1 view .LVU132
1107:FreeRTOS/src/tasks.c **** 			{
 469              		.loc 1 1107 26 is_stmt 0 view .LVU133
 470 0016 1F4B     		ldr	r3, .L43+8
 471 0018 1B68     		ldr	r3, [r3]
1107:FreeRTOS/src/tasks.c **** 			{
 472              		.loc 1 1107 6 view .LVU134
 473 001a 6BB9     		cbnz	r3, .L38
1109:FreeRTOS/src/tasks.c **** 				{
 474              		.loc 1 1109 5 is_stmt 1 view .LVU135
1109:FreeRTOS/src/tasks.c **** 				{
 475              		.loc 1 1109 21 is_stmt 0 view .LVU136
 476 001c 1C4B     		ldr	r3, .L43+4
 477 001e 1B68     		ldr	r3, [r3]
 478 0020 DA6A     		ldr	r2, [r3, #44]
1109:FreeRTOS/src/tasks.c **** 				{
 479              		.loc 1 1109 45 view .LVU137
 480 0022 E36A     		ldr	r3, [r4, #44]
1109:FreeRTOS/src/tasks.c **** 				{
 481              		.loc 1 1109 7 view .LVU138
 482 0024 9A42     		cmp	r2, r3
 483 0026 07D8     		bhi	.L38
1111:FreeRTOS/src/tasks.c **** 				}
 484              		.loc 1 1111 6 is_stmt 1 view .LVU139
1111:FreeRTOS/src/tasks.c **** 				}
 485              		.loc 1 1111 19 is_stmt 0 view .LVU140
 486 0028 194B     		ldr	r3, .L43+4
 487 002a 1C60     		str	r4, [r3]
 488 002c 04E0     		b	.L38
 489              	.L41:
1088:FreeRTOS/src/tasks.c **** 
 490              		.loc 1 1088 4 is_stmt 1 view .LVU141
1088:FreeRTOS/src/tasks.c **** 
 491              		.loc 1 1088 17 is_stmt 0 view .LVU142
 492 002e 184B     		ldr	r3, .L43+4
 493 0030 1C60     		str	r4, [r3]
1090:FreeRTOS/src/tasks.c **** 			{
 494              		.loc 1 1090 4 is_stmt 1 view .LVU143
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 81


1090:FreeRTOS/src/tasks.c **** 			{
 495              		.loc 1 1090 31 is_stmt 0 view .LVU144
 496 0032 1368     		ldr	r3, [r2]
1090:FreeRTOS/src/tasks.c **** 			{
 497              		.loc 1 1090 6 view .LVU145
 498 0034 012B     		cmp	r3, #1
 499 0036 26D0     		beq	.L42
 500              	.L38:
1120:FreeRTOS/src/tasks.c **** 			}
 501              		.loc 1 1120 29 is_stmt 1 view .LVU146
1124:FreeRTOS/src/tasks.c **** 
 502              		.loc 1 1124 3 view .LVU147
1124:FreeRTOS/src/tasks.c **** 
 503              		.loc 1 1124 15 is_stmt 0 view .LVU148
 504 0038 174A     		ldr	r2, .L43+12
 505 003a 1368     		ldr	r3, [r2]
 506 003c 0133     		adds	r3, r3, #1
 507 003e 1360     		str	r3, [r2]
1132:FreeRTOS/src/tasks.c **** 
 508              		.loc 1 1132 31 is_stmt 1 view .LVU149
1134:FreeRTOS/src/tasks.c **** 
 509              		.loc 1 1134 3 view .LVU150
1134:FreeRTOS/src/tasks.c **** 
 510              		.loc 1 1134 3 view .LVU151
 511 0040 E36A     		ldr	r3, [r4, #44]
 512 0042 0122     		movs	r2, #1
 513 0044 9A40     		lsls	r2, r2, r3
 514 0046 1549     		ldr	r1, .L43+16
 515 0048 0868     		ldr	r0, [r1]
 516 004a 0243     		orrs	r2, r2, r0
 517 004c 0A60     		str	r2, [r1]
1134:FreeRTOS/src/tasks.c **** 
 518              		.loc 1 1134 3 view .LVU152
 519 004e 03EB8303 		add	r3, r3, r3, lsl #2
 520 0052 9A00     		lsls	r2, r3, #2
 521 0054 211D     		adds	r1, r4, #4
 522 0056 1248     		ldr	r0, .L43+20
 523 0058 1044     		add	r0, r0, r2
 524 005a FFF7FEFF 		bl	vListInsertEnd
 525              	.LVL43:
1134:FreeRTOS/src/tasks.c **** 
 526              		.loc 1 1134 36 view .LVU153
1136:FreeRTOS/src/tasks.c **** 	}
 527              		.loc 1 1136 3 view .LVU154
1138:FreeRTOS/src/tasks.c **** 
 528              		.loc 1 1138 2 view .LVU155
 529 005e FFF7FEFF 		bl	vPortExitCritical
 530              	.LVL44:
1140:FreeRTOS/src/tasks.c **** 	{
 531              		.loc 1 1140 2 view .LVU156
1140:FreeRTOS/src/tasks.c **** 	{
 532              		.loc 1 1140 24 is_stmt 0 view .LVU157
 533 0062 0C4B     		ldr	r3, .L43+8
 534 0064 1B68     		ldr	r3, [r3]
1140:FreeRTOS/src/tasks.c **** 	{
 535              		.loc 1 1140 4 view .LVU158
 536 0066 6BB1     		cbz	r3, .L36
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 82


1144:FreeRTOS/src/tasks.c **** 		{
 537              		.loc 1 1144 3 is_stmt 1 view .LVU159
1144:FreeRTOS/src/tasks.c **** 		{
 538              		.loc 1 1144 19 is_stmt 0 view .LVU160
 539 0068 094B     		ldr	r3, .L43+4
 540 006a 1B68     		ldr	r3, [r3]
 541 006c DA6A     		ldr	r2, [r3, #44]
1144:FreeRTOS/src/tasks.c **** 		{
 542              		.loc 1 1144 42 view .LVU161
 543 006e E36A     		ldr	r3, [r4, #44]
1144:FreeRTOS/src/tasks.c **** 		{
 544              		.loc 1 1144 5 view .LVU162
 545 0070 9A42     		cmp	r2, r3
 546 0072 07D2     		bcs	.L36
1146:FreeRTOS/src/tasks.c **** 		}
 547              		.loc 1 1146 4 is_stmt 1 view .LVU163
 548 0074 0B4B     		ldr	r3, .L43+24
 549 0076 4FF08052 		mov	r2, #268435456
 550 007a 1A60     		str	r2, [r3]
1146:FreeRTOS/src/tasks.c **** 		}
 551              		.loc 1 1146 4 view .LVU164
 552              		.syntax unified
 553              	@ 1146 "FreeRTOS/src/tasks.c" 1
 554 007c BFF34F8F 		dsb
 555              	@ 0 "" 2
1146:FreeRTOS/src/tasks.c **** 		}
 556              		.loc 1 1146 4 view .LVU165
 557              	@ 1146 "FreeRTOS/src/tasks.c" 1
 558 0080 BFF36F8F 		isb
 559              	@ 0 "" 2
1146:FreeRTOS/src/tasks.c **** 		}
 560              		.loc 1 1146 35 view .LVU166
1155:FreeRTOS/src/tasks.c **** 	}
 561              		.loc 1 1155 27 view .LVU167
 562              		.thumb
 563              		.syntax unified
 564              	.L36:
1157:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 565              		.loc 1 1157 1 is_stmt 0 view .LVU168
 566 0084 10BD     		pop	{r4, pc}
 567              	.LVL45:
 568              	.L42:
1095:FreeRTOS/src/tasks.c **** 			}
 569              		.loc 1 1095 5 is_stmt 1 view .LVU169
 570 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 571              	.LVL46:
 572 008a D5E7     		b	.L38
 573              	.L44:
 574              		.align	2
 575              	.L43:
 576 008c 00000000 		.word	.LANCHOR9
 577 0090 00000000 		.word	.LANCHOR10
 578 0094 00000000 		.word	.LANCHOR11
 579 0098 00000000 		.word	.LANCHOR12
 580 009c 00000000 		.word	.LANCHOR13
 581 00a0 00000000 		.word	.LANCHOR4
 582 00a4 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 83


 583              		.cfi_endproc
 584              	.LFE72:
 586              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 587              		.align	1
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu softvfp
 593              	prvCheckTasksWaitingTermination:
 594              	.LFB104:
3640:FreeRTOS/src/tasks.c **** 
 595              		.loc 1 3640 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              	.LBB26:
3646:FreeRTOS/src/tasks.c **** 
 600              		.loc 1 3646 3 view .LVU171
3650:FreeRTOS/src/tasks.c **** 		{
 601              		.loc 1 3650 3 view .LVU172
3650:FreeRTOS/src/tasks.c **** 		{
 602              		.loc 1 3650 39 is_stmt 0 view .LVU173
 603 0000 0F4B     		ldr	r3, .L52
 604 0002 1B68     		ldr	r3, [r3]
3650:FreeRTOS/src/tasks.c **** 		{
 605              		.loc 1 3650 8 view .LVU174
 606 0004 D3B1     		cbz	r3, .L51
 607              	.LBE26:
3640:FreeRTOS/src/tasks.c **** 
 608              		.loc 1 3640 1 view .LVU175
 609 0006 10B5     		push	{r4, lr}
 610              	.LCFI4:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 4, -8
 613              		.cfi_offset 14, -4
 614              	.L47:
 615              	.LBB27:
3652:FreeRTOS/src/tasks.c **** 			{
 616              		.loc 1 3652 4 is_stmt 1 view .LVU176
 617 0008 FFF7FEFF 		bl	vPortEnterCritical
 618              	.LVL47:
3654:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 619              		.loc 1 3654 5 view .LVU177
3654:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 620              		.loc 1 3654 13 is_stmt 0 view .LVU178
 621 000c 0D4B     		ldr	r3, .L52+4
 622 000e DB68     		ldr	r3, [r3, #12]
3654:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 623              		.loc 1 3654 11 view .LVU179
 624 0010 DC68     		ldr	r4, [r3, #12]
 625              	.LVL48:
3655:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
 626              		.loc 1 3655 5 is_stmt 1 view .LVU180
3655:FreeRTOS/src/tasks.c **** 				--uxCurrentNumberOfTasks;
 627              		.loc 1 3655 14 is_stmt 0 view .LVU181
 628 0012 201D     		adds	r0, r4, #4
 629 0014 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 84


 630              	.LVL49:
3656:FreeRTOS/src/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 631              		.loc 1 3656 5 is_stmt 1 view .LVU182
 632 0018 0B4A     		ldr	r2, .L52+8
 633 001a 1368     		ldr	r3, [r2]
 634 001c 013B     		subs	r3, r3, #1
 635 001e 1360     		str	r3, [r2]
3657:FreeRTOS/src/tasks.c **** 			}
 636              		.loc 1 3657 5 view .LVU183
 637 0020 074A     		ldr	r2, .L52
 638 0022 1368     		ldr	r3, [r2]
 639 0024 013B     		subs	r3, r3, #1
 640 0026 1360     		str	r3, [r2]
3659:FreeRTOS/src/tasks.c **** 
 641              		.loc 1 3659 4 view .LVU184
 642 0028 FFF7FEFF 		bl	vPortExitCritical
 643              	.LVL50:
3661:FreeRTOS/src/tasks.c **** 		}
 644              		.loc 1 3661 4 view .LVU185
 645 002c 2046     		mov	r0, r4
 646 002e FFF7FEFF 		bl	prvDeleteTCB
 647              	.LVL51:
3650:FreeRTOS/src/tasks.c **** 		{
 648              		.loc 1 3650 39 is_stmt 0 view .LVU186
 649 0032 034B     		ldr	r3, .L52
 650 0034 1B68     		ldr	r3, [r3]
3650:FreeRTOS/src/tasks.c **** 		{
 651              		.loc 1 3650 8 view .LVU187
 652 0036 002B     		cmp	r3, #0
 653 0038 E6D1     		bne	.L47
 654              	.LBE27:
3665:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 3665 1 view .LVU188
 656 003a 10BD     		pop	{r4, pc}
 657              	.LVL52:
 658              	.L51:
 659              	.LCFI5:
 660              		.cfi_def_cfa_offset 0
 661              		.cfi_restore 4
 662              		.cfi_restore 14
3665:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 663              		.loc 1 3665 1 view .LVU189
 664 003c 7047     		bx	lr
 665              	.L53:
 666 003e 00BF     		.align	2
 667              	.L52:
 668 0040 00000000 		.word	.LANCHOR14
 669 0044 00000000 		.word	.LANCHOR7
 670 0048 00000000 		.word	.LANCHOR9
 671              		.cfi_endproc
 672              	.LFE104:
 674              		.section	.text.prvIdleTask,"ax",%progbits
 675              		.align	1
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu softvfp
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 85


 681              	prvIdleTask:
 682              	.LFB102:
3393:FreeRTOS/src/tasks.c **** 	/* Stop warnings. */
 683              		.loc 1 3393 1 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ Volatile: function does not return.
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL53:
3393:FreeRTOS/src/tasks.c **** 	/* Stop warnings. */
 689              		.loc 1 3393 1 is_stmt 0 view .LVU191
 690 0000 08B5     		push	{r3, lr}
 691              	.LCFI6:
 692              		.cfi_def_cfa_offset 8
 693              		.cfi_offset 3, -8
 694              		.cfi_offset 14, -4
 695              	.LVL54:
 696              	.L55:
3395:FreeRTOS/src/tasks.c **** 
 697              		.loc 1 3395 2 is_stmt 1 view .LVU192
3403:FreeRTOS/src/tasks.c **** 
 698              		.loc 1 3403 64 view .LVU193
3405:FreeRTOS/src/tasks.c **** 	{
 699              		.loc 1 3405 2 view .LVU194
3409:FreeRTOS/src/tasks.c **** 
 700              		.loc 1 3409 3 view .LVU195
 701 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 702              	.LVL55:
3432:FreeRTOS/src/tasks.c **** 			{
 703              		.loc 1 3432 4 view .LVU196
3432:FreeRTOS/src/tasks.c **** 			{
 704              		.loc 1 3432 8 is_stmt 0 view .LVU197
 705 0006 064B     		ldr	r3, .L58
 706 0008 1B68     		ldr	r3, [r3]
3432:FreeRTOS/src/tasks.c **** 			{
 707              		.loc 1 3432 6 view .LVU198
 708 000a 012B     		cmp	r3, #1
 709 000c F9D9     		bls	.L55
3434:FreeRTOS/src/tasks.c **** 			}
 710              		.loc 1 3434 5 is_stmt 1 view .LVU199
 711 000e 054B     		ldr	r3, .L58+4
 712 0010 4FF08052 		mov	r2, #268435456
 713 0014 1A60     		str	r2, [r3]
3434:FreeRTOS/src/tasks.c **** 			}
 714              		.loc 1 3434 5 view .LVU200
 715              		.syntax unified
 716              	@ 3434 "FreeRTOS/src/tasks.c" 1
 717 0016 BFF34F8F 		dsb
 718              	@ 0 "" 2
3434:FreeRTOS/src/tasks.c **** 			}
 719              		.loc 1 3434 5 view .LVU201
 720              	@ 3434 "FreeRTOS/src/tasks.c" 1
 721 001a BFF36F8F 		isb
 722              	@ 0 "" 2
3434:FreeRTOS/src/tasks.c **** 			}
 723              		.loc 1 3434 16 view .LVU202
 724              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 86


 725              		.syntax unified
 726 001e F0E7     		b	.L55
 727              	.L59:
 728              		.align	2
 729              	.L58:
 730 0020 00000000 		.word	.LANCHOR4
 731 0024 04ED00E0 		.word	-536810236
 732              		.cfi_endproc
 733              	.LFE102:
 735              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 736              		.align	1
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu softvfp
 742              	prvAddCurrentTaskToDelayedList:
 743              	.LVL56:
 744              	.LFB120:
3965:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3966:FreeRTOS/src/tasks.c **** 
3967:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:FreeRTOS/src/tasks.c **** 
3969:FreeRTOS/src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:FreeRTOS/src/tasks.c **** 	{
3971:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
3972:FreeRTOS/src/tasks.c **** 
3973:FreeRTOS/src/tasks.c **** 		/* A critical section is not required as this is not called from
3974:FreeRTOS/src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:FreeRTOS/src/tasks.c **** 		individual execution thread. */
3976:FreeRTOS/src/tasks.c **** 		xReturn = pxCurrentTCB;
3977:FreeRTOS/src/tasks.c **** 
3978:FreeRTOS/src/tasks.c **** 		return xReturn;
3979:FreeRTOS/src/tasks.c **** 	}
3980:FreeRTOS/src/tasks.c **** 
3981:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
3983:FreeRTOS/src/tasks.c **** 
3984:FreeRTOS/src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:FreeRTOS/src/tasks.c **** 
3986:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:FreeRTOS/src/tasks.c **** 	{
3988:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
3989:FreeRTOS/src/tasks.c **** 
3990:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:FreeRTOS/src/tasks.c **** 		{
3992:FreeRTOS/src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:FreeRTOS/src/tasks.c **** 		}
3994:FreeRTOS/src/tasks.c **** 		else
3995:FreeRTOS/src/tasks.c **** 		{
3996:FreeRTOS/src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:FreeRTOS/src/tasks.c **** 			{
3998:FreeRTOS/src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:FreeRTOS/src/tasks.c **** 			}
4000:FreeRTOS/src/tasks.c **** 			else
4001:FreeRTOS/src/tasks.c **** 			{
4002:FreeRTOS/src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:FreeRTOS/src/tasks.c **** 			}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 87


4004:FreeRTOS/src/tasks.c **** 		}
4005:FreeRTOS/src/tasks.c **** 
4006:FreeRTOS/src/tasks.c **** 		return xReturn;
4007:FreeRTOS/src/tasks.c **** 	}
4008:FreeRTOS/src/tasks.c **** 
4009:FreeRTOS/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4011:FreeRTOS/src/tasks.c **** 
4012:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:FreeRTOS/src/tasks.c **** 
4014:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:FreeRTOS/src/tasks.c **** 	{
4016:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:FreeRTOS/src/tasks.c **** 
4019:FreeRTOS/src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:FreeRTOS/src/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:FreeRTOS/src/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4023:FreeRTOS/src/tasks.c **** 		{
4024:FreeRTOS/src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:FreeRTOS/src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:FreeRTOS/src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:FreeRTOS/src/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:FreeRTOS/src/tasks.c **** 			{
4029:FreeRTOS/src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:FreeRTOS/src/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:FreeRTOS/src/tasks.c **** 				not being used for anything else. */
4032:FreeRTOS/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:FreeRTOS/src/tasks.c **** 				{
4034:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:FreeRTOS/src/tasks.c **** 				}
4036:FreeRTOS/src/tasks.c **** 				else
4037:FreeRTOS/src/tasks.c **** 				{
4038:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:FreeRTOS/src/tasks.c **** 				}
4040:FreeRTOS/src/tasks.c **** 
4041:FreeRTOS/src/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:FreeRTOS/src/tasks.c **** 				to be moved into a new list. */
4043:FreeRTOS/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:FreeRTOS/src/tasks.c **** 				{
4045:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:FreeRTOS/src/tasks.c **** 					{
4047:FreeRTOS/src/tasks.c **** 						/* It is known that the task is in its ready list so
4048:FreeRTOS/src/tasks.c **** 						there is no need to check again and the port level
4049:FreeRTOS/src/tasks.c **** 						reset macro can be called directly. */
4050:FreeRTOS/src/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:FreeRTOS/src/tasks.c **** 					}
4052:FreeRTOS/src/tasks.c **** 					else
4053:FreeRTOS/src/tasks.c **** 					{
4054:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:FreeRTOS/src/tasks.c **** 					}
4056:FreeRTOS/src/tasks.c **** 
4057:FreeRTOS/src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:FreeRTOS/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:FreeRTOS/src/tasks.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 88


4061:FreeRTOS/src/tasks.c **** 				else
4062:FreeRTOS/src/tasks.c **** 				{
4063:FreeRTOS/src/tasks.c **** 					/* Just inherit the priority. */
4064:FreeRTOS/src/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:FreeRTOS/src/tasks.c **** 				}
4066:FreeRTOS/src/tasks.c **** 
4067:FreeRTOS/src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:FreeRTOS/src/tasks.c **** 
4069:FreeRTOS/src/tasks.c **** 				/* Inheritance occurred. */
4070:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
4071:FreeRTOS/src/tasks.c **** 			}
4072:FreeRTOS/src/tasks.c **** 			else
4073:FreeRTOS/src/tasks.c **** 			{
4074:FreeRTOS/src/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:FreeRTOS/src/tasks.c **** 				{
4076:FreeRTOS/src/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:FreeRTOS/src/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:FreeRTOS/src/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:FreeRTOS/src/tasks.c **** 					priority of the task attempting to take the mutex.
4080:FreeRTOS/src/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:FreeRTOS/src/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:FreeRTOS/src/tasks.c **** 					not been the case. */
4083:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
4084:FreeRTOS/src/tasks.c **** 				}
4085:FreeRTOS/src/tasks.c **** 				else
4086:FreeRTOS/src/tasks.c **** 				{
4087:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:FreeRTOS/src/tasks.c **** 				}
4089:FreeRTOS/src/tasks.c **** 			}
4090:FreeRTOS/src/tasks.c **** 		}
4091:FreeRTOS/src/tasks.c **** 		else
4092:FreeRTOS/src/tasks.c **** 		{
4093:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:FreeRTOS/src/tasks.c **** 		}
4095:FreeRTOS/src/tasks.c **** 
4096:FreeRTOS/src/tasks.c **** 		return xReturn;
4097:FreeRTOS/src/tasks.c **** 	}
4098:FreeRTOS/src/tasks.c **** 
4099:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4100:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4101:FreeRTOS/src/tasks.c **** 
4102:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:FreeRTOS/src/tasks.c **** 
4104:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:FreeRTOS/src/tasks.c **** 	{
4106:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:FreeRTOS/src/tasks.c **** 
4109:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4110:FreeRTOS/src/tasks.c **** 		{
4111:FreeRTOS/src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:FreeRTOS/src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:FreeRTOS/src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:FreeRTOS/src/tasks.c **** 			be the running state task. */
4115:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:FreeRTOS/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 89


4118:FreeRTOS/src/tasks.c **** 
4119:FreeRTOS/src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:FreeRTOS/src/tasks.c **** 			task? */
4121:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:FreeRTOS/src/tasks.c **** 			{
4123:FreeRTOS/src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:FreeRTOS/src/tasks.c **** 				{
4126:FreeRTOS/src/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:FreeRTOS/src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:FreeRTOS/src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:FreeRTOS/src/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:FreeRTOS/src/tasks.c **** 					the holding task from the ready/delayed list. */
4131:FreeRTOS/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:FreeRTOS/src/tasks.c **** 					{
4133:FreeRTOS/src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:FreeRTOS/src/tasks.c **** 					}
4135:FreeRTOS/src/tasks.c **** 					else
4136:FreeRTOS/src/tasks.c **** 					{
4137:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:FreeRTOS/src/tasks.c **** 					}
4139:FreeRTOS/src/tasks.c **** 
4140:FreeRTOS/src/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:FreeRTOS/src/tasks.c **** 					new	ready list. */
4142:FreeRTOS/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:FreeRTOS/src/tasks.c **** 
4145:FreeRTOS/src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:FreeRTOS/src/tasks.c **** 					any other purpose if this task is running, and it must be
4147:FreeRTOS/src/tasks.c **** 					running to give back the mutex. */
4148:FreeRTOS/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:FreeRTOS/src/tasks.c **** 
4151:FreeRTOS/src/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:FreeRTOS/src/tasks.c **** 					This is only actually required in the corner case whereby
4153:FreeRTOS/src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:FreeRTOS/src/tasks.c **** 					in an order different to that in which they were taken.
4155:FreeRTOS/src/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:FreeRTOS/src/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:FreeRTOS/src/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:FreeRTOS/src/tasks.c **** 					a task is waiting on it or not. */
4159:FreeRTOS/src/tasks.c **** 					xReturn = pdTRUE;
4160:FreeRTOS/src/tasks.c **** 				}
4161:FreeRTOS/src/tasks.c **** 				else
4162:FreeRTOS/src/tasks.c **** 				{
4163:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:FreeRTOS/src/tasks.c **** 				}
4165:FreeRTOS/src/tasks.c **** 			}
4166:FreeRTOS/src/tasks.c **** 			else
4167:FreeRTOS/src/tasks.c **** 			{
4168:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:FreeRTOS/src/tasks.c **** 			}
4170:FreeRTOS/src/tasks.c **** 		}
4171:FreeRTOS/src/tasks.c **** 		else
4172:FreeRTOS/src/tasks.c **** 		{
4173:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 90


4175:FreeRTOS/src/tasks.c **** 
4176:FreeRTOS/src/tasks.c **** 		return xReturn;
4177:FreeRTOS/src/tasks.c **** 	}
4178:FreeRTOS/src/tasks.c **** 
4179:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4180:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4181:FreeRTOS/src/tasks.c **** 
4182:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:FreeRTOS/src/tasks.c **** 
4184:FreeRTOS/src/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:FreeRTOS/src/tasks.c **** 	{
4186:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:FreeRTOS/src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:FreeRTOS/src/tasks.c **** 
4190:FreeRTOS/src/tasks.c **** 		if( pxMutexHolder != NULL )
4191:FreeRTOS/src/tasks.c **** 		{
4192:FreeRTOS/src/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:FreeRTOS/src/tasks.c **** 			one mutex. */
4194:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:FreeRTOS/src/tasks.c **** 
4196:FreeRTOS/src/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:FreeRTOS/src/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:FreeRTOS/src/tasks.c **** 			holding task's base priority and the priority of the highest
4199:FreeRTOS/src/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:FreeRTOS/src/tasks.c **** 			{
4202:FreeRTOS/src/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:FreeRTOS/src/tasks.c **** 			}
4204:FreeRTOS/src/tasks.c **** 			else
4205:FreeRTOS/src/tasks.c **** 			{
4206:FreeRTOS/src/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:FreeRTOS/src/tasks.c **** 			}
4208:FreeRTOS/src/tasks.c **** 
4209:FreeRTOS/src/tasks.c **** 			/* Does the priority need to change? */
4210:FreeRTOS/src/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:FreeRTOS/src/tasks.c **** 			{
4212:FreeRTOS/src/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:FreeRTOS/src/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:FreeRTOS/src/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:FreeRTOS/src/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:FreeRTOS/src/tasks.c **** 				{
4218:FreeRTOS/src/tasks.c **** 					/* If a task has timed out because it already holds the
4219:FreeRTOS/src/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:FreeRTOS/src/tasks.c **** 					its own priority. */
4221:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:FreeRTOS/src/tasks.c **** 
4223:FreeRTOS/src/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:FreeRTOS/src/tasks.c **** 					priority to facilitate determining the subject task's
4225:FreeRTOS/src/tasks.c **** 					state. */
4226:FreeRTOS/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:FreeRTOS/src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:FreeRTOS/src/tasks.c **** 
4230:FreeRTOS/src/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:FreeRTOS/src/tasks.c **** 					being used for anything else. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 91


4232:FreeRTOS/src/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:FreeRTOS/src/tasks.c **** 					{
4234:FreeRTOS/src/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:FreeRTOS/src/tasks.c **** 					}
4236:FreeRTOS/src/tasks.c **** 					else
4237:FreeRTOS/src/tasks.c **** 					{
4238:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:FreeRTOS/src/tasks.c **** 					}
4240:FreeRTOS/src/tasks.c **** 
4241:FreeRTOS/src/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:FreeRTOS/src/tasks.c **** 					then the task that holds the mutex could be in either the
4243:FreeRTOS/src/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:FreeRTOS/src/tasks.c **** 					from its current state list if it is in the Ready state as
4245:FreeRTOS/src/tasks.c **** 					the task's priority is going to change and there is one
4246:FreeRTOS/src/tasks.c **** 					Ready list per priority. */
4247:FreeRTOS/src/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:FreeRTOS/src/tasks.c **** 					{
4249:FreeRTOS/src/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:FreeRTOS/src/tasks.c **** 						{
4251:FreeRTOS/src/tasks.c **** 							/* It is known that the task is in its ready list so
4252:FreeRTOS/src/tasks.c **** 							there is no need to check again and the port level
4253:FreeRTOS/src/tasks.c **** 							reset macro can be called directly. */
4254:FreeRTOS/src/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:FreeRTOS/src/tasks.c **** 						}
4256:FreeRTOS/src/tasks.c **** 						else
4257:FreeRTOS/src/tasks.c **** 						{
4258:FreeRTOS/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:FreeRTOS/src/tasks.c **** 						}
4260:FreeRTOS/src/tasks.c **** 
4261:FreeRTOS/src/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:FreeRTOS/src/tasks.c **** 					}
4263:FreeRTOS/src/tasks.c **** 					else
4264:FreeRTOS/src/tasks.c **** 					{
4265:FreeRTOS/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:FreeRTOS/src/tasks.c **** 					}
4267:FreeRTOS/src/tasks.c **** 				}
4268:FreeRTOS/src/tasks.c **** 				else
4269:FreeRTOS/src/tasks.c **** 				{
4270:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:FreeRTOS/src/tasks.c **** 				}
4272:FreeRTOS/src/tasks.c **** 			}
4273:FreeRTOS/src/tasks.c **** 			else
4274:FreeRTOS/src/tasks.c **** 			{
4275:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:FreeRTOS/src/tasks.c **** 			}
4277:FreeRTOS/src/tasks.c **** 		}
4278:FreeRTOS/src/tasks.c **** 		else
4279:FreeRTOS/src/tasks.c **** 		{
4280:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:FreeRTOS/src/tasks.c **** 		}
4282:FreeRTOS/src/tasks.c **** 	}
4283:FreeRTOS/src/tasks.c **** 
4284:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
4285:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4286:FreeRTOS/src/tasks.c **** 
4287:FreeRTOS/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 92


4289:FreeRTOS/src/tasks.c **** 	void vTaskEnterCritical( void )
4290:FreeRTOS/src/tasks.c **** 	{
4291:FreeRTOS/src/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:FreeRTOS/src/tasks.c **** 
4293:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:FreeRTOS/src/tasks.c **** 		{
4295:FreeRTOS/src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:FreeRTOS/src/tasks.c **** 
4297:FreeRTOS/src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:FreeRTOS/src/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:FreeRTOS/src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:FreeRTOS/src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:FreeRTOS/src/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:FreeRTOS/src/tasks.c **** 			critical section. */
4303:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:FreeRTOS/src/tasks.c **** 			{
4305:FreeRTOS/src/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:FreeRTOS/src/tasks.c **** 			}
4307:FreeRTOS/src/tasks.c **** 		}
4308:FreeRTOS/src/tasks.c **** 		else
4309:FreeRTOS/src/tasks.c **** 		{
4310:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:FreeRTOS/src/tasks.c **** 		}
4312:FreeRTOS/src/tasks.c **** 	}
4313:FreeRTOS/src/tasks.c **** 
4314:FreeRTOS/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4316:FreeRTOS/src/tasks.c **** 
4317:FreeRTOS/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:FreeRTOS/src/tasks.c **** 
4319:FreeRTOS/src/tasks.c **** 	void vTaskExitCritical( void )
4320:FreeRTOS/src/tasks.c **** 	{
4321:FreeRTOS/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:FreeRTOS/src/tasks.c **** 		{
4323:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:FreeRTOS/src/tasks.c **** 			{
4325:FreeRTOS/src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:FreeRTOS/src/tasks.c **** 
4327:FreeRTOS/src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:FreeRTOS/src/tasks.c **** 				{
4329:FreeRTOS/src/tasks.c **** 					portENABLE_INTERRUPTS();
4330:FreeRTOS/src/tasks.c **** 				}
4331:FreeRTOS/src/tasks.c **** 				else
4332:FreeRTOS/src/tasks.c **** 				{
4333:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:FreeRTOS/src/tasks.c **** 				}
4335:FreeRTOS/src/tasks.c **** 			}
4336:FreeRTOS/src/tasks.c **** 			else
4337:FreeRTOS/src/tasks.c **** 			{
4338:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:FreeRTOS/src/tasks.c **** 			}
4340:FreeRTOS/src/tasks.c **** 		}
4341:FreeRTOS/src/tasks.c **** 		else
4342:FreeRTOS/src/tasks.c **** 		{
4343:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:FreeRTOS/src/tasks.c **** 		}
4345:FreeRTOS/src/tasks.c **** 	}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 93


4346:FreeRTOS/src/tasks.c **** 
4347:FreeRTOS/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4349:FreeRTOS/src/tasks.c **** 
4350:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:FreeRTOS/src/tasks.c **** 
4352:FreeRTOS/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:FreeRTOS/src/tasks.c **** 	{
4354:FreeRTOS/src/tasks.c **** 	size_t x;
4355:FreeRTOS/src/tasks.c **** 
4356:FreeRTOS/src/tasks.c **** 		/* Start by copying the entire string. */
4357:FreeRTOS/src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:FreeRTOS/src/tasks.c **** 
4359:FreeRTOS/src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:FreeRTOS/src/tasks.c **** 		printed out. */
4361:FreeRTOS/src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:FreeRTOS/src/tasks.c **** 		{
4363:FreeRTOS/src/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:FreeRTOS/src/tasks.c **** 		}
4365:FreeRTOS/src/tasks.c **** 
4366:FreeRTOS/src/tasks.c **** 		/* Terminate. */
4367:FreeRTOS/src/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:FreeRTOS/src/tasks.c **** 
4369:FreeRTOS/src/tasks.c **** 		/* Return the new end of string. */
4370:FreeRTOS/src/tasks.c **** 		return &( pcBuffer[ x ] );
4371:FreeRTOS/src/tasks.c **** 	}
4372:FreeRTOS/src/tasks.c **** 
4373:FreeRTOS/src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4375:FreeRTOS/src/tasks.c **** 
4376:FreeRTOS/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:FreeRTOS/src/tasks.c **** 
4378:FreeRTOS/src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:FreeRTOS/src/tasks.c **** 	{
4380:FreeRTOS/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:FreeRTOS/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:FreeRTOS/src/tasks.c **** 	char cStatus;
4383:FreeRTOS/src/tasks.c **** 
4384:FreeRTOS/src/tasks.c **** 		/*
4385:FreeRTOS/src/tasks.c **** 		 * PLEASE NOTE:
4386:FreeRTOS/src/tasks.c **** 		 *
4387:FreeRTOS/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:FreeRTOS/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:FreeRTOS/src/tasks.c **** 		 * scheduler.
4390:FreeRTOS/src/tasks.c **** 		 *
4391:FreeRTOS/src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:FreeRTOS/src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:FreeRTOS/src/tasks.c **** 		 * displays task names, states and stack usage.
4394:FreeRTOS/src/tasks.c **** 		 *
4395:FreeRTOS/src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:FreeRTOS/src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:FreeRTOS/src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:FreeRTOS/src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:FreeRTOS/src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:FreeRTOS/src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:FreeRTOS/src/tasks.c **** 		 * snprintf() implementation!).
4402:FreeRTOS/src/tasks.c **** 		 *
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 94


4403:FreeRTOS/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:FreeRTOS/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:FreeRTOS/src/tasks.c **** 		 * through a call to vTaskList().
4406:FreeRTOS/src/tasks.c **** 		 */
4407:FreeRTOS/src/tasks.c **** 
4408:FreeRTOS/src/tasks.c **** 
4409:FreeRTOS/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:FreeRTOS/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:FreeRTOS/src/tasks.c **** 
4412:FreeRTOS/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:FreeRTOS/src/tasks.c **** 		function is executing. */
4414:FreeRTOS/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:FreeRTOS/src/tasks.c **** 
4416:FreeRTOS/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:FreeRTOS/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:FreeRTOS/src/tasks.c **** 		equate to NULL. */
4419:FreeRTOS/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:FreeRTOS/src/tasks.c **** 
4421:FreeRTOS/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:FreeRTOS/src/tasks.c **** 		{
4423:FreeRTOS/src/tasks.c **** 			/* Generate the (binary) data. */
4424:FreeRTOS/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:FreeRTOS/src/tasks.c **** 
4426:FreeRTOS/src/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:FreeRTOS/src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:FreeRTOS/src/tasks.c **** 			{
4429:FreeRTOS/src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:FreeRTOS/src/tasks.c **** 				{
4431:FreeRTOS/src/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:FreeRTOS/src/tasks.c **** 										break;
4433:FreeRTOS/src/tasks.c **** 
4434:FreeRTOS/src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:FreeRTOS/src/tasks.c **** 										break;
4436:FreeRTOS/src/tasks.c **** 
4437:FreeRTOS/src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:FreeRTOS/src/tasks.c **** 										break;
4439:FreeRTOS/src/tasks.c **** 
4440:FreeRTOS/src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:FreeRTOS/src/tasks.c **** 										break;
4442:FreeRTOS/src/tasks.c **** 
4443:FreeRTOS/src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:FreeRTOS/src/tasks.c **** 										break;
4445:FreeRTOS/src/tasks.c **** 
4446:FreeRTOS/src/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:FreeRTOS/src/tasks.c **** 					default:			/* Should not get here, but it is included
4448:FreeRTOS/src/tasks.c **** 										to prevent static checking errors. */
4449:FreeRTOS/src/tasks.c **** 										cStatus = ( char ) 0x00;
4450:FreeRTOS/src/tasks.c **** 										break;
4451:FreeRTOS/src/tasks.c **** 				}
4452:FreeRTOS/src/tasks.c **** 
4453:FreeRTOS/src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:FreeRTOS/src/tasks.c **** 				can be printed in tabular form more easily. */
4455:FreeRTOS/src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:FreeRTOS/src/tasks.c **** 
4457:FreeRTOS/src/tasks.c **** 				/* Write the rest of the string. */
4458:FreeRTOS/src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:FreeRTOS/src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 95


4460:FreeRTOS/src/tasks.c **** 			}
4461:FreeRTOS/src/tasks.c **** 
4462:FreeRTOS/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:FreeRTOS/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:FreeRTOS/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:FreeRTOS/src/tasks.c **** 		}
4466:FreeRTOS/src/tasks.c **** 		else
4467:FreeRTOS/src/tasks.c **** 		{
4468:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:FreeRTOS/src/tasks.c **** 		}
4470:FreeRTOS/src/tasks.c **** 	}
4471:FreeRTOS/src/tasks.c **** 
4472:FreeRTOS/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
4474:FreeRTOS/src/tasks.c **** 
4475:FreeRTOS/src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:FreeRTOS/src/tasks.c **** 
4477:FreeRTOS/src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:FreeRTOS/src/tasks.c **** 	{
4479:FreeRTOS/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:FreeRTOS/src/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:FreeRTOS/src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:FreeRTOS/src/tasks.c **** 
4483:FreeRTOS/src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:FreeRTOS/src/tasks.c **** 		{
4485:FreeRTOS/src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:FreeRTOS/src/tasks.c **** 		}
4487:FreeRTOS/src/tasks.c **** 		#endif
4488:FreeRTOS/src/tasks.c **** 
4489:FreeRTOS/src/tasks.c **** 		/*
4490:FreeRTOS/src/tasks.c **** 		 * PLEASE NOTE:
4491:FreeRTOS/src/tasks.c **** 		 *
4492:FreeRTOS/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:FreeRTOS/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:FreeRTOS/src/tasks.c **** 		 * scheduler.
4495:FreeRTOS/src/tasks.c **** 		 *
4496:FreeRTOS/src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:FreeRTOS/src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:FreeRTOS/src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:FreeRTOS/src/tasks.c **** 		 * in both absolute and percentage terms.
4500:FreeRTOS/src/tasks.c **** 		 *
4501:FreeRTOS/src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:FreeRTOS/src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:FreeRTOS/src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:FreeRTOS/src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:FreeRTOS/src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:FreeRTOS/src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:FreeRTOS/src/tasks.c **** 		 * a full snprintf() implementation!).
4508:FreeRTOS/src/tasks.c **** 		 *
4509:FreeRTOS/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:FreeRTOS/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:FreeRTOS/src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:FreeRTOS/src/tasks.c **** 		 */
4513:FreeRTOS/src/tasks.c **** 
4514:FreeRTOS/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:FreeRTOS/src/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 96


4517:FreeRTOS/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:FreeRTOS/src/tasks.c **** 		function is executing. */
4519:FreeRTOS/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:FreeRTOS/src/tasks.c **** 
4521:FreeRTOS/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:FreeRTOS/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:FreeRTOS/src/tasks.c **** 		equate to NULL. */
4524:FreeRTOS/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:FreeRTOS/src/tasks.c **** 
4526:FreeRTOS/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:FreeRTOS/src/tasks.c **** 		{
4528:FreeRTOS/src/tasks.c **** 			/* Generate the (binary) data. */
4529:FreeRTOS/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:FreeRTOS/src/tasks.c **** 
4531:FreeRTOS/src/tasks.c **** 			/* For percentage calculations. */
4532:FreeRTOS/src/tasks.c **** 			ulTotalTime /= 100UL;
4533:FreeRTOS/src/tasks.c **** 
4534:FreeRTOS/src/tasks.c **** 			/* Avoid divide by zero errors. */
4535:FreeRTOS/src/tasks.c **** 			if( ulTotalTime > 0UL )
4536:FreeRTOS/src/tasks.c **** 			{
4537:FreeRTOS/src/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:FreeRTOS/src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:FreeRTOS/src/tasks.c **** 				{
4540:FreeRTOS/src/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:FreeRTOS/src/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:FreeRTOS/src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:FreeRTOS/src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:FreeRTOS/src/tasks.c **** 
4545:FreeRTOS/src/tasks.c **** 					/* Write the task name to the string, padding with
4546:FreeRTOS/src/tasks.c **** 					spaces so it can be printed in tabular form more
4547:FreeRTOS/src/tasks.c **** 					easily. */
4548:FreeRTOS/src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:FreeRTOS/src/tasks.c **** 
4550:FreeRTOS/src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:FreeRTOS/src/tasks.c **** 					{
4552:FreeRTOS/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:FreeRTOS/src/tasks.c **** 						{
4554:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:FreeRTOS/src/tasks.c **** 						}
4556:FreeRTOS/src/tasks.c **** 						#else
4557:FreeRTOS/src/tasks.c **** 						{
4558:FreeRTOS/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:FreeRTOS/src/tasks.c **** 							printf() library can be used. */
4560:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:FreeRTOS/src/tasks.c **** 						}
4562:FreeRTOS/src/tasks.c **** 						#endif
4563:FreeRTOS/src/tasks.c **** 					}
4564:FreeRTOS/src/tasks.c **** 					else
4565:FreeRTOS/src/tasks.c **** 					{
4566:FreeRTOS/src/tasks.c **** 						/* If the percentage is zero here then the task has
4567:FreeRTOS/src/tasks.c **** 						consumed less than 1% of the total run time. */
4568:FreeRTOS/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:FreeRTOS/src/tasks.c **** 						{
4570:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:FreeRTOS/src/tasks.c **** 						}
4572:FreeRTOS/src/tasks.c **** 						#else
4573:FreeRTOS/src/tasks.c **** 						{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 97


4574:FreeRTOS/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:FreeRTOS/src/tasks.c **** 							printf() library can be used. */
4576:FreeRTOS/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:FreeRTOS/src/tasks.c **** 						}
4578:FreeRTOS/src/tasks.c **** 						#endif
4579:FreeRTOS/src/tasks.c **** 					}
4580:FreeRTOS/src/tasks.c **** 
4581:FreeRTOS/src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:FreeRTOS/src/tasks.c **** 				}
4583:FreeRTOS/src/tasks.c **** 			}
4584:FreeRTOS/src/tasks.c **** 			else
4585:FreeRTOS/src/tasks.c **** 			{
4586:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:FreeRTOS/src/tasks.c **** 			}
4588:FreeRTOS/src/tasks.c **** 
4589:FreeRTOS/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:FreeRTOS/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:FreeRTOS/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:FreeRTOS/src/tasks.c **** 		}
4593:FreeRTOS/src/tasks.c **** 		else
4594:FreeRTOS/src/tasks.c **** 		{
4595:FreeRTOS/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:FreeRTOS/src/tasks.c **** 		}
4597:FreeRTOS/src/tasks.c **** 	}
4598:FreeRTOS/src/tasks.c **** 
4599:FreeRTOS/src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4601:FreeRTOS/src/tasks.c **** 
4602:FreeRTOS/src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:FreeRTOS/src/tasks.c **** {
4604:FreeRTOS/src/tasks.c **** TickType_t uxReturn;
4605:FreeRTOS/src/tasks.c **** 
4606:FreeRTOS/src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:FreeRTOS/src/tasks.c **** 
4608:FreeRTOS/src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:FreeRTOS/src/tasks.c **** 	queues and semaphores. */
4610:FreeRTOS/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:FreeRTOS/src/tasks.c **** 
4612:FreeRTOS/src/tasks.c **** 	return uxReturn;
4613:FreeRTOS/src/tasks.c **** }
4614:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4615:FreeRTOS/src/tasks.c **** 
4616:FreeRTOS/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:FreeRTOS/src/tasks.c **** 
4618:FreeRTOS/src/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:FreeRTOS/src/tasks.c **** 	{
4620:FreeRTOS/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:FreeRTOS/src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:FreeRTOS/src/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:FreeRTOS/src/tasks.c **** 		{
4624:FreeRTOS/src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:FreeRTOS/src/tasks.c **** 		}
4626:FreeRTOS/src/tasks.c **** 
4627:FreeRTOS/src/tasks.c **** 		return pxCurrentTCB;
4628:FreeRTOS/src/tasks.c **** 	}
4629:FreeRTOS/src/tasks.c **** 
4630:FreeRTOS/src/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 98


4631:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4632:FreeRTOS/src/tasks.c **** 
4633:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:FreeRTOS/src/tasks.c **** 
4635:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:FreeRTOS/src/tasks.c **** 	{
4637:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
4638:FreeRTOS/src/tasks.c **** 
4639:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4640:FreeRTOS/src/tasks.c **** 		{
4641:FreeRTOS/src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:FreeRTOS/src/tasks.c **** 			{
4644:FreeRTOS/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:FreeRTOS/src/tasks.c **** 
4647:FreeRTOS/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:FreeRTOS/src/tasks.c **** 				{
4649:FreeRTOS/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:FreeRTOS/src/tasks.c **** 
4652:FreeRTOS/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:FreeRTOS/src/tasks.c **** 					section (some will yield immediately, others wait until the
4654:FreeRTOS/src/tasks.c **** 					critical section exits) - but it is not something that
4655:FreeRTOS/src/tasks.c **** 					application code should ever do. */
4656:FreeRTOS/src/tasks.c **** 					portYIELD_WITHIN_API();
4657:FreeRTOS/src/tasks.c **** 				}
4658:FreeRTOS/src/tasks.c **** 				else
4659:FreeRTOS/src/tasks.c **** 				{
4660:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:FreeRTOS/src/tasks.c **** 				}
4662:FreeRTOS/src/tasks.c **** 			}
4663:FreeRTOS/src/tasks.c **** 			else
4664:FreeRTOS/src/tasks.c **** 			{
4665:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:FreeRTOS/src/tasks.c **** 			}
4667:FreeRTOS/src/tasks.c **** 		}
4668:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4669:FreeRTOS/src/tasks.c **** 
4670:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4671:FreeRTOS/src/tasks.c **** 		{
4672:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:FreeRTOS/src/tasks.c **** 
4675:FreeRTOS/src/tasks.c **** 			if( ulReturn != 0UL )
4676:FreeRTOS/src/tasks.c **** 			{
4677:FreeRTOS/src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:FreeRTOS/src/tasks.c **** 				{
4679:FreeRTOS/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:FreeRTOS/src/tasks.c **** 				}
4681:FreeRTOS/src/tasks.c **** 				else
4682:FreeRTOS/src/tasks.c **** 				{
4683:FreeRTOS/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:FreeRTOS/src/tasks.c **** 				}
4685:FreeRTOS/src/tasks.c **** 			}
4686:FreeRTOS/src/tasks.c **** 			else
4687:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 99


4688:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:FreeRTOS/src/tasks.c **** 			}
4690:FreeRTOS/src/tasks.c **** 
4691:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:FreeRTOS/src/tasks.c **** 		}
4693:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4694:FreeRTOS/src/tasks.c **** 
4695:FreeRTOS/src/tasks.c **** 		return ulReturn;
4696:FreeRTOS/src/tasks.c **** 	}
4697:FreeRTOS/src/tasks.c **** 
4698:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4700:FreeRTOS/src/tasks.c **** 
4701:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:FreeRTOS/src/tasks.c **** 
4703:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:FreeRTOS/src/tasks.c **** 	{
4705:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
4706:FreeRTOS/src/tasks.c **** 
4707:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4708:FreeRTOS/src/tasks.c **** 		{
4709:FreeRTOS/src/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:FreeRTOS/src/tasks.c **** 			{
4712:FreeRTOS/src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:FreeRTOS/src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:FreeRTOS/src/tasks.c **** 				clear the value to zero. */
4715:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:FreeRTOS/src/tasks.c **** 
4717:FreeRTOS/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:FreeRTOS/src/tasks.c **** 
4720:FreeRTOS/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:FreeRTOS/src/tasks.c **** 				{
4722:FreeRTOS/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:FreeRTOS/src/tasks.c **** 
4725:FreeRTOS/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:FreeRTOS/src/tasks.c **** 					section (some will yield immediately, others wait until the
4727:FreeRTOS/src/tasks.c **** 					critical section exits) - but it is not something that
4728:FreeRTOS/src/tasks.c **** 					application code should ever do. */
4729:FreeRTOS/src/tasks.c **** 					portYIELD_WITHIN_API();
4730:FreeRTOS/src/tasks.c **** 				}
4731:FreeRTOS/src/tasks.c **** 				else
4732:FreeRTOS/src/tasks.c **** 				{
4733:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:FreeRTOS/src/tasks.c **** 				}
4735:FreeRTOS/src/tasks.c **** 			}
4736:FreeRTOS/src/tasks.c **** 			else
4737:FreeRTOS/src/tasks.c **** 			{
4738:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:FreeRTOS/src/tasks.c **** 			}
4740:FreeRTOS/src/tasks.c **** 		}
4741:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4742:FreeRTOS/src/tasks.c **** 
4743:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4744:FreeRTOS/src/tasks.c **** 		{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 100


4745:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:FreeRTOS/src/tasks.c **** 
4747:FreeRTOS/src/tasks.c **** 			if( pulNotificationValue != NULL )
4748:FreeRTOS/src/tasks.c **** 			{
4749:FreeRTOS/src/tasks.c **** 				/* Output the current notification value, which may or may not
4750:FreeRTOS/src/tasks.c **** 				have changed. */
4751:FreeRTOS/src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:FreeRTOS/src/tasks.c **** 			}
4753:FreeRTOS/src/tasks.c **** 
4754:FreeRTOS/src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:FreeRTOS/src/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:FreeRTOS/src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:FreeRTOS/src/tasks.c **** 			unblocked because of a timeout. */
4758:FreeRTOS/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:FreeRTOS/src/tasks.c **** 			{
4760:FreeRTOS/src/tasks.c **** 				/* A notification was not received. */
4761:FreeRTOS/src/tasks.c **** 				xReturn = pdFALSE;
4762:FreeRTOS/src/tasks.c **** 			}
4763:FreeRTOS/src/tasks.c **** 			else
4764:FreeRTOS/src/tasks.c **** 			{
4765:FreeRTOS/src/tasks.c **** 				/* A notification was already pending or a notification was
4766:FreeRTOS/src/tasks.c **** 				received while the task was waiting. */
4767:FreeRTOS/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
4769:FreeRTOS/src/tasks.c **** 			}
4770:FreeRTOS/src/tasks.c **** 
4771:FreeRTOS/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:FreeRTOS/src/tasks.c **** 		}
4773:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4774:FreeRTOS/src/tasks.c **** 
4775:FreeRTOS/src/tasks.c **** 		return xReturn;
4776:FreeRTOS/src/tasks.c **** 	}
4777:FreeRTOS/src/tasks.c **** 
4778:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4780:FreeRTOS/src/tasks.c **** 
4781:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:FreeRTOS/src/tasks.c **** 
4783:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:FreeRTOS/src/tasks.c **** 	{
4785:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
4786:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:FreeRTOS/src/tasks.c **** 
4789:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
4790:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
4791:FreeRTOS/src/tasks.c **** 
4792:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
4793:FreeRTOS/src/tasks.c **** 		{
4794:FreeRTOS/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:FreeRTOS/src/tasks.c **** 			{
4796:FreeRTOS/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:FreeRTOS/src/tasks.c **** 			}
4798:FreeRTOS/src/tasks.c **** 
4799:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:FreeRTOS/src/tasks.c **** 
4801:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 101


4802:FreeRTOS/src/tasks.c **** 
4803:FreeRTOS/src/tasks.c **** 			switch( eAction )
4804:FreeRTOS/src/tasks.c **** 			{
4805:FreeRTOS/src/tasks.c **** 				case eSetBits	:
4806:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:FreeRTOS/src/tasks.c **** 					break;
4808:FreeRTOS/src/tasks.c **** 
4809:FreeRTOS/src/tasks.c **** 				case eIncrement	:
4810:FreeRTOS/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:FreeRTOS/src/tasks.c **** 					break;
4812:FreeRTOS/src/tasks.c **** 
4813:FreeRTOS/src/tasks.c **** 				case eSetValueWithOverwrite	:
4814:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:FreeRTOS/src/tasks.c **** 					break;
4816:FreeRTOS/src/tasks.c **** 
4817:FreeRTOS/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:FreeRTOS/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:FreeRTOS/src/tasks.c **** 					{
4820:FreeRTOS/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:FreeRTOS/src/tasks.c **** 					}
4822:FreeRTOS/src/tasks.c **** 					else
4823:FreeRTOS/src/tasks.c **** 					{
4824:FreeRTOS/src/tasks.c **** 						/* The value could not be written to the task. */
4825:FreeRTOS/src/tasks.c **** 						xReturn = pdFAIL;
4826:FreeRTOS/src/tasks.c **** 					}
4827:FreeRTOS/src/tasks.c **** 					break;
4828:FreeRTOS/src/tasks.c **** 
4829:FreeRTOS/src/tasks.c **** 				case eNoAction:
4830:FreeRTOS/src/tasks.c **** 					/* The task is being notified without its notify value being
4831:FreeRTOS/src/tasks.c **** 					updated. */
4832:FreeRTOS/src/tasks.c **** 					break;
4833:FreeRTOS/src/tasks.c **** 
4834:FreeRTOS/src/tasks.c **** 				default:
4835:FreeRTOS/src/tasks.c **** 					/* Should not get here if all enums are handled.
4836:FreeRTOS/src/tasks.c **** 					Artificially force an assert by testing a value the
4837:FreeRTOS/src/tasks.c **** 					compiler can't assume is const. */
4838:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:FreeRTOS/src/tasks.c **** 
4840:FreeRTOS/src/tasks.c **** 					break;
4841:FreeRTOS/src/tasks.c **** 			}
4842:FreeRTOS/src/tasks.c **** 
4843:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY();
4844:FreeRTOS/src/tasks.c **** 
4845:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
4847:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:FreeRTOS/src/tasks.c **** 			{
4849:FreeRTOS/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:FreeRTOS/src/tasks.c **** 
4852:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
4853:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:FreeRTOS/src/tasks.c **** 
4855:FreeRTOS/src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:FreeRTOS/src/tasks.c **** 				{
4857:FreeRTOS/src/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 102


4859:FreeRTOS/src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:FreeRTOS/src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:FreeRTOS/src/tasks.c **** 					because it will automatically get reset to a new value when
4862:FreeRTOS/src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:FreeRTOS/src/tasks.c **** 					tickless idling is used it might be more important to enter
4864:FreeRTOS/src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:FreeRTOS/src/tasks.c **** 					earliest possible time. */
4867:FreeRTOS/src/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:FreeRTOS/src/tasks.c **** 				}
4869:FreeRTOS/src/tasks.c **** 				#endif
4870:FreeRTOS/src/tasks.c **** 
4871:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:FreeRTOS/src/tasks.c **** 				{
4873:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
4874:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
4875:FreeRTOS/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:FreeRTOS/src/tasks.c **** 				}
4877:FreeRTOS/src/tasks.c **** 				else
4878:FreeRTOS/src/tasks.c **** 				{
4879:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:FreeRTOS/src/tasks.c **** 				}
4881:FreeRTOS/src/tasks.c **** 			}
4882:FreeRTOS/src/tasks.c **** 			else
4883:FreeRTOS/src/tasks.c **** 			{
4884:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:FreeRTOS/src/tasks.c **** 			}
4886:FreeRTOS/src/tasks.c **** 		}
4887:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
4888:FreeRTOS/src/tasks.c **** 
4889:FreeRTOS/src/tasks.c **** 		return xReturn;
4890:FreeRTOS/src/tasks.c **** 	}
4891:FreeRTOS/src/tasks.c **** 
4892:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
4894:FreeRTOS/src/tasks.c **** 
4895:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:FreeRTOS/src/tasks.c **** 
4897:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:FreeRTOS/src/tasks.c **** 	{
4899:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
4900:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:FreeRTOS/src/tasks.c **** 
4904:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
4905:FreeRTOS/src/tasks.c **** 
4906:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 103


4916:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:FreeRTOS/src/tasks.c **** 		provided on the following link:
4921:FreeRTOS/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:FreeRTOS/src/tasks.c **** 
4924:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
4925:FreeRTOS/src/tasks.c **** 
4926:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:FreeRTOS/src/tasks.c **** 		{
4928:FreeRTOS/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:FreeRTOS/src/tasks.c **** 			{
4930:FreeRTOS/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:FreeRTOS/src/tasks.c **** 			}
4932:FreeRTOS/src/tasks.c **** 
4933:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:FreeRTOS/src/tasks.c **** 
4936:FreeRTOS/src/tasks.c **** 			switch( eAction )
4937:FreeRTOS/src/tasks.c **** 			{
4938:FreeRTOS/src/tasks.c **** 				case eSetBits	:
4939:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:FreeRTOS/src/tasks.c **** 					break;
4941:FreeRTOS/src/tasks.c **** 
4942:FreeRTOS/src/tasks.c **** 				case eIncrement	:
4943:FreeRTOS/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:FreeRTOS/src/tasks.c **** 					break;
4945:FreeRTOS/src/tasks.c **** 
4946:FreeRTOS/src/tasks.c **** 				case eSetValueWithOverwrite	:
4947:FreeRTOS/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:FreeRTOS/src/tasks.c **** 					break;
4949:FreeRTOS/src/tasks.c **** 
4950:FreeRTOS/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:FreeRTOS/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:FreeRTOS/src/tasks.c **** 					{
4953:FreeRTOS/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:FreeRTOS/src/tasks.c **** 					}
4955:FreeRTOS/src/tasks.c **** 					else
4956:FreeRTOS/src/tasks.c **** 					{
4957:FreeRTOS/src/tasks.c **** 						/* The value could not be written to the task. */
4958:FreeRTOS/src/tasks.c **** 						xReturn = pdFAIL;
4959:FreeRTOS/src/tasks.c **** 					}
4960:FreeRTOS/src/tasks.c **** 					break;
4961:FreeRTOS/src/tasks.c **** 
4962:FreeRTOS/src/tasks.c **** 				case eNoAction :
4963:FreeRTOS/src/tasks.c **** 					/* The task is being notified without its notify value being
4964:FreeRTOS/src/tasks.c **** 					updated. */
4965:FreeRTOS/src/tasks.c **** 					break;
4966:FreeRTOS/src/tasks.c **** 
4967:FreeRTOS/src/tasks.c **** 				default:
4968:FreeRTOS/src/tasks.c **** 					/* Should not get here if all enums are handled.
4969:FreeRTOS/src/tasks.c **** 					Artificially force an assert by testing a value the
4970:FreeRTOS/src/tasks.c **** 					compiler can't assume is const. */
4971:FreeRTOS/src/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:FreeRTOS/src/tasks.c **** 					break;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 104


4973:FreeRTOS/src/tasks.c **** 			}
4974:FreeRTOS/src/tasks.c **** 
4975:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:FreeRTOS/src/tasks.c **** 
4977:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
4979:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:FreeRTOS/src/tasks.c **** 			{
4981:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
4982:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:FreeRTOS/src/tasks.c **** 
4984:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:FreeRTOS/src/tasks.c **** 				{
4986:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:FreeRTOS/src/tasks.c **** 				}
4989:FreeRTOS/src/tasks.c **** 				else
4990:FreeRTOS/src/tasks.c **** 				{
4991:FreeRTOS/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:FreeRTOS/src/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:FreeRTOS/src/tasks.c **** 				}
4995:FreeRTOS/src/tasks.c **** 
4996:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:FreeRTOS/src/tasks.c **** 				{
4998:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
4999:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
5000:FreeRTOS/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:FreeRTOS/src/tasks.c **** 					{
5002:FreeRTOS/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:FreeRTOS/src/tasks.c **** 					}
5004:FreeRTOS/src/tasks.c **** 
5005:FreeRTOS/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:FreeRTOS/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:FreeRTOS/src/tasks.c **** 					safe FreeRTOS function. */
5008:FreeRTOS/src/tasks.c **** 					xYieldPending = pdTRUE;
5009:FreeRTOS/src/tasks.c **** 				}
5010:FreeRTOS/src/tasks.c **** 				else
5011:FreeRTOS/src/tasks.c **** 				{
5012:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:FreeRTOS/src/tasks.c **** 				}
5014:FreeRTOS/src/tasks.c **** 			}
5015:FreeRTOS/src/tasks.c **** 		}
5016:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:FreeRTOS/src/tasks.c **** 
5018:FreeRTOS/src/tasks.c **** 		return xReturn;
5019:FreeRTOS/src/tasks.c **** 	}
5020:FreeRTOS/src/tasks.c **** 
5021:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5023:FreeRTOS/src/tasks.c **** 
5024:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:FreeRTOS/src/tasks.c **** 
5026:FreeRTOS/src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:FreeRTOS/src/tasks.c **** 	{
5028:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
5029:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 105


5030:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:FreeRTOS/src/tasks.c **** 
5032:FreeRTOS/src/tasks.c **** 		configASSERT( xTaskToNotify );
5033:FreeRTOS/src/tasks.c **** 
5034:FreeRTOS/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:FreeRTOS/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:FreeRTOS/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:FreeRTOS/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:FreeRTOS/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:FreeRTOS/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:FreeRTOS/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:FreeRTOS/src/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:FreeRTOS/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:FreeRTOS/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:FreeRTOS/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:FreeRTOS/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:FreeRTOS/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:FreeRTOS/src/tasks.c **** 		provided on the following link:
5049:FreeRTOS/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:FreeRTOS/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:FreeRTOS/src/tasks.c **** 
5052:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
5053:FreeRTOS/src/tasks.c **** 
5054:FreeRTOS/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:FreeRTOS/src/tasks.c **** 		{
5056:FreeRTOS/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:FreeRTOS/src/tasks.c **** 
5059:FreeRTOS/src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:FreeRTOS/src/tasks.c **** 			semaphore. */
5061:FreeRTOS/src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:FreeRTOS/src/tasks.c **** 
5063:FreeRTOS/src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:FreeRTOS/src/tasks.c **** 
5065:FreeRTOS/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:FreeRTOS/src/tasks.c **** 			notification then unblock it now. */
5067:FreeRTOS/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:FreeRTOS/src/tasks.c **** 			{
5069:FreeRTOS/src/tasks.c **** 				/* The task should not have been on an event list. */
5070:FreeRTOS/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:FreeRTOS/src/tasks.c **** 
5072:FreeRTOS/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:FreeRTOS/src/tasks.c **** 				{
5074:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:FreeRTOS/src/tasks.c **** 				}
5077:FreeRTOS/src/tasks.c **** 				else
5078:FreeRTOS/src/tasks.c **** 				{
5079:FreeRTOS/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:FreeRTOS/src/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:FreeRTOS/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:FreeRTOS/src/tasks.c **** 				}
5083:FreeRTOS/src/tasks.c **** 
5084:FreeRTOS/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:FreeRTOS/src/tasks.c **** 				{
5086:FreeRTOS/src/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 106


5087:FreeRTOS/src/tasks.c **** 					executing task so a yield is required. */
5088:FreeRTOS/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:FreeRTOS/src/tasks.c **** 					{
5090:FreeRTOS/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:FreeRTOS/src/tasks.c **** 					}
5092:FreeRTOS/src/tasks.c **** 
5093:FreeRTOS/src/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:FreeRTOS/src/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:FreeRTOS/src/tasks.c **** 					safe FreeRTOS function. */
5096:FreeRTOS/src/tasks.c **** 					xYieldPending = pdTRUE;
5097:FreeRTOS/src/tasks.c **** 				}
5098:FreeRTOS/src/tasks.c **** 				else
5099:FreeRTOS/src/tasks.c **** 				{
5100:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:FreeRTOS/src/tasks.c **** 				}
5102:FreeRTOS/src/tasks.c **** 			}
5103:FreeRTOS/src/tasks.c **** 		}
5104:FreeRTOS/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:FreeRTOS/src/tasks.c **** 	}
5106:FreeRTOS/src/tasks.c **** 
5107:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5109:FreeRTOS/src/tasks.c **** 
5110:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:FreeRTOS/src/tasks.c **** 
5112:FreeRTOS/src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:FreeRTOS/src/tasks.c **** 	{
5114:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
5115:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
5116:FreeRTOS/src/tasks.c **** 
5117:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:FreeRTOS/src/tasks.c **** 		its notification state cleared. */
5119:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:FreeRTOS/src/tasks.c **** 
5121:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
5122:FreeRTOS/src/tasks.c **** 		{
5123:FreeRTOS/src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:FreeRTOS/src/tasks.c **** 			{
5125:FreeRTOS/src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
5127:FreeRTOS/src/tasks.c **** 			}
5128:FreeRTOS/src/tasks.c **** 			else
5129:FreeRTOS/src/tasks.c **** 			{
5130:FreeRTOS/src/tasks.c **** 				xReturn = pdFAIL;
5131:FreeRTOS/src/tasks.c **** 			}
5132:FreeRTOS/src/tasks.c **** 		}
5133:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
5134:FreeRTOS/src/tasks.c **** 
5135:FreeRTOS/src/tasks.c **** 		return xReturn;
5136:FreeRTOS/src/tasks.c **** 	}
5137:FreeRTOS/src/tasks.c **** 
5138:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5140:FreeRTOS/src/tasks.c **** 
5141:FreeRTOS/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:FreeRTOS/src/tasks.c **** 
5143:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 107


5144:FreeRTOS/src/tasks.c **** 	{
5145:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
5146:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
5147:FreeRTOS/src/tasks.c **** 
5148:FreeRTOS/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:FreeRTOS/src/tasks.c **** 		its notification state cleared. */
5150:FreeRTOS/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:FreeRTOS/src/tasks.c **** 
5152:FreeRTOS/src/tasks.c **** 		taskENTER_CRITICAL();
5153:FreeRTOS/src/tasks.c **** 		{
5154:FreeRTOS/src/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:FreeRTOS/src/tasks.c **** 			then clear the bit mask. */
5156:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:FreeRTOS/src/tasks.c **** 		}
5159:FreeRTOS/src/tasks.c **** 		taskEXIT_CRITICAL();
5160:FreeRTOS/src/tasks.c **** 
5161:FreeRTOS/src/tasks.c **** 		return ulReturn;
5162:FreeRTOS/src/tasks.c **** 	}
5163:FreeRTOS/src/tasks.c **** 
5164:FreeRTOS/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5166:FreeRTOS/src/tasks.c **** 
5167:FreeRTOS/src/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:FreeRTOS/src/tasks.c **** 
5169:FreeRTOS/src/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:FreeRTOS/src/tasks.c **** 	{
5171:FreeRTOS/src/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:FreeRTOS/src/tasks.c **** 	}
5173:FreeRTOS/src/tasks.c **** 
5174:FreeRTOS/src/tasks.c **** #endif
5175:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
5176:FreeRTOS/src/tasks.c **** 
5177:FreeRTOS/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:FreeRTOS/src/tasks.c **** {
 745              		.loc 1 5178 1 view -0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		.loc 1 5178 1 is_stmt 0 view .LVU204
 750 0000 70B5     		push	{r4, r5, r6, lr}
 751              	.LCFI7:
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 4, -16
 754              		.cfi_offset 5, -12
 755              		.cfi_offset 6, -8
 756              		.cfi_offset 14, -4
 757 0002 0446     		mov	r4, r0
 758 0004 0E46     		mov	r6, r1
5179:FreeRTOS/src/tasks.c **** TickType_t xTimeToWake;
 759              		.loc 1 5179 1 is_stmt 1 view .LVU205
5180:FreeRTOS/src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 760              		.loc 1 5180 1 view .LVU206
 761              		.loc 1 5180 18 is_stmt 0 view .LVU207
 762 0006 1D4B     		ldr	r3, .L67
 763 0008 1D68     		ldr	r5, [r3]
 764              	.LVL57:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 108


5181:FreeRTOS/src/tasks.c **** 
5182:FreeRTOS/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:FreeRTOS/src/tasks.c **** 	{
5184:FreeRTOS/src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:FreeRTOS/src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:FreeRTOS/src/tasks.c **** 		when the task leaves the Blocked state. */
5187:FreeRTOS/src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:FreeRTOS/src/tasks.c **** 	}
5189:FreeRTOS/src/tasks.c **** 	#endif
5190:FreeRTOS/src/tasks.c **** 
5191:FreeRTOS/src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:FreeRTOS/src/tasks.c **** 	as the same list item is used for both lists. */
5193:FreeRTOS/src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 765              		.loc 1 5193 2 is_stmt 1 view .LVU208
 766              		.loc 1 5193 35 is_stmt 0 view .LVU209
 767 000a 1D4B     		ldr	r3, .L67+4
 768 000c 1868     		ldr	r0, [r3]
 769              	.LVL58:
 770              		.loc 1 5193 6 view .LVU210
 771 000e 0430     		adds	r0, r0, #4
 772 0010 FFF7FEFF 		bl	uxListRemove
 773              	.LVL59:
 774              		.loc 1 5193 4 view .LVU211
 775 0014 50B9     		cbnz	r0, .L61
5194:FreeRTOS/src/tasks.c **** 	{
5195:FreeRTOS/src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:FreeRTOS/src/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:FreeRTOS/src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 776              		.loc 1 5197 3 is_stmt 1 view .LVU212
 777 0016 1A4B     		ldr	r3, .L67+4
 778 0018 1B68     		ldr	r3, [r3]
 779 001a DA6A     		ldr	r2, [r3, #44]
 780 001c 0123     		movs	r3, #1
 781 001e 03FA02F2 		lsl	r2, r3, r2
 782 0022 1849     		ldr	r1, .L67+8
 783 0024 0B68     		ldr	r3, [r1]
 784 0026 23EA0203 		bic	r3, r3, r2
 785 002a 0B60     		str	r3, [r1]
 786              	.L61:
5198:FreeRTOS/src/tasks.c **** 	}
5199:FreeRTOS/src/tasks.c **** 	else
5200:FreeRTOS/src/tasks.c **** 	{
5201:FreeRTOS/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 787              		.loc 1 5201 27 view .LVU213
5202:FreeRTOS/src/tasks.c **** 	}
5203:FreeRTOS/src/tasks.c **** 
5204:FreeRTOS/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:FreeRTOS/src/tasks.c **** 	{
5206:FreeRTOS/src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 788              		.loc 1 5206 3 view .LVU214
 789              		.loc 1 5206 5 is_stmt 0 view .LVU215
 790 002c B4F1FF3F 		cmp	r4, #-1
 791 0030 0DD0     		beq	.L66
 792              	.L62:
5207:FreeRTOS/src/tasks.c **** 		{
5208:FreeRTOS/src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:FreeRTOS/src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 109


5210:FreeRTOS/src/tasks.c **** 			indefinitely. */
5211:FreeRTOS/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:FreeRTOS/src/tasks.c **** 		}
5213:FreeRTOS/src/tasks.c **** 		else
5214:FreeRTOS/src/tasks.c **** 		{
5215:FreeRTOS/src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:FreeRTOS/src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:FreeRTOS/src/tasks.c **** 			kernel will manage it correctly. */
5218:FreeRTOS/src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 793              		.loc 1 5218 4 is_stmt 1 view .LVU216
 794              		.loc 1 5218 16 is_stmt 0 view .LVU217
 795 0032 2C44     		add	r4, r4, r5
 796              	.LVL60:
5219:FreeRTOS/src/tasks.c **** 
5220:FreeRTOS/src/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:FreeRTOS/src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 797              		.loc 1 5221 4 is_stmt 1 view .LVU218
 798 0034 124B     		ldr	r3, .L67+4
 799 0036 1B68     		ldr	r3, [r3]
 800 0038 5C60     		str	r4, [r3, #4]
5222:FreeRTOS/src/tasks.c **** 
5223:FreeRTOS/src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 801              		.loc 1 5223 4 view .LVU219
 802              		.loc 1 5223 6 is_stmt 0 view .LVU220
 803 003a A542     		cmp	r5, r4
 804 003c 10D9     		bls	.L64
5224:FreeRTOS/src/tasks.c **** 			{
5225:FreeRTOS/src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:FreeRTOS/src/tasks.c **** 				list. */
5227:FreeRTOS/src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 805              		.loc 1 5227 5 is_stmt 1 view .LVU221
 806 003e 124B     		ldr	r3, .L67+12
 807 0040 1868     		ldr	r0, [r3]
 808              		.loc 1 5227 60 is_stmt 0 view .LVU222
 809 0042 0F4B     		ldr	r3, .L67+4
 810 0044 1968     		ldr	r1, [r3]
 811              		.loc 1 5227 5 view .LVU223
 812 0046 0431     		adds	r1, r1, #4
 813 0048 FFF7FEFF 		bl	vListInsert
 814              	.LVL61:
 815              	.L60:
5228:FreeRTOS/src/tasks.c **** 			}
5229:FreeRTOS/src/tasks.c **** 			else
5230:FreeRTOS/src/tasks.c **** 			{
5231:FreeRTOS/src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:FreeRTOS/src/tasks.c **** 				is used. */
5233:FreeRTOS/src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:FreeRTOS/src/tasks.c **** 
5235:FreeRTOS/src/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:FreeRTOS/src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:FreeRTOS/src/tasks.c **** 				needs to be updated too. */
5238:FreeRTOS/src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:FreeRTOS/src/tasks.c **** 				{
5240:FreeRTOS/src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:FreeRTOS/src/tasks.c **** 				}
5242:FreeRTOS/src/tasks.c **** 				else
5243:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 110


5244:FreeRTOS/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:FreeRTOS/src/tasks.c **** 				}
5246:FreeRTOS/src/tasks.c **** 			}
5247:FreeRTOS/src/tasks.c **** 		}
5248:FreeRTOS/src/tasks.c **** 	}
5249:FreeRTOS/src/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:FreeRTOS/src/tasks.c **** 	{
5251:FreeRTOS/src/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:FreeRTOS/src/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:FreeRTOS/src/tasks.c **** 		will manage it correctly. */
5254:FreeRTOS/src/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:FreeRTOS/src/tasks.c **** 
5256:FreeRTOS/src/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:FreeRTOS/src/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:FreeRTOS/src/tasks.c **** 
5259:FreeRTOS/src/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:FreeRTOS/src/tasks.c **** 		{
5261:FreeRTOS/src/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:FreeRTOS/src/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:FreeRTOS/src/tasks.c **** 		}
5264:FreeRTOS/src/tasks.c **** 		else
5265:FreeRTOS/src/tasks.c **** 		{
5266:FreeRTOS/src/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:FreeRTOS/src/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:FreeRTOS/src/tasks.c **** 
5269:FreeRTOS/src/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:FreeRTOS/src/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:FreeRTOS/src/tasks.c **** 			too. */
5272:FreeRTOS/src/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:FreeRTOS/src/tasks.c **** 			{
5274:FreeRTOS/src/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:FreeRTOS/src/tasks.c **** 			}
5276:FreeRTOS/src/tasks.c **** 			else
5277:FreeRTOS/src/tasks.c **** 			{
5278:FreeRTOS/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:FreeRTOS/src/tasks.c **** 			}
5280:FreeRTOS/src/tasks.c **** 		}
5281:FreeRTOS/src/tasks.c **** 
5282:FreeRTOS/src/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:FreeRTOS/src/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:FreeRTOS/src/tasks.c **** 	}
5285:FreeRTOS/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:FreeRTOS/src/tasks.c **** }
 816              		.loc 1 5286 1 view .LVU224
 817 004c 70BD     		pop	{r4, r5, r6, pc}
 818              	.LVL62:
 819              	.L66:
5206:FreeRTOS/src/tasks.c **** 		{
 820              		.loc 1 5206 41 discriminator 1 view .LVU225
 821 004e 002E     		cmp	r6, #0
 822 0050 EFD0     		beq	.L62
5211:FreeRTOS/src/tasks.c **** 		}
 823              		.loc 1 5211 4 is_stmt 1 view .LVU226
5211:FreeRTOS/src/tasks.c **** 		}
 824              		.loc 1 5211 56 is_stmt 0 view .LVU227
 825 0052 0B4B     		ldr	r3, .L67+4
 826 0054 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 111


5211:FreeRTOS/src/tasks.c **** 		}
 827              		.loc 1 5211 4 view .LVU228
 828 0056 0431     		adds	r1, r1, #4
 829 0058 0C48     		ldr	r0, .L67+16
 830 005a FFF7FEFF 		bl	vListInsertEnd
 831              	.LVL63:
 832 005e F5E7     		b	.L60
 833              	.LVL64:
 834              	.L64:
5233:FreeRTOS/src/tasks.c **** 
 835              		.loc 1 5233 5 is_stmt 1 view .LVU229
 836 0060 0B4B     		ldr	r3, .L67+20
 837 0062 1868     		ldr	r0, [r3]
5233:FreeRTOS/src/tasks.c **** 
 838              		.loc 1 5233 52 is_stmt 0 view .LVU230
 839 0064 064B     		ldr	r3, .L67+4
 840 0066 1968     		ldr	r1, [r3]
5233:FreeRTOS/src/tasks.c **** 
 841              		.loc 1 5233 5 view .LVU231
 842 0068 0431     		adds	r1, r1, #4
 843 006a FFF7FEFF 		bl	vListInsert
 844              	.LVL65:
5238:FreeRTOS/src/tasks.c **** 				{
 845              		.loc 1 5238 5 is_stmt 1 view .LVU232
5238:FreeRTOS/src/tasks.c **** 				{
 846              		.loc 1 5238 21 is_stmt 0 view .LVU233
 847 006e 094B     		ldr	r3, .L67+24
 848 0070 1B68     		ldr	r3, [r3]
5238:FreeRTOS/src/tasks.c **** 				{
 849              		.loc 1 5238 7 view .LVU234
 850 0072 A342     		cmp	r3, r4
 851 0074 EAD9     		bls	.L60
5240:FreeRTOS/src/tasks.c **** 				}
 852              		.loc 1 5240 6 is_stmt 1 view .LVU235
5240:FreeRTOS/src/tasks.c **** 				}
 853              		.loc 1 5240 27 is_stmt 0 view .LVU236
 854 0076 074B     		ldr	r3, .L67+24
 855 0078 1C60     		str	r4, [r3]
5244:FreeRTOS/src/tasks.c **** 				}
 856              		.loc 1 5244 30 is_stmt 1 view .LVU237
 857              		.loc 1 5286 1 is_stmt 0 view .LVU238
 858 007a E7E7     		b	.L60
 859              	.L68:
 860              		.align	2
 861              	.L67:
 862 007c 00000000 		.word	.LANCHOR15
 863 0080 00000000 		.word	.LANCHOR10
 864 0084 00000000 		.word	.LANCHOR13
 865 0088 00000000 		.word	.LANCHOR8
 866 008c 00000000 		.word	.LANCHOR0
 867 0090 00000000 		.word	.LANCHOR2
 868 0094 00000000 		.word	.LANCHOR3
 869              		.cfi_endproc
 870              	.LFE120:
 872              		.section	.text.xTaskCreate,"ax",%progbits
 873              		.align	1
 874              		.global	xTaskCreate
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 112


 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu softvfp
 880              	xTaskCreate:
 881              	.LVL66:
 882              	.LFB70:
 739:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 883              		.loc 1 739 2 is_stmt 1 view -0
 884              		.cfi_startproc
 885              		@ args = 8, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 739:FreeRTOS/src/tasks.c **** 	TCB_t *pxNewTCB;
 887              		.loc 1 739 2 is_stmt 0 view .LVU240
 888 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 889              	.LCFI8:
 890              		.cfi_def_cfa_offset 28
 891              		.cfi_offset 4, -28
 892              		.cfi_offset 5, -24
 893              		.cfi_offset 6, -20
 894              		.cfi_offset 7, -16
 895              		.cfi_offset 8, -12
 896              		.cfi_offset 9, -8
 897              		.cfi_offset 14, -4
 898 0004 85B0     		sub	sp, sp, #20
 899              	.LCFI9:
 900              		.cfi_def_cfa_offset 48
 901 0006 0746     		mov	r7, r0
 902 0008 8846     		mov	r8, r1
 903 000a 1446     		mov	r4, r2
 904 000c 9946     		mov	r9, r3
 740:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 905              		.loc 1 740 2 is_stmt 1 view .LVU241
 741:FreeRTOS/src/tasks.c **** 
 906              		.loc 1 741 2 view .LVU242
 907              	.LBB28:
 770:FreeRTOS/src/tasks.c **** 
 908              		.loc 1 770 3 view .LVU243
 773:FreeRTOS/src/tasks.c **** 
 909              		.loc 1 773 4 view .LVU244
 773:FreeRTOS/src/tasks.c **** 
 910              		.loc 1 773 14 is_stmt 0 view .LVU245
 911 000e 9000     		lsls	r0, r2, #2
 912              	.LVL67:
 773:FreeRTOS/src/tasks.c **** 
 913              		.loc 1 773 14 view .LVU246
 914 0010 FFF7FEFF 		bl	pvPortMalloc
 915              	.LVL68:
 775:FreeRTOS/src/tasks.c **** 			{
 916              		.loc 1 775 4 is_stmt 1 view .LVU247
 775:FreeRTOS/src/tasks.c **** 			{
 917              		.loc 1 775 6 is_stmt 0 view .LVU248
 918 0014 E8B1     		cbz	r0, .L73
 919 0016 0646     		mov	r6, r0
 778:FreeRTOS/src/tasks.c **** 
 920              		.loc 1 778 5 is_stmt 1 view .LVU249
 778:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 113


 921              		.loc 1 778 28 is_stmt 0 view .LVU250
 922 0018 5420     		movs	r0, #84
 923              	.LVL69:
 778:FreeRTOS/src/tasks.c **** 
 924              		.loc 1 778 28 view .LVU251
 925 001a FFF7FEFF 		bl	pvPortMalloc
 926              	.LVL70:
 780:FreeRTOS/src/tasks.c **** 				{
 927              		.loc 1 780 5 is_stmt 1 view .LVU252
 780:FreeRTOS/src/tasks.c **** 				{
 928              		.loc 1 780 7 is_stmt 0 view .LVU253
 929 001e 0546     		mov	r5, r0
 930 0020 98B1     		cbz	r0, .L71
 783:FreeRTOS/src/tasks.c **** 				}
 931              		.loc 1 783 6 is_stmt 1 view .LVU254
 783:FreeRTOS/src/tasks.c **** 				}
 932              		.loc 1 783 24 is_stmt 0 view .LVU255
 933 0022 0663     		str	r6, [r0, #48]
 934              	.LVL71:
 935              	.L72:
 783:FreeRTOS/src/tasks.c **** 				}
 936              		.loc 1 783 24 view .LVU256
 937              	.LBE28:
 799:FreeRTOS/src/tasks.c **** 		{
 938              		.loc 1 799 3 is_stmt 1 view .LVU257
 799:FreeRTOS/src/tasks.c **** 		{
 939              		.loc 1 799 5 is_stmt 0 view .LVU258
 940 0024 D5B1     		cbz	r5, .L74
 809:FreeRTOS/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 941              		.loc 1 809 4 is_stmt 1 view .LVU259
 942 0026 0023     		movs	r3, #0
 943 0028 0393     		str	r3, [sp, #12]
 944 002a 0295     		str	r5, [sp, #8]
 945 002c 0D9B     		ldr	r3, [sp, #52]
 946 002e 0193     		str	r3, [sp, #4]
 947 0030 0C9B     		ldr	r3, [sp, #48]
 948 0032 0093     		str	r3, [sp]
 949 0034 4B46     		mov	r3, r9
 950 0036 2246     		mov	r2, r4
 951 0038 4146     		mov	r1, r8
 952 003a 3846     		mov	r0, r7
 953 003c FFF7FEFF 		bl	prvInitialiseNewTask
 954              	.LVL72:
 810:FreeRTOS/src/tasks.c **** 			xReturn = pdPASS;
 955              		.loc 1 810 4 view .LVU260
 956 0040 2846     		mov	r0, r5
 957 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 958              	.LVL73:
 811:FreeRTOS/src/tasks.c **** 		}
 959              		.loc 1 811 4 view .LVU261
 811:FreeRTOS/src/tasks.c **** 		}
 960              		.loc 1 811 12 is_stmt 0 view .LVU262
 961 0046 0120     		movs	r0, #1
 962 0048 05E0     		b	.L69
 963              	.LVL74:
 964              	.L71:
 965              	.LBB29:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 114


 789:FreeRTOS/src/tasks.c **** 				}
 966              		.loc 1 789 6 is_stmt 1 view .LVU263
 967 004a 3046     		mov	r0, r6
 968              	.LVL75:
 789:FreeRTOS/src/tasks.c **** 				}
 969              		.loc 1 789 6 is_stmt 0 view .LVU264
 970 004c FFF7FEFF 		bl	vPortFree
 971              	.LVL76:
 972 0050 E8E7     		b	.L72
 973              	.LVL77:
 974              	.L73:
 789:FreeRTOS/src/tasks.c **** 				}
 975              		.loc 1 789 6 view .LVU265
 976              	.LBE29:
 815:FreeRTOS/src/tasks.c **** 		}
 977              		.loc 1 815 12 view .LVU266
 978 0052 4FF0FF30 		mov	r0, #-1
 979              	.LVL78:
 980              	.L69:
 819:FreeRTOS/src/tasks.c **** 
 981              		.loc 1 819 2 view .LVU267
 982 0056 05B0     		add	sp, sp, #20
 983              	.LCFI10:
 984              		.cfi_remember_state
 985              		.cfi_def_cfa_offset 28
 986              		@ sp needed
 987 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 988              	.LVL79:
 989              	.L74:
 990              	.LCFI11:
 991              		.cfi_restore_state
 815:FreeRTOS/src/tasks.c **** 		}
 992              		.loc 1 815 12 view .LVU268
 993 005c 4FF0FF30 		mov	r0, #-1
 994              	.LVL80:
 818:FreeRTOS/src/tasks.c **** 	}
 995              		.loc 1 818 3 is_stmt 1 view .LVU269
 818:FreeRTOS/src/tasks.c **** 	}
 996              		.loc 1 818 10 is_stmt 0 view .LVU270
 997 0060 F9E7     		b	.L69
 998              		.cfi_endproc
 999              	.LFE70:
 1001              		.section	.text.vTaskDelete,"ax",%progbits
 1002              		.align	1
 1003              		.global	vTaskDelete
 1004              		.syntax unified
 1005              		.thumb
 1006              		.thumb_func
 1007              		.fpu softvfp
 1009              	vTaskDelete:
 1010              	.LVL81:
 1011              	.LFB73:
1163:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1012              		.loc 1 1163 2 is_stmt 1 view -0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 115


1163:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1016              		.loc 1 1163 2 is_stmt 0 view .LVU272
 1017 0000 38B5     		push	{r3, r4, r5, lr}
 1018              	.LCFI12:
 1019              		.cfi_def_cfa_offset 16
 1020              		.cfi_offset 3, -16
 1021              		.cfi_offset 4, -12
 1022              		.cfi_offset 5, -8
 1023              		.cfi_offset 14, -4
 1024 0002 0446     		mov	r4, r0
1164:FreeRTOS/src/tasks.c **** 
 1025              		.loc 1 1164 2 is_stmt 1 view .LVU273
1166:FreeRTOS/src/tasks.c **** 		{
 1026              		.loc 1 1166 3 view .LVU274
 1027 0004 FFF7FEFF 		bl	vPortEnterCritical
 1028              	.LVL82:
1170:FreeRTOS/src/tasks.c **** 
 1029              		.loc 1 1170 4 view .LVU275
1170:FreeRTOS/src/tasks.c **** 
 1030              		.loc 1 1170 12 is_stmt 0 view .LVU276
 1031 0008 002C     		cmp	r4, #0
 1032 000a 33D0     		beq	.L84
 1033              	.LVL83:
 1034              	.L77:
1173:FreeRTOS/src/tasks.c **** 			{
 1035              		.loc 1 1173 4 is_stmt 1 discriminator 4 view .LVU277
1173:FreeRTOS/src/tasks.c **** 			{
 1036              		.loc 1 1173 8 is_stmt 0 discriminator 4 view .LVU278
 1037 000c 251D     		adds	r5, r4, #4
 1038 000e 2846     		mov	r0, r5
 1039 0010 FFF7FEFF 		bl	uxListRemove
 1040              	.LVL84:
1173:FreeRTOS/src/tasks.c **** 			{
 1041              		.loc 1 1173 6 discriminator 4 view .LVU279
 1042 0014 68B9     		cbnz	r0, .L78
1175:FreeRTOS/src/tasks.c **** 			}
 1043              		.loc 1 1175 5 is_stmt 1 view .LVU280
 1044 0016 E36A     		ldr	r3, [r4, #44]
 1045 0018 03EB8301 		add	r1, r3, r3, lsl #2
 1046 001c 8A00     		lsls	r2, r1, #2
 1047 001e 2049     		ldr	r1, .L87
 1048 0020 8A58     		ldr	r2, [r1, r2]
 1049 0022 32B9     		cbnz	r2, .L78
1175:FreeRTOS/src/tasks.c **** 			}
 1050              		.loc 1 1175 5 discriminator 1 view .LVU281
 1051 0024 0122     		movs	r2, #1
 1052 0026 9A40     		lsls	r2, r2, r3
 1053 0028 1E49     		ldr	r1, .L87+4
 1054 002a 0B68     		ldr	r3, [r1]
 1055 002c 23EA0203 		bic	r3, r3, r2
 1056 0030 0B60     		str	r3, [r1]
 1057              	.L78:
1179:FreeRTOS/src/tasks.c **** 			}
 1058              		.loc 1 1179 29 view .LVU282
1183:FreeRTOS/src/tasks.c **** 			{
 1059              		.loc 1 1183 4 view .LVU283
1183:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 116


 1060              		.loc 1 1183 8 is_stmt 0 view .LVU284
 1061 0032 A36A     		ldr	r3, [r4, #40]
1183:FreeRTOS/src/tasks.c **** 			{
 1062              		.loc 1 1183 6 view .LVU285
 1063 0034 1BB1     		cbz	r3, .L79
1185:FreeRTOS/src/tasks.c **** 			}
 1064              		.loc 1 1185 5 is_stmt 1 view .LVU286
1185:FreeRTOS/src/tasks.c **** 			}
 1065              		.loc 1 1185 14 is_stmt 0 view .LVU287
 1066 0036 04F11800 		add	r0, r4, #24
 1067 003a FFF7FEFF 		bl	uxListRemove
 1068              	.LVL85:
 1069              	.L79:
1189:FreeRTOS/src/tasks.c **** 			}
 1070              		.loc 1 1189 29 is_stmt 1 view .LVU288
1196:FreeRTOS/src/tasks.c **** 
 1071              		.loc 1 1196 4 view .LVU289
1196:FreeRTOS/src/tasks.c **** 
 1072              		.loc 1 1196 16 is_stmt 0 view .LVU290
 1073 003e 1A4A     		ldr	r2, .L87+8
 1074 0040 1368     		ldr	r3, [r2]
 1075 0042 0133     		adds	r3, r3, #1
 1076 0044 1360     		str	r3, [r2]
1198:FreeRTOS/src/tasks.c **** 			{
 1077              		.loc 1 1198 4 is_stmt 1 view .LVU291
1198:FreeRTOS/src/tasks.c **** 			{
 1078              		.loc 1 1198 14 is_stmt 0 view .LVU292
 1079 0046 194B     		ldr	r3, .L87+12
 1080 0048 1B68     		ldr	r3, [r3]
1198:FreeRTOS/src/tasks.c **** 			{
 1081              		.loc 1 1198 6 view .LVU293
 1082 004a A342     		cmp	r3, r4
 1083 004c 15D0     		beq	.L85
1225:FreeRTOS/src/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1084              		.loc 1 1225 5 is_stmt 1 view .LVU294
 1085 004e 184A     		ldr	r2, .L87+16
 1086 0050 1368     		ldr	r3, [r2]
 1087 0052 013B     		subs	r3, r3, #1
 1088 0054 1360     		str	r3, [r2]
1226:FreeRTOS/src/tasks.c **** 				prvDeleteTCB( pxTCB );
 1089              		.loc 1 1226 30 view .LVU295
1227:FreeRTOS/src/tasks.c **** 
 1090              		.loc 1 1227 5 view .LVU296
 1091 0056 2046     		mov	r0, r4
 1092 0058 FFF7FEFF 		bl	prvDeleteTCB
 1093              	.LVL86:
1231:FreeRTOS/src/tasks.c **** 			}
 1094              		.loc 1 1231 5 view .LVU297
 1095 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1096              	.LVL87:
 1097              	.L81:
1234:FreeRTOS/src/tasks.c **** 
 1098              		.loc 1 1234 3 view .LVU298
 1099 0060 FFF7FEFF 		bl	vPortExitCritical
 1100              	.LVL88:
1238:FreeRTOS/src/tasks.c **** 		{
 1101              		.loc 1 1238 3 view .LVU299
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 117


1238:FreeRTOS/src/tasks.c **** 		{
 1102              		.loc 1 1238 25 is_stmt 0 view .LVU300
 1103 0064 134B     		ldr	r3, .L87+20
 1104 0066 1B68     		ldr	r3, [r3]
1238:FreeRTOS/src/tasks.c **** 		{
 1105              		.loc 1 1238 5 view .LVU301
 1106 0068 1BB1     		cbz	r3, .L76
1240:FreeRTOS/src/tasks.c **** 			{
 1107              		.loc 1 1240 4 is_stmt 1 view .LVU302
1240:FreeRTOS/src/tasks.c **** 			{
 1108              		.loc 1 1240 14 is_stmt 0 view .LVU303
 1109 006a 104B     		ldr	r3, .L87+12
 1110 006c 1B68     		ldr	r3, [r3]
1240:FreeRTOS/src/tasks.c **** 			{
 1111              		.loc 1 1240 6 view .LVU304
 1112 006e A342     		cmp	r3, r4
 1113 0070 0CD0     		beq	.L86
 1114              	.L76:
1250:FreeRTOS/src/tasks.c **** 
 1115              		.loc 1 1250 2 view .LVU305
 1116 0072 38BD     		pop	{r3, r4, r5, pc}
 1117              	.LVL89:
 1118              	.L84:
1170:FreeRTOS/src/tasks.c **** 
 1119              		.loc 1 1170 12 discriminator 1 view .LVU306
 1120 0074 0D4B     		ldr	r3, .L87+12
 1121 0076 1C68     		ldr	r4, [r3]
 1122              	.LVL90:
1170:FreeRTOS/src/tasks.c **** 
 1123              		.loc 1 1170 12 discriminator 1 view .LVU307
 1124 0078 C8E7     		b	.L77
 1125              	.LVL91:
 1126              	.L85:
1205:FreeRTOS/src/tasks.c **** 
 1127              		.loc 1 1205 5 is_stmt 1 view .LVU308
 1128 007a 2946     		mov	r1, r5
 1129 007c 0E48     		ldr	r0, .L87+24
 1130 007e FFF7FEFF 		bl	vListInsertEnd
 1131              	.LVL92:
1210:FreeRTOS/src/tasks.c **** 
 1132              		.loc 1 1210 5 view .LVU309
 1133 0082 0E4A     		ldr	r2, .L87+28
 1134 0084 1368     		ldr	r3, [r2]
 1135 0086 0133     		adds	r3, r3, #1
 1136 0088 1360     		str	r3, [r2]
1214:FreeRTOS/src/tasks.c **** 
 1137              		.loc 1 1214 30 view .LVU310
1221:FreeRTOS/src/tasks.c **** 			}
 1138              		.loc 1 1221 54 view .LVU311
 1139 008a E9E7     		b	.L81
 1140              	.L86:
1242:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
 1141              		.loc 1 1242 46 view .LVU312
1243:FreeRTOS/src/tasks.c **** 			}
 1142              		.loc 1 1243 5 view .LVU313
 1143 008c 0C4B     		ldr	r3, .L87+32
 1144 008e 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 118


 1145 0092 1A60     		str	r2, [r3]
1243:FreeRTOS/src/tasks.c **** 			}
 1146              		.loc 1 1243 5 view .LVU314
 1147              		.syntax unified
 1148              	@ 1243 "FreeRTOS/src/tasks.c" 1
 1149 0094 BFF34F8F 		dsb
 1150              	@ 0 "" 2
1243:FreeRTOS/src/tasks.c **** 			}
 1151              		.loc 1 1243 5 view .LVU315
 1152              	@ 1243 "FreeRTOS/src/tasks.c" 1
 1153 0098 BFF36F8F 		isb
 1154              	@ 0 "" 2
1243:FreeRTOS/src/tasks.c **** 			}
 1155              		.loc 1 1243 27 view .LVU316
1247:FreeRTOS/src/tasks.c **** 			}
 1156              		.loc 1 1247 29 view .LVU317
1250:FreeRTOS/src/tasks.c **** 
 1157              		.loc 1 1250 2 is_stmt 0 view .LVU318
 1158              		.thumb
 1159              		.syntax unified
 1160 009c E9E7     		b	.L76
 1161              	.L88:
 1162 009e 00BF     		.align	2
 1163              	.L87:
 1164 00a0 00000000 		.word	.LANCHOR4
 1165 00a4 00000000 		.word	.LANCHOR13
 1166 00a8 00000000 		.word	.LANCHOR12
 1167 00ac 00000000 		.word	.LANCHOR10
 1168 00b0 00000000 		.word	.LANCHOR9
 1169 00b4 00000000 		.word	.LANCHOR11
 1170 00b8 00000000 		.word	.LANCHOR7
 1171 00bc 00000000 		.word	.LANCHOR14
 1172 00c0 04ED00E0 		.word	-536810236
 1173              		.cfi_endproc
 1174              	.LFE73:
 1176              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1177              		.align	1
 1178              		.global	uxTaskPriorityGet
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu softvfp
 1184              	uxTaskPriorityGet:
 1185              	.LVL93:
 1186              	.LFB76:
1479:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 1187              		.loc 1 1479 2 is_stmt 1 view -0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 0
 1190              		@ frame_needed = 0, uses_anonymous_args = 0
1479:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 1191              		.loc 1 1479 2 is_stmt 0 view .LVU320
 1192 0000 10B5     		push	{r4, lr}
 1193              	.LCFI13:
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 4, -8
 1196              		.cfi_offset 14, -4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 119


 1197 0002 0446     		mov	r4, r0
1480:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn;
 1198              		.loc 1 1480 2 is_stmt 1 view .LVU321
1481:FreeRTOS/src/tasks.c **** 
 1199              		.loc 1 1481 2 view .LVU322
1483:FreeRTOS/src/tasks.c **** 		{
 1200              		.loc 1 1483 3 view .LVU323
 1201 0004 FFF7FEFF 		bl	vPortEnterCritical
 1202              	.LVL94:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1203              		.loc 1 1487 4 view .LVU324
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1204              		.loc 1 1487 12 is_stmt 0 view .LVU325
 1205 0008 24B1     		cbz	r4, .L92
 1206              	.LVL95:
 1207              	.L90:
1488:FreeRTOS/src/tasks.c **** 		}
 1208              		.loc 1 1488 4 is_stmt 1 discriminator 4 view .LVU326
1488:FreeRTOS/src/tasks.c **** 		}
 1209              		.loc 1 1488 13 is_stmt 0 discriminator 4 view .LVU327
 1210 000a E46A     		ldr	r4, [r4, #44]
 1211              	.LVL96:
1490:FreeRTOS/src/tasks.c **** 
 1212              		.loc 1 1490 3 is_stmt 1 discriminator 4 view .LVU328
 1213 000c FFF7FEFF 		bl	vPortExitCritical
 1214              	.LVL97:
1492:FreeRTOS/src/tasks.c **** 	}
 1215              		.loc 1 1492 3 discriminator 4 view .LVU329
1493:FreeRTOS/src/tasks.c **** 
 1216              		.loc 1 1493 2 is_stmt 0 discriminator 4 view .LVU330
 1217 0010 2046     		mov	r0, r4
 1218 0012 10BD     		pop	{r4, pc}
 1219              	.LVL98:
 1220              	.L92:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1221              		.loc 1 1487 12 discriminator 1 view .LVU331
 1222 0014 014B     		ldr	r3, .L93
 1223 0016 1C68     		ldr	r4, [r3]
 1224              	.LVL99:
1487:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1225              		.loc 1 1487 12 discriminator 1 view .LVU332
 1226 0018 F7E7     		b	.L90
 1227              	.L94:
 1228 001a 00BF     		.align	2
 1229              	.L93:
 1230 001c 00000000 		.word	.LANCHOR10
 1231              		.cfi_endproc
 1232              	.LFE76:
 1234              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1235              		.align	1
 1236              		.global	uxTaskPriorityGetFromISR
 1237              		.syntax unified
 1238              		.thumb
 1239              		.thumb_func
 1240              		.fpu softvfp
 1242              	uxTaskPriorityGetFromISR:
 1243              	.LVL100:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 120


 1244              	.LFB77:
1501:FreeRTOS/src/tasks.c **** 	TCB_t const *pxTCB;
 1245              		.loc 1 1501 2 is_stmt 1 view -0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
1502:FreeRTOS/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1250              		.loc 1 1502 2 view .LVU334
1503:FreeRTOS/src/tasks.c **** 
 1251              		.loc 1 1503 2 view .LVU335
1521:FreeRTOS/src/tasks.c **** 
 1252              		.loc 1 1521 45 view .LVU336
1523:FreeRTOS/src/tasks.c **** 		{
 1253              		.loc 1 1523 3 view .LVU337
 1254              	.LBB30:
 1255              	.LBI30:
 1256              		.file 2 "FreeRTOS/inc/portmacro.h"
   1:FreeRTOS/inc/portmacro.h **** /*
   2:FreeRTOS/inc/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/inc/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/inc/portmacro.h ****  *
   5:FreeRTOS/inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/inc/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/inc/portmacro.h ****  *
  12:FreeRTOS/inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/inc/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/inc/portmacro.h ****  *
  15:FreeRTOS/inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/inc/portmacro.h ****  *
  22:FreeRTOS/inc/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/inc/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/inc/portmacro.h ****  *
  25:FreeRTOS/inc/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/inc/portmacro.h ****  */
  27:FreeRTOS/inc/portmacro.h **** 
  28:FreeRTOS/inc/portmacro.h **** 
  29:FreeRTOS/inc/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/inc/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/inc/portmacro.h **** 
  32:FreeRTOS/inc/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/inc/portmacro.h **** extern "C" {
  34:FreeRTOS/inc/portmacro.h **** #endif
  35:FreeRTOS/inc/portmacro.h **** 
  36:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/inc/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/inc/portmacro.h ****  *
  39:FreeRTOS/inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 121


  40:FreeRTOS/inc/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/inc/portmacro.h ****  *
  42:FreeRTOS/inc/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/inc/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/inc/portmacro.h ****  */
  45:FreeRTOS/inc/portmacro.h **** 
  46:FreeRTOS/inc/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/inc/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/inc/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/inc/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/inc/portmacro.h **** #define portLONG		long
  51:FreeRTOS/inc/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/inc/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/inc/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/inc/portmacro.h **** 
  55:FreeRTOS/inc/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/inc/portmacro.h **** typedef long BaseType_t;
  57:FreeRTOS/inc/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/inc/portmacro.h **** 
  59:FreeRTOS/inc/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/inc/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/inc/portmacro.h **** #else
  63:FreeRTOS/inc/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/inc/portmacro.h **** 
  66:FreeRTOS/inc/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/inc/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/inc/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/inc/portmacro.h **** #endif
  70:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/inc/portmacro.h **** 
  72:FreeRTOS/inc/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/inc/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/inc/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/inc/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/inc/portmacro.h **** 
  78:FreeRTOS/inc/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/inc/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/inc/portmacro.h **** {																				\
  81:FreeRTOS/inc/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/inc/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/inc/portmacro.h **** 																				\
  84:FreeRTOS/inc/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/inc/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/inc/portmacro.h **** }
  89:FreeRTOS/inc/portmacro.h **** 
  90:FreeRTOS/inc/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/inc/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/inc/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/inc/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/inc/portmacro.h **** 
  96:FreeRTOS/inc/portmacro.h **** /* Critical section management. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 122


  97:FreeRTOS/inc/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/inc/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/inc/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/inc/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/inc/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/inc/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/inc/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/inc/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/inc/portmacro.h **** 
 106:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/inc/portmacro.h **** 
 108:FreeRTOS/inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/inc/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/inc/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 114:FreeRTOS/inc/portmacro.h **** 
 115:FreeRTOS/inc/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/inc/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/inc/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/inc/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/inc/portmacro.h **** #endif
 120:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/inc/portmacro.h **** 
 122:FreeRTOS/inc/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/inc/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/inc/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/inc/portmacro.h **** #endif
 126:FreeRTOS/inc/portmacro.h **** 
 127:FreeRTOS/inc/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/inc/portmacro.h **** 
 129:FreeRTOS/inc/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/inc/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/inc/portmacro.h **** 	{
 132:FreeRTOS/inc/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/inc/portmacro.h **** 
 134:FreeRTOS/inc/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/inc/portmacro.h **** 	}
 137:FreeRTOS/inc/portmacro.h **** 
 138:FreeRTOS/inc/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/inc/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/inc/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/inc/portmacro.h **** 	#endif
 142:FreeRTOS/inc/portmacro.h **** 
 143:FreeRTOS/inc/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/inc/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/inc/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/inc/portmacro.h **** 
 147:FreeRTOS/inc/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/inc/portmacro.h **** 
 149:FreeRTOS/inc/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/inc/portmacro.h **** 
 151:FreeRTOS/inc/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/inc/portmacro.h **** 
 153:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 123


 154:FreeRTOS/inc/portmacro.h **** 
 155:FreeRTOS/inc/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/inc/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/inc/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/inc/portmacro.h **** #endif
 159:FreeRTOS/inc/portmacro.h **** 
 160:FreeRTOS/inc/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/inc/portmacro.h **** #define portNOP()
 162:FreeRTOS/inc/portmacro.h **** 
 163:FreeRTOS/inc/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/inc/portmacro.h **** 
 165:FreeRTOS/inc/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/inc/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/inc/portmacro.h **** #endif
 168:FreeRTOS/inc/portmacro.h **** 
 169:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/inc/portmacro.h **** 
 171:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/inc/portmacro.h **** {
 173:FreeRTOS/inc/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:FreeRTOS/inc/portmacro.h **** BaseType_t xReturn;
 175:FreeRTOS/inc/portmacro.h **** 
 176:FreeRTOS/inc/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:FreeRTOS/inc/portmacro.h **** 
 179:FreeRTOS/inc/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/inc/portmacro.h **** 	{
 181:FreeRTOS/inc/portmacro.h **** 		xReturn = pdFALSE;
 182:FreeRTOS/inc/portmacro.h **** 	}
 183:FreeRTOS/inc/portmacro.h **** 	else
 184:FreeRTOS/inc/portmacro.h **** 	{
 185:FreeRTOS/inc/portmacro.h **** 		xReturn = pdTRUE;
 186:FreeRTOS/inc/portmacro.h **** 	}
 187:FreeRTOS/inc/portmacro.h **** 
 188:FreeRTOS/inc/portmacro.h **** 	return xReturn;
 189:FreeRTOS/inc/portmacro.h **** }
 190:FreeRTOS/inc/portmacro.h **** 
 191:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/inc/portmacro.h **** 
 193:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:FreeRTOS/inc/portmacro.h **** {
 195:FreeRTOS/inc/portmacro.h **** uint32_t ulNewBASEPRI;
 196:FreeRTOS/inc/portmacro.h **** 
 197:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 198:FreeRTOS/inc/portmacro.h **** 	(
 199:FreeRTOS/inc/portmacro.h **** 		"	mov %0, %1												\n" \
 200:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 202:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 203:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/inc/portmacro.h **** 	);
 205:FreeRTOS/inc/portmacro.h **** }
 206:FreeRTOS/inc/portmacro.h **** 
 207:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/inc/portmacro.h **** 
 209:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1257              		.loc 2 209 34 view .LVU338
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 124


 1258              	.LBB31:
 210:FreeRTOS/inc/portmacro.h **** {
 211:FreeRTOS/inc/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1259              		.loc 2 211 1 view .LVU339
 212:FreeRTOS/inc/portmacro.h **** 
 213:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1260              		.loc 2 213 2 view .LVU340
 1261              		.syntax unified
 1262              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1263 0000 EFF31183 			mrs r3, basepri											
 1264 0004 4FF0BF02 		mov r2, #191												
 1265 0008 82F31188 		msr basepri, r2											
 1266 000c BFF36F8F 		isb														
 1267 0010 BFF34F8F 		dsb														
 1268              	
 1269              	@ 0 "" 2
 1270              	.LVL101:
 214:FreeRTOS/inc/portmacro.h **** 	(
 215:FreeRTOS/inc/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:FreeRTOS/inc/portmacro.h **** 		"	mov %1, %2												\n" \
 217:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 219:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 220:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:FreeRTOS/inc/portmacro.h **** 	);
 222:FreeRTOS/inc/portmacro.h **** 
 223:FreeRTOS/inc/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/inc/portmacro.h **** 	warnings. */
 225:FreeRTOS/inc/portmacro.h **** 	return ulOriginalBASEPRI;
 1271              		.loc 2 225 2 view .LVU341
 1272              		.loc 2 225 2 is_stmt 0 view .LVU342
 1273              		.thumb
 1274              		.syntax unified
 1275              	.LBE31:
 1276              	.LBE30:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1277              		.loc 1 1527 4 is_stmt 1 view .LVU343
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1278              		.loc 1 1527 12 is_stmt 0 view .LVU344
 1279 0014 18B1     		cbz	r0, .L97
 1280              	.LVL102:
 1281              	.L96:
1528:FreeRTOS/src/tasks.c **** 		}
 1282              		.loc 1 1528 4 is_stmt 1 discriminator 4 view .LVU345
1528:FreeRTOS/src/tasks.c **** 		}
 1283              		.loc 1 1528 13 is_stmt 0 discriminator 4 view .LVU346
 1284 0016 C06A     		ldr	r0, [r0, #44]
 1285              	.LVL103:
1530:FreeRTOS/src/tasks.c **** 
 1286              		.loc 1 1530 3 is_stmt 1 discriminator 4 view .LVU347
 1287              	.LBB32:
 1288              	.LBI32:
 226:FreeRTOS/inc/portmacro.h **** }
 227:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/inc/portmacro.h **** 
 229:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1289              		.loc 2 229 30 discriminator 4 view .LVU348
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 125


 1290              	.LBB33:
 230:FreeRTOS/inc/portmacro.h **** {
 231:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1291              		.loc 2 231 2 discriminator 4 view .LVU349
 1292              		.syntax unified
 1293              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1294 0018 83F31188 			msr basepri, r3	
 1295              	@ 0 "" 2
 1296              	.LVL104:
 1297              		.loc 2 231 2 is_stmt 0 discriminator 4 view .LVU350
 1298              		.thumb
 1299              		.syntax unified
 1300              	.LBE33:
 1301              	.LBE32:
1532:FreeRTOS/src/tasks.c **** 	}
 1302              		.loc 1 1532 3 is_stmt 1 discriminator 4 view .LVU351
1533:FreeRTOS/src/tasks.c **** 
 1303              		.loc 1 1533 2 is_stmt 0 discriminator 4 view .LVU352
 1304 001c 7047     		bx	lr
 1305              	.LVL105:
 1306              	.L97:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1307              		.loc 1 1527 12 discriminator 1 view .LVU353
 1308 001e 014A     		ldr	r2, .L98
 1309 0020 1068     		ldr	r0, [r2]
 1310              	.LVL106:
1527:FreeRTOS/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1311              		.loc 1 1527 12 discriminator 1 view .LVU354
 1312 0022 F8E7     		b	.L96
 1313              	.L99:
 1314              		.align	2
 1315              	.L98:
 1316 0024 00000000 		.word	.LANCHOR10
 1317              		.cfi_endproc
 1318              	.LFE77:
 1320              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1321              		.align	1
 1322              		.global	vTaskPrioritySet
 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu softvfp
 1328              	vTaskPrioritySet:
 1329              	.LVL107:
 1330              	.LFB78:
1541:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1331              		.loc 1 1541 2 is_stmt 1 view -0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
1541:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 1335              		.loc 1 1541 2 is_stmt 0 view .LVU356
 1336 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1337              	.LCFI14:
 1338              		.cfi_def_cfa_offset 24
 1339              		.cfi_offset 3, -24
 1340              		.cfi_offset 4, -20
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 126


 1341              		.cfi_offset 5, -16
 1342              		.cfi_offset 6, -12
 1343              		.cfi_offset 7, -8
 1344              		.cfi_offset 14, -4
 1345 0002 0446     		mov	r4, r0
 1346 0004 0D46     		mov	r5, r1
1542:FreeRTOS/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1347              		.loc 1 1542 2 is_stmt 1 view .LVU357
1543:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1348              		.loc 1 1543 2 view .LVU358
1544:FreeRTOS/src/tasks.c **** 
 1349              		.loc 1 1544 2 view .LVU359
 1350              	.LVL108:
1546:FreeRTOS/src/tasks.c **** 
 1351              		.loc 1 1546 59 view .LVU360
1549:FreeRTOS/src/tasks.c **** 		{
 1352              		.loc 1 1549 3 view .LVU361
1549:FreeRTOS/src/tasks.c **** 		{
 1353              		.loc 1 1549 5 is_stmt 0 view .LVU362
 1354 0006 0429     		cmp	r1, #4
 1355 0008 00D9     		bls	.L101
1551:FreeRTOS/src/tasks.c **** 		}
 1356              		.loc 1 1551 18 view .LVU363
 1357 000a 0425     		movs	r5, #4
 1358              	.L101:
 1359              	.LVL109:
1555:FreeRTOS/src/tasks.c **** 		}
 1360              		.loc 1 1555 28 is_stmt 1 view .LVU364
1558:FreeRTOS/src/tasks.c **** 		{
 1361              		.loc 1 1558 3 view .LVU365
 1362 000c FFF7FEFF 		bl	vPortEnterCritical
 1363              	.LVL110:
1562:FreeRTOS/src/tasks.c **** 
 1364              		.loc 1 1562 4 view .LVU366
1562:FreeRTOS/src/tasks.c **** 
 1365              		.loc 1 1562 12 is_stmt 0 view .LVU367
 1366 0010 74B1     		cbz	r4, .L115
 1367              	.LVL111:
 1368              	.L102:
1564:FreeRTOS/src/tasks.c **** 
 1369              		.loc 1 1564 50 is_stmt 1 discriminator 4 view .LVU368
1568:FreeRTOS/src/tasks.c **** 			}
 1370              		.loc 1 1568 5 discriminator 4 view .LVU369
1568:FreeRTOS/src/tasks.c **** 			}
 1371              		.loc 1 1568 27 is_stmt 0 discriminator 4 view .LVU370
 1372 0012 636C     		ldr	r3, [r4, #68]
 1373              	.LVL112:
1576:FreeRTOS/src/tasks.c **** 			{
 1374              		.loc 1 1576 4 is_stmt 1 discriminator 4 view .LVU371
1576:FreeRTOS/src/tasks.c **** 			{
 1375              		.loc 1 1576 6 is_stmt 0 discriminator 4 view .LVU372
 1376 0014 9D42     		cmp	r5, r3
 1377 0016 2ED0     		beq	.L103
1580:FreeRTOS/src/tasks.c **** 				{
 1378              		.loc 1 1580 5 is_stmt 1 view .LVU373
1580:FreeRTOS/src/tasks.c **** 				{
 1379              		.loc 1 1580 7 is_stmt 0 view .LVU374
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 127


 1380 0018 0DD9     		bls	.L104
1582:FreeRTOS/src/tasks.c **** 					{
 1381              		.loc 1 1582 6 is_stmt 1 view .LVU375
1582:FreeRTOS/src/tasks.c **** 					{
 1382              		.loc 1 1582 16 is_stmt 0 view .LVU376
 1383 001a 2A4A     		ldr	r2, .L118
 1384 001c 1268     		ldr	r2, [r2]
1582:FreeRTOS/src/tasks.c **** 					{
 1385              		.loc 1 1582 8 view .LVU377
 1386 001e A242     		cmp	r2, r4
 1387 0020 2CD0     		beq	.L111
1587:FreeRTOS/src/tasks.c **** 						{
 1388              		.loc 1 1587 7 is_stmt 1 view .LVU378
1587:FreeRTOS/src/tasks.c **** 						{
 1389              		.loc 1 1587 40 is_stmt 0 view .LVU379
 1390 0022 284A     		ldr	r2, .L118
 1391 0024 1268     		ldr	r2, [r2]
 1392 0026 D26A     		ldr	r2, [r2, #44]
1587:FreeRTOS/src/tasks.c **** 						{
 1393              		.loc 1 1587 9 view .LVU380
 1394 0028 AA42     		cmp	r2, r5
 1395 002a 29D9     		bls	.L112
1544:FreeRTOS/src/tasks.c **** 
 1396              		.loc 1 1544 13 view .LVU381
 1397 002c 0027     		movs	r7, #0
 1398 002e 07E0     		b	.L105
 1399              	.LVL113:
 1400              	.L115:
1562:FreeRTOS/src/tasks.c **** 
 1401              		.loc 1 1562 12 discriminator 1 view .LVU382
 1402 0030 244B     		ldr	r3, .L118
 1403 0032 1C68     		ldr	r4, [r3]
 1404              	.LVL114:
1562:FreeRTOS/src/tasks.c **** 
 1405              		.loc 1 1562 12 discriminator 1 view .LVU383
 1406 0034 EDE7     		b	.L102
 1407              	.LVL115:
 1408              	.L104:
1603:FreeRTOS/src/tasks.c **** 				{
 1409              		.loc 1 1603 10 is_stmt 1 view .LVU384
1603:FreeRTOS/src/tasks.c **** 				{
 1410              		.loc 1 1603 20 is_stmt 0 view .LVU385
 1411 0036 234A     		ldr	r2, .L118
 1412 0038 1268     		ldr	r2, [r2]
1603:FreeRTOS/src/tasks.c **** 				{
 1413              		.loc 1 1603 12 view .LVU386
 1414 003a A242     		cmp	r2, r4
 1415 003c 22D0     		beq	.L113
1544:FreeRTOS/src/tasks.c **** 
 1416              		.loc 1 1544 13 view .LVU387
 1417 003e 0027     		movs	r7, #0
 1418              	.L105:
 1419              	.LVL116:
1615:FreeRTOS/src/tasks.c **** 
 1420              		.loc 1 1615 5 is_stmt 1 view .LVU388
1620:FreeRTOS/src/tasks.c **** 
 1421              		.loc 1 1620 5 view .LVU389
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 128


1620:FreeRTOS/src/tasks.c **** 
 1422              		.loc 1 1620 27 is_stmt 0 view .LVU390
 1423 0040 E66A     		ldr	r6, [r4, #44]
 1424              	.LVL117:
1626:FreeRTOS/src/tasks.c **** 					{
 1425              		.loc 1 1626 6 is_stmt 1 view .LVU391
1626:FreeRTOS/src/tasks.c **** 					{
 1426              		.loc 1 1626 8 is_stmt 0 view .LVU392
 1427 0042 B342     		cmp	r3, r6
 1428 0044 20D0     		beq	.L116
 1429              	.L106:
1632:FreeRTOS/src/tasks.c **** 					}
 1430              		.loc 1 1632 31 is_stmt 1 view .LVU393
1636:FreeRTOS/src/tasks.c **** 				}
 1431              		.loc 1 1636 6 view .LVU394
1636:FreeRTOS/src/tasks.c **** 				}
 1432              		.loc 1 1636 28 is_stmt 0 view .LVU395
 1433 0046 6564     		str	r5, [r4, #68]
1646:FreeRTOS/src/tasks.c **** 				{
 1434              		.loc 1 1646 5 is_stmt 1 view .LVU396
1646:FreeRTOS/src/tasks.c **** 				{
 1435              		.loc 1 1646 11 is_stmt 0 view .LVU397
 1436 0048 A369     		ldr	r3, [r4, #24]
 1437              	.LVL118:
1646:FreeRTOS/src/tasks.c **** 				{
 1438              		.loc 1 1646 7 view .LVU398
 1439 004a 002B     		cmp	r3, #0
 1440 004c 02DB     		blt	.L107
1648:FreeRTOS/src/tasks.c **** 				}
 1441              		.loc 1 1648 6 is_stmt 1 view .LVU399
 1442 004e C5F10505 		rsb	r5, r5, #5
 1443              	.LVL119:
1648:FreeRTOS/src/tasks.c **** 				}
 1444              		.loc 1 1648 6 is_stmt 0 view .LVU400
 1445 0052 A561     		str	r5, [r4, #24]
 1446              	.L107:
1652:FreeRTOS/src/tasks.c **** 				}
 1447              		.loc 1 1652 30 is_stmt 1 view .LVU401
1659:FreeRTOS/src/tasks.c **** 				{
 1448              		.loc 1 1659 5 view .LVU402
1659:FreeRTOS/src/tasks.c **** 				{
 1449              		.loc 1 1659 9 is_stmt 0 view .LVU403
 1450 0054 6169     		ldr	r1, [r4, #20]
 1451 0056 06EB8603 		add	r3, r6, r6, lsl #2
 1452 005a 9A00     		lsls	r2, r3, #2
 1453 005c 1A4B     		ldr	r3, .L118+4
 1454 005e 1344     		add	r3, r3, r2
1659:FreeRTOS/src/tasks.c **** 				{
 1455              		.loc 1 1659 7 view .LVU404
 1456 0060 9942     		cmp	r1, r3
 1457 0062 13D0     		beq	.L117
 1458              	.LVL120:
 1459              	.L108:
1679:FreeRTOS/src/tasks.c **** 				}
 1460              		.loc 1 1679 30 is_stmt 1 view .LVU405
1682:FreeRTOS/src/tasks.c **** 				{
 1461              		.loc 1 1682 5 view .LVU406
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 129


1682:FreeRTOS/src/tasks.c **** 				{
 1462              		.loc 1 1682 7 is_stmt 0 view .LVU407
 1463 0064 3FB1     		cbz	r7, .L103
1684:FreeRTOS/src/tasks.c **** 				}
 1464              		.loc 1 1684 6 is_stmt 1 view .LVU408
 1465 0066 194B     		ldr	r3, .L118+8
 1466 0068 4FF08052 		mov	r2, #268435456
 1467 006c 1A60     		str	r2, [r3]
1684:FreeRTOS/src/tasks.c **** 				}
 1468              		.loc 1 1684 6 view .LVU409
 1469              		.syntax unified
 1470              	@ 1684 "FreeRTOS/src/tasks.c" 1
 1471 006e BFF34F8F 		dsb
 1472              	@ 0 "" 2
1684:FreeRTOS/src/tasks.c **** 				}
 1473              		.loc 1 1684 6 view .LVU410
 1474              	@ 1684 "FreeRTOS/src/tasks.c" 1
 1475 0072 BFF36F8F 		isb
 1476              	@ 0 "" 2
1684:FreeRTOS/src/tasks.c **** 				}
 1477              		.loc 1 1684 37 view .LVU411
 1478              	.LVL121:
 1479              		.thumb
 1480              		.syntax unified
 1481              	.L103:
1688:FreeRTOS/src/tasks.c **** 				}
 1482              		.loc 1 1688 30 view .LVU412
1693:FreeRTOS/src/tasks.c **** 			}
 1483              		.loc 1 1693 5 view .LVU413
1696:FreeRTOS/src/tasks.c **** 	}
 1484              		.loc 1 1696 3 view .LVU414
 1485 0076 FFF7FEFF 		bl	vPortExitCritical
 1486              	.LVL122:
1697:FreeRTOS/src/tasks.c **** 
 1487              		.loc 1 1697 2 is_stmt 0 view .LVU415
 1488 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1489              	.LVL123:
 1490              	.L111:
1544:FreeRTOS/src/tasks.c **** 
 1491              		.loc 1 1544 13 view .LVU416
 1492 007c 0027     		movs	r7, #0
 1493 007e DFE7     		b	.L105
 1494              	.L112:
1589:FreeRTOS/src/tasks.c **** 						}
 1495              		.loc 1 1589 23 view .LVU417
 1496 0080 0127     		movs	r7, #1
 1497 0082 DDE7     		b	.L105
 1498              	.L113:
1608:FreeRTOS/src/tasks.c **** 				}
 1499              		.loc 1 1608 21 view .LVU418
 1500 0084 0127     		movs	r7, #1
 1501 0086 DBE7     		b	.L105
 1502              	.LVL124:
 1503              	.L116:
1628:FreeRTOS/src/tasks.c **** 					}
 1504              		.loc 1 1628 7 is_stmt 1 view .LVU419
1628:FreeRTOS/src/tasks.c **** 					}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 130


 1505              		.loc 1 1628 25 is_stmt 0 view .LVU420
 1506 0088 E562     		str	r5, [r4, #44]
 1507 008a DCE7     		b	.L106
 1508              	.LVL125:
 1509              	.L117:
1664:FreeRTOS/src/tasks.c **** 					{
 1510              		.loc 1 1664 6 is_stmt 1 view .LVU421
1664:FreeRTOS/src/tasks.c **** 					{
 1511              		.loc 1 1664 10 is_stmt 0 view .LVU422
 1512 008c 251D     		adds	r5, r4, #4
 1513 008e 2846     		mov	r0, r5
 1514 0090 FFF7FEFF 		bl	uxListRemove
 1515              	.LVL126:
1664:FreeRTOS/src/tasks.c **** 					{
 1516              		.loc 1 1664 8 view .LVU423
 1517 0094 30B9     		cbnz	r0, .L109
1669:FreeRTOS/src/tasks.c **** 					}
 1518              		.loc 1 1669 7 is_stmt 1 view .LVU424
 1519 0096 0123     		movs	r3, #1
 1520 0098 B340     		lsls	r3, r3, r6
 1521 009a 0D4A     		ldr	r2, .L118+12
 1522 009c 1668     		ldr	r6, [r2]
 1523              	.LVL127:
1669:FreeRTOS/src/tasks.c **** 					}
 1524              		.loc 1 1669 7 is_stmt 0 view .LVU425
 1525 009e 26EA0306 		bic	r6, r6, r3
 1526 00a2 1660     		str	r6, [r2]
 1527              	.L109:
1673:FreeRTOS/src/tasks.c **** 					}
 1528              		.loc 1 1673 31 is_stmt 1 view .LVU426
1675:FreeRTOS/src/tasks.c **** 				}
 1529              		.loc 1 1675 6 view .LVU427
1675:FreeRTOS/src/tasks.c **** 				}
 1530              		.loc 1 1675 6 view .LVU428
 1531 00a4 E36A     		ldr	r3, [r4, #44]
 1532 00a6 0122     		movs	r2, #1
 1533 00a8 9A40     		lsls	r2, r2, r3
 1534 00aa 0949     		ldr	r1, .L118+12
 1535 00ac 0868     		ldr	r0, [r1]
 1536 00ae 0243     		orrs	r2, r2, r0
 1537 00b0 0A60     		str	r2, [r1]
1675:FreeRTOS/src/tasks.c **** 				}
 1538              		.loc 1 1675 6 view .LVU429
 1539 00b2 03EB8303 		add	r3, r3, r3, lsl #2
 1540 00b6 9A00     		lsls	r2, r3, #2
 1541 00b8 2946     		mov	r1, r5
 1542 00ba 0348     		ldr	r0, .L118+4
 1543 00bc 1044     		add	r0, r0, r2
 1544 00be FFF7FEFF 		bl	vListInsertEnd
 1545              	.LVL128:
1675:FreeRTOS/src/tasks.c **** 				}
 1546              		.loc 1 1675 36 view .LVU430
 1547 00c2 CFE7     		b	.L108
 1548              	.L119:
 1549              		.align	2
 1550              	.L118:
 1551 00c4 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 131


 1552 00c8 00000000 		.word	.LANCHOR4
 1553 00cc 04ED00E0 		.word	-536810236
 1554 00d0 00000000 		.word	.LANCHOR13
 1555              		.cfi_endproc
 1556              	.LFE78:
 1558              		.section	.text.vTaskResume,"ax",%progbits
 1559              		.align	1
 1560              		.global	vTaskResume
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu softvfp
 1566              	vTaskResume:
 1567              	.LVL129:
 1568              	.LFB81:
1852:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1569              		.loc 1 1852 2 view -0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
1852:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1573              		.loc 1 1852 2 is_stmt 0 view .LVU432
 1574 0000 38B5     		push	{r3, r4, r5, lr}
 1575              	.LCFI15:
 1576              		.cfi_def_cfa_offset 16
 1577              		.cfi_offset 3, -16
 1578              		.cfi_offset 4, -12
 1579              		.cfi_offset 5, -8
 1580              		.cfi_offset 14, -4
1853:FreeRTOS/src/tasks.c **** 
 1581              		.loc 1 1853 2 is_stmt 1 view .LVU433
 1582              	.LVL130:
1856:FreeRTOS/src/tasks.c **** 
 1583              		.loc 1 1856 32 view .LVU434
1860:FreeRTOS/src/tasks.c **** 		{
 1584              		.loc 1 1860 3 view .LVU435
1860:FreeRTOS/src/tasks.c **** 		{
 1585              		.loc 1 1860 15 is_stmt 0 view .LVU436
 1586 0002 184B     		ldr	r3, .L125
 1587 0004 1B68     		ldr	r3, [r3]
1860:FreeRTOS/src/tasks.c **** 		{
 1588              		.loc 1 1860 5 view .LVU437
 1589 0006 8342     		cmp	r3, r0
 1590 0008 09D0     		beq	.L120
1860:FreeRTOS/src/tasks.c **** 		{
 1591              		.loc 1 1860 33 discriminator 1 view .LVU438
 1592 000a 40B1     		cbz	r0, .L120
 1593 000c 0446     		mov	r4, r0
1862:FreeRTOS/src/tasks.c **** 			{
 1594              		.loc 1 1862 4 is_stmt 1 view .LVU439
 1595 000e FFF7FEFF 		bl	vPortEnterCritical
 1596              	.LVL131:
1864:FreeRTOS/src/tasks.c **** 				{
 1597              		.loc 1 1864 5 view .LVU440
1864:FreeRTOS/src/tasks.c **** 				{
 1598              		.loc 1 1864 9 is_stmt 0 view .LVU441
 1599 0012 2046     		mov	r0, r4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 132


 1600 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1601              	.LVL132:
1864:FreeRTOS/src/tasks.c **** 				{
 1602              		.loc 1 1864 7 view .LVU442
 1603 0018 10B9     		cbnz	r0, .L124
 1604              	.L122:
1888:FreeRTOS/src/tasks.c **** 				}
 1605              		.loc 1 1888 30 is_stmt 1 view .LVU443
1891:FreeRTOS/src/tasks.c **** 		}
 1606              		.loc 1 1891 4 view .LVU444
 1607 001a FFF7FEFF 		bl	vPortExitCritical
 1608              	.LVL133:
1895:FreeRTOS/src/tasks.c **** 		}
 1609              		.loc 1 1895 28 view .LVU445
 1610              	.L120:
1897:FreeRTOS/src/tasks.c **** 
 1611              		.loc 1 1897 2 is_stmt 0 view .LVU446
 1612 001e 38BD     		pop	{r3, r4, r5, pc}
 1613              	.LVL134:
 1614              	.L124:
1866:FreeRTOS/src/tasks.c **** 
 1615              		.loc 1 1866 31 is_stmt 1 view .LVU447
1870:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1616              		.loc 1 1870 6 view .LVU448
1870:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1617              		.loc 1 1870 15 is_stmt 0 view .LVU449
 1618 0020 251D     		adds	r5, r4, #4
 1619 0022 2846     		mov	r0, r5
 1620 0024 FFF7FEFF 		bl	uxListRemove
 1621              	.LVL135:
1871:FreeRTOS/src/tasks.c **** 
 1622              		.loc 1 1871 6 is_stmt 1 view .LVU450
1871:FreeRTOS/src/tasks.c **** 
 1623              		.loc 1 1871 6 view .LVU451
 1624 0028 E36A     		ldr	r3, [r4, #44]
 1625 002a 0122     		movs	r2, #1
 1626 002c 9A40     		lsls	r2, r2, r3
 1627 002e 0E49     		ldr	r1, .L125+4
 1628 0030 0868     		ldr	r0, [r1]
 1629 0032 0243     		orrs	r2, r2, r0
 1630 0034 0A60     		str	r2, [r1]
1871:FreeRTOS/src/tasks.c **** 
 1631              		.loc 1 1871 6 view .LVU452
 1632 0036 03EB8303 		add	r3, r3, r3, lsl #2
 1633 003a 9A00     		lsls	r2, r3, #2
 1634 003c 2946     		mov	r1, r5
 1635 003e 0B48     		ldr	r0, .L125+8
 1636 0040 1044     		add	r0, r0, r2
 1637 0042 FFF7FEFF 		bl	vListInsertEnd
 1638              	.LVL136:
1871:FreeRTOS/src/tasks.c **** 
 1639              		.loc 1 1871 36 view .LVU453
1874:FreeRTOS/src/tasks.c **** 					{
 1640              		.loc 1 1874 6 view .LVU454
1874:FreeRTOS/src/tasks.c **** 					{
 1641              		.loc 1 1874 15 is_stmt 0 view .LVU455
 1642 0046 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 133


1874:FreeRTOS/src/tasks.c **** 					{
 1643              		.loc 1 1874 43 view .LVU456
 1644 0048 064B     		ldr	r3, .L125
 1645 004a 1B68     		ldr	r3, [r3]
 1646 004c DB6A     		ldr	r3, [r3, #44]
1874:FreeRTOS/src/tasks.c **** 					{
 1647              		.loc 1 1874 8 view .LVU457
 1648 004e 9A42     		cmp	r2, r3
 1649 0050 E3D3     		bcc	.L122
1879:FreeRTOS/src/tasks.c **** 					}
 1650              		.loc 1 1879 7 is_stmt 1 view .LVU458
 1651 0052 074B     		ldr	r3, .L125+12
 1652 0054 4FF08052 		mov	r2, #268435456
 1653 0058 1A60     		str	r2, [r3]
1879:FreeRTOS/src/tasks.c **** 					}
 1654              		.loc 1 1879 7 view .LVU459
 1655              		.syntax unified
 1656              	@ 1879 "FreeRTOS/src/tasks.c" 1
 1657 005a BFF34F8F 		dsb
 1658              	@ 0 "" 2
1879:FreeRTOS/src/tasks.c **** 					}
 1659              		.loc 1 1879 7 view .LVU460
 1660              	@ 1879 "FreeRTOS/src/tasks.c" 1
 1661 005e BFF36F8F 		isb
 1662              	@ 0 "" 2
1879:FreeRTOS/src/tasks.c **** 					}
 1663              		.loc 1 1879 38 view .LVU461
 1664              		.thumb
 1665              		.syntax unified
 1666 0062 DAE7     		b	.L122
 1667              	.L126:
 1668              		.align	2
 1669              	.L125:
 1670 0064 00000000 		.word	.LANCHOR10
 1671 0068 00000000 		.word	.LANCHOR13
 1672 006c 00000000 		.word	.LANCHOR4
 1673 0070 04ED00E0 		.word	-536810236
 1674              		.cfi_endproc
 1675              	.LFE81:
 1677              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1678              		.align	1
 1679              		.global	xTaskResumeFromISR
 1680              		.syntax unified
 1681              		.thumb
 1682              		.thumb_func
 1683              		.fpu softvfp
 1685              	xTaskResumeFromISR:
 1686              	.LVL137:
 1687              	.LFB82:
1906:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1688              		.loc 1 1906 2 view -0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
1906:FreeRTOS/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1692              		.loc 1 1906 2 is_stmt 0 view .LVU463
 1693 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 134


 1694              	.LCFI16:
 1695              		.cfi_def_cfa_offset 24
 1696              		.cfi_offset 3, -24
 1697              		.cfi_offset 4, -20
 1698              		.cfi_offset 5, -16
 1699              		.cfi_offset 6, -12
 1700              		.cfi_offset 7, -8
 1701              		.cfi_offset 14, -4
 1702 0002 0446     		mov	r4, r0
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1703              		.loc 1 1907 2 is_stmt 1 view .LVU464
 1704              	.LVL138:
1908:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1705              		.loc 1 1908 2 view .LVU465
1909:FreeRTOS/src/tasks.c **** 
 1706              		.loc 1 1909 2 view .LVU466
1911:FreeRTOS/src/tasks.c **** 
 1707              		.loc 1 1911 32 view .LVU467
1929:FreeRTOS/src/tasks.c **** 
 1708              		.loc 1 1929 45 view .LVU468
1931:FreeRTOS/src/tasks.c **** 		{
 1709              		.loc 1 1931 3 view .LVU469
 1710              	.LBB34:
 1711              	.LBI34:
 209:FreeRTOS/inc/portmacro.h **** {
 1712              		.loc 2 209 34 view .LVU470
 1713              	.LBB35:
 211:FreeRTOS/inc/portmacro.h **** 
 1714              		.loc 2 211 1 view .LVU471
 213:FreeRTOS/inc/portmacro.h **** 	(
 1715              		.loc 2 213 2 view .LVU472
 1716              		.syntax unified
 1717              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1718 0004 EFF31185 			mrs r5, basepri											
 1719 0008 4FF0BF03 		mov r3, #191												
 1720 000c 83F31188 		msr basepri, r3											
 1721 0010 BFF36F8F 		isb														
 1722 0014 BFF34F8F 		dsb														
 1723              	
 1724              	@ 0 "" 2
 1725              	.LVL139:
 225:FreeRTOS/inc/portmacro.h **** }
 1726              		.loc 2 225 2 view .LVU473
 225:FreeRTOS/inc/portmacro.h **** }
 1727              		.loc 2 225 2 is_stmt 0 view .LVU474
 1728              		.thumb
 1729              		.syntax unified
 1730              	.LBE35:
 1731              	.LBE34:
1933:FreeRTOS/src/tasks.c **** 			{
 1732              		.loc 1 1933 4 is_stmt 1 view .LVU475
1933:FreeRTOS/src/tasks.c **** 			{
 1733              		.loc 1 1933 8 is_stmt 0 view .LVU476
 1734 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1735              	.LVL140:
1933:FreeRTOS/src/tasks.c **** 			{
 1736              		.loc 1 1933 6 view .LVU477
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 135


 1737 001c 30B3     		cbz	r0, .L131
1935:FreeRTOS/src/tasks.c **** 
 1738              		.loc 1 1935 39 is_stmt 1 view .LVU478
1938:FreeRTOS/src/tasks.c **** 				{
 1739              		.loc 1 1938 5 view .LVU479
1938:FreeRTOS/src/tasks.c **** 				{
 1740              		.loc 1 1938 30 is_stmt 0 view .LVU480
 1741 001e 164B     		ldr	r3, .L134
 1742 0020 1B68     		ldr	r3, [r3]
1938:FreeRTOS/src/tasks.c **** 				{
 1743              		.loc 1 1938 7 view .LVU481
 1744 0022 E3B9     		cbnz	r3, .L129
1942:FreeRTOS/src/tasks.c **** 					{
 1745              		.loc 1 1942 6 is_stmt 1 view .LVU482
1942:FreeRTOS/src/tasks.c **** 					{
 1746              		.loc 1 1942 15 is_stmt 0 view .LVU483
 1747 0024 E26A     		ldr	r2, [r4, #44]
1942:FreeRTOS/src/tasks.c **** 					{
 1748              		.loc 1 1942 43 view .LVU484
 1749 0026 154B     		ldr	r3, .L134+4
 1750 0028 1B68     		ldr	r3, [r3]
 1751 002a DB6A     		ldr	r3, [r3, #44]
1942:FreeRTOS/src/tasks.c **** 					{
 1752              		.loc 1 1942 8 view .LVU485
 1753 002c 9A42     		cmp	r2, r3
 1754 002e 14D2     		bcs	.L132
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1755              		.loc 1 1907 13 view .LVU486
 1756 0030 0026     		movs	r6, #0
 1757              	.L130:
 1758              	.LVL141:
1948:FreeRTOS/src/tasks.c **** 					}
 1759              		.loc 1 1948 31 is_stmt 1 view .LVU487
1951:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1760              		.loc 1 1951 6 view .LVU488
1951:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1761              		.loc 1 1951 15 is_stmt 0 view .LVU489
 1762 0032 271D     		adds	r7, r4, #4
 1763 0034 3846     		mov	r0, r7
 1764 0036 FFF7FEFF 		bl	uxListRemove
 1765              	.LVL142:
1952:FreeRTOS/src/tasks.c **** 				}
 1766              		.loc 1 1952 6 is_stmt 1 view .LVU490
1952:FreeRTOS/src/tasks.c **** 				}
 1767              		.loc 1 1952 6 view .LVU491
 1768 003a E36A     		ldr	r3, [r4, #44]
 1769 003c 0122     		movs	r2, #1
 1770 003e 9A40     		lsls	r2, r2, r3
 1771 0040 0F49     		ldr	r1, .L134+8
 1772 0042 0868     		ldr	r0, [r1]
 1773 0044 0243     		orrs	r2, r2, r0
 1774 0046 0A60     		str	r2, [r1]
1952:FreeRTOS/src/tasks.c **** 				}
 1775              		.loc 1 1952 6 view .LVU492
 1776 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1777 004c 9A00     		lsls	r2, r3, #2
 1778 004e 3946     		mov	r1, r7
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 136


 1779 0050 0C48     		ldr	r0, .L134+12
 1780 0052 1044     		add	r0, r0, r2
 1781 0054 FFF7FEFF 		bl	vListInsertEnd
 1782              	.LVL143:
1952:FreeRTOS/src/tasks.c **** 				}
 1783              		.loc 1 1952 36 view .LVU493
 1784 0058 09E0     		b	.L128
 1785              	.LVL144:
 1786              	.L132:
1944:FreeRTOS/src/tasks.c **** 					}
 1787              		.loc 1 1944 22 is_stmt 0 view .LVU494
 1788 005a 0126     		movs	r6, #1
 1789 005c E9E7     		b	.L130
 1790              	.L129:
1959:FreeRTOS/src/tasks.c **** 				}
 1791              		.loc 1 1959 6 is_stmt 1 view .LVU495
 1792 005e 04F11801 		add	r1, r4, #24
 1793 0062 0948     		ldr	r0, .L134+16
 1794 0064 FFF7FEFF 		bl	vListInsertEnd
 1795              	.LVL145:
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1796              		.loc 1 1907 13 is_stmt 0 view .LVU496
 1797 0068 0026     		movs	r6, #0
 1798 006a 00E0     		b	.L128
 1799              	.L131:
1907:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1800              		.loc 1 1907 13 view .LVU497
 1801 006c 0026     		movs	r6, #0
 1802              	.LVL146:
 1803              	.L128:
1964:FreeRTOS/src/tasks.c **** 			}
 1804              		.loc 1 1964 29 is_stmt 1 view .LVU498
1967:FreeRTOS/src/tasks.c **** 
 1805              		.loc 1 1967 3 view .LVU499
 1806              	.LBB36:
 1807              	.LBI36:
 229:FreeRTOS/inc/portmacro.h **** {
 1808              		.loc 2 229 30 view .LVU500
 1809              	.LBB37:
 1810              		.loc 2 231 2 view .LVU501
 1811              		.syntax unified
 1812              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1813 006e 85F31188 			msr basepri, r5	
 1814              	@ 0 "" 2
 1815              	.LVL147:
 1816              		.loc 2 231 2 is_stmt 0 view .LVU502
 1817              		.thumb
 1818              		.syntax unified
 1819              	.LBE37:
 1820              	.LBE36:
1969:FreeRTOS/src/tasks.c **** 	}
 1821              		.loc 1 1969 3 is_stmt 1 view .LVU503
1970:FreeRTOS/src/tasks.c **** 
 1822              		.loc 1 1970 2 is_stmt 0 view .LVU504
 1823 0072 3046     		mov	r0, r6
 1824 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1825              	.LVL148:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 137


 1826              	.L135:
1970:FreeRTOS/src/tasks.c **** 
 1827              		.loc 1 1970 2 view .LVU505
 1828 0076 00BF     		.align	2
 1829              	.L134:
 1830 0078 00000000 		.word	.LANCHOR16
 1831 007c 00000000 		.word	.LANCHOR10
 1832 0080 00000000 		.word	.LANCHOR13
 1833 0084 00000000 		.word	.LANCHOR4
 1834 0088 00000000 		.word	.LANCHOR1
 1835              		.cfi_endproc
 1836              	.LFE82:
 1838              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1839              		.align	1
 1840              		.global	vTaskStartScheduler
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu softvfp
 1846              	vTaskStartScheduler:
 1847              	.LFB83:
1976:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 1848              		.loc 1 1976 1 is_stmt 1 view -0
 1849              		.cfi_startproc
 1850              		@ args = 0, pretend = 0, frame = 0
 1851              		@ frame_needed = 0, uses_anonymous_args = 0
 1852 0000 00B5     		push	{lr}
 1853              	.LCFI17:
 1854              		.cfi_def_cfa_offset 4
 1855              		.cfi_offset 14, -4
 1856 0002 83B0     		sub	sp, sp, #12
 1857              	.LCFI18:
 1858              		.cfi_def_cfa_offset 16
1977:FreeRTOS/src/tasks.c **** 
 1859              		.loc 1 1977 1 view .LVU507
2009:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
 1860              		.loc 1 2009 3 view .LVU508
2009:FreeRTOS/src/tasks.c **** 								configIDLE_TASK_NAME,
 1861              		.loc 1 2009 13 is_stmt 0 view .LVU509
 1862 0004 114B     		ldr	r3, .L140
 1863 0006 0193     		str	r3, [sp, #4]
 1864 0008 0023     		movs	r3, #0
 1865 000a 0093     		str	r3, [sp]
 1866 000c 8022     		movs	r2, #128
 1867 000e 1049     		ldr	r1, .L140+4
 1868 0010 1048     		ldr	r0, .L140+8
 1869 0012 FFF7FEFF 		bl	xTaskCreate
 1870              	.LVL149:
2031:FreeRTOS/src/tasks.c **** 	{
 1871              		.loc 1 2031 2 is_stmt 1 view .LVU510
2031:FreeRTOS/src/tasks.c **** 	{
 1872              		.loc 1 2031 4 is_stmt 0 view .LVU511
 1873 0016 0128     		cmp	r0, #1
 1874 0018 02D0     		beq	.L139
 1875              	.LVL150:
 1876              	.L136:
2096:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 138


 1877              		.loc 1 2096 1 view .LVU512
 1878 001a 03B0     		add	sp, sp, #12
 1879              	.LCFI19:
 1880              		.cfi_remember_state
 1881              		.cfi_def_cfa_offset 4
 1882              		@ sp needed
 1883 001c 5DF804FB 		ldr	pc, [sp], #4
 1884              	.LVL151:
 1885              	.L139:
 1886              	.LCFI20:
 1887              		.cfi_restore_state
2047:FreeRTOS/src/tasks.c **** 
 1888              		.loc 1 2047 3 is_stmt 1 view .LVU513
 1889              	.LBB38:
 1890              	.LBI38:
 193:FreeRTOS/inc/portmacro.h **** {
 1891              		.loc 2 193 30 view .LVU514
 1892              	.LBB39:
 195:FreeRTOS/inc/portmacro.h **** 
 1893              		.loc 2 195 1 view .LVU515
 197:FreeRTOS/inc/portmacro.h **** 	(
 1894              		.loc 2 197 2 view .LVU516
 1895              		.syntax unified
 1896              	@ 197 "FreeRTOS/inc/portmacro.h" 1
 1897 0020 4FF0BF03 			mov r3, #191												
 1898 0024 83F31188 		msr basepri, r3											
 1899 0028 BFF36F8F 		isb														
 1900 002c BFF34F8F 		dsb														
 1901              	
 1902              	@ 0 "" 2
 1903              		.thumb
 1904              		.syntax unified
 1905              	.LBE39:
 1906              	.LBE38:
2059:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1907              		.loc 1 2059 3 view .LVU517
2059:FreeRTOS/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1908              		.loc 1 2059 24 is_stmt 0 view .LVU518
 1909 0030 094B     		ldr	r3, .L140+12
 1910 0032 4FF0FF32 		mov	r2, #-1
 1911 0036 1A60     		str	r2, [r3]
2060:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1912              		.loc 1 2060 3 is_stmt 1 view .LVU519
2060:FreeRTOS/src/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1913              		.loc 1 2060 21 is_stmt 0 view .LVU520
 1914 0038 084B     		ldr	r3, .L140+16
 1915 003a 0122     		movs	r2, #1
 1916 003c 1A60     		str	r2, [r3]
2061:FreeRTOS/src/tasks.c **** 
 1917              		.loc 1 2061 3 is_stmt 1 view .LVU521
2061:FreeRTOS/src/tasks.c **** 
 1918              		.loc 1 2061 14 is_stmt 0 view .LVU522
 1919 003e 084B     		ldr	r3, .L140+20
 1920 0040 0022     		movs	r2, #0
 1921 0042 1A60     		str	r2, [r3]
2069:FreeRTOS/src/tasks.c **** 
 1922              		.loc 1 2069 43 is_stmt 1 view .LVU523
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 139


2071:FreeRTOS/src/tasks.c **** 
 1923              		.loc 1 2071 26 view .LVU524
2075:FreeRTOS/src/tasks.c **** 		{
 1924              		.loc 1 2075 3 view .LVU525
2075:FreeRTOS/src/tasks.c **** 		{
 1925              		.loc 1 2075 7 is_stmt 0 view .LVU526
 1926 0044 FFF7FEFF 		bl	xPortStartScheduler
 1927              	.LVL152:
2090:FreeRTOS/src/tasks.c **** 	}
 1928              		.loc 1 2090 67 is_stmt 1 view .LVU527
2095:FreeRTOS/src/tasks.c **** }
 1929              		.loc 1 2095 2 view .LVU528
2096:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 1930              		.loc 1 2096 1 is_stmt 0 view .LVU529
 1931 0048 E7E7     		b	.L136
 1932              	.L141:
 1933 004a 00BF     		.align	2
 1934              	.L140:
 1935 004c 00000000 		.word	.LANCHOR17
 1936 0050 00000000 		.word	.LC0
 1937 0054 00000000 		.word	prvIdleTask
 1938 0058 00000000 		.word	.LANCHOR3
 1939 005c 00000000 		.word	.LANCHOR11
 1940 0060 00000000 		.word	.LANCHOR15
 1941              		.cfi_endproc
 1942              	.LFE83:
 1944              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1945              		.align	1
 1946              		.global	vTaskEndScheduler
 1947              		.syntax unified
 1948              		.thumb
 1949              		.thumb_func
 1950              		.fpu softvfp
 1952              	vTaskEndScheduler:
 1953              	.LFB84:
2100:FreeRTOS/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1954              		.loc 1 2100 1 is_stmt 1 view -0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958 0000 08B5     		push	{r3, lr}
 1959              	.LCFI21:
 1960              		.cfi_def_cfa_offset 8
 1961              		.cfi_offset 3, -8
 1962              		.cfi_offset 14, -4
2104:FreeRTOS/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1963              		.loc 1 2104 2 view .LVU531
 1964              	.LBB40:
 1965              	.LBI40:
 193:FreeRTOS/inc/portmacro.h **** {
 1966              		.loc 2 193 30 view .LVU532
 1967              	.LBB41:
 195:FreeRTOS/inc/portmacro.h **** 
 1968              		.loc 2 195 1 view .LVU533
 197:FreeRTOS/inc/portmacro.h **** 	(
 1969              		.loc 2 197 2 view .LVU534
 1970              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 140


 1971              	@ 197 "FreeRTOS/inc/portmacro.h" 1
 1972 0002 4FF0BF03 			mov r3, #191												
 1973 0006 83F31188 		msr basepri, r3											
 1974 000a BFF36F8F 		isb														
 1975 000e BFF34F8F 		dsb														
 1976              	
 1977              	@ 0 "" 2
 1978              		.thumb
 1979              		.syntax unified
 1980              	.LBE41:
 1981              	.LBE40:
2105:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
 1982              		.loc 1 2105 2 view .LVU535
2105:FreeRTOS/src/tasks.c **** 	vPortEndScheduler();
 1983              		.loc 1 2105 20 is_stmt 0 view .LVU536
 1984 0012 034B     		ldr	r3, .L144
 1985 0014 0022     		movs	r2, #0
 1986 0016 1A60     		str	r2, [r3]
2106:FreeRTOS/src/tasks.c **** }
 1987              		.loc 1 2106 2 is_stmt 1 view .LVU537
 1988 0018 FFF7FEFF 		bl	vPortEndScheduler
 1989              	.LVL153:
2107:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 1990              		.loc 1 2107 1 is_stmt 0 view .LVU538
 1991 001c 08BD     		pop	{r3, pc}
 1992              	.L145:
 1993 001e 00BF     		.align	2
 1994              	.L144:
 1995 0020 00000000 		.word	.LANCHOR11
 1996              		.cfi_endproc
 1997              	.LFE84:
 1999              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2000              		.align	1
 2001              		.global	vTaskSuspendAll
 2002              		.syntax unified
 2003              		.thumb
 2004              		.thumb_func
 2005              		.fpu softvfp
 2007              	vTaskSuspendAll:
 2008              	.LFB85:
2111:FreeRTOS/src/tasks.c **** 	/* A critical section is not required as the variable is of type
 2009              		.loc 1 2111 1 is_stmt 1 view -0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013              		@ link register save eliminated.
2119:FreeRTOS/src/tasks.c **** 
 2014              		.loc 1 2119 24 view .LVU540
2123:FreeRTOS/src/tasks.c **** 
 2015              		.loc 1 2123 2 view .LVU541
 2016 0000 024A     		ldr	r2, .L147
 2017 0002 1368     		ldr	r3, [r2]
 2018 0004 0133     		adds	r3, r3, #1
 2019 0006 1360     		str	r3, [r2]
2127:FreeRTOS/src/tasks.c **** }
 2020              		.loc 1 2127 2 view .LVU542
2128:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 141


 2021              		.loc 1 2128 1 is_stmt 0 view .LVU543
 2022 0008 7047     		bx	lr
 2023              	.L148:
 2024 000a 00BF     		.align	2
 2025              	.L147:
 2026 000c 00000000 		.word	.LANCHOR16
 2027              		.cfi_endproc
 2028              	.LFE85:
 2030              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2031              		.align	1
 2032              		.global	xTaskGetTickCount
 2033              		.syntax unified
 2034              		.thumb
 2035              		.thumb_func
 2036              		.fpu softvfp
 2038              	xTaskGetTickCount:
 2039              	.LFB87:
2305:FreeRTOS/src/tasks.c **** TickType_t xTicks;
 2040              		.loc 1 2305 1 is_stmt 1 view -0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 0
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
 2044              		@ link register save eliminated.
2306:FreeRTOS/src/tasks.c **** 
 2045              		.loc 1 2306 1 view .LVU545
2309:FreeRTOS/src/tasks.c **** 	{
 2046              		.loc 1 2309 32 view .LVU546
2311:FreeRTOS/src/tasks.c **** 	}
 2047              		.loc 1 2311 3 view .LVU547
2311:FreeRTOS/src/tasks.c **** 	}
 2048              		.loc 1 2311 10 is_stmt 0 view .LVU548
 2049 0000 014B     		ldr	r3, .L150
 2050 0002 1868     		ldr	r0, [r3]
 2051              	.LVL154:
2313:FreeRTOS/src/tasks.c **** 
 2052              		.loc 1 2313 31 is_stmt 1 view .LVU549
2315:FreeRTOS/src/tasks.c **** }
 2053              		.loc 1 2315 2 view .LVU550
2316:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2054              		.loc 1 2316 1 is_stmt 0 view .LVU551
 2055 0004 7047     		bx	lr
 2056              	.L151:
 2057 0006 00BF     		.align	2
 2058              	.L150:
 2059 0008 00000000 		.word	.LANCHOR15
 2060              		.cfi_endproc
 2061              	.LFE87:
 2063              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2064              		.align	1
 2065              		.global	xTaskGetTickCountFromISR
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
 2069              		.fpu softvfp
 2071              	xTaskGetTickCountFromISR:
 2072              	.LFB88:
2320:FreeRTOS/src/tasks.c **** TickType_t xReturn;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 142


 2073              		.loc 1 2320 1 is_stmt 1 view -0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
2321:FreeRTOS/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 2078              		.loc 1 2321 1 view .LVU553
2322:FreeRTOS/src/tasks.c **** 
 2079              		.loc 1 2322 1 view .LVU554
2338:FreeRTOS/src/tasks.c **** 
 2080              		.loc 1 2338 44 view .LVU555
2340:FreeRTOS/src/tasks.c **** 	{
 2081              		.loc 1 2340 2 view .LVU556
 2082              	.LVL155:
2342:FreeRTOS/src/tasks.c **** 	}
 2083              		.loc 1 2342 3 view .LVU557
2342:FreeRTOS/src/tasks.c **** 	}
 2084              		.loc 1 2342 11 is_stmt 0 view .LVU558
 2085 0000 014B     		ldr	r3, .L153
 2086 0002 1868     		ldr	r0, [r3]
 2087              	.LVL156:
2344:FreeRTOS/src/tasks.c **** 
 2088              		.loc 1 2344 2 is_stmt 1 view .LVU559
2346:FreeRTOS/src/tasks.c **** }
 2089              		.loc 1 2346 2 view .LVU560
2347:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2090              		.loc 1 2347 1 is_stmt 0 view .LVU561
 2091 0004 7047     		bx	lr
 2092              	.L154:
 2093 0006 00BF     		.align	2
 2094              	.L153:
 2095 0008 00000000 		.word	.LANCHOR15
 2096              		.cfi_endproc
 2097              	.LFE88:
 2099              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2100              		.align	1
 2101              		.global	uxTaskGetNumberOfTasks
 2102              		.syntax unified
 2103              		.thumb
 2104              		.thumb_func
 2105              		.fpu softvfp
 2107              	uxTaskGetNumberOfTasks:
 2108              	.LFB89:
2351:FreeRTOS/src/tasks.c **** 	/* A critical section is not required because the variables are of type
 2109              		.loc 1 2351 1 is_stmt 1 view -0
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 0
 2112              		@ frame_needed = 0, uses_anonymous_args = 0
 2113              		@ link register save eliminated.
2354:FreeRTOS/src/tasks.c **** }
 2114              		.loc 1 2354 2 view .LVU563
2354:FreeRTOS/src/tasks.c **** }
 2115              		.loc 1 2354 9 is_stmt 0 view .LVU564
 2116 0000 014B     		ldr	r3, .L156
 2117 0002 1868     		ldr	r0, [r3]
2355:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2118              		.loc 1 2355 1 view .LVU565
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 143


 2119 0004 7047     		bx	lr
 2120              	.L157:
 2121 0006 00BF     		.align	2
 2122              	.L156:
 2123 0008 00000000 		.word	.LANCHOR9
 2124              		.cfi_endproc
 2125              	.LFE89:
 2127              		.section	.text.pcTaskGetName,"ax",%progbits
 2128              		.align	1
 2129              		.global	pcTaskGetName
 2130              		.syntax unified
 2131              		.thumb
 2132              		.thumb_func
 2133              		.fpu softvfp
 2135              	pcTaskGetName:
 2136              	.LVL157:
 2137              	.LFB90:
2359:FreeRTOS/src/tasks.c **** TCB_t *pxTCB;
 2138              		.loc 1 2359 1 is_stmt 1 view -0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 0
 2141              		@ frame_needed = 0, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
2360:FreeRTOS/src/tasks.c **** 
 2143              		.loc 1 2360 1 view .LVU567
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 2144              		.loc 1 2364 2 view .LVU568
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 2145              		.loc 1 2364 10 is_stmt 0 view .LVU569
 2146 0000 0346     		mov	r3, r0
 2147 0002 10B1     		cbz	r0, .L160
 2148              	.LVL158:
 2149              	.L159:
2365:FreeRTOS/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2150              		.loc 1 2365 23 is_stmt 1 discriminator 4 view .LVU570
2366:FreeRTOS/src/tasks.c **** }
 2151              		.loc 1 2366 2 discriminator 4 view .LVU571
2367:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2152              		.loc 1 2367 1 is_stmt 0 discriminator 4 view .LVU572
 2153 0004 03F13400 		add	r0, r3, #52
 2154 0008 7047     		bx	lr
 2155              	.LVL159:
 2156              	.L160:
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 2157              		.loc 1 2364 10 discriminator 1 view .LVU573
 2158 000a 014B     		ldr	r3, .L161
 2159 000c 1B68     		ldr	r3, [r3]
 2160              	.LVL160:
2364:FreeRTOS/src/tasks.c **** 	configASSERT( pxTCB );
 2161              		.loc 1 2364 10 discriminator 1 view .LVU574
 2162 000e F9E7     		b	.L159
 2163              	.L162:
 2164              		.align	2
 2165              	.L161:
 2166 0010 00000000 		.word	.LANCHOR10
 2167              		.cfi_endproc
 2168              	.LFE90:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 144


 2170              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2171              		.align	1
 2172              		.global	xTaskIncrementTick
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu softvfp
 2178              	xTaskIncrementTick:
 2179              	.LFB92:
2708:FreeRTOS/src/tasks.c **** TCB_t * pxTCB;
 2180              		.loc 1 2708 1 is_stmt 1 view -0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2185              	.LCFI22:
 2186              		.cfi_def_cfa_offset 24
 2187              		.cfi_offset 3, -24
 2188              		.cfi_offset 4, -20
 2189              		.cfi_offset 5, -16
 2190              		.cfi_offset 6, -12
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
2709:FreeRTOS/src/tasks.c **** TickType_t xItemValue;
 2193              		.loc 1 2709 1 view .LVU576
2710:FreeRTOS/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2194              		.loc 1 2710 1 view .LVU577
2711:FreeRTOS/src/tasks.c **** 
 2195              		.loc 1 2711 1 view .LVU578
 2196              	.LVL161:
2716:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2197              		.loc 1 2716 40 view .LVU579
2717:FreeRTOS/src/tasks.c **** 	{
 2198              		.loc 1 2717 2 view .LVU580
2717:FreeRTOS/src/tasks.c **** 	{
 2199              		.loc 1 2717 27 is_stmt 0 view .LVU581
 2200 0002 344B     		ldr	r3, .L183
 2201 0004 1B68     		ldr	r3, [r3]
2717:FreeRTOS/src/tasks.c **** 	{
 2202              		.loc 1 2717 4 view .LVU582
 2203 0006 002B     		cmp	r3, #0
 2204 0008 5DD1     		bne	.L164
 2205              	.LBB42:
2721:FreeRTOS/src/tasks.c **** 
 2206              		.loc 1 2721 3 is_stmt 1 view .LVU583
2721:FreeRTOS/src/tasks.c **** 
 2207              		.loc 1 2721 49 is_stmt 0 view .LVU584
 2208 000a 334B     		ldr	r3, .L183+4
 2209 000c 1E68     		ldr	r6, [r3]
2721:FreeRTOS/src/tasks.c **** 
 2210              		.loc 1 2721 20 view .LVU585
 2211 000e 0136     		adds	r6, r6, #1
 2212              	.LVL162:
2725:FreeRTOS/src/tasks.c **** 
 2213              		.loc 1 2725 3 is_stmt 1 view .LVU586
2725:FreeRTOS/src/tasks.c **** 
 2214              		.loc 1 2725 14 is_stmt 0 view .LVU587
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 145


 2215 0010 1E60     		str	r6, [r3]
2727:FreeRTOS/src/tasks.c **** 		{
 2216              		.loc 1 2727 3 is_stmt 1 view .LVU588
2727:FreeRTOS/src/tasks.c **** 		{
 2217              		.loc 1 2727 5 is_stmt 0 view .LVU589
 2218 0012 AEB1     		cbz	r6, .L180
 2219              	.L165:
2733:FreeRTOS/src/tasks.c **** 		}
 2220              		.loc 1 2733 28 is_stmt 1 view .LVU590
2740:FreeRTOS/src/tasks.c **** 		{
 2221              		.loc 1 2740 3 view .LVU591
2740:FreeRTOS/src/tasks.c **** 		{
 2222              		.loc 1 2740 23 is_stmt 0 view .LVU592
 2223 0014 314B     		ldr	r3, .L183+8
 2224 0016 1B68     		ldr	r3, [r3]
2740:FreeRTOS/src/tasks.c **** 		{
 2225              		.loc 1 2740 5 view .LVU593
 2226 0018 B342     		cmp	r3, r6
 2227 001a 4AD9     		bls	.L175
 2228              	.LBE42:
2711:FreeRTOS/src/tasks.c **** 
 2229              		.loc 1 2711 12 view .LVU594
 2230 001c 0027     		movs	r7, #0
 2231              	.LVL163:
 2232              	.L167:
 2233              	.LBB44:
2823:FreeRTOS/src/tasks.c **** 			{
 2234              		.loc 1 2823 4 is_stmt 1 view .LVU595
2823:FreeRTOS/src/tasks.c **** 			{
 2235              		.loc 1 2823 8 is_stmt 0 view .LVU596
 2236 001e 304B     		ldr	r3, .L183+12
 2237 0020 1B68     		ldr	r3, [r3]
 2238 0022 DB6A     		ldr	r3, [r3, #44]
 2239 0024 03EB8303 		add	r3, r3, r3, lsl #2
 2240 0028 9A00     		lsls	r2, r3, #2
 2241 002a 2E4B     		ldr	r3, .L183+16
 2242 002c 9B58     		ldr	r3, [r3, r2]
2823:FreeRTOS/src/tasks.c **** 			{
 2243              		.loc 1 2823 6 view .LVU597
 2244 002e 012B     		cmp	r3, #1
 2245 0030 00D9     		bls	.L173
2825:FreeRTOS/src/tasks.c **** 			}
 2246              		.loc 1 2825 21 view .LVU598
 2247 0032 0127     		movs	r7, #1
 2248              	.LVL164:
 2249              	.L173:
2829:FreeRTOS/src/tasks.c **** 			}
 2250              		.loc 1 2829 29 is_stmt 1 view .LVU599
2851:FreeRTOS/src/tasks.c **** 			{
 2251              		.loc 1 2851 4 view .LVU600
2851:FreeRTOS/src/tasks.c **** 			{
 2252              		.loc 1 2851 22 is_stmt 0 view .LVU601
 2253 0034 2C4B     		ldr	r3, .L183+20
 2254 0036 1B68     		ldr	r3, [r3]
2851:FreeRTOS/src/tasks.c **** 			{
 2255              		.loc 1 2851 6 view .LVU602
 2256 0038 002B     		cmp	r3, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 146


 2257 003a 49D0     		beq	.L163
2853:FreeRTOS/src/tasks.c **** 			}
 2258              		.loc 1 2853 21 view .LVU603
 2259 003c 0127     		movs	r7, #1
 2260              	.LVL165:
2853:FreeRTOS/src/tasks.c **** 			}
 2261              		.loc 1 2853 21 view .LVU604
 2262              	.LBE44:
2875:FreeRTOS/src/tasks.c **** }
 2263              		.loc 1 2875 2 is_stmt 1 view .LVU605
2875:FreeRTOS/src/tasks.c **** }
 2264              		.loc 1 2875 9 is_stmt 0 view .LVU606
 2265 003e 47E0     		b	.L163
 2266              	.LVL166:
 2267              	.L180:
 2268              	.LBB45:
 2269              	.LBB43:
2729:FreeRTOS/src/tasks.c **** 		}
 2270              		.loc 1 2729 4 is_stmt 1 view .LVU607
2729:FreeRTOS/src/tasks.c **** 		}
 2271              		.loc 1 2729 4 view .LVU608
2729:FreeRTOS/src/tasks.c **** 		}
 2272              		.loc 1 2729 4 view .LVU609
 2273 0040 2A4A     		ldr	r2, .L183+24
 2274 0042 1168     		ldr	r1, [r2]
 2275              	.LVL167:
2729:FreeRTOS/src/tasks.c **** 		}
 2276              		.loc 1 2729 4 view .LVU610
 2277 0044 2A4B     		ldr	r3, .L183+28
 2278 0046 1868     		ldr	r0, [r3]
 2279 0048 1060     		str	r0, [r2]
2729:FreeRTOS/src/tasks.c **** 		}
 2280              		.loc 1 2729 4 view .LVU611
 2281 004a 1960     		str	r1, [r3]
2729:FreeRTOS/src/tasks.c **** 		}
 2282              		.loc 1 2729 4 view .LVU612
 2283 004c 294A     		ldr	r2, .L183+32
 2284 004e 1368     		ldr	r3, [r2]
 2285 0050 0133     		adds	r3, r3, #1
 2286 0052 1360     		str	r3, [r2]
2729:FreeRTOS/src/tasks.c **** 		}
 2287              		.loc 1 2729 4 view .LVU613
 2288 0054 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2289              	.LVL168:
2729:FreeRTOS/src/tasks.c **** 		}
 2290              		.loc 1 2729 4 is_stmt 0 view .LVU614
 2291              	.LBE43:
2729:FreeRTOS/src/tasks.c **** 		}
 2292              		.loc 1 2729 30 is_stmt 1 view .LVU615
 2293 0058 DCE7     		b	.L165
 2294              	.LVL169:
 2295              	.L176:
2806:FreeRTOS/src/tasks.c **** 						}
 2296              		.loc 1 2806 24 is_stmt 0 view .LVU616
 2297 005a 0127     		movs	r7, #1
 2298              	.LVL170:
 2299              	.L166:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 147


2742:FreeRTOS/src/tasks.c **** 			{
 2300              		.loc 1 2742 4 is_stmt 1 view .LVU617
2744:FreeRTOS/src/tasks.c **** 				{
 2301              		.loc 1 2744 5 view .LVU618
2744:FreeRTOS/src/tasks.c **** 				{
 2302              		.loc 1 2744 9 is_stmt 0 view .LVU619
 2303 005c 234B     		ldr	r3, .L183+24
 2304 005e 1B68     		ldr	r3, [r3]
 2305 0060 1B68     		ldr	r3, [r3]
2744:FreeRTOS/src/tasks.c **** 				{
 2306              		.loc 1 2744 7 view .LVU620
 2307 0062 43B3     		cbz	r3, .L181
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2308              		.loc 1 2760 6 is_stmt 1 view .LVU621
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2309              		.loc 1 2760 14 is_stmt 0 view .LVU622
 2310 0064 214B     		ldr	r3, .L183+24
 2311 0066 1B68     		ldr	r3, [r3]
 2312 0068 DB68     		ldr	r3, [r3, #12]
2760:FreeRTOS/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2313              		.loc 1 2760 12 view .LVU623
 2314 006a DC68     		ldr	r4, [r3, #12]
 2315              	.LVL171:
2761:FreeRTOS/src/tasks.c **** 
 2316              		.loc 1 2761 6 is_stmt 1 view .LVU624
2761:FreeRTOS/src/tasks.c **** 
 2317              		.loc 1 2761 17 is_stmt 0 view .LVU625
 2318 006c 6368     		ldr	r3, [r4, #4]
 2319              	.LVL172:
2763:FreeRTOS/src/tasks.c **** 					{
 2320              		.loc 1 2763 6 is_stmt 1 view .LVU626
2763:FreeRTOS/src/tasks.c **** 					{
 2321              		.loc 1 2763 8 is_stmt 0 view .LVU627
 2322 006e 9E42     		cmp	r6, r3
 2323 0070 26D3     		bcc	.L182
2775:FreeRTOS/src/tasks.c **** 					}
 2324              		.loc 1 2775 31 is_stmt 1 view .LVU628
2779:FreeRTOS/src/tasks.c **** 
 2325              		.loc 1 2779 6 view .LVU629
2779:FreeRTOS/src/tasks.c **** 
 2326              		.loc 1 2779 15 is_stmt 0 view .LVU630
 2327 0072 251D     		adds	r5, r4, #4
 2328 0074 2846     		mov	r0, r5
 2329 0076 FFF7FEFF 		bl	uxListRemove
 2330              	.LVL173:
2783:FreeRTOS/src/tasks.c **** 					{
 2331              		.loc 1 2783 6 is_stmt 1 view .LVU631
2783:FreeRTOS/src/tasks.c **** 					{
 2332              		.loc 1 2783 10 is_stmt 0 view .LVU632
 2333 007a A36A     		ldr	r3, [r4, #40]
2783:FreeRTOS/src/tasks.c **** 					{
 2334              		.loc 1 2783 8 view .LVU633
 2335 007c 1BB1     		cbz	r3, .L170
2785:FreeRTOS/src/tasks.c **** 					}
 2336              		.loc 1 2785 7 is_stmt 1 view .LVU634
2785:FreeRTOS/src/tasks.c **** 					}
 2337              		.loc 1 2785 16 is_stmt 0 view .LVU635
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 148


 2338 007e 04F11800 		add	r0, r4, #24
 2339 0082 FFF7FEFF 		bl	uxListRemove
 2340              	.LVL174:
 2341              	.L170:
2789:FreeRTOS/src/tasks.c **** 					}
 2342              		.loc 1 2789 31 is_stmt 1 view .LVU636
2794:FreeRTOS/src/tasks.c **** 
 2343              		.loc 1 2794 6 view .LVU637
2794:FreeRTOS/src/tasks.c **** 
 2344              		.loc 1 2794 6 view .LVU638
 2345 0086 E36A     		ldr	r3, [r4, #44]
 2346 0088 0122     		movs	r2, #1
 2347 008a 9A40     		lsls	r2, r2, r3
 2348 008c 1A49     		ldr	r1, .L183+36
 2349 008e 0868     		ldr	r0, [r1]
 2350 0090 0243     		orrs	r2, r2, r0
 2351 0092 0A60     		str	r2, [r1]
2794:FreeRTOS/src/tasks.c **** 
 2352              		.loc 1 2794 6 view .LVU639
 2353 0094 03EB8303 		add	r3, r3, r3, lsl #2
 2354 0098 9A00     		lsls	r2, r3, #2
 2355 009a 2946     		mov	r1, r5
 2356 009c 1148     		ldr	r0, .L183+16
 2357 009e 1044     		add	r0, r0, r2
 2358 00a0 FFF7FEFF 		bl	vListInsertEnd
 2359              	.LVL175:
2794:FreeRTOS/src/tasks.c **** 
 2360              		.loc 1 2794 36 view .LVU640
2804:FreeRTOS/src/tasks.c **** 						{
 2361              		.loc 1 2804 7 view .LVU641
2804:FreeRTOS/src/tasks.c **** 						{
 2362              		.loc 1 2804 16 is_stmt 0 view .LVU642
 2363 00a4 E26A     		ldr	r2, [r4, #44]
2804:FreeRTOS/src/tasks.c **** 						{
 2364              		.loc 1 2804 44 view .LVU643
 2365 00a6 0E4B     		ldr	r3, .L183+12
 2366 00a8 1B68     		ldr	r3, [r3]
 2367 00aa DB6A     		ldr	r3, [r3, #44]
2804:FreeRTOS/src/tasks.c **** 						{
 2368              		.loc 1 2804 9 view .LVU644
 2369 00ac 9A42     		cmp	r2, r3
 2370 00ae D4D2     		bcs	.L176
 2371 00b0 D4E7     		b	.L166
 2372              	.LVL176:
 2373              	.L175:
2804:FreeRTOS/src/tasks.c **** 						{
 2374              		.loc 1 2804 9 view .LVU645
 2375              	.LBE45:
2711:FreeRTOS/src/tasks.c **** 
 2376              		.loc 1 2711 12 view .LVU646
 2377 00b2 0027     		movs	r7, #0
 2378 00b4 D2E7     		b	.L166
 2379              	.LVL177:
 2380              	.L181:
 2381              	.LBB46:
2751:FreeRTOS/src/tasks.c **** 					break;
 2382              		.loc 1 2751 6 is_stmt 1 view .LVU647
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 149


2751:FreeRTOS/src/tasks.c **** 					break;
 2383              		.loc 1 2751 27 is_stmt 0 view .LVU648
 2384 00b6 094B     		ldr	r3, .L183+8
 2385 00b8 4FF0FF32 		mov	r2, #-1
 2386 00bc 1A60     		str	r2, [r3]
2752:FreeRTOS/src/tasks.c **** 				}
 2387              		.loc 1 2752 6 is_stmt 1 view .LVU649
 2388 00be AEE7     		b	.L167
 2389              	.LVL178:
 2390              	.L182:
2770:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2391              		.loc 1 2770 7 view .LVU650
2770:FreeRTOS/src/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2392              		.loc 1 2770 28 is_stmt 0 view .LVU651
 2393 00c0 064A     		ldr	r2, .L183+8
 2394 00c2 1360     		str	r3, [r2]
2771:FreeRTOS/src/tasks.c **** 					}
 2395              		.loc 1 2771 7 is_stmt 1 view .LVU652
 2396 00c4 ABE7     		b	.L167
 2397              	.LVL179:
 2398              	.L164:
2771:FreeRTOS/src/tasks.c **** 					}
 2399              		.loc 1 2771 7 is_stmt 0 view .LVU653
 2400              	.LBE46:
2864:FreeRTOS/src/tasks.c **** 
 2401              		.loc 1 2864 3 is_stmt 1 view .LVU654
 2402 00c6 0D4A     		ldr	r2, .L183+40
 2403 00c8 1368     		ldr	r3, [r2]
 2404 00ca 0133     		adds	r3, r3, #1
 2405 00cc 1360     		str	r3, [r2]
2711:FreeRTOS/src/tasks.c **** 
 2406              		.loc 1 2711 12 is_stmt 0 view .LVU655
 2407 00ce 0027     		movs	r7, #0
 2408              	.LVL180:
 2409              	.L163:
2876:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2410              		.loc 1 2876 1 view .LVU656
 2411 00d0 3846     		mov	r0, r7
 2412 00d2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2413              	.L184:
 2414              		.align	2
 2415              	.L183:
 2416 00d4 00000000 		.word	.LANCHOR16
 2417 00d8 00000000 		.word	.LANCHOR15
 2418 00dc 00000000 		.word	.LANCHOR3
 2419 00e0 00000000 		.word	.LANCHOR10
 2420 00e4 00000000 		.word	.LANCHOR4
 2421 00e8 00000000 		.word	.LANCHOR19
 2422 00ec 00000000 		.word	.LANCHOR2
 2423 00f0 00000000 		.word	.LANCHOR8
 2424 00f4 00000000 		.word	.LANCHOR18
 2425 00f8 00000000 		.word	.LANCHOR13
 2426 00fc 00000000 		.word	.LANCHOR20
 2427              		.cfi_endproc
 2428              	.LFE92:
 2430              		.section	.text.xTaskResumeAll,"ax",%progbits
 2431              		.align	1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 150


 2432              		.global	xTaskResumeAll
 2433              		.syntax unified
 2434              		.thumb
 2435              		.thumb_func
 2436              		.fpu softvfp
 2438              	xTaskResumeAll:
 2439              	.LFB86:
2195:FreeRTOS/src/tasks.c **** TCB_t *pxTCB = NULL;
 2440              		.loc 1 2195 1 is_stmt 1 view -0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444 0000 38B5     		push	{r3, r4, r5, lr}
 2445              	.LCFI23:
 2446              		.cfi_def_cfa_offset 16
 2447              		.cfi_offset 3, -16
 2448              		.cfi_offset 4, -12
 2449              		.cfi_offset 5, -8
 2450              		.cfi_offset 14, -4
2196:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2451              		.loc 1 2196 1 view .LVU658
 2452              	.LVL181:
2197:FreeRTOS/src/tasks.c **** 
 2453              		.loc 1 2197 1 view .LVU659
2201:FreeRTOS/src/tasks.c **** 
 2454              		.loc 1 2201 38 view .LVU660
2208:FreeRTOS/src/tasks.c **** 	{
 2455              		.loc 1 2208 2 view .LVU661
 2456 0002 FFF7FEFF 		bl	vPortEnterCritical
 2457              	.LVL182:
2210:FreeRTOS/src/tasks.c **** 
 2458              		.loc 1 2210 3 view .LVU662
 2459 0006 2E4B     		ldr	r3, .L200
 2460 0008 1A68     		ldr	r2, [r3]
 2461 000a 013A     		subs	r2, r2, #1
 2462 000c 1A60     		str	r2, [r3]
2212:FreeRTOS/src/tasks.c **** 		{
 2463              		.loc 1 2212 3 view .LVU663
2212:FreeRTOS/src/tasks.c **** 		{
 2464              		.loc 1 2212 28 is_stmt 0 view .LVU664
 2465 000e 1B68     		ldr	r3, [r3]
2212:FreeRTOS/src/tasks.c **** 		{
 2466              		.loc 1 2212 5 view .LVU665
 2467 0010 002B     		cmp	r3, #0
 2468 0012 4DD1     		bne	.L194
2214:FreeRTOS/src/tasks.c **** 			{
 2469              		.loc 1 2214 4 is_stmt 1 view .LVU666
2214:FreeRTOS/src/tasks.c **** 			{
 2470              		.loc 1 2214 31 is_stmt 0 view .LVU667
 2471 0014 2B4B     		ldr	r3, .L200+4
 2472 0016 1B68     		ldr	r3, [r3]
2214:FreeRTOS/src/tasks.c **** 			{
 2473              		.loc 1 2214 6 view .LVU668
 2474 0018 0BB9     		cbnz	r3, .L195
2197:FreeRTOS/src/tasks.c **** 
 2475              		.loc 1 2197 12 view .LVU669
 2476 001a 0024     		movs	r4, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 151


 2477 001c 49E0     		b	.L186
 2478              	.L195:
2196:FreeRTOS/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2479              		.loc 1 2196 8 view .LVU670
 2480 001e 0024     		movs	r4, #0
 2481              	.LVL183:
 2482              	.L187:
2233:FreeRTOS/src/tasks.c **** 					}
 2483              		.loc 1 2233 31 is_stmt 1 view .LVU671
2218:FreeRTOS/src/tasks.c **** 				{
 2484              		.loc 1 2218 12 is_stmt 0 view .LVU672
 2485 0020 294B     		ldr	r3, .L200+8
 2486 0022 1B68     		ldr	r3, [r3]
2218:FreeRTOS/src/tasks.c **** 				{
 2487              		.loc 1 2218 10 view .LVU673
 2488 0024 1BB3     		cbz	r3, .L198
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2489              		.loc 1 2220 6 is_stmt 1 view .LVU674
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2490              		.loc 1 2220 14 is_stmt 0 view .LVU675
 2491 0026 284B     		ldr	r3, .L200+8
 2492 0028 DB68     		ldr	r3, [r3, #12]
2220:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2493              		.loc 1 2220 12 view .LVU676
 2494 002a DC68     		ldr	r4, [r3, #12]
 2495              	.LVL184:
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2496              		.loc 1 2221 6 is_stmt 1 view .LVU677
2221:FreeRTOS/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2497              		.loc 1 2221 15 is_stmt 0 view .LVU678
 2498 002c 04F11800 		add	r0, r4, #24
 2499 0030 FFF7FEFF 		bl	uxListRemove
 2500              	.LVL185:
2222:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2501              		.loc 1 2222 6 is_stmt 1 view .LVU679
2222:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2502              		.loc 1 2222 15 is_stmt 0 view .LVU680
 2503 0034 251D     		adds	r5, r4, #4
 2504 0036 2846     		mov	r0, r5
 2505 0038 FFF7FEFF 		bl	uxListRemove
 2506              	.LVL186:
2223:FreeRTOS/src/tasks.c **** 
 2507              		.loc 1 2223 6 is_stmt 1 view .LVU681
2223:FreeRTOS/src/tasks.c **** 
 2508              		.loc 1 2223 6 view .LVU682
 2509 003c E36A     		ldr	r3, [r4, #44]
 2510 003e 0122     		movs	r2, #1
 2511 0040 9A40     		lsls	r2, r2, r3
 2512 0042 2249     		ldr	r1, .L200+12
 2513 0044 0868     		ldr	r0, [r1]
 2514 0046 0243     		orrs	r2, r2, r0
 2515 0048 0A60     		str	r2, [r1]
2223:FreeRTOS/src/tasks.c **** 
 2516              		.loc 1 2223 6 view .LVU683
 2517 004a 03EB8303 		add	r3, r3, r3, lsl #2
 2518 004e 9A00     		lsls	r2, r3, #2
 2519 0050 2946     		mov	r1, r5
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 152


 2520 0052 1F48     		ldr	r0, .L200+16
 2521 0054 1044     		add	r0, r0, r2
 2522 0056 FFF7FEFF 		bl	vListInsertEnd
 2523              	.LVL187:
2223:FreeRTOS/src/tasks.c **** 
 2524              		.loc 1 2223 36 view .LVU684
2227:FreeRTOS/src/tasks.c **** 					{
 2525              		.loc 1 2227 6 view .LVU685
2227:FreeRTOS/src/tasks.c **** 					{
 2526              		.loc 1 2227 15 is_stmt 0 view .LVU686
 2527 005a E26A     		ldr	r2, [r4, #44]
2227:FreeRTOS/src/tasks.c **** 					{
 2528              		.loc 1 2227 43 view .LVU687
 2529 005c 1D4B     		ldr	r3, .L200+20
 2530 005e 1B68     		ldr	r3, [r3]
 2531 0060 DB6A     		ldr	r3, [r3, #44]
2227:FreeRTOS/src/tasks.c **** 					{
 2532              		.loc 1 2227 8 view .LVU688
 2533 0062 9A42     		cmp	r2, r3
 2534 0064 DCD3     		bcc	.L187
2229:FreeRTOS/src/tasks.c **** 					}
 2535              		.loc 1 2229 7 is_stmt 1 view .LVU689
2229:FreeRTOS/src/tasks.c **** 					}
 2536              		.loc 1 2229 21 is_stmt 0 view .LVU690
 2537 0066 1C4B     		ldr	r3, .L200+24
 2538 0068 0122     		movs	r2, #1
 2539 006a 1A60     		str	r2, [r3]
 2540 006c D8E7     		b	.L187
 2541              	.L198:
2237:FreeRTOS/src/tasks.c **** 				{
 2542              		.loc 1 2237 5 is_stmt 1 view .LVU691
2237:FreeRTOS/src/tasks.c **** 				{
 2543              		.loc 1 2237 7 is_stmt 0 view .LVU692
 2544 006e 0CB1     		cbz	r4, .L190
2245:FreeRTOS/src/tasks.c **** 				}
 2545              		.loc 1 2245 6 is_stmt 1 view .LVU693
 2546 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2547              	.LVL188:
 2548              	.L190:
 2549              	.LBB47:
2253:FreeRTOS/src/tasks.c **** 
 2550              		.loc 1 2253 6 view .LVU694
2253:FreeRTOS/src/tasks.c **** 
 2551              		.loc 1 2253 17 is_stmt 0 view .LVU695
 2552 0074 194B     		ldr	r3, .L200+28
 2553 0076 1C68     		ldr	r4, [r3]
 2554              	.LVL189:
2255:FreeRTOS/src/tasks.c **** 					{
 2555              		.loc 1 2255 6 is_stmt 1 view .LVU696
2255:FreeRTOS/src/tasks.c **** 					{
 2556              		.loc 1 2255 8 is_stmt 0 view .LVU697
 2557 0078 74B9     		cbnz	r4, .L193
 2558              	.L191:
2274:FreeRTOS/src/tasks.c **** 					}
 2559              		.loc 1 2274 31 is_stmt 1 view .LVU698
 2560              	.LBE47:
2278:FreeRTOS/src/tasks.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 153


 2561              		.loc 1 2278 5 view .LVU699
2278:FreeRTOS/src/tasks.c **** 				{
 2562              		.loc 1 2278 23 is_stmt 0 view .LVU700
 2563 007a 174B     		ldr	r3, .L200+24
 2564 007c 1B68     		ldr	r3, [r3]
2278:FreeRTOS/src/tasks.c **** 				{
 2565              		.loc 1 2278 7 view .LVU701
 2566 007e E3B1     		cbz	r3, .L196
2282:FreeRTOS/src/tasks.c **** 					}
 2567              		.loc 1 2282 7 is_stmt 1 view .LVU702
 2568              	.LVL190:
2285:FreeRTOS/src/tasks.c **** 				}
 2569              		.loc 1 2285 6 view .LVU703
 2570 0080 174B     		ldr	r3, .L200+32
 2571 0082 4FF08052 		mov	r2, #268435456
 2572 0086 1A60     		str	r2, [r3]
2285:FreeRTOS/src/tasks.c **** 				}
 2573              		.loc 1 2285 6 view .LVU704
 2574              		.syntax unified
 2575              	@ 2285 "FreeRTOS/src/tasks.c" 1
 2576 0088 BFF34F8F 		dsb
 2577              	@ 0 "" 2
2285:FreeRTOS/src/tasks.c **** 				}
 2578              		.loc 1 2285 6 view .LVU705
 2579              	@ 2285 "FreeRTOS/src/tasks.c" 1
 2580 008c BFF36F8F 		isb
 2581              	@ 0 "" 2
2285:FreeRTOS/src/tasks.c **** 				}
 2582              		.loc 1 2285 37 view .LVU706
2282:FreeRTOS/src/tasks.c **** 					}
 2583              		.loc 1 2282 23 is_stmt 0 view .LVU707
 2584              		.thumb
 2585              		.syntax unified
 2586 0090 0124     		movs	r4, #1
 2587              	.LVL191:
2282:FreeRTOS/src/tasks.c **** 					}
 2588              		.loc 1 2282 23 view .LVU708
 2589 0092 0EE0     		b	.L186
 2590              	.LVL192:
 2591              	.L192:
 2592              	.LBB48:
2265:FreeRTOS/src/tasks.c **** 							}
 2593              		.loc 1 2265 33 is_stmt 1 view .LVU709
2267:FreeRTOS/src/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2594              		.loc 1 2267 8 view .LVU710
2268:FreeRTOS/src/tasks.c **** 
 2595              		.loc 1 2268 7 is_stmt 0 view .LVU711
 2596 0094 013C     		subs	r4, r4, #1
 2597              	.LVL193:
2268:FreeRTOS/src/tasks.c **** 
 2598              		.loc 1 2268 7 view .LVU712
 2599 0096 07D0     		beq	.L199
 2600              	.L193:
2257:FreeRTOS/src/tasks.c **** 						{
 2601              		.loc 1 2257 7 is_stmt 1 view .LVU713
2259:FreeRTOS/src/tasks.c **** 							{
 2602              		.loc 1 2259 8 view .LVU714
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 154


2259:FreeRTOS/src/tasks.c **** 							{
 2603              		.loc 1 2259 12 is_stmt 0 view .LVU715
 2604 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2605              	.LVL194:
2259:FreeRTOS/src/tasks.c **** 							{
 2606              		.loc 1 2259 10 view .LVU716
 2607 009c 0028     		cmp	r0, #0
 2608 009e F9D0     		beq	.L192
2261:FreeRTOS/src/tasks.c **** 							}
 2609              		.loc 1 2261 9 is_stmt 1 view .LVU717
2261:FreeRTOS/src/tasks.c **** 							}
 2610              		.loc 1 2261 23 is_stmt 0 view .LVU718
 2611 00a0 0D4B     		ldr	r3, .L200+24
 2612 00a2 0122     		movs	r2, #1
 2613 00a4 1A60     		str	r2, [r3]
 2614 00a6 F5E7     		b	.L192
 2615              	.L199:
2270:FreeRTOS/src/tasks.c **** 					}
 2616              		.loc 1 2270 7 is_stmt 1 view .LVU719
2270:FreeRTOS/src/tasks.c **** 					}
 2617              		.loc 1 2270 20 is_stmt 0 view .LVU720
 2618 00a8 0C4B     		ldr	r3, .L200+28
 2619 00aa 0022     		movs	r2, #0
 2620 00ac 1A60     		str	r2, [r3]
 2621 00ae E4E7     		b	.L191
 2622              	.LVL195:
 2623              	.L194:
2270:FreeRTOS/src/tasks.c **** 					}
 2624              		.loc 1 2270 20 view .LVU721
 2625              	.LBE48:
2197:FreeRTOS/src/tasks.c **** 
 2626              		.loc 1 2197 12 view .LVU722
 2627 00b0 0024     		movs	r4, #0
 2628              	.LVL196:
 2629              	.L186:
2295:FreeRTOS/src/tasks.c **** 		}
 2630              		.loc 1 2295 28 is_stmt 1 view .LVU723
2298:FreeRTOS/src/tasks.c **** 
 2631              		.loc 1 2298 2 view .LVU724
 2632 00b2 FFF7FEFF 		bl	vPortExitCritical
 2633              	.LVL197:
2300:FreeRTOS/src/tasks.c **** }
 2634              		.loc 1 2300 2 view .LVU725
2301:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 2635              		.loc 1 2301 1 is_stmt 0 view .LVU726
 2636 00b6 2046     		mov	r0, r4
 2637 00b8 38BD     		pop	{r3, r4, r5, pc}
 2638              	.LVL198:
 2639              	.L196:
2197:FreeRTOS/src/tasks.c **** 
 2640              		.loc 1 2197 12 view .LVU727
 2641 00ba 0024     		movs	r4, #0
 2642              	.LVL199:
2197:FreeRTOS/src/tasks.c **** 
 2643              		.loc 1 2197 12 view .LVU728
 2644 00bc F9E7     		b	.L186
 2645              	.L201:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 155


 2646 00be 00BF     		.align	2
 2647              	.L200:
 2648 00c0 00000000 		.word	.LANCHOR16
 2649 00c4 00000000 		.word	.LANCHOR9
 2650 00c8 00000000 		.word	.LANCHOR1
 2651 00cc 00000000 		.word	.LANCHOR13
 2652 00d0 00000000 		.word	.LANCHOR4
 2653 00d4 00000000 		.word	.LANCHOR10
 2654 00d8 00000000 		.word	.LANCHOR19
 2655 00dc 00000000 		.word	.LANCHOR20
 2656 00e0 04ED00E0 		.word	-536810236
 2657              		.cfi_endproc
 2658              	.LFE86:
 2660              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2661              		.align	1
 2662              		.global	vTaskDelayUntil
 2663              		.syntax unified
 2664              		.thumb
 2665              		.thumb_func
 2666              		.fpu softvfp
 2668              	vTaskDelayUntil:
 2669              	.LVL200:
 2670              	.LFB74:
1258:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
 2671              		.loc 1 1258 2 is_stmt 1 view -0
 2672              		.cfi_startproc
 2673              		@ args = 0, pretend = 0, frame = 0
 2674              		@ frame_needed = 0, uses_anonymous_args = 0
1258:FreeRTOS/src/tasks.c **** 	TickType_t xTimeToWake;
 2675              		.loc 1 1258 2 is_stmt 0 view .LVU730
 2676 0000 38B5     		push	{r3, r4, r5, lr}
 2677              	.LCFI24:
 2678              		.cfi_def_cfa_offset 16
 2679              		.cfi_offset 3, -16
 2680              		.cfi_offset 4, -12
 2681              		.cfi_offset 5, -8
 2682              		.cfi_offset 14, -4
 2683 0002 0546     		mov	r5, r0
 2684 0004 0C46     		mov	r4, r1
1259:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2685              		.loc 1 1259 2 is_stmt 1 view .LVU731
1260:FreeRTOS/src/tasks.c **** 
 2686              		.loc 1 1260 2 view .LVU732
 2687              	.LVL201:
1262:FreeRTOS/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2688              		.loc 1 1262 37 view .LVU733
1263:FreeRTOS/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2689              		.loc 1 1263 42 view .LVU734
1264:FreeRTOS/src/tasks.c **** 
 2690              		.loc 1 1264 44 view .LVU735
1266:FreeRTOS/src/tasks.c **** 		{
 2691              		.loc 1 1266 3 view .LVU736
 2692 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2693              	.LVL202:
 2694              	.LBB49:
1270:FreeRTOS/src/tasks.c **** 
 2695              		.loc 1 1270 4 view .LVU737
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 156


1270:FreeRTOS/src/tasks.c **** 
 2696              		.loc 1 1270 21 is_stmt 0 view .LVU738
 2697 000a 134B     		ldr	r3, .L212
 2698 000c 1868     		ldr	r0, [r3]
 2699              	.LVL203:
1273:FreeRTOS/src/tasks.c **** 
 2700              		.loc 1 1273 4 is_stmt 1 view .LVU739
1273:FreeRTOS/src/tasks.c **** 
 2701              		.loc 1 1273 18 is_stmt 0 view .LVU740
 2702 000e 2A68     		ldr	r2, [r5]
1273:FreeRTOS/src/tasks.c **** 
 2703              		.loc 1 1273 16 view .LVU741
 2704 0010 1444     		add	r4, r4, r2
 2705              	.LVL204:
1275:FreeRTOS/src/tasks.c **** 			{
 2706              		.loc 1 1275 4 is_stmt 1 view .LVU742
1275:FreeRTOS/src/tasks.c **** 			{
 2707              		.loc 1 1275 6 is_stmt 0 view .LVU743
 2708 0012 8242     		cmp	r2, r0
 2709 0014 09D9     		bls	.L203
1282:FreeRTOS/src/tasks.c **** 				{
 2710              		.loc 1 1282 5 is_stmt 1 view .LVU744
1282:FreeRTOS/src/tasks.c **** 				{
 2711              		.loc 1 1282 7 is_stmt 0 view .LVU745
 2712 0016 A242     		cmp	r2, r4
 2713 0018 01D8     		bhi	.L204
1307:FreeRTOS/src/tasks.c **** 
 2714              		.loc 1 1307 4 is_stmt 1 view .LVU746
1307:FreeRTOS/src/tasks.c **** 
 2715              		.loc 1 1307 24 is_stmt 0 view .LVU747
 2716 001a 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2717              		.loc 1 1309 4 is_stmt 1 view .LVU748
 2718 001c 0EE0     		b	.L205
 2719              	.L204:
1282:FreeRTOS/src/tasks.c **** 				{
 2720              		.loc 1 1282 47 is_stmt 0 discriminator 1 view .LVU749
 2721 001e A042     		cmp	r0, r4
 2722 0020 01D3     		bcc	.L206
1307:FreeRTOS/src/tasks.c **** 
 2723              		.loc 1 1307 4 is_stmt 1 view .LVU750
1307:FreeRTOS/src/tasks.c **** 
 2724              		.loc 1 1307 24 is_stmt 0 view .LVU751
 2725 0022 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2726              		.loc 1 1309 4 is_stmt 1 view .LVU752
 2727 0024 0AE0     		b	.L205
 2728              	.L206:
1284:FreeRTOS/src/tasks.c **** 				}
 2729              		.loc 1 1284 6 view .LVU753
 2730              	.LVL205:
1307:FreeRTOS/src/tasks.c **** 
 2731              		.loc 1 1307 4 view .LVU754
1307:FreeRTOS/src/tasks.c **** 
 2732              		.loc 1 1307 24 is_stmt 0 view .LVU755
 2733 0026 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 157


 2734              		.loc 1 1309 4 is_stmt 1 view .LVU756
 2735 0028 04E0     		b	.L207
 2736              	.LVL206:
 2737              	.L203:
1296:FreeRTOS/src/tasks.c **** 				{
 2738              		.loc 1 1296 5 view .LVU757
1296:FreeRTOS/src/tasks.c **** 				{
 2739              		.loc 1 1296 7 is_stmt 0 view .LVU758
 2740 002a A242     		cmp	r2, r4
 2741 002c 01D8     		bhi	.L208
1296:FreeRTOS/src/tasks.c **** 				{
 2742              		.loc 1 1296 47 discriminator 1 view .LVU759
 2743 002e A042     		cmp	r0, r4
 2744 0030 10D2     		bcs	.L209
 2745              	.L208:
1298:FreeRTOS/src/tasks.c **** 				}
 2746              		.loc 1 1298 6 is_stmt 1 view .LVU760
 2747              	.LVL207:
1307:FreeRTOS/src/tasks.c **** 
 2748              		.loc 1 1307 4 view .LVU761
1307:FreeRTOS/src/tasks.c **** 
 2749              		.loc 1 1307 24 is_stmt 0 view .LVU762
 2750 0032 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2751              		.loc 1 1309 4 is_stmt 1 view .LVU763
 2752              	.L207:
1311:FreeRTOS/src/tasks.c **** 
 2753              		.loc 1 1311 41 view .LVU764
1315:FreeRTOS/src/tasks.c **** 			}
 2754              		.loc 1 1315 5 view .LVU765
 2755 0034 0021     		movs	r1, #0
 2756 0036 201A     		subs	r0, r4, r0
 2757              	.LVL208:
1315:FreeRTOS/src/tasks.c **** 			}
 2758              		.loc 1 1315 5 is_stmt 0 view .LVU766
 2759 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2760              	.LVL209:
 2761              	.L205:
1319:FreeRTOS/src/tasks.c **** 			}
 2762              		.loc 1 1319 29 is_stmt 1 view .LVU767
 2763              	.LBE49:
1322:FreeRTOS/src/tasks.c **** 
 2764              		.loc 1 1322 3 view .LVU768
1322:FreeRTOS/src/tasks.c **** 
 2765              		.loc 1 1322 21 is_stmt 0 view .LVU769
 2766 003c FFF7FEFF 		bl	xTaskResumeAll
 2767              	.LVL210:
1326:FreeRTOS/src/tasks.c **** 		{
 2768              		.loc 1 1326 3 is_stmt 1 view .LVU770
1326:FreeRTOS/src/tasks.c **** 		{
 2769              		.loc 1 1326 5 is_stmt 0 view .LVU771
 2770 0040 38B9     		cbnz	r0, .L202
1328:FreeRTOS/src/tasks.c **** 		}
 2771              		.loc 1 1328 4 is_stmt 1 view .LVU772
 2772 0042 064B     		ldr	r3, .L212+4
 2773 0044 4FF08052 		mov	r2, #268435456
 2774 0048 1A60     		str	r2, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 158


1328:FreeRTOS/src/tasks.c **** 		}
 2775              		.loc 1 1328 4 view .LVU773
 2776              		.syntax unified
 2777              	@ 1328 "FreeRTOS/src/tasks.c" 1
 2778 004a BFF34F8F 		dsb
 2779              	@ 0 "" 2
1328:FreeRTOS/src/tasks.c **** 		}
 2780              		.loc 1 1328 4 view .LVU774
 2781              	@ 1328 "FreeRTOS/src/tasks.c" 1
 2782 004e BFF36F8F 		isb
 2783              	@ 0 "" 2
1328:FreeRTOS/src/tasks.c **** 		}
 2784              		.loc 1 1328 26 view .LVU775
1332:FreeRTOS/src/tasks.c **** 		}
 2785              		.loc 1 1332 28 view .LVU776
 2786              		.thumb
 2787              		.syntax unified
 2788              	.L202:
1334:FreeRTOS/src/tasks.c **** 
 2789              		.loc 1 1334 2 is_stmt 0 view .LVU777
 2790 0052 38BD     		pop	{r3, r4, r5, pc}
 2791              	.LVL211:
 2792              	.L209:
 2793              	.LBB50:
1307:FreeRTOS/src/tasks.c **** 
 2794              		.loc 1 1307 4 is_stmt 1 view .LVU778
1307:FreeRTOS/src/tasks.c **** 
 2795              		.loc 1 1307 24 is_stmt 0 view .LVU779
 2796 0054 2C60     		str	r4, [r5]
1309:FreeRTOS/src/tasks.c **** 			{
 2797              		.loc 1 1309 4 is_stmt 1 view .LVU780
 2798 0056 F1E7     		b	.L205
 2799              	.L213:
 2800              		.align	2
 2801              	.L212:
 2802 0058 00000000 		.word	.LANCHOR15
 2803 005c 04ED00E0 		.word	-536810236
 2804              	.LBE50:
 2805              		.cfi_endproc
 2806              	.LFE74:
 2808              		.section	.text.vTaskDelay,"ax",%progbits
 2809              		.align	1
 2810              		.global	vTaskDelay
 2811              		.syntax unified
 2812              		.thumb
 2813              		.thumb_func
 2814              		.fpu softvfp
 2816              	vTaskDelay:
 2817              	.LVL212:
 2818              	.LFB75:
1342:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2819              		.loc 1 1342 2 view -0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
1342:FreeRTOS/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2823              		.loc 1 1342 2 is_stmt 0 view .LVU782
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 159


 2824 0000 10B5     		push	{r4, lr}
 2825              	.LCFI25:
 2826              		.cfi_def_cfa_offset 8
 2827              		.cfi_offset 4, -8
 2828              		.cfi_offset 14, -4
1343:FreeRTOS/src/tasks.c **** 
 2829              		.loc 1 1343 2 is_stmt 1 view .LVU783
 2830              	.LVL213:
1346:FreeRTOS/src/tasks.c **** 		{
 2831              		.loc 1 1346 3 view .LVU784
1346:FreeRTOS/src/tasks.c **** 		{
 2832              		.loc 1 1346 5 is_stmt 0 view .LVU785
 2833 0002 40B9     		cbnz	r0, .L218
 2834              	.LVL214:
 2835              	.L215:
1373:FreeRTOS/src/tasks.c **** 		}
 2836              		.loc 1 1373 4 is_stmt 1 view .LVU786
 2837 0004 0A4B     		ldr	r3, .L219
 2838 0006 4FF08052 		mov	r2, #268435456
 2839 000a 1A60     		str	r2, [r3]
1373:FreeRTOS/src/tasks.c **** 		}
 2840              		.loc 1 1373 4 view .LVU787
 2841              		.syntax unified
 2842              	@ 1373 "FreeRTOS/src/tasks.c" 1
 2843 000c BFF34F8F 		dsb
 2844              	@ 0 "" 2
1373:FreeRTOS/src/tasks.c **** 		}
 2845              		.loc 1 1373 4 view .LVU788
 2846              	@ 1373 "FreeRTOS/src/tasks.c" 1
 2847 0010 BFF36F8F 		isb
 2848              	@ 0 "" 2
1373:FreeRTOS/src/tasks.c **** 		}
 2849              		.loc 1 1373 26 view .LVU789
1377:FreeRTOS/src/tasks.c **** 		}
 2850              		.loc 1 1377 28 view .LVU790
 2851              		.thumb
 2852              		.syntax unified
 2853              	.L214:
1379:FreeRTOS/src/tasks.c **** 
 2854              		.loc 1 1379 2 is_stmt 0 view .LVU791
 2855 0014 10BD     		pop	{r4, pc}
 2856              	.LVL215:
 2857              	.L218:
1379:FreeRTOS/src/tasks.c **** 
 2858              		.loc 1 1379 2 view .LVU792
 2859 0016 0446     		mov	r4, r0
1348:FreeRTOS/src/tasks.c **** 			vTaskSuspendAll();
 2860              		.loc 1 1348 45 is_stmt 1 view .LVU793
1349:FreeRTOS/src/tasks.c **** 			{
 2861              		.loc 1 1349 4 view .LVU794
 2862 0018 FFF7FEFF 		bl	vTaskSuspendAll
 2863              	.LVL216:
1351:FreeRTOS/src/tasks.c **** 
 2864              		.loc 1 1351 22 view .LVU795
1360:FreeRTOS/src/tasks.c **** 			}
 2865              		.loc 1 1360 5 view .LVU796
 2866 001c 0021     		movs	r1, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 160


 2867 001e 2046     		mov	r0, r4
 2868 0020 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2869              	.LVL217:
1362:FreeRTOS/src/tasks.c **** 		}
 2870              		.loc 1 1362 4 view .LVU797
1362:FreeRTOS/src/tasks.c **** 		}
 2871              		.loc 1 1362 22 is_stmt 0 view .LVU798
 2872 0024 FFF7FEFF 		bl	xTaskResumeAll
 2873              	.LVL218:
1366:FreeRTOS/src/tasks.c **** 		}
 2874              		.loc 1 1366 28 is_stmt 1 view .LVU799
1371:FreeRTOS/src/tasks.c **** 		{
 2875              		.loc 1 1371 3 view .LVU800
1371:FreeRTOS/src/tasks.c **** 		{
 2876              		.loc 1 1371 5 is_stmt 0 view .LVU801
 2877 0028 0028     		cmp	r0, #0
 2878 002a F3D1     		bne	.L214
1371:FreeRTOS/src/tasks.c **** 		{
 2879              		.loc 1 1371 5 view .LVU802
 2880 002c EAE7     		b	.L215
 2881              	.L220:
 2882 002e 00BF     		.align	2
 2883              	.L219:
 2884 0030 04ED00E0 		.word	-536810236
 2885              		.cfi_endproc
 2886              	.LFE75:
 2888              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2889              		.align	1
 2890              		.global	xTaskCatchUpTicks
 2891              		.syntax unified
 2892              		.thumb
 2893              		.thumb_func
 2894              		.fpu softvfp
 2896              	xTaskCatchUpTicks:
 2897              	.LVL219:
 2898              	.LFB91:
2610:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2899              		.loc 1 2610 1 is_stmt 1 view -0
 2900              		.cfi_startproc
 2901              		@ args = 0, pretend = 0, frame = 0
 2902              		@ frame_needed = 0, uses_anonymous_args = 0
2610:FreeRTOS/src/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2903              		.loc 1 2610 1 is_stmt 0 view .LVU804
 2904 0000 10B5     		push	{r4, lr}
 2905              	.LCFI26:
 2906              		.cfi_def_cfa_offset 8
 2907              		.cfi_offset 4, -8
 2908              		.cfi_offset 14, -4
 2909 0002 0446     		mov	r4, r0
2611:FreeRTOS/src/tasks.c **** 
 2910              		.loc 1 2611 1 is_stmt 1 view .LVU805
 2911              	.LVL220:
2615:FreeRTOS/src/tasks.c **** 
 2912              		.loc 1 2615 43 view .LVU806
2619:FreeRTOS/src/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2913              		.loc 1 2619 2 view .LVU807
 2914 0004 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 161


 2915              	.LVL221:
2620:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2916              		.loc 1 2620 2 view .LVU808
2620:FreeRTOS/src/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2917              		.loc 1 2620 15 is_stmt 0 view .LVU809
 2918 0008 034B     		ldr	r3, .L223
 2919 000a 1868     		ldr	r0, [r3]
 2920 000c 2044     		add	r0, r0, r4
 2921 000e 1860     		str	r0, [r3]
2621:FreeRTOS/src/tasks.c **** 
 2922              		.loc 1 2621 2 is_stmt 1 view .LVU810
2621:FreeRTOS/src/tasks.c **** 
 2923              		.loc 1 2621 19 is_stmt 0 view .LVU811
 2924 0010 FFF7FEFF 		bl	xTaskResumeAll
 2925              	.LVL222:
2623:FreeRTOS/src/tasks.c **** }
 2926              		.loc 1 2623 2 is_stmt 1 view .LVU812
2624:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 2927              		.loc 1 2624 1 is_stmt 0 view .LVU813
 2928 0014 10BD     		pop	{r4, pc}
 2929              	.LVL223:
 2930              	.L224:
2624:FreeRTOS/src/tasks.c **** /*----------------------------------------------------------*/
 2931              		.loc 1 2624 1 view .LVU814
 2932 0016 00BF     		.align	2
 2933              	.L223:
 2934 0018 00000000 		.word	.LANCHOR20
 2935              		.cfi_endproc
 2936              	.LFE91:
 2938              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2939              		.align	1
 2940              		.global	vTaskSwitchContext
 2941              		.syntax unified
 2942              		.thumb
 2943              		.thumb_func
 2944              		.fpu softvfp
 2946              	vTaskSwitchContext:
 2947              	.LFB93:
2990:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2948              		.loc 1 2990 1 is_stmt 1 view -0
 2949              		.cfi_startproc
 2950              		@ args = 0, pretend = 0, frame = 0
 2951              		@ frame_needed = 0, uses_anonymous_args = 0
 2952              		@ link register save eliminated.
2991:FreeRTOS/src/tasks.c **** 	{
 2953              		.loc 1 2991 2 view .LVU816
2991:FreeRTOS/src/tasks.c **** 	{
 2954              		.loc 1 2991 27 is_stmt 0 view .LVU817
 2955 0000 194B     		ldr	r3, .L233
 2956 0002 1B68     		ldr	r3, [r3]
2991:FreeRTOS/src/tasks.c **** 	{
 2957              		.loc 1 2991 4 view .LVU818
 2958 0004 1BB1     		cbz	r3, .L226
2995:FreeRTOS/src/tasks.c **** 	}
 2959              		.loc 1 2995 3 is_stmt 1 view .LVU819
2995:FreeRTOS/src/tasks.c **** 	}
 2960              		.loc 1 2995 17 is_stmt 0 view .LVU820
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 162


 2961 0006 194B     		ldr	r3, .L233+4
 2962 0008 0122     		movs	r2, #1
 2963 000a 1A60     		str	r2, [r3]
 2964 000c 7047     		bx	lr
 2965              	.L226:
2990:FreeRTOS/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2966              		.loc 1 2990 1 view .LVU821
 2967 000e 10B4     		push	{r4}
 2968              	.LCFI27:
 2969              		.cfi_def_cfa_offset 4
 2970              		.cfi_offset 4, -4
2999:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2971              		.loc 1 2999 3 is_stmt 1 view .LVU822
2999:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2972              		.loc 1 2999 17 is_stmt 0 view .LVU823
 2973 0010 164B     		ldr	r3, .L233+4
 2974 0012 0022     		movs	r2, #0
 2975 0014 1A60     		str	r2, [r3]
3000:FreeRTOS/src/tasks.c **** 
 2976              		.loc 1 3000 27 is_stmt 1 view .LVU824
3030:FreeRTOS/src/tasks.c **** 
 2977              		.loc 1 3030 33 view .LVU825
 2978              	.LBB51:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2979              		.loc 1 3041 3 view .LVU826
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 2980              		.loc 1 3041 3 view .LVU827
 2981 0016 164B     		ldr	r3, .L233+8
 2982 0018 1B68     		ldr	r3, [r3]
 2983              	.LVL224:
 2984              	.LBB52:
 2985              	.LBI52:
 130:FreeRTOS/inc/portmacro.h **** 	{
 2986              		.loc 2 130 59 view .LVU828
 2987              	.LBB53:
 132:FreeRTOS/inc/portmacro.h **** 
 2988              		.loc 2 132 2 view .LVU829
 134:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 2989              		.loc 2 134 3 view .LVU830
 2990              		.syntax unified
 2991              	@ 134 "FreeRTOS/inc/portmacro.h" 1
 2992 001a B3FA83F3 		clz r3, r3
 2993              	@ 0 "" 2
 2994              	.LVL225:
 134:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 2995              		.loc 2 134 3 is_stmt 0 view .LVU831
 2996              		.thumb
 2997              		.syntax unified
 2998 001e DBB2     		uxtb	r3, r3
 2999              	.LVL226:
 135:FreeRTOS/inc/portmacro.h **** 	}
 3000              		.loc 2 135 3 is_stmt 1 view .LVU832
 135:FreeRTOS/inc/portmacro.h **** 	}
 3001              		.loc 2 135 3 is_stmt 0 view .LVU833
 3002              	.LBE53:
 3003              	.LBE52:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 163


 3004              		.loc 1 3041 3 view .LVU834
 3005 0020 C3F11F03 		rsb	r3, r3, #31
 3006              	.LVL227:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3007              		.loc 1 3041 3 is_stmt 1 view .LVU835
 3008              	.LBB54:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3009              		.loc 1 3041 3 view .LVU836
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3010              		.loc 1 3041 3 view .LVU837
 3011 0024 1348     		ldr	r0, .L233+12
 3012 0026 9A00     		lsls	r2, r3, #2
 3013 0028 D418     		adds	r4, r2, r3
 3014 002a A100     		lsls	r1, r4, #2
 3015 002c 0144     		add	r1, r1, r0
 3016 002e 4C68     		ldr	r4, [r1, #4]
 3017 0030 6468     		ldr	r4, [r4, #4]
 3018 0032 4C60     		str	r4, [r1, #4]
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3019              		.loc 1 3041 3 view .LVU838
 3020 0034 1A44     		add	r2, r2, r3
 3021 0036 9100     		lsls	r1, r2, #2
 3022 0038 0831     		adds	r1, r1, #8
 3023 003a 0844     		add	r0, r0, r1
 3024 003c 8442     		cmp	r4, r0
 3025 003e 0AD0     		beq	.L232
 3026              	.L228:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3027              		.loc 1 3041 3 discriminator 3 view .LVU839
 3028 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3029              	.LVL228:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3030              		.loc 1 3041 3 is_stmt 0 discriminator 3 view .LVU840
 3031 0044 9A00     		lsls	r2, r3, #2
 3032 0046 0B4B     		ldr	r3, .L233+12
 3033 0048 1344     		add	r3, r3, r2
 3034 004a 5B68     		ldr	r3, [r3, #4]
 3035 004c DA68     		ldr	r2, [r3, #12]
 3036 004e 0A4B     		ldr	r3, .L233+16
 3037 0050 1A60     		str	r2, [r3]
 3038              	.LBE54:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3039              		.loc 1 3041 3 is_stmt 1 discriminator 3 view .LVU841
 3040              	.LBE51:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3041              		.loc 1 3041 37 discriminator 3 view .LVU842
3042:FreeRTOS/src/tasks.c **** 
 3042              		.loc 1 3042 26 discriminator 3 view .LVU843
3061:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3043              		.loc 1 3061 1 is_stmt 0 discriminator 3 view .LVU844
 3044 0052 10BC     		pop	{r4}
 3045              	.LCFI28:
 3046              		.cfi_remember_state
 3047              		.cfi_restore 4
 3048              		.cfi_def_cfa_offset 0
 3049 0054 7047     		bx	lr
 3050              	.LVL229:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 164


 3051              	.L232:
 3052              	.LCFI29:
 3053              		.cfi_restore_state
 3054              	.LBB56:
 3055              	.LBB55:
3041:FreeRTOS/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3056              		.loc 1 3041 3 is_stmt 1 discriminator 1 view .LVU845
 3057 0056 6068     		ldr	r0, [r4, #4]
 3058 0058 03EB8302 		add	r2, r3, r3, lsl #2
 3059 005c 9100     		lsls	r1, r2, #2
 3060 005e 054A     		ldr	r2, .L233+12
 3061 0060 0A44     		add	r2, r2, r1
 3062 0062 5060     		str	r0, [r2, #4]
 3063 0064 ECE7     		b	.L228
 3064              	.L234:
 3065 0066 00BF     		.align	2
 3066              	.L233:
 3067 0068 00000000 		.word	.LANCHOR16
 3068 006c 00000000 		.word	.LANCHOR19
 3069 0070 00000000 		.word	.LANCHOR13
 3070 0074 00000000 		.word	.LANCHOR4
 3071 0078 00000000 		.word	.LANCHOR10
 3072              	.LBE55:
 3073              	.LBE56:
 3074              		.cfi_endproc
 3075              	.LFE93:
 3077              		.section	.text.vTaskSuspend,"ax",%progbits
 3078              		.align	1
 3079              		.global	vTaskSuspend
 3080              		.syntax unified
 3081              		.thumb
 3082              		.thumb_func
 3083              		.fpu softvfp
 3085              	vTaskSuspend:
 3086              	.LVL230:
 3087              	.LFB79:
1705:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 3088              		.loc 1 1705 2 view -0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 0
 3091              		@ frame_needed = 0, uses_anonymous_args = 0
1705:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 3092              		.loc 1 1705 2 is_stmt 0 view .LVU847
 3093 0000 38B5     		push	{r3, r4, r5, lr}
 3094              	.LCFI30:
 3095              		.cfi_def_cfa_offset 16
 3096              		.cfi_offset 3, -16
 3097              		.cfi_offset 4, -12
 3098              		.cfi_offset 5, -8
 3099              		.cfi_offset 14, -4
 3100 0002 0446     		mov	r4, r0
1706:FreeRTOS/src/tasks.c **** 
 3101              		.loc 1 1706 2 is_stmt 1 view .LVU848
1708:FreeRTOS/src/tasks.c **** 		{
 3102              		.loc 1 1708 3 view .LVU849
 3103 0004 FFF7FEFF 		bl	vPortEnterCritical
 3104              	.LVL231:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 165


1712:FreeRTOS/src/tasks.c **** 
 3105              		.loc 1 1712 4 view .LVU850
1712:FreeRTOS/src/tasks.c **** 
 3106              		.loc 1 1712 12 is_stmt 0 view .LVU851
 3107 0008 5CB3     		cbz	r4, .L245
 3108              	.LVL232:
 3109              	.L236:
1714:FreeRTOS/src/tasks.c **** 
 3110              		.loc 1 1714 30 is_stmt 1 discriminator 4 view .LVU852
1718:FreeRTOS/src/tasks.c **** 			{
 3111              		.loc 1 1718 4 discriminator 4 view .LVU853
1718:FreeRTOS/src/tasks.c **** 			{
 3112              		.loc 1 1718 8 is_stmt 0 discriminator 4 view .LVU854
 3113 000a 251D     		adds	r5, r4, #4
 3114 000c 2846     		mov	r0, r5
 3115 000e FFF7FEFF 		bl	uxListRemove
 3116              	.LVL233:
1718:FreeRTOS/src/tasks.c **** 			{
 3117              		.loc 1 1718 6 discriminator 4 view .LVU855
 3118 0012 68B9     		cbnz	r0, .L237
1720:FreeRTOS/src/tasks.c **** 			}
 3119              		.loc 1 1720 5 is_stmt 1 view .LVU856
 3120 0014 E36A     		ldr	r3, [r4, #44]
 3121 0016 03EB8301 		add	r1, r3, r3, lsl #2
 3122 001a 8A00     		lsls	r2, r1, #2
 3123 001c 2449     		ldr	r1, .L249
 3124 001e 8A58     		ldr	r2, [r1, r2]
 3125 0020 32B9     		cbnz	r2, .L237
1720:FreeRTOS/src/tasks.c **** 			}
 3126              		.loc 1 1720 5 discriminator 1 view .LVU857
 3127 0022 0122     		movs	r2, #1
 3128 0024 9A40     		lsls	r2, r2, r3
 3129 0026 2349     		ldr	r1, .L249+4
 3130 0028 0B68     		ldr	r3, [r1]
 3131 002a 23EA0203 		bic	r3, r3, r2
 3132 002e 0B60     		str	r3, [r1]
 3133              	.L237:
1724:FreeRTOS/src/tasks.c **** 			}
 3134              		.loc 1 1724 29 view .LVU858
1728:FreeRTOS/src/tasks.c **** 			{
 3135              		.loc 1 1728 4 view .LVU859
1728:FreeRTOS/src/tasks.c **** 			{
 3136              		.loc 1 1728 8 is_stmt 0 view .LVU860
 3137 0030 A36A     		ldr	r3, [r4, #40]
1728:FreeRTOS/src/tasks.c **** 			{
 3138              		.loc 1 1728 6 view .LVU861
 3139 0032 1BB1     		cbz	r3, .L238
1730:FreeRTOS/src/tasks.c **** 			}
 3140              		.loc 1 1730 5 is_stmt 1 view .LVU862
1730:FreeRTOS/src/tasks.c **** 			}
 3141              		.loc 1 1730 14 is_stmt 0 view .LVU863
 3142 0034 04F11800 		add	r0, r4, #24
 3143 0038 FFF7FEFF 		bl	uxListRemove
 3144              	.LVL234:
 3145              	.L238:
1734:FreeRTOS/src/tasks.c **** 			}
 3146              		.loc 1 1734 29 is_stmt 1 view .LVU864
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 166


1737:FreeRTOS/src/tasks.c **** 
 3147              		.loc 1 1737 4 view .LVU865
 3148 003c 2946     		mov	r1, r5
 3149 003e 1E48     		ldr	r0, .L249+8
 3150 0040 FFF7FEFF 		bl	vListInsertEnd
 3151              	.LVL235:
1741:FreeRTOS/src/tasks.c **** 				{
 3152              		.loc 1 1741 5 view .LVU866
1741:FreeRTOS/src/tasks.c **** 				{
 3153              		.loc 1 1741 14 is_stmt 0 view .LVU867
 3154 0044 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 3155 0048 DBB2     		uxtb	r3, r3
1741:FreeRTOS/src/tasks.c **** 				{
 3156              		.loc 1 1741 7 view .LVU868
 3157 004a 012B     		cmp	r3, #1
 3158 004c 0CD0     		beq	.L246
 3159              	.L239:
1750:FreeRTOS/src/tasks.c **** 
 3160              		.loc 1 1750 3 is_stmt 1 view .LVU869
 3161 004e FFF7FEFF 		bl	vPortExitCritical
 3162              	.LVL236:
1752:FreeRTOS/src/tasks.c **** 		{
 3163              		.loc 1 1752 3 view .LVU870
1752:FreeRTOS/src/tasks.c **** 		{
 3164              		.loc 1 1752 25 is_stmt 0 view .LVU871
 3165 0052 1A4B     		ldr	r3, .L249+12
 3166 0054 1B68     		ldr	r3, [r3]
1752:FreeRTOS/src/tasks.c **** 		{
 3167              		.loc 1 1752 5 view .LVU872
 3168 0056 5BB9     		cbnz	r3, .L247
 3169              	.L240:
1764:FreeRTOS/src/tasks.c **** 		}
 3170              		.loc 1 1764 28 is_stmt 1 view .LVU873
1767:FreeRTOS/src/tasks.c **** 		{
 3171              		.loc 1 1767 3 view .LVU874
1767:FreeRTOS/src/tasks.c **** 		{
 3172              		.loc 1 1767 13 is_stmt 0 view .LVU875
 3173 0058 194B     		ldr	r3, .L249+16
 3174 005a 1B68     		ldr	r3, [r3]
1767:FreeRTOS/src/tasks.c **** 		{
 3175              		.loc 1 1767 5 view .LVU876
 3176 005c A342     		cmp	r3, r4
 3177 005e 0ED0     		beq	.L248
 3178              	.L235:
1798:FreeRTOS/src/tasks.c **** 
 3179              		.loc 1 1798 2 view .LVU877
 3180 0060 38BD     		pop	{r3, r4, r5, pc}
 3181              	.LVL237:
 3182              	.L245:
1712:FreeRTOS/src/tasks.c **** 
 3183              		.loc 1 1712 12 discriminator 1 view .LVU878
 3184 0062 174B     		ldr	r3, .L249+16
 3185 0064 1C68     		ldr	r4, [r3]
 3186              	.LVL238:
1712:FreeRTOS/src/tasks.c **** 
 3187              		.loc 1 1712 12 discriminator 1 view .LVU879
 3188 0066 D0E7     		b	.L236
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 167


 3189              	.LVL239:
 3190              	.L246:
1745:FreeRTOS/src/tasks.c **** 				}
 3191              		.loc 1 1745 6 is_stmt 1 view .LVU880
1745:FreeRTOS/src/tasks.c **** 				}
 3192              		.loc 1 1745 27 is_stmt 0 view .LVU881
 3193 0068 0023     		movs	r3, #0
 3194 006a 84F85030 		strb	r3, [r4, #80]
 3195 006e EEE7     		b	.L239
 3196              	.L247:
1756:FreeRTOS/src/tasks.c **** 			{
 3197              		.loc 1 1756 4 is_stmt 1 view .LVU882
 3198 0070 FFF7FEFF 		bl	vPortEnterCritical
 3199              	.LVL240:
1758:FreeRTOS/src/tasks.c **** 			}
 3200              		.loc 1 1758 5 view .LVU883
 3201 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3202              	.LVL241:
1760:FreeRTOS/src/tasks.c **** 		}
 3203              		.loc 1 1760 4 view .LVU884
 3204 0078 FFF7FEFF 		bl	vPortExitCritical
 3205              	.LVL242:
 3206 007c ECE7     		b	.L240
 3207              	.L248:
1769:FreeRTOS/src/tasks.c **** 			{
 3208              		.loc 1 1769 4 view .LVU885
1769:FreeRTOS/src/tasks.c **** 			{
 3209              		.loc 1 1769 26 is_stmt 0 view .LVU886
 3210 007e 0F4B     		ldr	r3, .L249+12
 3211 0080 1B68     		ldr	r3, [r3]
1769:FreeRTOS/src/tasks.c **** 			{
 3212              		.loc 1 1769 6 view .LVU887
 3213 0082 43B1     		cbz	r3, .L242
1772:FreeRTOS/src/tasks.c **** 				portYIELD_WITHIN_API();
 3214              		.loc 1 1772 46 is_stmt 1 view .LVU888
1773:FreeRTOS/src/tasks.c **** 			}
 3215              		.loc 1 1773 5 view .LVU889
 3216 0084 0F4B     		ldr	r3, .L249+20
 3217 0086 4FF08052 		mov	r2, #268435456
 3218 008a 1A60     		str	r2, [r3]
1773:FreeRTOS/src/tasks.c **** 			}
 3219              		.loc 1 1773 5 view .LVU890
 3220              		.syntax unified
 3221              	@ 1773 "FreeRTOS/src/tasks.c" 1
 3222 008c BFF34F8F 		dsb
 3223              	@ 0 "" 2
1773:FreeRTOS/src/tasks.c **** 			}
 3224              		.loc 1 1773 5 view .LVU891
 3225              	@ 1773 "FreeRTOS/src/tasks.c" 1
 3226 0090 BFF36F8F 		isb
 3227              	@ 0 "" 2
1773:FreeRTOS/src/tasks.c **** 			}
 3228              		.loc 1 1773 27 view .LVU892
 3229              		.thumb
 3230              		.syntax unified
 3231 0094 E4E7     		b	.L235
 3232              	.L242:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 168


1780:FreeRTOS/src/tasks.c **** 				{
 3233              		.loc 1 1780 5 view .LVU893
1780:FreeRTOS/src/tasks.c **** 				{
 3234              		.loc 1 1780 9 is_stmt 0 view .LVU894
 3235 0096 084B     		ldr	r3, .L249+8
 3236 0098 1A68     		ldr	r2, [r3]
1780:FreeRTOS/src/tasks.c **** 				{
 3237              		.loc 1 1780 56 view .LVU895
 3238 009a 0B4B     		ldr	r3, .L249+24
 3239 009c 1B68     		ldr	r3, [r3]
1780:FreeRTOS/src/tasks.c **** 				{
 3240              		.loc 1 1780 7 view .LVU896
 3241 009e 9A42     		cmp	r2, r3
 3242 00a0 03D1     		bne	.L243
1786:FreeRTOS/src/tasks.c **** 				}
 3243              		.loc 1 1786 6 is_stmt 1 view .LVU897
1786:FreeRTOS/src/tasks.c **** 				}
 3244              		.loc 1 1786 19 is_stmt 0 view .LVU898
 3245 00a2 074B     		ldr	r3, .L249+16
 3246 00a4 0022     		movs	r2, #0
 3247 00a6 1A60     		str	r2, [r3]
 3248 00a8 DAE7     		b	.L235
 3249              	.L243:
1790:FreeRTOS/src/tasks.c **** 				}
 3250              		.loc 1 1790 6 is_stmt 1 view .LVU899
 3251 00aa FFF7FEFF 		bl	vTaskSwitchContext
 3252              	.LVL243:
1796:FreeRTOS/src/tasks.c **** 		}
 3253              		.loc 1 1796 28 view .LVU900
1798:FreeRTOS/src/tasks.c **** 
 3254              		.loc 1 1798 2 is_stmt 0 view .LVU901
 3255 00ae D7E7     		b	.L235
 3256              	.L250:
 3257              		.align	2
 3258              	.L249:
 3259 00b0 00000000 		.word	.LANCHOR4
 3260 00b4 00000000 		.word	.LANCHOR13
 3261 00b8 00000000 		.word	.LANCHOR0
 3262 00bc 00000000 		.word	.LANCHOR11
 3263 00c0 00000000 		.word	.LANCHOR10
 3264 00c4 04ED00E0 		.word	-536810236
 3265 00c8 00000000 		.word	.LANCHOR9
 3266              		.cfi_endproc
 3267              	.LFE79:
 3269              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3270              		.align	1
 3271              		.global	vTaskPlaceOnEventList
 3272              		.syntax unified
 3273              		.thumb
 3274              		.thumb_func
 3275              		.fpu softvfp
 3277              	vTaskPlaceOnEventList:
 3278              	.LVL244:
 3279              	.LFB94:
3065:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 3280              		.loc 1 3065 1 is_stmt 1 view -0
 3281              		.cfi_startproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 169


 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 0, uses_anonymous_args = 0
3065:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 3284              		.loc 1 3065 1 is_stmt 0 view .LVU903
 3285 0000 10B5     		push	{r4, lr}
 3286              	.LCFI31:
 3287              		.cfi_def_cfa_offset 8
 3288              		.cfi_offset 4, -8
 3289              		.cfi_offset 14, -4
 3290 0002 0C46     		mov	r4, r1
3066:FreeRTOS/src/tasks.c **** 
 3291              		.loc 1 3066 29 is_stmt 1 view .LVU904
3075:FreeRTOS/src/tasks.c **** 
 3292              		.loc 1 3075 2 view .LVU905
3075:FreeRTOS/src/tasks.c **** 
 3293              		.loc 1 3075 43 is_stmt 0 view .LVU906
 3294 0004 044B     		ldr	r3, .L253
 3295 0006 1968     		ldr	r1, [r3]
 3296              	.LVL245:
3075:FreeRTOS/src/tasks.c **** 
 3297              		.loc 1 3075 2 view .LVU907
 3298 0008 1831     		adds	r1, r1, #24
 3299 000a FFF7FEFF 		bl	vListInsert
 3300              	.LVL246:
3077:FreeRTOS/src/tasks.c **** }
 3301              		.loc 1 3077 2 is_stmt 1 view .LVU908
 3302 000e 0121     		movs	r1, #1
 3303 0010 2046     		mov	r0, r4
 3304 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3305              	.LVL247:
3078:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3306              		.loc 1 3078 1 is_stmt 0 view .LVU909
 3307 0016 10BD     		pop	{r4, pc}
 3308              	.LVL248:
 3309              	.L254:
3078:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3310              		.loc 1 3078 1 view .LVU910
 3311              		.align	2
 3312              	.L253:
 3313 0018 00000000 		.word	.LANCHOR10
 3314              		.cfi_endproc
 3315              	.LFE94:
 3317              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3318              		.align	1
 3319              		.global	vTaskPlaceOnUnorderedEventList
 3320              		.syntax unified
 3321              		.thumb
 3322              		.thumb_func
 3323              		.fpu softvfp
 3325              	vTaskPlaceOnUnorderedEventList:
 3326              	.LVL249:
 3327              	.LFB95:
3082:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 3328              		.loc 1 3082 1 is_stmt 1 view -0
 3329              		.cfi_startproc
 3330              		@ args = 0, pretend = 0, frame = 0
 3331              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 170


3082:FreeRTOS/src/tasks.c **** 	configASSERT( pxEventList );
 3332              		.loc 1 3082 1 is_stmt 0 view .LVU912
 3333 0000 10B5     		push	{r4, lr}
 3334              	.LCFI32:
 3335              		.cfi_def_cfa_offset 8
 3336              		.cfi_offset 4, -8
 3337              		.cfi_offset 14, -4
 3338 0002 1446     		mov	r4, r2
3083:FreeRTOS/src/tasks.c **** 
 3339              		.loc 1 3083 29 is_stmt 1 view .LVU913
3087:FreeRTOS/src/tasks.c **** 
 3340              		.loc 1 3087 43 view .LVU914
3092:FreeRTOS/src/tasks.c **** 
 3341              		.loc 1 3092 2 view .LVU915
 3342 0004 064B     		ldr	r3, .L257
 3343 0006 1A68     		ldr	r2, [r3]
 3344              	.LVL250:
3092:FreeRTOS/src/tasks.c **** 
 3345              		.loc 1 3092 2 is_stmt 0 view .LVU916
 3346 0008 41F00041 		orr	r1, r1, #-2147483648
 3347              	.LVL251:
3092:FreeRTOS/src/tasks.c **** 
 3348              		.loc 1 3092 2 view .LVU917
 3349 000c 9161     		str	r1, [r2, #24]
3099:FreeRTOS/src/tasks.c **** 
 3350              		.loc 1 3099 2 is_stmt 1 view .LVU918
3099:FreeRTOS/src/tasks.c **** 
 3351              		.loc 1 3099 46 is_stmt 0 view .LVU919
 3352 000e 1968     		ldr	r1, [r3]
3099:FreeRTOS/src/tasks.c **** 
 3353              		.loc 1 3099 2 view .LVU920
 3354 0010 1831     		adds	r1, r1, #24
 3355 0012 FFF7FEFF 		bl	vListInsertEnd
 3356              	.LVL252:
3101:FreeRTOS/src/tasks.c **** }
 3357              		.loc 1 3101 2 is_stmt 1 view .LVU921
 3358 0016 0121     		movs	r1, #1
 3359 0018 2046     		mov	r0, r4
 3360 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3361              	.LVL253:
3102:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3362              		.loc 1 3102 1 is_stmt 0 view .LVU922
 3363 001e 10BD     		pop	{r4, pc}
 3364              	.LVL254:
 3365              	.L258:
3102:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3366              		.loc 1 3102 1 view .LVU923
 3367              		.align	2
 3368              	.L257:
 3369 0020 00000000 		.word	.LANCHOR10
 3370              		.cfi_endproc
 3371              	.LFE95:
 3373              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3374              		.align	1
 3375              		.global	xTaskRemoveFromEventList
 3376              		.syntax unified
 3377              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 171


 3378              		.thumb_func
 3379              		.fpu softvfp
 3381              	xTaskRemoveFromEventList:
 3382              	.LVL255:
 3383              	.LFB96:
3139:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3384              		.loc 1 3139 1 is_stmt 1 view -0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
3139:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3388              		.loc 1 3139 1 is_stmt 0 view .LVU925
 3389 0000 38B5     		push	{r3, r4, r5, lr}
 3390              	.LCFI33:
 3391              		.cfi_def_cfa_offset 16
 3392              		.cfi_offset 3, -16
 3393              		.cfi_offset 4, -12
 3394              		.cfi_offset 5, -8
 3395              		.cfi_offset 14, -4
3140:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3396              		.loc 1 3140 1 is_stmt 1 view .LVU926
3141:FreeRTOS/src/tasks.c **** 
 3397              		.loc 1 3141 1 view .LVU927
3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3398              		.loc 1 3156 2 view .LVU928
3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3399              		.loc 1 3156 19 is_stmt 0 view .LVU929
 3400 0002 C368     		ldr	r3, [r0, #12]
3156:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3401              		.loc 1 3156 17 view .LVU930
 3402 0004 DC68     		ldr	r4, [r3, #12]
 3403              	.LVL256:
3157:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3404              		.loc 1 3157 32 is_stmt 1 view .LVU931
3158:FreeRTOS/src/tasks.c **** 
 3405              		.loc 1 3158 2 view .LVU932
3158:FreeRTOS/src/tasks.c **** 
 3406              		.loc 1 3158 11 is_stmt 0 view .LVU933
 3407 0006 04F11805 		add	r5, r4, #24
 3408 000a 2846     		mov	r0, r5
 3409              	.LVL257:
3158:FreeRTOS/src/tasks.c **** 
 3410              		.loc 1 3158 11 view .LVU934
 3411 000c FFF7FEFF 		bl	uxListRemove
 3412              	.LVL258:
3160:FreeRTOS/src/tasks.c **** 	{
 3413              		.loc 1 3160 2 is_stmt 1 view .LVU935
3160:FreeRTOS/src/tasks.c **** 	{
 3414              		.loc 1 3160 27 is_stmt 0 view .LVU936
 3415 0010 134B     		ldr	r3, .L265
 3416 0012 1B68     		ldr	r3, [r3]
3160:FreeRTOS/src/tasks.c **** 	{
 3417              		.loc 1 3160 4 view .LVU937
 3418 0014 E3B9     		cbnz	r3, .L260
3162:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3419              		.loc 1 3162 3 is_stmt 1 view .LVU938
3162:FreeRTOS/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 172


 3420              		.loc 1 3162 12 is_stmt 0 view .LVU939
 3421 0016 251D     		adds	r5, r4, #4
 3422 0018 2846     		mov	r0, r5
 3423 001a FFF7FEFF 		bl	uxListRemove
 3424              	.LVL259:
3163:FreeRTOS/src/tasks.c **** 
 3425              		.loc 1 3163 3 is_stmt 1 view .LVU940
3163:FreeRTOS/src/tasks.c **** 
 3426              		.loc 1 3163 3 view .LVU941
 3427 001e E36A     		ldr	r3, [r4, #44]
 3428 0020 0122     		movs	r2, #1
 3429 0022 9A40     		lsls	r2, r2, r3
 3430 0024 0F49     		ldr	r1, .L265+4
 3431 0026 0868     		ldr	r0, [r1]
 3432 0028 0243     		orrs	r2, r2, r0
 3433 002a 0A60     		str	r2, [r1]
3163:FreeRTOS/src/tasks.c **** 
 3434              		.loc 1 3163 3 view .LVU942
 3435 002c 03EB8303 		add	r3, r3, r3, lsl #2
 3436 0030 9A00     		lsls	r2, r3, #2
 3437 0032 2946     		mov	r1, r5
 3438 0034 0C48     		ldr	r0, .L265+8
 3439 0036 1044     		add	r0, r0, r2
 3440 0038 FFF7FEFF 		bl	vListInsertEnd
 3441              	.LVL260:
3163:FreeRTOS/src/tasks.c **** 
 3442              		.loc 1 3163 42 view .LVU943
 3443              	.L261:
3186:FreeRTOS/src/tasks.c **** 	{
 3444              		.loc 1 3186 2 view .LVU944
3186:FreeRTOS/src/tasks.c **** 	{
 3445              		.loc 1 3186 20 is_stmt 0 view .LVU945
 3446 003c E26A     		ldr	r2, [r4, #44]
3186:FreeRTOS/src/tasks.c **** 	{
 3447              		.loc 1 3186 47 view .LVU946
 3448 003e 0B4B     		ldr	r3, .L265+12
 3449 0040 1B68     		ldr	r3, [r3]
 3450 0042 DB6A     		ldr	r3, [r3, #44]
3186:FreeRTOS/src/tasks.c **** 	{
 3451              		.loc 1 3186 4 view .LVU947
 3452 0044 9A42     		cmp	r2, r3
 3453 0046 08D9     		bls	.L263
3191:FreeRTOS/src/tasks.c **** 
 3454              		.loc 1 3191 3 is_stmt 1 view .LVU948
 3455              	.LVL261:
3195:FreeRTOS/src/tasks.c **** 	}
 3456              		.loc 1 3195 3 view .LVU949
3195:FreeRTOS/src/tasks.c **** 	}
 3457              		.loc 1 3195 17 is_stmt 0 view .LVU950
 3458 0048 0120     		movs	r0, #1
 3459 004a 094B     		ldr	r3, .L265+16
 3460 004c 1860     		str	r0, [r3]
 3461 004e 05E0     		b	.L259
 3462              	.LVL262:
 3463              	.L260:
3183:FreeRTOS/src/tasks.c **** 	}
 3464              		.loc 1 3183 3 is_stmt 1 view .LVU951
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 173


 3465 0050 2946     		mov	r1, r5
 3466 0052 0848     		ldr	r0, .L265+20
 3467 0054 FFF7FEFF 		bl	vListInsertEnd
 3468              	.LVL263:
 3469 0058 F0E7     		b	.L261
 3470              	.L263:
3199:FreeRTOS/src/tasks.c **** 	}
 3471              		.loc 1 3199 11 is_stmt 0 view .LVU952
 3472 005a 0020     		movs	r0, #0
 3473              	.LVL264:
3202:FreeRTOS/src/tasks.c **** }
 3474              		.loc 1 3202 2 is_stmt 1 view .LVU953
 3475              	.L259:
3203:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3476              		.loc 1 3203 1 is_stmt 0 view .LVU954
 3477 005c 38BD     		pop	{r3, r4, r5, pc}
 3478              	.LVL265:
 3479              	.L266:
3203:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3480              		.loc 1 3203 1 view .LVU955
 3481 005e 00BF     		.align	2
 3482              	.L265:
 3483 0060 00000000 		.word	.LANCHOR16
 3484 0064 00000000 		.word	.LANCHOR13
 3485 0068 00000000 		.word	.LANCHOR4
 3486 006c 00000000 		.word	.LANCHOR10
 3487 0070 00000000 		.word	.LANCHOR19
 3488 0074 00000000 		.word	.LANCHOR1
 3489              		.cfi_endproc
 3490              	.LFE96:
 3492              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3493              		.align	1
 3494              		.global	vTaskRemoveFromUnorderedEventList
 3495              		.syntax unified
 3496              		.thumb
 3497              		.thumb_func
 3498              		.fpu softvfp
 3500              	vTaskRemoveFromUnorderedEventList:
 3501              	.LVL266:
 3502              	.LFB97:
3207:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3503              		.loc 1 3207 1 is_stmt 1 view -0
 3504              		.cfi_startproc
 3505              		@ args = 0, pretend = 0, frame = 0
 3506              		@ frame_needed = 0, uses_anonymous_args = 0
3207:FreeRTOS/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3507              		.loc 1 3207 1 is_stmt 0 view .LVU957
 3508 0000 38B5     		push	{r3, r4, r5, lr}
 3509              	.LCFI34:
 3510              		.cfi_def_cfa_offset 16
 3511              		.cfi_offset 3, -16
 3512              		.cfi_offset 4, -12
 3513              		.cfi_offset 5, -8
 3514              		.cfi_offset 14, -4
3208:FreeRTOS/src/tasks.c **** 
 3515              		.loc 1 3208 1 is_stmt 1 view .LVU958
3212:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 174


 3516              		.loc 1 3212 49 view .LVU959
3215:FreeRTOS/src/tasks.c **** 
 3517              		.loc 1 3215 2 view .LVU960
 3518 0002 41F00041 		orr	r1, r1, #-2147483648
 3519              	.LVL267:
3215:FreeRTOS/src/tasks.c **** 
 3520              		.loc 1 3215 2 is_stmt 0 view .LVU961
 3521 0006 0160     		str	r1, [r0]
3219:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3522              		.loc 1 3219 2 is_stmt 1 view .LVU962
3219:FreeRTOS/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3523              		.loc 1 3219 17 is_stmt 0 view .LVU963
 3524 0008 C468     		ldr	r4, [r0, #12]
 3525              	.LVL268:
3220:FreeRTOS/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3526              		.loc 1 3220 32 is_stmt 1 view .LVU964
3221:FreeRTOS/src/tasks.c **** 
 3527              		.loc 1 3221 2 view .LVU965
3221:FreeRTOS/src/tasks.c **** 
 3528              		.loc 1 3221 11 is_stmt 0 view .LVU966
 3529 000a FFF7FEFF 		bl	uxListRemove
 3530              	.LVL269:
3240:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3531              		.loc 1 3240 2 is_stmt 1 view .LVU967
3240:FreeRTOS/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3532              		.loc 1 3240 11 is_stmt 0 view .LVU968
 3533 000e 251D     		adds	r5, r4, #4
 3534 0010 2846     		mov	r0, r5
 3535 0012 FFF7FEFF 		bl	uxListRemove
 3536              	.LVL270:
3241:FreeRTOS/src/tasks.c **** 
 3537              		.loc 1 3241 2 is_stmt 1 view .LVU969
3241:FreeRTOS/src/tasks.c **** 
 3538              		.loc 1 3241 2 view .LVU970
 3539 0016 E36A     		ldr	r3, [r4, #44]
 3540 0018 0122     		movs	r2, #1
 3541 001a 9A40     		lsls	r2, r2, r3
 3542 001c 0A49     		ldr	r1, .L270
 3543 001e 0868     		ldr	r0, [r1]
 3544 0020 0243     		orrs	r2, r2, r0
 3545 0022 0A60     		str	r2, [r1]
3241:FreeRTOS/src/tasks.c **** 
 3546              		.loc 1 3241 2 view .LVU971
 3547 0024 03EB8303 		add	r3, r3, r3, lsl #2
 3548 0028 9A00     		lsls	r2, r3, #2
 3549 002a 2946     		mov	r1, r5
 3550 002c 0748     		ldr	r0, .L270+4
 3551 002e 1044     		add	r0, r0, r2
 3552 0030 FFF7FEFF 		bl	vListInsertEnd
 3553              	.LVL271:
3241:FreeRTOS/src/tasks.c **** 
 3554              		.loc 1 3241 41 view .LVU972
3243:FreeRTOS/src/tasks.c **** 	{
 3555              		.loc 1 3243 2 view .LVU973
3243:FreeRTOS/src/tasks.c **** 	{
 3556              		.loc 1 3243 20 is_stmt 0 view .LVU974
 3557 0034 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 175


3243:FreeRTOS/src/tasks.c **** 	{
 3558              		.loc 1 3243 47 view .LVU975
 3559 0036 064B     		ldr	r3, .L270+8
 3560 0038 1B68     		ldr	r3, [r3]
 3561 003a DB6A     		ldr	r3, [r3, #44]
3243:FreeRTOS/src/tasks.c **** 	{
 3562              		.loc 1 3243 4 view .LVU976
 3563 003c 9A42     		cmp	r2, r3
 3564 003e 02D9     		bls	.L267
3249:FreeRTOS/src/tasks.c **** 	}
 3565              		.loc 1 3249 3 is_stmt 1 view .LVU977
3249:FreeRTOS/src/tasks.c **** 	}
 3566              		.loc 1 3249 17 is_stmt 0 view .LVU978
 3567 0040 044B     		ldr	r3, .L270+12
 3568 0042 0122     		movs	r2, #1
 3569 0044 1A60     		str	r2, [r3]
 3570              	.L267:
3251:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3571              		.loc 1 3251 1 view .LVU979
 3572 0046 38BD     		pop	{r3, r4, r5, pc}
 3573              	.LVL272:
 3574              	.L271:
3251:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3575              		.loc 1 3251 1 view .LVU980
 3576              		.align	2
 3577              	.L270:
 3578 0048 00000000 		.word	.LANCHOR13
 3579 004c 00000000 		.word	.LANCHOR4
 3580 0050 00000000 		.word	.LANCHOR10
 3581 0054 00000000 		.word	.LANCHOR19
 3582              		.cfi_endproc
 3583              	.LFE97:
 3585              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3586              		.align	1
 3587              		.global	vTaskSetTimeOutState
 3588              		.syntax unified
 3589              		.thumb
 3590              		.thumb_func
 3591              		.fpu softvfp
 3593              	vTaskSetTimeOutState:
 3594              	.LVL273:
 3595              	.LFB98:
3255:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
 3596              		.loc 1 3255 1 is_stmt 1 view -0
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 0
 3599              		@ frame_needed = 0, uses_anonymous_args = 0
3255:FreeRTOS/src/tasks.c **** 	configASSERT( pxTimeOut );
 3600              		.loc 1 3255 1 is_stmt 0 view .LVU982
 3601 0000 10B5     		push	{r4, lr}
 3602              	.LCFI35:
 3603              		.cfi_def_cfa_offset 8
 3604              		.cfi_offset 4, -8
 3605              		.cfi_offset 14, -4
 3606 0002 0446     		mov	r4, r0
3256:FreeRTOS/src/tasks.c **** 	taskENTER_CRITICAL();
 3607              		.loc 1 3256 27 is_stmt 1 view .LVU983
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 176


3257:FreeRTOS/src/tasks.c **** 	{
 3608              		.loc 1 3257 2 view .LVU984
 3609 0004 FFF7FEFF 		bl	vPortEnterCritical
 3610              	.LVL274:
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3611              		.loc 1 3259 3 view .LVU985
3259:FreeRTOS/src/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3612              		.loc 1 3259 29 is_stmt 0 view .LVU986
 3613 0008 044B     		ldr	r3, .L274
 3614 000a 1B68     		ldr	r3, [r3]
 3615 000c 2360     		str	r3, [r4]
3260:FreeRTOS/src/tasks.c **** 	}
 3616              		.loc 1 3260 3 is_stmt 1 view .LVU987
3260:FreeRTOS/src/tasks.c **** 	}
 3617              		.loc 1 3260 30 is_stmt 0 view .LVU988
 3618 000e 044B     		ldr	r3, .L274+4
 3619 0010 1B68     		ldr	r3, [r3]
 3620 0012 6360     		str	r3, [r4, #4]
3262:FreeRTOS/src/tasks.c **** }
 3621              		.loc 1 3262 2 is_stmt 1 view .LVU989
 3622 0014 FFF7FEFF 		bl	vPortExitCritical
 3623              	.LVL275:
3263:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3624              		.loc 1 3263 1 is_stmt 0 view .LVU990
 3625 0018 10BD     		pop	{r4, pc}
 3626              	.LVL276:
 3627              	.L275:
3263:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3628              		.loc 1 3263 1 view .LVU991
 3629 001a 00BF     		.align	2
 3630              	.L274:
 3631 001c 00000000 		.word	.LANCHOR18
 3632 0020 00000000 		.word	.LANCHOR15
 3633              		.cfi_endproc
 3634              	.LFE98:
 3636              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3637              		.align	1
 3638              		.global	vTaskInternalSetTimeOutState
 3639              		.syntax unified
 3640              		.thumb
 3641              		.thumb_func
 3642              		.fpu softvfp
 3644              	vTaskInternalSetTimeOutState:
 3645              	.LVL277:
 3646              	.LFB99:
3267:FreeRTOS/src/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3647              		.loc 1 3267 1 is_stmt 1 view -0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 0
 3650              		@ frame_needed = 0, uses_anonymous_args = 0
 3651              		@ link register save eliminated.
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3652              		.loc 1 3269 2 view .LVU993
3269:FreeRTOS/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3653              		.loc 1 3269 28 is_stmt 0 view .LVU994
 3654 0000 034B     		ldr	r3, .L277
 3655 0002 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 177


 3656 0004 0360     		str	r3, [r0]
3270:FreeRTOS/src/tasks.c **** }
 3657              		.loc 1 3270 2 is_stmt 1 view .LVU995
3270:FreeRTOS/src/tasks.c **** }
 3658              		.loc 1 3270 29 is_stmt 0 view .LVU996
 3659 0006 034B     		ldr	r3, .L277+4
 3660 0008 1B68     		ldr	r3, [r3]
 3661 000a 4360     		str	r3, [r0, #4]
3271:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3662              		.loc 1 3271 1 view .LVU997
 3663 000c 7047     		bx	lr
 3664              	.L278:
 3665 000e 00BF     		.align	2
 3666              	.L277:
 3667 0010 00000000 		.word	.LANCHOR18
 3668 0014 00000000 		.word	.LANCHOR15
 3669              		.cfi_endproc
 3670              	.LFE99:
 3672              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3673              		.align	1
 3674              		.global	xTaskCheckForTimeOut
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu softvfp
 3680              	xTaskCheckForTimeOut:
 3681              	.LVL278:
 3682              	.LFB100:
3275:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3683              		.loc 1 3275 1 is_stmt 1 view -0
 3684              		.cfi_startproc
 3685              		@ args = 0, pretend = 0, frame = 0
 3686              		@ frame_needed = 0, uses_anonymous_args = 0
3275:FreeRTOS/src/tasks.c **** BaseType_t xReturn;
 3687              		.loc 1 3275 1 is_stmt 0 view .LVU999
 3688 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3689              	.LCFI36:
 3690              		.cfi_def_cfa_offset 24
 3691              		.cfi_offset 3, -24
 3692              		.cfi_offset 4, -20
 3693              		.cfi_offset 5, -16
 3694              		.cfi_offset 6, -12
 3695              		.cfi_offset 7, -8
 3696              		.cfi_offset 14, -4
 3697 0002 0446     		mov	r4, r0
 3698 0004 0D46     		mov	r5, r1
3276:FreeRTOS/src/tasks.c **** 
 3699              		.loc 1 3276 1 is_stmt 1 view .LVU1000
3278:FreeRTOS/src/tasks.c **** 	configASSERT( pxTicksToWait );
 3700              		.loc 1 3278 27 view .LVU1001
3279:FreeRTOS/src/tasks.c **** 
 3701              		.loc 1 3279 31 view .LVU1002
3281:FreeRTOS/src/tasks.c **** 	{
 3702              		.loc 1 3281 2 view .LVU1003
 3703 0006 FFF7FEFF 		bl	vPortEnterCritical
 3704              	.LVL279:
 3705              	.LBB57:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 178


3284:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3706              		.loc 1 3284 3 view .LVU1004
3284:FreeRTOS/src/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3707              		.loc 1 3284 20 is_stmt 0 view .LVU1005
 3708 000a 124B     		ldr	r3, .L287
 3709 000c 1968     		ldr	r1, [r3]
 3710              	.LVL280:
3285:FreeRTOS/src/tasks.c **** 
 3711              		.loc 1 3285 3 is_stmt 1 view .LVU1006
3285:FreeRTOS/src/tasks.c **** 
 3712              		.loc 1 3285 62 is_stmt 0 view .LVU1007
 3713 000e 6368     		ldr	r3, [r4, #4]
3285:FreeRTOS/src/tasks.c **** 
 3714              		.loc 1 3285 20 view .LVU1008
 3715 0010 C81A     		subs	r0, r1, r3
 3716              	.LVL281:
3299:FreeRTOS/src/tasks.c **** 			{
 3717              		.loc 1 3299 4 is_stmt 1 view .LVU1009
3299:FreeRTOS/src/tasks.c **** 			{
 3718              		.loc 1 3299 8 is_stmt 0 view .LVU1010
 3719 0012 2A68     		ldr	r2, [r5]
3299:FreeRTOS/src/tasks.c **** 			{
 3720              		.loc 1 3299 6 view .LVU1011
 3721 0014 B2F1FF3F 		cmp	r2, #-1
 3722 0018 14D0     		beq	.L283
3309:FreeRTOS/src/tasks.c **** 		{
 3723              		.loc 1 3309 3 is_stmt 1 view .LVU1012
3309:FreeRTOS/src/tasks.c **** 		{
 3724              		.loc 1 3309 37 is_stmt 0 view .LVU1013
 3725 001a 2768     		ldr	r7, [r4]
3309:FreeRTOS/src/tasks.c **** 		{
 3726              		.loc 1 3309 25 view .LVU1014
 3727 001c 0E4E     		ldr	r6, .L287+4
 3728 001e 3668     		ldr	r6, [r6]
3309:FreeRTOS/src/tasks.c **** 		{
 3729              		.loc 1 3309 5 view .LVU1015
 3730 0020 B742     		cmp	r7, r6
 3731 0022 01D0     		beq	.L281
3309:FreeRTOS/src/tasks.c **** 		{
 3732              		.loc 1 3309 56 discriminator 1 view .LVU1016
 3733 0024 8B42     		cmp	r3, r1
 3734 0026 12D9     		bls	.L284
 3735              	.L281:
3318:FreeRTOS/src/tasks.c **** 		{
 3736              		.loc 1 3318 8 is_stmt 1 view .LVU1017
3318:FreeRTOS/src/tasks.c **** 		{
 3737              		.loc 1 3318 10 is_stmt 0 view .LVU1018
 3738 0028 8242     		cmp	r2, r0
 3739 002a 03D8     		bhi	.L286
3327:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
 3740              		.loc 1 3327 4 is_stmt 1 view .LVU1019
3327:FreeRTOS/src/tasks.c **** 			xReturn = pdTRUE;
 3741              		.loc 1 3327 19 is_stmt 0 view .LVU1020
 3742 002c 0023     		movs	r3, #0
 3743 002e 2B60     		str	r3, [r5]
3328:FreeRTOS/src/tasks.c **** 		}
 3744              		.loc 1 3328 4 is_stmt 1 view .LVU1021
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 179


 3745              	.LVL282:
3328:FreeRTOS/src/tasks.c **** 		}
 3746              		.loc 1 3328 12 is_stmt 0 view .LVU1022
 3747 0030 0124     		movs	r4, #1
 3748              	.LVL283:
3328:FreeRTOS/src/tasks.c **** 		}
 3749              		.loc 1 3328 12 view .LVU1023
 3750 0032 08E0     		b	.L280
 3751              	.LVL284:
 3752              	.L286:
3321:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3753              		.loc 1 3321 4 is_stmt 1 view .LVU1024
3321:FreeRTOS/src/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3754              		.loc 1 3321 19 is_stmt 0 view .LVU1025
 3755 0034 5B1A     		subs	r3, r3, r1
 3756 0036 1344     		add	r3, r3, r2
 3757 0038 2B60     		str	r3, [r5]
3322:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
 3758              		.loc 1 3322 4 is_stmt 1 view .LVU1026
 3759 003a 2046     		mov	r0, r4
 3760              	.LVL285:
3322:FreeRTOS/src/tasks.c **** 			xReturn = pdFALSE;
 3761              		.loc 1 3322 4 is_stmt 0 view .LVU1027
 3762 003c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3763              	.LVL286:
3323:FreeRTOS/src/tasks.c **** 		}
 3764              		.loc 1 3323 4 is_stmt 1 view .LVU1028
3323:FreeRTOS/src/tasks.c **** 		}
 3765              		.loc 1 3323 12 is_stmt 0 view .LVU1029
 3766 0040 0024     		movs	r4, #0
 3767              	.LVL287:
3323:FreeRTOS/src/tasks.c **** 		}
 3768              		.loc 1 3323 12 view .LVU1030
 3769 0042 00E0     		b	.L280
 3770              	.LVL288:
 3771              	.L283:
3304:FreeRTOS/src/tasks.c **** 			}
 3772              		.loc 1 3304 13 view .LVU1031
 3773 0044 0024     		movs	r4, #0
 3774              	.LVL289:
 3775              	.L280:
3304:FreeRTOS/src/tasks.c **** 			}
 3776              		.loc 1 3304 13 view .LVU1032
 3777              	.LBE57:
3331:FreeRTOS/src/tasks.c **** 
 3778              		.loc 1 3331 2 is_stmt 1 view .LVU1033
 3779 0046 FFF7FEFF 		bl	vPortExitCritical
 3780              	.LVL290:
3333:FreeRTOS/src/tasks.c **** }
 3781              		.loc 1 3333 2 view .LVU1034
3334:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3782              		.loc 1 3334 1 is_stmt 0 view .LVU1035
 3783 004a 2046     		mov	r0, r4
 3784 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3785              	.LVL291:
 3786              	.L284:
 3787              	.LBB58:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 180


3316:FreeRTOS/src/tasks.c **** 		}
 3788              		.loc 1 3316 12 view .LVU1036
 3789 004e 0124     		movs	r4, #1
 3790              	.LVL292:
3316:FreeRTOS/src/tasks.c **** 		}
 3791              		.loc 1 3316 12 view .LVU1037
 3792 0050 F9E7     		b	.L280
 3793              	.L288:
 3794 0052 00BF     		.align	2
 3795              	.L287:
 3796 0054 00000000 		.word	.LANCHOR15
 3797 0058 00000000 		.word	.LANCHOR18
 3798              	.LBE58:
 3799              		.cfi_endproc
 3800              	.LFE100:
 3802              		.section	.text.vTaskMissedYield,"ax",%progbits
 3803              		.align	1
 3804              		.global	vTaskMissedYield
 3805              		.syntax unified
 3806              		.thumb
 3807              		.thumb_func
 3808              		.fpu softvfp
 3810              	vTaskMissedYield:
 3811              	.LFB101:
3338:FreeRTOS/src/tasks.c **** 	xYieldPending = pdTRUE;
 3812              		.loc 1 3338 1 is_stmt 1 view -0
 3813              		.cfi_startproc
 3814              		@ args = 0, pretend = 0, frame = 0
 3815              		@ frame_needed = 0, uses_anonymous_args = 0
 3816              		@ link register save eliminated.
3339:FreeRTOS/src/tasks.c **** }
 3817              		.loc 1 3339 2 view .LVU1039
3339:FreeRTOS/src/tasks.c **** }
 3818              		.loc 1 3339 16 is_stmt 0 view .LVU1040
 3819 0000 014B     		ldr	r3, .L290
 3820 0002 0122     		movs	r2, #1
 3821 0004 1A60     		str	r2, [r3]
3340:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 3822              		.loc 1 3340 1 view .LVU1041
 3823 0006 7047     		bx	lr
 3824              	.L291:
 3825              		.align	2
 3826              	.L290:
 3827 0008 00000000 		.word	.LANCHOR19
 3828              		.cfi_endproc
 3829              	.LFE101:
 3831              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3832              		.align	1
 3833              		.global	xTaskGetCurrentTaskHandle
 3834              		.syntax unified
 3835              		.thumb
 3836              		.thumb_func
 3837              		.fpu softvfp
 3839              	xTaskGetCurrentTaskHandle:
 3840              	.LFB107:
3970:FreeRTOS/src/tasks.c **** 	TaskHandle_t xReturn;
 3841              		.loc 1 3970 2 is_stmt 1 view -0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 181


 3842              		.cfi_startproc
 3843              		@ args = 0, pretend = 0, frame = 0
 3844              		@ frame_needed = 0, uses_anonymous_args = 0
 3845              		@ link register save eliminated.
3971:FreeRTOS/src/tasks.c **** 
 3846              		.loc 1 3971 2 view .LVU1043
3976:FreeRTOS/src/tasks.c **** 
 3847              		.loc 1 3976 3 view .LVU1044
3976:FreeRTOS/src/tasks.c **** 
 3848              		.loc 1 3976 11 is_stmt 0 view .LVU1045
 3849 0000 014B     		ldr	r3, .L293
 3850 0002 1868     		ldr	r0, [r3]
 3851              	.LVL293:
3978:FreeRTOS/src/tasks.c **** 	}
 3852              		.loc 1 3978 3 is_stmt 1 view .LVU1046
3979:FreeRTOS/src/tasks.c **** 
 3853              		.loc 1 3979 2 is_stmt 0 view .LVU1047
 3854 0004 7047     		bx	lr
 3855              	.L294:
 3856 0006 00BF     		.align	2
 3857              	.L293:
 3858 0008 00000000 		.word	.LANCHOR10
 3859              		.cfi_endproc
 3860              	.LFE107:
 3862              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3863              		.align	1
 3864              		.global	xTaskPriorityInherit
 3865              		.syntax unified
 3866              		.thumb
 3867              		.thumb_func
 3868              		.fpu softvfp
 3870              	xTaskPriorityInherit:
 3871              	.LVL294:
 3872              	.LFB108:
4015:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3873              		.loc 1 4015 2 is_stmt 1 view -0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 0
 3876              		@ frame_needed = 0, uses_anonymous_args = 0
4016:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3877              		.loc 1 4016 2 view .LVU1049
4017:FreeRTOS/src/tasks.c **** 
 3878              		.loc 1 4017 2 view .LVU1050
4022:FreeRTOS/src/tasks.c **** 		{
 3879              		.loc 1 4022 3 view .LVU1051
4022:FreeRTOS/src/tasks.c **** 		{
 3880              		.loc 1 4022 5 is_stmt 0 view .LVU1052
 3881 0000 0028     		cmp	r0, #0
 3882 0002 49D0     		beq	.L301
4015:FreeRTOS/src/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3883              		.loc 1 4015 2 view .LVU1053
 3884 0004 38B5     		push	{r3, r4, r5, lr}
 3885              	.LCFI37:
 3886              		.cfi_def_cfa_offset 16
 3887              		.cfi_offset 3, -16
 3888              		.cfi_offset 4, -12
 3889              		.cfi_offset 5, -8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 182


 3890              		.cfi_offset 14, -4
 3891 0006 0446     		mov	r4, r0
4027:FreeRTOS/src/tasks.c **** 			{
 3892              		.loc 1 4027 4 is_stmt 1 view .LVU1054
4027:FreeRTOS/src/tasks.c **** 			{
 3893              		.loc 1 4027 24 is_stmt 0 view .LVU1055
 3894 0008 C26A     		ldr	r2, [r0, #44]
4027:FreeRTOS/src/tasks.c **** 			{
 3895              		.loc 1 4027 51 view .LVU1056
 3896 000a 2549     		ldr	r1, .L308
 3897 000c 0968     		ldr	r1, [r1]
 3898 000e C96A     		ldr	r1, [r1, #44]
4027:FreeRTOS/src/tasks.c **** 			{
 3899              		.loc 1 4027 6 view .LVU1057
 3900 0010 8A42     		cmp	r2, r1
 3901 0012 39D2     		bcs	.L297
4032:FreeRTOS/src/tasks.c **** 				{
 3902              		.loc 1 4032 5 is_stmt 1 view .LVU1058
4032:FreeRTOS/src/tasks.c **** 				{
 3903              		.loc 1 4032 11 is_stmt 0 view .LVU1059
 3904 0014 8169     		ldr	r1, [r0, #24]
4032:FreeRTOS/src/tasks.c **** 				{
 3905              		.loc 1 4032 7 view .LVU1060
 3906 0016 0029     		cmp	r1, #0
 3907 0018 05DB     		blt	.L298
4034:FreeRTOS/src/tasks.c **** 				}
 3908              		.loc 1 4034 6 is_stmt 1 view .LVU1061
 3909 001a 2149     		ldr	r1, .L308
 3910 001c 0968     		ldr	r1, [r1]
 3911 001e C96A     		ldr	r1, [r1, #44]
 3912 0020 C1F10501 		rsb	r1, r1, #5
 3913 0024 8161     		str	r1, [r0, #24]
 3914              	.L298:
4038:FreeRTOS/src/tasks.c **** 				}
 3915              		.loc 1 4038 30 view .LVU1062
4043:FreeRTOS/src/tasks.c **** 				{
 3916              		.loc 1 4043 5 view .LVU1063
4043:FreeRTOS/src/tasks.c **** 				{
 3917              		.loc 1 4043 9 is_stmt 0 view .LVU1064
 3918 0026 6069     		ldr	r0, [r4, #20]
 3919              	.LVL295:
4043:FreeRTOS/src/tasks.c **** 				{
 3920              		.loc 1 4043 9 view .LVU1065
 3921 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3922 002c 9100     		lsls	r1, r2, #2
 3923 002e 1D4A     		ldr	r2, .L308+4
 3924 0030 0A44     		add	r2, r2, r1
4043:FreeRTOS/src/tasks.c **** 				{
 3925              		.loc 1 4043 7 view .LVU1066
 3926 0032 9042     		cmp	r0, r2
 3927 0034 05D0     		beq	.L307
4064:FreeRTOS/src/tasks.c **** 				}
 3928              		.loc 1 4064 6 is_stmt 1 view .LVU1067
4064:FreeRTOS/src/tasks.c **** 				}
 3929              		.loc 1 4064 49 is_stmt 0 view .LVU1068
 3930 0036 1A4A     		ldr	r2, .L308
 3931 0038 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 183


 3932 003a D26A     		ldr	r2, [r2, #44]
4064:FreeRTOS/src/tasks.c **** 				}
 3933              		.loc 1 4064 35 view .LVU1069
 3934 003c E262     		str	r2, [r4, #44]
4070:FreeRTOS/src/tasks.c **** 			}
 3935              		.loc 1 4070 13 view .LVU1070
 3936 003e 0120     		movs	r0, #1
 3937              	.LVL296:
 3938              	.L295:
4097:FreeRTOS/src/tasks.c **** 
 3939              		.loc 1 4097 2 view .LVU1071
 3940 0040 38BD     		pop	{r3, r4, r5, pc}
 3941              	.LVL297:
 3942              	.L307:
4045:FreeRTOS/src/tasks.c **** 					{
 3943              		.loc 1 4045 6 is_stmt 1 view .LVU1072
4045:FreeRTOS/src/tasks.c **** 					{
 3944              		.loc 1 4045 10 is_stmt 0 view .LVU1073
 3945 0042 251D     		adds	r5, r4, #4
 3946 0044 2846     		mov	r0, r5
 3947 0046 FFF7FEFF 		bl	uxListRemove
 3948              	.LVL298:
4045:FreeRTOS/src/tasks.c **** 					{
 3949              		.loc 1 4045 8 view .LVU1074
 3950 004a 40B9     		cbnz	r0, .L300
4050:FreeRTOS/src/tasks.c **** 					}
 3951              		.loc 1 4050 7 is_stmt 1 view .LVU1075
 3952 004c E26A     		ldr	r2, [r4, #44]
 3953 004e 0123     		movs	r3, #1
 3954 0050 03FA02F2 		lsl	r2, r3, r2
 3955 0054 1449     		ldr	r1, .L308+8
 3956 0056 0B68     		ldr	r3, [r1]
 3957 0058 23EA0203 		bic	r3, r3, r2
 3958 005c 0B60     		str	r3, [r1]
 3959              	.L300:
4054:FreeRTOS/src/tasks.c **** 					}
 3960              		.loc 1 4054 31 view .LVU1076
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3961              		.loc 1 4058 6 view .LVU1077
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3962              		.loc 1 4058 49 is_stmt 0 view .LVU1078
 3963 005e 104B     		ldr	r3, .L308
 3964 0060 1B68     		ldr	r3, [r3]
 3965 0062 DB6A     		ldr	r3, [r3, #44]
4058:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3966              		.loc 1 4058 35 view .LVU1079
 3967 0064 E362     		str	r3, [r4, #44]
4059:FreeRTOS/src/tasks.c **** 				}
 3968              		.loc 1 4059 6 is_stmt 1 view .LVU1080
4059:FreeRTOS/src/tasks.c **** 				}
 3969              		.loc 1 4059 6 view .LVU1081
 3970 0066 0124     		movs	r4, #1
 3971              	.LVL299:
4059:FreeRTOS/src/tasks.c **** 				}
 3972              		.loc 1 4059 6 is_stmt 0 view .LVU1082
 3973 0068 04FA03F2 		lsl	r2, r4, r3
 3974 006c 0E49     		ldr	r1, .L308+8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 184


 3975 006e 0868     		ldr	r0, [r1]
 3976 0070 0243     		orrs	r2, r2, r0
 3977 0072 0A60     		str	r2, [r1]
4059:FreeRTOS/src/tasks.c **** 				}
 3978              		.loc 1 4059 6 is_stmt 1 view .LVU1083
 3979 0074 03EB8303 		add	r3, r3, r3, lsl #2
 3980 0078 9A00     		lsls	r2, r3, #2
 3981 007a 2946     		mov	r1, r5
 3982 007c 0948     		ldr	r0, .L308+4
 3983 007e 1044     		add	r0, r0, r2
 3984 0080 FFF7FEFF 		bl	vListInsertEnd
 3985              	.LVL300:
4059:FreeRTOS/src/tasks.c **** 				}
 3986              		.loc 1 4059 47 view .LVU1084
4070:FreeRTOS/src/tasks.c **** 			}
 3987              		.loc 1 4070 13 is_stmt 0 view .LVU1085
 3988 0084 2046     		mov	r0, r4
 3989 0086 DBE7     		b	.L295
 3990              	.LVL301:
 3991              	.L297:
4074:FreeRTOS/src/tasks.c **** 				{
 3992              		.loc 1 4074 5 is_stmt 1 view .LVU1086
4074:FreeRTOS/src/tasks.c **** 				{
 3993              		.loc 1 4074 25 is_stmt 0 view .LVU1087
 3994 0088 426C     		ldr	r2, [r0, #68]
4074:FreeRTOS/src/tasks.c **** 				{
 3995              		.loc 1 4074 56 view .LVU1088
 3996 008a 054B     		ldr	r3, .L308
 3997 008c 1B68     		ldr	r3, [r3]
 3998 008e DB6A     		ldr	r3, [r3, #44]
4074:FreeRTOS/src/tasks.c **** 				{
 3999              		.loc 1 4074 7 view .LVU1089
 4000 0090 9A42     		cmp	r2, r3
 4001 0092 03D3     		bcc	.L302
4017:FreeRTOS/src/tasks.c **** 
 4002              		.loc 1 4017 13 view .LVU1090
 4003 0094 0020     		movs	r0, #0
 4004              	.LVL302:
4017:FreeRTOS/src/tasks.c **** 
 4005              		.loc 1 4017 13 view .LVU1091
 4006 0096 D3E7     		b	.L295
 4007              	.LVL303:
 4008              	.L301:
 4009              	.LCFI38:
 4010              		.cfi_def_cfa_offset 0
 4011              		.cfi_restore 3
 4012              		.cfi_restore 4
 4013              		.cfi_restore 5
 4014              		.cfi_restore 14
4017:FreeRTOS/src/tasks.c **** 
 4015              		.loc 1 4017 13 view .LVU1092
 4016 0098 0020     		movs	r0, #0
 4017              	.LVL304:
4097:FreeRTOS/src/tasks.c **** 
 4018              		.loc 1 4097 2 view .LVU1093
 4019 009a 7047     		bx	lr
 4020              	.LVL305:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 185


 4021              	.L302:
 4022              	.LCFI39:
 4023              		.cfi_def_cfa_offset 16
 4024              		.cfi_offset 3, -16
 4025              		.cfi_offset 4, -12
 4026              		.cfi_offset 5, -8
 4027              		.cfi_offset 14, -4
4083:FreeRTOS/src/tasks.c **** 				}
 4028              		.loc 1 4083 14 view .LVU1094
 4029 009c 0120     		movs	r0, #1
 4030              	.LVL306:
4093:FreeRTOS/src/tasks.c **** 		}
 4031              		.loc 1 4093 28 is_stmt 1 view .LVU1095
4096:FreeRTOS/src/tasks.c **** 	}
 4032              		.loc 1 4096 3 view .LVU1096
4096:FreeRTOS/src/tasks.c **** 	}
 4033              		.loc 1 4096 10 is_stmt 0 view .LVU1097
 4034 009e CFE7     		b	.L295
 4035              	.L309:
 4036              		.align	2
 4037              	.L308:
 4038 00a0 00000000 		.word	.LANCHOR10
 4039 00a4 00000000 		.word	.LANCHOR4
 4040 00a8 00000000 		.word	.LANCHOR13
 4041              		.cfi_endproc
 4042              	.LFE108:
 4044              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4045              		.align	1
 4046              		.global	xTaskPriorityDisinherit
 4047              		.syntax unified
 4048              		.thumb
 4049              		.thumb_func
 4050              		.fpu softvfp
 4052              	xTaskPriorityDisinherit:
 4053              	.LVL307:
 4054              	.LFB109:
4105:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4055              		.loc 1 4105 2 is_stmt 1 view -0
 4056              		.cfi_startproc
 4057              		@ args = 0, pretend = 0, frame = 0
 4058              		@ frame_needed = 0, uses_anonymous_args = 0
4106:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4059              		.loc 1 4106 2 view .LVU1099
4107:FreeRTOS/src/tasks.c **** 
 4060              		.loc 1 4107 2 view .LVU1100
4109:FreeRTOS/src/tasks.c **** 		{
 4061              		.loc 1 4109 3 view .LVU1101
4109:FreeRTOS/src/tasks.c **** 		{
 4062              		.loc 1 4109 5 is_stmt 0 view .LVU1102
 4063 0000 0028     		cmp	r0, #0
 4064 0002 34D0     		beq	.L313
4105:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4065              		.loc 1 4105 2 view .LVU1103
 4066 0004 38B5     		push	{r3, r4, r5, lr}
 4067              	.LCFI40:
 4068              		.cfi_def_cfa_offset 16
 4069              		.cfi_offset 3, -16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 186


 4070              		.cfi_offset 4, -12
 4071              		.cfi_offset 5, -8
 4072              		.cfi_offset 14, -4
 4073 0006 0446     		mov	r4, r0
4115:FreeRTOS/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4074              		.loc 1 4115 41 is_stmt 1 view .LVU1104
4116:FreeRTOS/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4075              		.loc 1 4116 40 view .LVU1105
4117:FreeRTOS/src/tasks.c **** 
 4076              		.loc 1 4117 4 view .LVU1106
4117:FreeRTOS/src/tasks.c **** 
 4077              		.loc 1 4117 11 is_stmt 0 view .LVU1107
 4078 0008 826C     		ldr	r2, [r0, #72]
4117:FreeRTOS/src/tasks.c **** 
 4079              		.loc 1 4117 28 view .LVU1108
 4080 000a 013A     		subs	r2, r2, #1
 4081 000c 8264     		str	r2, [r0, #72]
4121:FreeRTOS/src/tasks.c **** 			{
 4082              		.loc 1 4121 4 is_stmt 1 view .LVU1109
4121:FreeRTOS/src/tasks.c **** 			{
 4083              		.loc 1 4121 13 is_stmt 0 view .LVU1110
 4084 000e C06A     		ldr	r0, [r0, #44]
 4085              	.LVL308:
4121:FreeRTOS/src/tasks.c **** 			{
 4086              		.loc 1 4121 34 view .LVU1111
 4087 0010 616C     		ldr	r1, [r4, #68]
4121:FreeRTOS/src/tasks.c **** 			{
 4088              		.loc 1 4121 6 view .LVU1112
 4089 0012 8842     		cmp	r0, r1
 4090 0014 2DD0     		beq	.L314
4124:FreeRTOS/src/tasks.c **** 				{
 4091              		.loc 1 4124 5 is_stmt 1 view .LVU1113
4124:FreeRTOS/src/tasks.c **** 				{
 4092              		.loc 1 4124 7 is_stmt 0 view .LVU1114
 4093 0016 0AB1     		cbz	r2, .L320
4107:FreeRTOS/src/tasks.c **** 
 4094              		.loc 1 4107 13 view .LVU1115
 4095 0018 0020     		movs	r0, #0
4173:FreeRTOS/src/tasks.c **** 		}
 4096              		.loc 1 4173 28 is_stmt 1 view .LVU1116
4176:FreeRTOS/src/tasks.c **** 	}
 4097              		.loc 1 4176 3 view .LVU1117
 4098              	.LVL309:
 4099              	.L310:
4177:FreeRTOS/src/tasks.c **** 
 4100              		.loc 1 4177 2 is_stmt 0 view .LVU1118
 4101 001a 38BD     		pop	{r3, r4, r5, pc}
 4102              	.LVL310:
 4103              	.L320:
4131:FreeRTOS/src/tasks.c **** 					{
 4104              		.loc 1 4131 6 is_stmt 1 view .LVU1119
4131:FreeRTOS/src/tasks.c **** 					{
 4105              		.loc 1 4131 10 is_stmt 0 view .LVU1120
 4106 001c 251D     		adds	r5, r4, #4
 4107 001e 2846     		mov	r0, r5
 4108 0020 FFF7FEFF 		bl	uxListRemove
 4109              	.LVL311:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 187


4131:FreeRTOS/src/tasks.c **** 					{
 4110              		.loc 1 4131 8 view .LVU1121
 4111 0024 68B9     		cbnz	r0, .L312
4133:FreeRTOS/src/tasks.c **** 					}
 4112              		.loc 1 4133 7 is_stmt 1 view .LVU1122
 4113 0026 E36A     		ldr	r3, [r4, #44]
 4114 0028 03EB8301 		add	r1, r3, r3, lsl #2
 4115 002c 8A00     		lsls	r2, r1, #2
 4116 002e 1249     		ldr	r1, .L321
 4117 0030 8A58     		ldr	r2, [r1, r2]
 4118 0032 32B9     		cbnz	r2, .L312
4133:FreeRTOS/src/tasks.c **** 					}
 4119              		.loc 1 4133 7 discriminator 1 view .LVU1123
 4120 0034 0122     		movs	r2, #1
 4121 0036 9A40     		lsls	r2, r2, r3
 4122 0038 1049     		ldr	r1, .L321+4
 4123 003a 0B68     		ldr	r3, [r1]
 4124 003c 23EA0203 		bic	r3, r3, r2
 4125 0040 0B60     		str	r3, [r1]
 4126              	.L312:
4137:FreeRTOS/src/tasks.c **** 					}
 4127              		.loc 1 4137 31 view .LVU1124
4142:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4128              		.loc 1 4142 67 view .LVU1125
4143:FreeRTOS/src/tasks.c **** 
 4129              		.loc 1 4143 6 view .LVU1126
4143:FreeRTOS/src/tasks.c **** 
 4130              		.loc 1 4143 31 is_stmt 0 view .LVU1127
 4131 0042 636C     		ldr	r3, [r4, #68]
4143:FreeRTOS/src/tasks.c **** 
 4132              		.loc 1 4143 24 view .LVU1128
 4133 0044 E362     		str	r3, [r4, #44]
4148:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4134              		.loc 1 4148 6 is_stmt 1 view .LVU1129
 4135 0046 C3F10502 		rsb	r2, r3, #5
 4136 004a A261     		str	r2, [r4, #24]
4149:FreeRTOS/src/tasks.c **** 
 4137              		.loc 1 4149 6 view .LVU1130
4149:FreeRTOS/src/tasks.c **** 
 4138              		.loc 1 4149 6 view .LVU1131
 4139 004c 0124     		movs	r4, #1
 4140              	.LVL312:
4149:FreeRTOS/src/tasks.c **** 
 4141              		.loc 1 4149 6 is_stmt 0 view .LVU1132
 4142 004e 04FA03F2 		lsl	r2, r4, r3
 4143 0052 0A49     		ldr	r1, .L321+4
 4144 0054 0868     		ldr	r0, [r1]
 4145 0056 0243     		orrs	r2, r2, r0
 4146 0058 0A60     		str	r2, [r1]
4149:FreeRTOS/src/tasks.c **** 
 4147              		.loc 1 4149 6 is_stmt 1 view .LVU1133
 4148 005a 03EB8303 		add	r3, r3, r3, lsl #2
 4149 005e 9A00     		lsls	r2, r3, #2
 4150 0060 2946     		mov	r1, r5
 4151 0062 0548     		ldr	r0, .L321
 4152 0064 1044     		add	r0, r0, r2
 4153 0066 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 188


 4154              	.LVL313:
4149:FreeRTOS/src/tasks.c **** 
 4155              		.loc 1 4149 36 view .LVU1134
4159:FreeRTOS/src/tasks.c **** 				}
 4156              		.loc 1 4159 6 view .LVU1135
4159:FreeRTOS/src/tasks.c **** 				}
 4157              		.loc 1 4159 14 is_stmt 0 view .LVU1136
 4158 006a 2046     		mov	r0, r4
 4159 006c D5E7     		b	.L310
 4160              	.LVL314:
 4161              	.L313:
 4162              	.LCFI41:
 4163              		.cfi_def_cfa_offset 0
 4164              		.cfi_restore 3
 4165              		.cfi_restore 4
 4166              		.cfi_restore 5
 4167              		.cfi_restore 14
4107:FreeRTOS/src/tasks.c **** 
 4168              		.loc 1 4107 13 view .LVU1137
 4169 006e 0020     		movs	r0, #0
 4170              	.LVL315:
4177:FreeRTOS/src/tasks.c **** 
 4171              		.loc 1 4177 2 view .LVU1138
 4172 0070 7047     		bx	lr
 4173              	.LVL316:
 4174              	.L314:
 4175              	.LCFI42:
 4176              		.cfi_def_cfa_offset 16
 4177              		.cfi_offset 3, -16
 4178              		.cfi_offset 4, -12
 4179              		.cfi_offset 5, -8
 4180              		.cfi_offset 14, -4
4107:FreeRTOS/src/tasks.c **** 
 4181              		.loc 1 4107 13 view .LVU1139
 4182 0072 0020     		movs	r0, #0
 4183 0074 D1E7     		b	.L310
 4184              	.L322:
 4185 0076 00BF     		.align	2
 4186              	.L321:
 4187 0078 00000000 		.word	.LANCHOR4
 4188 007c 00000000 		.word	.LANCHOR13
 4189              		.cfi_endproc
 4190              	.LFE109:
 4192              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4193              		.align	1
 4194              		.global	vTaskPriorityDisinheritAfterTimeout
 4195              		.syntax unified
 4196              		.thumb
 4197              		.thumb_func
 4198              		.fpu softvfp
 4200              	vTaskPriorityDisinheritAfterTimeout:
 4201              	.LVL317:
 4202              	.LFB110:
4185:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4203              		.loc 1 4185 2 is_stmt 1 view -0
 4204              		.cfi_startproc
 4205              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 189


 4206              		@ frame_needed = 0, uses_anonymous_args = 0
4186:FreeRTOS/src/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 4207              		.loc 1 4186 2 view .LVU1141
4187:FreeRTOS/src/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 4208              		.loc 1 4187 2 view .LVU1142
4188:FreeRTOS/src/tasks.c **** 
 4209              		.loc 1 4188 2 view .LVU1143
4190:FreeRTOS/src/tasks.c **** 		{
 4210              		.loc 1 4190 3 view .LVU1144
4190:FreeRTOS/src/tasks.c **** 		{
 4211              		.loc 1 4190 5 is_stmt 0 view .LVU1145
 4212 0000 0028     		cmp	r0, #0
 4213 0002 39D0     		beq	.L329
4185:FreeRTOS/src/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4214              		.loc 1 4185 2 view .LVU1146
 4215 0004 38B5     		push	{r3, r4, r5, lr}
 4216              	.LCFI43:
 4217              		.cfi_def_cfa_offset 16
 4218              		.cfi_offset 3, -16
 4219              		.cfi_offset 4, -12
 4220              		.cfi_offset 5, -8
 4221              		.cfi_offset 14, -4
 4222 0006 0446     		mov	r4, r0
4194:FreeRTOS/src/tasks.c **** 
 4223              		.loc 1 4194 40 is_stmt 1 view .LVU1147
4200:FreeRTOS/src/tasks.c **** 			{
 4224              		.loc 1 4200 4 view .LVU1148
4200:FreeRTOS/src/tasks.c **** 			{
 4225              		.loc 1 4200 13 is_stmt 0 view .LVU1149
 4226 0008 426C     		ldr	r2, [r0, #68]
4200:FreeRTOS/src/tasks.c **** 			{
 4227              		.loc 1 4200 6 view .LVU1150
 4228 000a 8A42     		cmp	r2, r1
 4229 000c 00D2     		bcs	.L325
4202:FreeRTOS/src/tasks.c **** 			}
 4230              		.loc 1 4202 21 view .LVU1151
 4231 000e 0A46     		mov	r2, r1
 4232              	.L325:
 4233              	.LVL318:
4210:FreeRTOS/src/tasks.c **** 			{
 4234              		.loc 1 4210 4 is_stmt 1 view .LVU1152
4210:FreeRTOS/src/tasks.c **** 			{
 4235              		.loc 1 4210 13 is_stmt 0 view .LVU1153
 4236 0010 E16A     		ldr	r1, [r4, #44]
 4237              	.LVL319:
4210:FreeRTOS/src/tasks.c **** 			{
 4238              		.loc 1 4210 6 view .LVU1154
 4239 0012 9142     		cmp	r1, r2
 4240 0014 02D0     		beq	.L323
4216:FreeRTOS/src/tasks.c **** 				{
 4241              		.loc 1 4216 5 is_stmt 1 view .LVU1155
4216:FreeRTOS/src/tasks.c **** 				{
 4242              		.loc 1 4216 14 is_stmt 0 view .LVU1156
 4243 0016 A06C     		ldr	r0, [r4, #72]
 4244              	.LVL320:
4216:FreeRTOS/src/tasks.c **** 				{
 4245              		.loc 1 4216 7 view .LVU1157
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 190


 4246 0018 0128     		cmp	r0, #1
 4247 001a 00D0     		beq	.L332
 4248              	.LVL321:
 4249              	.L323:
4282:FreeRTOS/src/tasks.c **** 
 4250              		.loc 1 4282 2 view .LVU1158
 4251 001c 38BD     		pop	{r3, r4, r5, pc}
 4252              	.LVL322:
 4253              	.L332:
4221:FreeRTOS/src/tasks.c **** 
 4254              		.loc 1 4221 43 is_stmt 1 view .LVU1159
4226:FreeRTOS/src/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 4255              		.loc 1 4226 67 view .LVU1160
4227:FreeRTOS/src/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 4256              		.loc 1 4227 6 view .LVU1161
4228:FreeRTOS/src/tasks.c **** 
 4257              		.loc 1 4228 6 view .LVU1162
4228:FreeRTOS/src/tasks.c **** 
 4258              		.loc 1 4228 24 is_stmt 0 view .LVU1163
 4259 001e E262     		str	r2, [r4, #44]
4232:FreeRTOS/src/tasks.c **** 					{
 4260              		.loc 1 4232 6 is_stmt 1 view .LVU1164
4232:FreeRTOS/src/tasks.c **** 					{
 4261              		.loc 1 4232 12 is_stmt 0 view .LVU1165
 4262 0020 A069     		ldr	r0, [r4, #24]
4232:FreeRTOS/src/tasks.c **** 					{
 4263              		.loc 1 4232 8 view .LVU1166
 4264 0022 0028     		cmp	r0, #0
 4265 0024 02DB     		blt	.L326
4234:FreeRTOS/src/tasks.c **** 					}
 4266              		.loc 1 4234 7 is_stmt 1 view .LVU1167
 4267 0026 C2F10502 		rsb	r2, r2, #5
 4268              	.LVL323:
4234:FreeRTOS/src/tasks.c **** 					}
 4269              		.loc 1 4234 7 is_stmt 0 view .LVU1168
 4270 002a A261     		str	r2, [r4, #24]
 4271              	.L326:
4238:FreeRTOS/src/tasks.c **** 					}
 4272              		.loc 1 4238 31 is_stmt 1 view .LVU1169
4247:FreeRTOS/src/tasks.c **** 					{
 4273              		.loc 1 4247 6 view .LVU1170
4247:FreeRTOS/src/tasks.c **** 					{
 4274              		.loc 1 4247 10 is_stmt 0 view .LVU1171
 4275 002c 6369     		ldr	r3, [r4, #20]
 4276 002e 01EB8101 		add	r1, r1, r1, lsl #2
 4277              	.LVL324:
4247:FreeRTOS/src/tasks.c **** 					{
 4278              		.loc 1 4247 10 view .LVU1172
 4279 0032 8800     		lsls	r0, r1, #2
 4280 0034 114A     		ldr	r2, .L333
 4281 0036 0244     		add	r2, r2, r0
4247:FreeRTOS/src/tasks.c **** 					{
 4282              		.loc 1 4247 8 view .LVU1173
 4283 0038 9342     		cmp	r3, r2
 4284 003a EFD1     		bne	.L323
4249:FreeRTOS/src/tasks.c **** 						{
 4285              		.loc 1 4249 7 is_stmt 1 view .LVU1174
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 191


4249:FreeRTOS/src/tasks.c **** 						{
 4286              		.loc 1 4249 11 is_stmt 0 view .LVU1175
 4287 003c 251D     		adds	r5, r4, #4
 4288 003e 2846     		mov	r0, r5
 4289 0040 FFF7FEFF 		bl	uxListRemove
 4290              	.LVL325:
4249:FreeRTOS/src/tasks.c **** 						{
 4291              		.loc 1 4249 9 view .LVU1176
 4292 0044 40B9     		cbnz	r0, .L327
4254:FreeRTOS/src/tasks.c **** 						}
 4293              		.loc 1 4254 8 is_stmt 1 view .LVU1177
 4294 0046 E26A     		ldr	r2, [r4, #44]
 4295 0048 0123     		movs	r3, #1
 4296 004a 03FA02F2 		lsl	r2, r3, r2
 4297 004e 0C49     		ldr	r1, .L333+4
 4298 0050 0B68     		ldr	r3, [r1]
 4299 0052 23EA0203 		bic	r3, r3, r2
 4300 0056 0B60     		str	r3, [r1]
 4301              	.L327:
4258:FreeRTOS/src/tasks.c **** 						}
 4302              		.loc 1 4258 32 view .LVU1178
4261:FreeRTOS/src/tasks.c **** 					}
 4303              		.loc 1 4261 7 view .LVU1179
4261:FreeRTOS/src/tasks.c **** 					}
 4304              		.loc 1 4261 7 view .LVU1180
 4305 0058 E36A     		ldr	r3, [r4, #44]
 4306 005a 0122     		movs	r2, #1
 4307 005c 9A40     		lsls	r2, r2, r3
 4308 005e 0849     		ldr	r1, .L333+4
 4309 0060 0868     		ldr	r0, [r1]
 4310 0062 0243     		orrs	r2, r2, r0
 4311 0064 0A60     		str	r2, [r1]
4261:FreeRTOS/src/tasks.c **** 					}
 4312              		.loc 1 4261 7 view .LVU1181
 4313 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4314 006a 9A00     		lsls	r2, r3, #2
 4315 006c 2946     		mov	r1, r5
 4316 006e 0348     		ldr	r0, .L333
 4317 0070 1044     		add	r0, r0, r2
 4318 0072 FFF7FEFF 		bl	vListInsertEnd
 4319              	.LVL326:
4261:FreeRTOS/src/tasks.c **** 					}
 4320              		.loc 1 4261 37 view .LVU1182
4280:FreeRTOS/src/tasks.c **** 		}
 4321              		.loc 1 4280 28 view .LVU1183
4282:FreeRTOS/src/tasks.c **** 
 4322              		.loc 1 4282 2 is_stmt 0 view .LVU1184
 4323 0076 D1E7     		b	.L323
 4324              	.LVL327:
 4325              	.L329:
 4326              	.LCFI44:
 4327              		.cfi_def_cfa_offset 0
 4328              		.cfi_restore 3
 4329              		.cfi_restore 4
 4330              		.cfi_restore 5
 4331              		.cfi_restore 14
4282:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 192


 4332              		.loc 1 4282 2 view .LVU1185
 4333 0078 7047     		bx	lr
 4334              	.L334:
 4335 007a 00BF     		.align	2
 4336              	.L333:
 4337 007c 00000000 		.word	.LANCHOR4
 4338 0080 00000000 		.word	.LANCHOR13
 4339              		.cfi_endproc
 4340              	.LFE110:
 4342              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4343              		.align	1
 4344              		.global	uxTaskResetEventItemValue
 4345              		.syntax unified
 4346              		.thumb
 4347              		.thumb_func
 4348              		.fpu softvfp
 4350              	uxTaskResetEventItemValue:
 4351              	.LFB111:
4603:FreeRTOS/src/tasks.c **** TickType_t uxReturn;
 4352              		.loc 1 4603 1 is_stmt 1 view -0
 4353              		.cfi_startproc
 4354              		@ args = 0, pretend = 0, frame = 0
 4355              		@ frame_needed = 0, uses_anonymous_args = 0
 4356              		@ link register save eliminated.
4604:FreeRTOS/src/tasks.c **** 
 4357              		.loc 1 4604 1 view .LVU1187
4606:FreeRTOS/src/tasks.c **** 
 4358              		.loc 1 4606 2 view .LVU1188
4606:FreeRTOS/src/tasks.c **** 
 4359              		.loc 1 4606 13 is_stmt 0 view .LVU1189
 4360 0000 044A     		ldr	r2, .L336
 4361 0002 1368     		ldr	r3, [r2]
4606:FreeRTOS/src/tasks.c **** 
 4362              		.loc 1 4606 11 view .LVU1190
 4363 0004 9869     		ldr	r0, [r3, #24]
 4364              	.LVL328:
4610:FreeRTOS/src/tasks.c **** 
 4365              		.loc 1 4610 2 is_stmt 1 view .LVU1191
 4366 0006 1368     		ldr	r3, [r2]
 4367 0008 DB6A     		ldr	r3, [r3, #44]
 4368 000a 1268     		ldr	r2, [r2]
 4369 000c C3F10503 		rsb	r3, r3, #5
 4370 0010 9361     		str	r3, [r2, #24]
4612:FreeRTOS/src/tasks.c **** }
 4371              		.loc 1 4612 2 view .LVU1192
4613:FreeRTOS/src/tasks.c **** /*-----------------------------------------------------------*/
 4372              		.loc 1 4613 1 is_stmt 0 view .LVU1193
 4373 0012 7047     		bx	lr
 4374              	.L337:
 4375              		.align	2
 4376              	.L336:
 4377 0014 00000000 		.word	.LANCHOR10
 4378              		.cfi_endproc
 4379              	.LFE111:
 4381              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4382              		.align	1
 4383              		.global	pvTaskIncrementMutexHeldCount
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 193


 4384              		.syntax unified
 4385              		.thumb
 4386              		.thumb_func
 4387              		.fpu softvfp
 4389              	pvTaskIncrementMutexHeldCount:
 4390              	.LFB112:
4619:FreeRTOS/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4391              		.loc 1 4619 2 is_stmt 1 view -0
 4392              		.cfi_startproc
 4393              		@ args = 0, pretend = 0, frame = 0
 4394              		@ frame_needed = 0, uses_anonymous_args = 0
 4395              		@ link register save eliminated.
4622:FreeRTOS/src/tasks.c **** 		{
 4396              		.loc 1 4622 3 view .LVU1195
4622:FreeRTOS/src/tasks.c **** 		{
 4397              		.loc 1 4622 20 is_stmt 0 view .LVU1196
 4398 0000 054B     		ldr	r3, .L340
 4399 0002 1B68     		ldr	r3, [r3]
4622:FreeRTOS/src/tasks.c **** 		{
 4400              		.loc 1 4622 5 view .LVU1197
 4401 0004 23B1     		cbz	r3, .L339
4624:FreeRTOS/src/tasks.c **** 		}
 4402              		.loc 1 4624 4 is_stmt 1 view .LVU1198
4624:FreeRTOS/src/tasks.c **** 		}
 4403              		.loc 1 4624 18 is_stmt 0 view .LVU1199
 4404 0006 044B     		ldr	r3, .L340
 4405 0008 1A68     		ldr	r2, [r3]
 4406 000a 936C     		ldr	r3, [r2, #72]
4624:FreeRTOS/src/tasks.c **** 		}
 4407              		.loc 1 4624 35 view .LVU1200
 4408 000c 0133     		adds	r3, r3, #1
 4409 000e 9364     		str	r3, [r2, #72]
 4410              	.L339:
4627:FreeRTOS/src/tasks.c **** 	}
 4411              		.loc 1 4627 3 is_stmt 1 view .LVU1201
4627:FreeRTOS/src/tasks.c **** 	}
 4412              		.loc 1 4627 10 is_stmt 0 view .LVU1202
 4413 0010 014B     		ldr	r3, .L340
 4414 0012 1868     		ldr	r0, [r3]
4628:FreeRTOS/src/tasks.c **** 
 4415              		.loc 1 4628 2 view .LVU1203
 4416 0014 7047     		bx	lr
 4417              	.L341:
 4418 0016 00BF     		.align	2
 4419              	.L340:
 4420 0018 00000000 		.word	.LANCHOR10
 4421              		.cfi_endproc
 4422              	.LFE112:
 4424              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4425              		.align	1
 4426              		.global	ulTaskNotifyTake
 4427              		.syntax unified
 4428              		.thumb
 4429              		.thumb_func
 4430              		.fpu softvfp
 4432              	ulTaskNotifyTake:
 4433              	.LVL329:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 194


 4434              	.LFB113:
4636:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 4435              		.loc 1 4636 2 is_stmt 1 view -0
 4436              		.cfi_startproc
 4437              		@ args = 0, pretend = 0, frame = 0
 4438              		@ frame_needed = 0, uses_anonymous_args = 0
4636:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 4439              		.loc 1 4636 2 is_stmt 0 view .LVU1205
 4440 0000 38B5     		push	{r3, r4, r5, lr}
 4441              	.LCFI45:
 4442              		.cfi_def_cfa_offset 16
 4443              		.cfi_offset 3, -16
 4444              		.cfi_offset 4, -12
 4445              		.cfi_offset 5, -8
 4446              		.cfi_offset 14, -4
 4447 0002 0546     		mov	r5, r0
 4448 0004 0C46     		mov	r4, r1
4637:FreeRTOS/src/tasks.c **** 
 4449              		.loc 1 4637 2 is_stmt 1 view .LVU1206
4639:FreeRTOS/src/tasks.c **** 		{
 4450              		.loc 1 4639 3 view .LVU1207
 4451 0006 FFF7FEFF 		bl	vPortEnterCritical
 4452              	.LVL330:
4642:FreeRTOS/src/tasks.c **** 			{
 4453              		.loc 1 4642 4 view .LVU1208
4642:FreeRTOS/src/tasks.c **** 			{
 4454              		.loc 1 4642 20 is_stmt 0 view .LVU1209
 4455 000a 194B     		ldr	r3, .L348
 4456 000c 1B68     		ldr	r3, [r3]
 4457 000e DB6C     		ldr	r3, [r3, #76]
4642:FreeRTOS/src/tasks.c **** 			{
 4458              		.loc 1 4642 6 view .LVU1210
 4459 0010 2BB9     		cbnz	r3, .L343
4645:FreeRTOS/src/tasks.c **** 
 4460              		.loc 1 4645 5 is_stmt 1 view .LVU1211
4645:FreeRTOS/src/tasks.c **** 
 4461              		.loc 1 4645 17 is_stmt 0 view .LVU1212
 4462 0012 174B     		ldr	r3, .L348
 4463 0014 1B68     		ldr	r3, [r3]
4645:FreeRTOS/src/tasks.c **** 
 4464              		.loc 1 4645 33 view .LVU1213
 4465 0016 0122     		movs	r2, #1
 4466 0018 83F85020 		strb	r2, [r3, #80]
4647:FreeRTOS/src/tasks.c **** 				{
 4467              		.loc 1 4647 5 is_stmt 1 view .LVU1214
4647:FreeRTOS/src/tasks.c **** 				{
 4468              		.loc 1 4647 7 is_stmt 0 view .LVU1215
 4469 001c ACB9     		cbnz	r4, .L347
 4470              	.L343:
4665:FreeRTOS/src/tasks.c **** 			}
 4471              		.loc 1 4665 29 is_stmt 1 view .LVU1216
4668:FreeRTOS/src/tasks.c **** 
 4472              		.loc 1 4668 3 view .LVU1217
 4473 001e FFF7FEFF 		bl	vPortExitCritical
 4474              	.LVL331:
4670:FreeRTOS/src/tasks.c **** 		{
 4475              		.loc 1 4670 3 view .LVU1218
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 195


 4476 0022 FFF7FEFF 		bl	vPortEnterCritical
 4477              	.LVL332:
4672:FreeRTOS/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4478              		.loc 1 4672 27 view .LVU1219
4673:FreeRTOS/src/tasks.c **** 
 4479              		.loc 1 4673 4 view .LVU1220
4673:FreeRTOS/src/tasks.c **** 
 4480              		.loc 1 4673 27 is_stmt 0 view .LVU1221
 4481 0026 124B     		ldr	r3, .L348
 4482 0028 1B68     		ldr	r3, [r3]
4673:FreeRTOS/src/tasks.c **** 
 4483              		.loc 1 4673 13 view .LVU1222
 4484 002a DC6C     		ldr	r4, [r3, #76]
 4485              	.LVL333:
4675:FreeRTOS/src/tasks.c **** 			{
 4486              		.loc 1 4675 4 is_stmt 1 view .LVU1223
4675:FreeRTOS/src/tasks.c **** 			{
 4487              		.loc 1 4675 6 is_stmt 0 view .LVU1224
 4488 002c 24B1     		cbz	r4, .L344
4677:FreeRTOS/src/tasks.c **** 				{
 4489              		.loc 1 4677 5 is_stmt 1 view .LVU1225
4677:FreeRTOS/src/tasks.c **** 				{
 4490              		.loc 1 4677 7 is_stmt 0 view .LVU1226
 4491 002e CDB1     		cbz	r5, .L345
4679:FreeRTOS/src/tasks.c **** 				}
 4492              		.loc 1 4679 6 is_stmt 1 view .LVU1227
4679:FreeRTOS/src/tasks.c **** 				}
 4493              		.loc 1 4679 18 is_stmt 0 view .LVU1228
 4494 0030 0F4B     		ldr	r3, .L348
 4495 0032 1B68     		ldr	r3, [r3]
4679:FreeRTOS/src/tasks.c **** 				}
 4496              		.loc 1 4679 36 view .LVU1229
 4497 0034 0022     		movs	r2, #0
 4498 0036 DA64     		str	r2, [r3, #76]
 4499              	.L344:
4688:FreeRTOS/src/tasks.c **** 			}
 4500              		.loc 1 4688 29 is_stmt 1 view .LVU1230
4691:FreeRTOS/src/tasks.c **** 		}
 4501              		.loc 1 4691 4 view .LVU1231
4691:FreeRTOS/src/tasks.c **** 		}
 4502              		.loc 1 4691 16 is_stmt 0 view .LVU1232
 4503 0038 0D4B     		ldr	r3, .L348
 4504 003a 1B68     		ldr	r3, [r3]
4691:FreeRTOS/src/tasks.c **** 		}
 4505              		.loc 1 4691 32 view .LVU1233
 4506 003c 0022     		movs	r2, #0
 4507 003e 83F85020 		strb	r2, [r3, #80]
4693:FreeRTOS/src/tasks.c **** 
 4508              		.loc 1 4693 3 is_stmt 1 view .LVU1234
 4509 0042 FFF7FEFF 		bl	vPortExitCritical
 4510              	.LVL334:
4695:FreeRTOS/src/tasks.c **** 	}
 4511              		.loc 1 4695 3 view .LVU1235
4696:FreeRTOS/src/tasks.c **** 
 4512              		.loc 1 4696 2 is_stmt 0 view .LVU1236
 4513 0046 2046     		mov	r0, r4
 4514 0048 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 196


 4515              	.LVL335:
 4516              	.L347:
4649:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4517              		.loc 1 4649 6 is_stmt 1 view .LVU1237
 4518 004a 1146     		mov	r1, r2
 4519 004c 2046     		mov	r0, r4
 4520 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4521              	.LVL336:
4650:FreeRTOS/src/tasks.c **** 
 4522              		.loc 1 4650 35 view .LVU1238
4656:FreeRTOS/src/tasks.c **** 				}
 4523              		.loc 1 4656 6 view .LVU1239
 4524 0052 084B     		ldr	r3, .L348+4
 4525 0054 4FF08052 		mov	r2, #268435456
 4526 0058 1A60     		str	r2, [r3]
4656:FreeRTOS/src/tasks.c **** 				}
 4527              		.loc 1 4656 6 view .LVU1240
 4528              		.syntax unified
 4529              	@ 4656 "FreeRTOS/src/tasks.c" 1
 4530 005a BFF34F8F 		dsb
 4531              	@ 0 "" 2
4656:FreeRTOS/src/tasks.c **** 				}
 4532              		.loc 1 4656 6 view .LVU1241
 4533              	@ 4656 "FreeRTOS/src/tasks.c" 1
 4534 005e BFF36F8F 		isb
 4535              	@ 0 "" 2
4656:FreeRTOS/src/tasks.c **** 				}
 4536              		.loc 1 4656 28 view .LVU1242
 4537              		.thumb
 4538              		.syntax unified
 4539 0062 DCE7     		b	.L343
 4540              	.LVL337:
 4541              	.L345:
4683:FreeRTOS/src/tasks.c **** 				}
 4542              		.loc 1 4683 6 view .LVU1243
4683:FreeRTOS/src/tasks.c **** 				}
 4543              		.loc 1 4683 18 is_stmt 0 view .LVU1244
 4544 0064 024B     		ldr	r3, .L348
 4545 0066 1B68     		ldr	r3, [r3]
4683:FreeRTOS/src/tasks.c **** 				}
 4546              		.loc 1 4683 47 view .LVU1245
 4547 0068 621E     		subs	r2, r4, #1
4683:FreeRTOS/src/tasks.c **** 				}
 4548              		.loc 1 4683 36 view .LVU1246
 4549 006a DA64     		str	r2, [r3, #76]
 4550 006c E4E7     		b	.L344
 4551              	.L349:
 4552 006e 00BF     		.align	2
 4553              	.L348:
 4554 0070 00000000 		.word	.LANCHOR10
 4555 0074 04ED00E0 		.word	-536810236
 4556              		.cfi_endproc
 4557              	.LFE113:
 4559              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4560              		.align	1
 4561              		.global	xTaskNotifyWait
 4562              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 197


 4563              		.thumb
 4564              		.thumb_func
 4565              		.fpu softvfp
 4567              	xTaskNotifyWait:
 4568              	.LVL338:
 4569              	.LFB114:
4704:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 4570              		.loc 1 4704 2 is_stmt 1 view -0
 4571              		.cfi_startproc
 4572              		@ args = 0, pretend = 0, frame = 0
 4573              		@ frame_needed = 0, uses_anonymous_args = 0
4704:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 4574              		.loc 1 4704 2 is_stmt 0 view .LVU1248
 4575 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4576              	.LCFI46:
 4577              		.cfi_def_cfa_offset 24
 4578              		.cfi_offset 3, -24
 4579              		.cfi_offset 4, -20
 4580              		.cfi_offset 5, -16
 4581              		.cfi_offset 6, -12
 4582              		.cfi_offset 7, -8
 4583              		.cfi_offset 14, -4
 4584 0002 0746     		mov	r7, r0
 4585 0004 0D46     		mov	r5, r1
 4586 0006 1446     		mov	r4, r2
 4587 0008 1E46     		mov	r6, r3
4705:FreeRTOS/src/tasks.c **** 
 4588              		.loc 1 4705 2 is_stmt 1 view .LVU1249
4707:FreeRTOS/src/tasks.c **** 		{
 4589              		.loc 1 4707 3 view .LVU1250
 4590 000a FFF7FEFF 		bl	vPortEnterCritical
 4591              	.LVL339:
4710:FreeRTOS/src/tasks.c **** 			{
 4592              		.loc 1 4710 4 view .LVU1251
4710:FreeRTOS/src/tasks.c **** 			{
 4593              		.loc 1 4710 20 is_stmt 0 view .LVU1252
 4594 000e 204B     		ldr	r3, .L358
 4595 0010 1B68     		ldr	r3, [r3]
 4596 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4597 0016 DBB2     		uxtb	r3, r3
4710:FreeRTOS/src/tasks.c **** 			{
 4598              		.loc 1 4710 6 view .LVU1253
 4599 0018 022B     		cmp	r3, #2
 4600 001a 0AD0     		beq	.L351
4715:FreeRTOS/src/tasks.c **** 
 4601              		.loc 1 4715 5 is_stmt 1 view .LVU1254
4715:FreeRTOS/src/tasks.c **** 
 4602              		.loc 1 4715 35 is_stmt 0 view .LVU1255
 4603 001c 1C4B     		ldr	r3, .L358
 4604 001e 1A68     		ldr	r2, [r3]
 4605 0020 D06C     		ldr	r0, [r2, #76]
 4606 0022 20EA0700 		bic	r0, r0, r7
 4607 0026 D064     		str	r0, [r2, #76]
4718:FreeRTOS/src/tasks.c **** 
 4608              		.loc 1 4718 5 is_stmt 1 view .LVU1256
4718:FreeRTOS/src/tasks.c **** 
 4609              		.loc 1 4718 17 is_stmt 0 view .LVU1257
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 198


 4610 0028 1B68     		ldr	r3, [r3]
4718:FreeRTOS/src/tasks.c **** 
 4611              		.loc 1 4718 33 view .LVU1258
 4612 002a 0122     		movs	r2, #1
 4613 002c 83F85020 		strb	r2, [r3, #80]
4720:FreeRTOS/src/tasks.c **** 				{
 4614              		.loc 1 4720 5 is_stmt 1 view .LVU1259
4720:FreeRTOS/src/tasks.c **** 				{
 4615              		.loc 1 4720 7 is_stmt 0 view .LVU1260
 4616 0030 CEB9     		cbnz	r6, .L356
 4617              	.L351:
4738:FreeRTOS/src/tasks.c **** 			}
 4618              		.loc 1 4738 29 is_stmt 1 view .LVU1261
4741:FreeRTOS/src/tasks.c **** 
 4619              		.loc 1 4741 3 view .LVU1262
 4620 0032 FFF7FEFF 		bl	vPortExitCritical
 4621              	.LVL340:
4743:FreeRTOS/src/tasks.c **** 		{
 4622              		.loc 1 4743 3 view .LVU1263
 4623 0036 FFF7FEFF 		bl	vPortEnterCritical
 4624              	.LVL341:
4745:FreeRTOS/src/tasks.c **** 
 4625              		.loc 1 4745 27 view .LVU1264
4747:FreeRTOS/src/tasks.c **** 			{
 4626              		.loc 1 4747 4 view .LVU1265
4747:FreeRTOS/src/tasks.c **** 			{
 4627              		.loc 1 4747 6 is_stmt 0 view .LVU1266
 4628 003a 1CB1     		cbz	r4, .L352
4751:FreeRTOS/src/tasks.c **** 			}
 4629              		.loc 1 4751 5 is_stmt 1 view .LVU1267
4751:FreeRTOS/src/tasks.c **** 			}
 4630              		.loc 1 4751 41 is_stmt 0 view .LVU1268
 4631 003c 144B     		ldr	r3, .L358
 4632 003e 1B68     		ldr	r3, [r3]
 4633 0040 DB6C     		ldr	r3, [r3, #76]
4751:FreeRTOS/src/tasks.c **** 			}
 4634              		.loc 1 4751 27 view .LVU1269
 4635 0042 2360     		str	r3, [r4]
 4636              	.L352:
4758:FreeRTOS/src/tasks.c **** 			{
 4637              		.loc 1 4758 4 is_stmt 1 view .LVU1270
4758:FreeRTOS/src/tasks.c **** 			{
 4638              		.loc 1 4758 20 is_stmt 0 view .LVU1271
 4639 0044 124B     		ldr	r3, .L358
 4640 0046 1B68     		ldr	r3, [r3]
 4641 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4642 004c DBB2     		uxtb	r3, r3
4758:FreeRTOS/src/tasks.c **** 			{
 4643              		.loc 1 4758 6 view .LVU1272
 4644 004e 022B     		cmp	r3, #2
 4645 0050 16D0     		beq	.L357
4761:FreeRTOS/src/tasks.c **** 			}
 4646              		.loc 1 4761 13 view .LVU1273
 4647 0052 0024     		movs	r4, #0
 4648              	.LVL342:
 4649              	.L353:
4771:FreeRTOS/src/tasks.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 199


 4650              		.loc 1 4771 4 is_stmt 1 view .LVU1274
4771:FreeRTOS/src/tasks.c **** 		}
 4651              		.loc 1 4771 16 is_stmt 0 view .LVU1275
 4652 0054 0E4B     		ldr	r3, .L358
 4653 0056 1B68     		ldr	r3, [r3]
4771:FreeRTOS/src/tasks.c **** 		}
 4654              		.loc 1 4771 32 view .LVU1276
 4655 0058 0022     		movs	r2, #0
 4656 005a 83F85020 		strb	r2, [r3, #80]
4773:FreeRTOS/src/tasks.c **** 
 4657              		.loc 1 4773 3 is_stmt 1 view .LVU1277
 4658 005e FFF7FEFF 		bl	vPortExitCritical
 4659              	.LVL343:
4775:FreeRTOS/src/tasks.c **** 	}
 4660              		.loc 1 4775 3 view .LVU1278
4776:FreeRTOS/src/tasks.c **** 
 4661              		.loc 1 4776 2 is_stmt 0 view .LVU1279
 4662 0062 2046     		mov	r0, r4
 4663 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4664              	.LVL344:
 4665              	.L356:
4722:FreeRTOS/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4666              		.loc 1 4722 6 is_stmt 1 view .LVU1280
 4667 0066 1146     		mov	r1, r2
 4668 0068 3046     		mov	r0, r6
 4669 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4670              	.LVL345:
4723:FreeRTOS/src/tasks.c **** 
 4671              		.loc 1 4723 35 view .LVU1281
4729:FreeRTOS/src/tasks.c **** 				}
 4672              		.loc 1 4729 6 view .LVU1282
 4673 006e 094B     		ldr	r3, .L358+4
 4674 0070 4FF08052 		mov	r2, #268435456
 4675 0074 1A60     		str	r2, [r3]
4729:FreeRTOS/src/tasks.c **** 				}
 4676              		.loc 1 4729 6 view .LVU1283
 4677              		.syntax unified
 4678              	@ 4729 "FreeRTOS/src/tasks.c" 1
 4679 0076 BFF34F8F 		dsb
 4680              	@ 0 "" 2
4729:FreeRTOS/src/tasks.c **** 				}
 4681              		.loc 1 4729 6 view .LVU1284
 4682              	@ 4729 "FreeRTOS/src/tasks.c" 1
 4683 007a BFF36F8F 		isb
 4684              	@ 0 "" 2
4729:FreeRTOS/src/tasks.c **** 				}
 4685              		.loc 1 4729 28 view .LVU1285
 4686              		.thumb
 4687              		.syntax unified
 4688 007e D8E7     		b	.L351
 4689              	.L357:
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4690              		.loc 1 4767 5 view .LVU1286
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4691              		.loc 1 4767 35 is_stmt 0 view .LVU1287
 4692 0080 034B     		ldr	r3, .L358
 4693 0082 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 200


 4694 0084 D36C     		ldr	r3, [r2, #76]
 4695 0086 23EA0505 		bic	r5, r3, r5
 4696              	.LVL346:
4767:FreeRTOS/src/tasks.c **** 				xReturn = pdTRUE;
 4697              		.loc 1 4767 35 view .LVU1288
 4698 008a D564     		str	r5, [r2, #76]
4768:FreeRTOS/src/tasks.c **** 			}
 4699              		.loc 1 4768 5 is_stmt 1 view .LVU1289
 4700              	.LVL347:
4768:FreeRTOS/src/tasks.c **** 			}
 4701              		.loc 1 4768 13 is_stmt 0 view .LVU1290
 4702 008c 0124     		movs	r4, #1
 4703              	.LVL348:
4768:FreeRTOS/src/tasks.c **** 			}
 4704              		.loc 1 4768 13 view .LVU1291
 4705 008e E1E7     		b	.L353
 4706              	.L359:
 4707              		.align	2
 4708              	.L358:
 4709 0090 00000000 		.word	.LANCHOR10
 4710 0094 04ED00E0 		.word	-536810236
 4711              		.cfi_endproc
 4712              	.LFE114:
 4714              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4715              		.align	1
 4716              		.global	xTaskGenericNotify
 4717              		.syntax unified
 4718              		.thumb
 4719              		.thumb_func
 4720              		.fpu softvfp
 4722              	xTaskGenericNotify:
 4723              	.LVL349:
 4724              	.LFB115:
4784:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4725              		.loc 1 4784 2 is_stmt 1 view -0
 4726              		.cfi_startproc
 4727              		@ args = 0, pretend = 0, frame = 0
 4728              		@ frame_needed = 0, uses_anonymous_args = 0
4784:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4729              		.loc 1 4784 2 is_stmt 0 view .LVU1293
 4730 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4731              	.LCFI47:
 4732              		.cfi_def_cfa_offset 24
 4733              		.cfi_offset 3, -24
 4734              		.cfi_offset 4, -20
 4735              		.cfi_offset 5, -16
 4736              		.cfi_offset 6, -12
 4737              		.cfi_offset 7, -8
 4738              		.cfi_offset 14, -4
 4739 0002 0446     		mov	r4, r0
 4740 0004 0F46     		mov	r7, r1
 4741 0006 1546     		mov	r5, r2
 4742 0008 1E46     		mov	r6, r3
4785:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4743              		.loc 1 4785 2 is_stmt 1 view .LVU1294
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4744              		.loc 1 4786 2 view .LVU1295
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 201


 4745              	.LVL350:
4787:FreeRTOS/src/tasks.c **** 
 4746              		.loc 1 4787 2 view .LVU1296
4789:FreeRTOS/src/tasks.c **** 		pxTCB = xTaskToNotify;
 4747              		.loc 1 4789 32 view .LVU1297
4790:FreeRTOS/src/tasks.c **** 
 4748              		.loc 1 4790 3 view .LVU1298
4792:FreeRTOS/src/tasks.c **** 		{
 4749              		.loc 1 4792 3 view .LVU1299
 4750 000a FFF7FEFF 		bl	vPortEnterCritical
 4751              	.LVL351:
4794:FreeRTOS/src/tasks.c **** 			{
 4752              		.loc 1 4794 4 view .LVU1300
4794:FreeRTOS/src/tasks.c **** 			{
 4753              		.loc 1 4794 6 is_stmt 0 view .LVU1301
 4754 000e 0EB1     		cbz	r6, .L361
4796:FreeRTOS/src/tasks.c **** 			}
 4755              		.loc 1 4796 5 is_stmt 1 view .LVU1302
4796:FreeRTOS/src/tasks.c **** 			}
 4756              		.loc 1 4796 42 is_stmt 0 view .LVU1303
 4757 0010 E36C     		ldr	r3, [r4, #76]
4796:FreeRTOS/src/tasks.c **** 			}
 4758              		.loc 1 4796 35 view .LVU1304
 4759 0012 3360     		str	r3, [r6]
 4760              	.L361:
4799:FreeRTOS/src/tasks.c **** 
 4761              		.loc 1 4799 4 is_stmt 1 view .LVU1305
4799:FreeRTOS/src/tasks.c **** 
 4762              		.loc 1 4799 26 is_stmt 0 view .LVU1306
 4763 0014 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4764 0018 DBB2     		uxtb	r3, r3
 4765              	.LVL352:
4801:FreeRTOS/src/tasks.c **** 
 4766              		.loc 1 4801 4 is_stmt 1 view .LVU1307
4801:FreeRTOS/src/tasks.c **** 
 4767              		.loc 1 4801 25 is_stmt 0 view .LVU1308
 4768 001a 0222     		movs	r2, #2
 4769 001c 84F85020 		strb	r2, [r4, #80]
4803:FreeRTOS/src/tasks.c **** 			{
 4770              		.loc 1 4803 4 is_stmt 1 view .LVU1309
 4771 0020 6A1E     		subs	r2, r5, #1
 4772 0022 032A     		cmp	r2, #3
 4773 0024 1AD8     		bhi	.L369
 4774 0026 DFE802F0 		tbb	[pc, r2]
 4775              	.L364:
 4776 002a 02       		.byte	(.L367-.L364)/2
 4777 002b 0C       		.byte	(.L366-.L364)/2
 4778 002c 11       		.byte	(.L365-.L364)/2
 4779 002d 14       		.byte	(.L363-.L364)/2
 4780              		.p2align 1
 4781              	.L367:
4806:FreeRTOS/src/tasks.c **** 					break;
 4782              		.loc 1 4806 6 view .LVU1310
4806:FreeRTOS/src/tasks.c **** 					break;
 4783              		.loc 1 4806 29 is_stmt 0 view .LVU1311
 4784 002e E26C     		ldr	r2, [r4, #76]
 4785 0030 1743     		orrs	r7, r7, r2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 202


 4786              	.LVL353:
4806:FreeRTOS/src/tasks.c **** 					break;
 4787              		.loc 1 4806 29 view .LVU1312
 4788 0032 E764     		str	r7, [r4, #76]
4807:FreeRTOS/src/tasks.c **** 
 4789              		.loc 1 4807 6 is_stmt 1 view .LVU1313
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4790              		.loc 1 4786 13 is_stmt 0 view .LVU1314
 4791 0034 0125     		movs	r5, #1
 4792              	.L362:
 4793              	.LVL354:
4843:FreeRTOS/src/tasks.c **** 
 4794              		.loc 1 4843 22 is_stmt 1 view .LVU1315
4847:FreeRTOS/src/tasks.c **** 			{
 4795              		.loc 1 4847 4 view .LVU1316
4847:FreeRTOS/src/tasks.c **** 			{
 4796              		.loc 1 4847 6 is_stmt 0 view .LVU1317
 4797 0036 012B     		cmp	r3, #1
 4798 0038 14D0     		beq	.L372
 4799              	.LVL355:
 4800              	.L368:
4884:FreeRTOS/src/tasks.c **** 			}
 4801              		.loc 1 4884 29 is_stmt 1 view .LVU1318
4887:FreeRTOS/src/tasks.c **** 
 4802              		.loc 1 4887 3 view .LVU1319
 4803 003a FFF7FEFF 		bl	vPortExitCritical
 4804              	.LVL356:
4889:FreeRTOS/src/tasks.c **** 	}
 4805              		.loc 1 4889 3 view .LVU1320
4890:FreeRTOS/src/tasks.c **** 
 4806              		.loc 1 4890 2 is_stmt 0 view .LVU1321
 4807 003e 2846     		mov	r0, r5
 4808 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4809              	.LVL357:
 4810              	.L366:
4810:FreeRTOS/src/tasks.c **** 					break;
 4811              		.loc 1 4810 6 is_stmt 1 view .LVU1322
4810:FreeRTOS/src/tasks.c **** 					break;
 4812              		.loc 1 4810 13 is_stmt 0 view .LVU1323
 4813 0042 E26C     		ldr	r2, [r4, #76]
4810:FreeRTOS/src/tasks.c **** 					break;
 4814              		.loc 1 4810 32 view .LVU1324
 4815 0044 0132     		adds	r2, r2, #1
 4816 0046 E264     		str	r2, [r4, #76]
4811:FreeRTOS/src/tasks.c **** 
 4817              		.loc 1 4811 6 is_stmt 1 view .LVU1325
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4818              		.loc 1 4786 13 is_stmt 0 view .LVU1326
 4819 0048 0125     		movs	r5, #1
4811:FreeRTOS/src/tasks.c **** 
 4820              		.loc 1 4811 6 view .LVU1327
 4821 004a F4E7     		b	.L362
 4822              	.L365:
4814:FreeRTOS/src/tasks.c **** 					break;
 4823              		.loc 1 4814 6 is_stmt 1 view .LVU1328
4814:FreeRTOS/src/tasks.c **** 					break;
 4824              		.loc 1 4814 29 is_stmt 0 view .LVU1329
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 203


 4825 004c E764     		str	r7, [r4, #76]
4815:FreeRTOS/src/tasks.c **** 
 4826              		.loc 1 4815 6 is_stmt 1 view .LVU1330
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4827              		.loc 1 4786 13 is_stmt 0 view .LVU1331
 4828 004e 0125     		movs	r5, #1
4815:FreeRTOS/src/tasks.c **** 
 4829              		.loc 1 4815 6 view .LVU1332
 4830 0050 F1E7     		b	.L362
 4831              	.L363:
4818:FreeRTOS/src/tasks.c **** 					{
 4832              		.loc 1 4818 6 is_stmt 1 view .LVU1333
4818:FreeRTOS/src/tasks.c **** 					{
 4833              		.loc 1 4818 8 is_stmt 0 view .LVU1334
 4834 0052 022B     		cmp	r3, #2
 4835 0054 04D0     		beq	.L370
4820:FreeRTOS/src/tasks.c **** 					}
 4836              		.loc 1 4820 7 is_stmt 1 view .LVU1335
4820:FreeRTOS/src/tasks.c **** 					}
 4837              		.loc 1 4820 30 is_stmt 0 view .LVU1336
 4838 0056 E764     		str	r7, [r4, #76]
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4839              		.loc 1 4786 13 view .LVU1337
 4840 0058 0125     		movs	r5, #1
 4841 005a ECE7     		b	.L362
 4842              	.L369:
4786:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4843              		.loc 1 4786 13 view .LVU1338
 4844 005c 0125     		movs	r5, #1
 4845 005e EAE7     		b	.L362
 4846              	.L370:
4825:FreeRTOS/src/tasks.c **** 					}
 4847              		.loc 1 4825 15 view .LVU1339
 4848 0060 0025     		movs	r5, #0
 4849 0062 E8E7     		b	.L362
 4850              	.LVL358:
 4851              	.L372:
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4852              		.loc 1 4849 5 is_stmt 1 view .LVU1340
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4853              		.loc 1 4849 14 is_stmt 0 view .LVU1341
 4854 0064 261D     		adds	r6, r4, #4
 4855              	.LVL359:
4849:FreeRTOS/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4856              		.loc 1 4849 14 view .LVU1342
 4857 0066 3046     		mov	r0, r6
 4858 0068 FFF7FEFF 		bl	uxListRemove
 4859              	.LVL360:
4850:FreeRTOS/src/tasks.c **** 
 4860              		.loc 1 4850 5 is_stmt 1 view .LVU1343
4850:FreeRTOS/src/tasks.c **** 
 4861              		.loc 1 4850 5 view .LVU1344
 4862 006c E36A     		ldr	r3, [r4, #44]
 4863 006e 0122     		movs	r2, #1
 4864 0070 9A40     		lsls	r2, r2, r3
 4865 0072 0D49     		ldr	r1, .L373
 4866 0074 0868     		ldr	r0, [r1]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 204


 4867 0076 0243     		orrs	r2, r2, r0
 4868 0078 0A60     		str	r2, [r1]
4850:FreeRTOS/src/tasks.c **** 
 4869              		.loc 1 4850 5 view .LVU1345
 4870 007a 03EB8303 		add	r3, r3, r3, lsl #2
 4871 007e 9A00     		lsls	r2, r3, #2
 4872 0080 3146     		mov	r1, r6
 4873 0082 0A48     		ldr	r0, .L373+4
 4874 0084 1044     		add	r0, r0, r2
 4875 0086 FFF7FEFF 		bl	vListInsertEnd
 4876              	.LVL361:
4850:FreeRTOS/src/tasks.c **** 
 4877              		.loc 1 4850 35 view .LVU1346
4853:FreeRTOS/src/tasks.c **** 
 4878              		.loc 1 4853 82 view .LVU1347
4871:FreeRTOS/src/tasks.c **** 				{
 4879              		.loc 1 4871 5 view .LVU1348
4871:FreeRTOS/src/tasks.c **** 				{
 4880              		.loc 1 4871 14 is_stmt 0 view .LVU1349
 4881 008a E26A     		ldr	r2, [r4, #44]
4871:FreeRTOS/src/tasks.c **** 				{
 4882              		.loc 1 4871 41 view .LVU1350
 4883 008c 084B     		ldr	r3, .L373+8
 4884 008e 1B68     		ldr	r3, [r3]
 4885 0090 DB6A     		ldr	r3, [r3, #44]
4871:FreeRTOS/src/tasks.c **** 				{
 4886              		.loc 1 4871 7 view .LVU1351
 4887 0092 9A42     		cmp	r2, r3
 4888 0094 D1D9     		bls	.L368
4875:FreeRTOS/src/tasks.c **** 				}
 4889              		.loc 1 4875 6 is_stmt 1 view .LVU1352
 4890 0096 074B     		ldr	r3, .L373+12
 4891 0098 4FF08052 		mov	r2, #268435456
 4892 009c 1A60     		str	r2, [r3]
4875:FreeRTOS/src/tasks.c **** 				}
 4893              		.loc 1 4875 6 view .LVU1353
 4894              		.syntax unified
 4895              	@ 4875 "FreeRTOS/src/tasks.c" 1
 4896 009e BFF34F8F 		dsb
 4897              	@ 0 "" 2
4875:FreeRTOS/src/tasks.c **** 				}
 4898              		.loc 1 4875 6 view .LVU1354
 4899              	@ 4875 "FreeRTOS/src/tasks.c" 1
 4900 00a2 BFF36F8F 		isb
 4901              	@ 0 "" 2
4875:FreeRTOS/src/tasks.c **** 				}
 4902              		.loc 1 4875 37 view .LVU1355
 4903              		.thumb
 4904              		.syntax unified
 4905 00a6 C8E7     		b	.L368
 4906              	.L374:
 4907              		.align	2
 4908              	.L373:
 4909 00a8 00000000 		.word	.LANCHOR13
 4910 00ac 00000000 		.word	.LANCHOR4
 4911 00b0 00000000 		.word	.LANCHOR10
 4912 00b4 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 205


 4913              		.cfi_endproc
 4914              	.LFE115:
 4916              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4917              		.align	1
 4918              		.global	xTaskGenericNotifyFromISR
 4919              		.syntax unified
 4920              		.thumb
 4921              		.thumb_func
 4922              		.fpu softvfp
 4924              	xTaskGenericNotifyFromISR:
 4925              	.LVL362:
 4926              	.LFB116:
4898:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4927              		.loc 1 4898 2 view -0
 4928              		.cfi_startproc
 4929              		@ args = 4, pretend = 0, frame = 0
 4930              		@ frame_needed = 0, uses_anonymous_args = 0
4898:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 4931              		.loc 1 4898 2 is_stmt 0 view .LVU1357
 4932 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4933              	.LCFI48:
 4934              		.cfi_def_cfa_offset 24
 4935              		.cfi_offset 3, -24
 4936              		.cfi_offset 4, -20
 4937              		.cfi_offset 5, -16
 4938              		.cfi_offset 6, -12
 4939              		.cfi_offset 7, -8
 4940              		.cfi_offset 14, -4
4899:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4941              		.loc 1 4899 2 is_stmt 1 view .LVU1358
4900:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4942              		.loc 1 4900 2 view .LVU1359
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4943              		.loc 1 4901 2 view .LVU1360
 4944              	.LVL363:
4902:FreeRTOS/src/tasks.c **** 
 4945              		.loc 1 4902 2 view .LVU1361
4904:FreeRTOS/src/tasks.c **** 
 4946              		.loc 1 4904 32 view .LVU1362
4922:FreeRTOS/src/tasks.c **** 
 4947              		.loc 1 4922 45 view .LVU1363
4924:FreeRTOS/src/tasks.c **** 
 4948              		.loc 1 4924 3 view .LVU1364
4926:FreeRTOS/src/tasks.c **** 		{
 4949              		.loc 1 4926 3 view .LVU1365
 4950              	.LBB59:
 4951              	.LBI59:
 209:FreeRTOS/inc/portmacro.h **** {
 4952              		.loc 2 209 34 view .LVU1366
 4953              	.LBB60:
 211:FreeRTOS/inc/portmacro.h **** 
 4954              		.loc 2 211 1 view .LVU1367
 213:FreeRTOS/inc/portmacro.h **** 	(
 4955              		.loc 2 213 2 view .LVU1368
 4956              		.syntax unified
 4957              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 4958 0002 EFF31185 			mrs r5, basepri											
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 206


 4959 0006 4FF0BF04 		mov r4, #191												
 4960 000a 84F31188 		msr basepri, r4											
 4961 000e BFF36F8F 		isb														
 4962 0012 BFF34F8F 		dsb														
 4963              	
 4964              	@ 0 "" 2
 4965              	.LVL364:
 225:FreeRTOS/inc/portmacro.h **** }
 4966              		.loc 2 225 2 view .LVU1369
 225:FreeRTOS/inc/portmacro.h **** }
 4967              		.loc 2 225 2 is_stmt 0 view .LVU1370
 4968              		.thumb
 4969              		.syntax unified
 4970              	.LBE60:
 4971              	.LBE59:
4928:FreeRTOS/src/tasks.c **** 			{
 4972              		.loc 1 4928 4 is_stmt 1 view .LVU1371
4928:FreeRTOS/src/tasks.c **** 			{
 4973              		.loc 1 4928 6 is_stmt 0 view .LVU1372
 4974 0016 0BB1     		cbz	r3, .L376
4930:FreeRTOS/src/tasks.c **** 			}
 4975              		.loc 1 4930 5 is_stmt 1 view .LVU1373
4930:FreeRTOS/src/tasks.c **** 			}
 4976              		.loc 1 4930 42 is_stmt 0 view .LVU1374
 4977 0018 C46C     		ldr	r4, [r0, #76]
4930:FreeRTOS/src/tasks.c **** 			}
 4978              		.loc 1 4930 35 view .LVU1375
 4979 001a 1C60     		str	r4, [r3]
 4980              	.L376:
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4981              		.loc 1 4933 4 is_stmt 1 view .LVU1376
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4982              		.loc 1 4933 26 is_stmt 0 view .LVU1377
 4983 001c 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 4984              	.LVL365:
4933:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4985              		.loc 1 4933 26 view .LVU1378
 4986 0020 DBB2     		uxtb	r3, r3
 4987              	.LVL366:
4934:FreeRTOS/src/tasks.c **** 
 4988              		.loc 1 4934 4 is_stmt 1 view .LVU1379
4934:FreeRTOS/src/tasks.c **** 
 4989              		.loc 1 4934 25 is_stmt 0 view .LVU1380
 4990 0022 0224     		movs	r4, #2
 4991 0024 80F85040 		strb	r4, [r0, #80]
4936:FreeRTOS/src/tasks.c **** 			{
 4992              		.loc 1 4936 4 is_stmt 1 view .LVU1381
 4993 0028 013A     		subs	r2, r2, #1
 4994              	.LVL367:
4936:FreeRTOS/src/tasks.c **** 			{
 4995              		.loc 1 4936 4 is_stmt 0 view .LVU1382
 4996 002a 032A     		cmp	r2, #3
 4997 002c 1AD8     		bhi	.L387
 4998 002e DFE802F0 		tbb	[pc, r2]
 4999              	.L379:
 5000 0032 02       		.byte	(.L382-.L379)/2
 5001 0033 0C       		.byte	(.L381-.L379)/2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 207


 5002 0034 11       		.byte	(.L380-.L379)/2
 5003 0035 14       		.byte	(.L378-.L379)/2
 5004              		.p2align 1
 5005              	.L382:
4939:FreeRTOS/src/tasks.c **** 					break;
 5006              		.loc 1 4939 6 is_stmt 1 view .LVU1383
4939:FreeRTOS/src/tasks.c **** 					break;
 5007              		.loc 1 4939 29 is_stmt 0 view .LVU1384
 5008 0036 C26C     		ldr	r2, [r0, #76]
 5009 0038 1143     		orrs	r1, r1, r2
 5010              	.LVL368:
4939:FreeRTOS/src/tasks.c **** 					break;
 5011              		.loc 1 4939 29 view .LVU1385
 5012 003a C164     		str	r1, [r0, #76]
4940:FreeRTOS/src/tasks.c **** 
 5013              		.loc 1 4940 6 is_stmt 1 view .LVU1386
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5014              		.loc 1 4901 13 is_stmt 0 view .LVU1387
 5015 003c 0126     		movs	r6, #1
 5016              	.L377:
 5017              	.LVL369:
4975:FreeRTOS/src/tasks.c **** 
 5018              		.loc 1 4975 31 is_stmt 1 view .LVU1388
4979:FreeRTOS/src/tasks.c **** 			{
 5019              		.loc 1 4979 4 view .LVU1389
4979:FreeRTOS/src/tasks.c **** 			{
 5020              		.loc 1 4979 6 is_stmt 0 view .LVU1390
 5021 003e 012B     		cmp	r3, #1
 5022 0040 14D0     		beq	.L390
 5023              	.LVL370:
 5024              	.L383:
5012:FreeRTOS/src/tasks.c **** 				}
 5025              		.loc 1 5012 30 is_stmt 1 view .LVU1391
5016:FreeRTOS/src/tasks.c **** 
 5026              		.loc 1 5016 3 view .LVU1392
 5027              	.LBB61:
 5028              	.LBI61:
 229:FreeRTOS/inc/portmacro.h **** {
 5029              		.loc 2 229 30 view .LVU1393
 5030              	.LBB62:
 5031              		.loc 2 231 2 view .LVU1394
 5032              		.syntax unified
 5033              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 5034 0042 85F31188 			msr basepri, r5	
 5035              	@ 0 "" 2
 5036              	.LVL371:
 5037              		.loc 2 231 2 is_stmt 0 view .LVU1395
 5038              		.thumb
 5039              		.syntax unified
 5040              	.LBE62:
 5041              	.LBE61:
5018:FreeRTOS/src/tasks.c **** 	}
 5042              		.loc 1 5018 3 is_stmt 1 view .LVU1396
5019:FreeRTOS/src/tasks.c **** 
 5043              		.loc 1 5019 2 is_stmt 0 view .LVU1397
 5044 0046 3046     		mov	r0, r6
 5045 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 208


 5046              	.LVL372:
 5047              	.L381:
4943:FreeRTOS/src/tasks.c **** 					break;
 5048              		.loc 1 4943 6 is_stmt 1 view .LVU1398
4943:FreeRTOS/src/tasks.c **** 					break;
 5049              		.loc 1 4943 13 is_stmt 0 view .LVU1399
 5050 004a C26C     		ldr	r2, [r0, #76]
4943:FreeRTOS/src/tasks.c **** 					break;
 5051              		.loc 1 4943 32 view .LVU1400
 5052 004c 0132     		adds	r2, r2, #1
 5053 004e C264     		str	r2, [r0, #76]
4944:FreeRTOS/src/tasks.c **** 
 5054              		.loc 1 4944 6 is_stmt 1 view .LVU1401
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5055              		.loc 1 4901 13 is_stmt 0 view .LVU1402
 5056 0050 0126     		movs	r6, #1
4944:FreeRTOS/src/tasks.c **** 
 5057              		.loc 1 4944 6 view .LVU1403
 5058 0052 F4E7     		b	.L377
 5059              	.L380:
4947:FreeRTOS/src/tasks.c **** 					break;
 5060              		.loc 1 4947 6 is_stmt 1 view .LVU1404
4947:FreeRTOS/src/tasks.c **** 					break;
 5061              		.loc 1 4947 29 is_stmt 0 view .LVU1405
 5062 0054 C164     		str	r1, [r0, #76]
4948:FreeRTOS/src/tasks.c **** 
 5063              		.loc 1 4948 6 is_stmt 1 view .LVU1406
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5064              		.loc 1 4901 13 is_stmt 0 view .LVU1407
 5065 0056 0126     		movs	r6, #1
4948:FreeRTOS/src/tasks.c **** 
 5066              		.loc 1 4948 6 view .LVU1408
 5067 0058 F1E7     		b	.L377
 5068              	.L378:
4951:FreeRTOS/src/tasks.c **** 					{
 5069              		.loc 1 4951 6 is_stmt 1 view .LVU1409
4951:FreeRTOS/src/tasks.c **** 					{
 5070              		.loc 1 4951 8 is_stmt 0 view .LVU1410
 5071 005a 022B     		cmp	r3, #2
 5072 005c 04D0     		beq	.L388
4953:FreeRTOS/src/tasks.c **** 					}
 5073              		.loc 1 4953 7 is_stmt 1 view .LVU1411
4953:FreeRTOS/src/tasks.c **** 					}
 5074              		.loc 1 4953 30 is_stmt 0 view .LVU1412
 5075 005e C164     		str	r1, [r0, #76]
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5076              		.loc 1 4901 13 view .LVU1413
 5077 0060 0126     		movs	r6, #1
 5078 0062 ECE7     		b	.L377
 5079              	.L387:
4901:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5080              		.loc 1 4901 13 view .LVU1414
 5081 0064 0126     		movs	r6, #1
 5082 0066 EAE7     		b	.L377
 5083              	.L388:
4958:FreeRTOS/src/tasks.c **** 					}
 5084              		.loc 1 4958 15 view .LVU1415
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 209


 5085 0068 0026     		movs	r6, #0
 5086 006a E8E7     		b	.L377
 5087              	.LVL373:
 5088              	.L390:
4958:FreeRTOS/src/tasks.c **** 					}
 5089              		.loc 1 4958 15 view .LVU1416
 5090 006c 0446     		mov	r4, r0
4982:FreeRTOS/src/tasks.c **** 
 5091              		.loc 1 4982 82 is_stmt 1 view .LVU1417
4984:FreeRTOS/src/tasks.c **** 				{
 5092              		.loc 1 4984 5 view .LVU1418
4984:FreeRTOS/src/tasks.c **** 				{
 5093              		.loc 1 4984 30 is_stmt 0 view .LVU1419
 5094 006e 154B     		ldr	r3, .L391
 5095              	.LVL374:
4984:FreeRTOS/src/tasks.c **** 				{
 5096              		.loc 1 4984 30 view .LVU1420
 5097 0070 1B68     		ldr	r3, [r3]
4984:FreeRTOS/src/tasks.c **** 				{
 5098              		.loc 1 4984 7 view .LVU1421
 5099 0072 0BBB     		cbnz	r3, .L384
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5100              		.loc 1 4986 6 is_stmt 1 view .LVU1422
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5101              		.loc 1 4986 15 is_stmt 0 view .LVU1423
 5102 0074 071D     		adds	r7, r0, #4
 5103 0076 3846     		mov	r0, r7
 5104              	.LVL375:
4986:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5105              		.loc 1 4986 15 view .LVU1424
 5106 0078 FFF7FEFF 		bl	uxListRemove
 5107              	.LVL376:
4987:FreeRTOS/src/tasks.c **** 				}
 5108              		.loc 1 4987 6 is_stmt 1 view .LVU1425
4987:FreeRTOS/src/tasks.c **** 				}
 5109              		.loc 1 4987 6 view .LVU1426
 5110 007c E36A     		ldr	r3, [r4, #44]
 5111 007e 0122     		movs	r2, #1
 5112 0080 9A40     		lsls	r2, r2, r3
 5113 0082 1149     		ldr	r1, .L391+4
 5114 0084 0868     		ldr	r0, [r1]
 5115 0086 0243     		orrs	r2, r2, r0
 5116 0088 0A60     		str	r2, [r1]
4987:FreeRTOS/src/tasks.c **** 				}
 5117              		.loc 1 4987 6 view .LVU1427
 5118 008a 03EB8303 		add	r3, r3, r3, lsl #2
 5119 008e 9A00     		lsls	r2, r3, #2
 5120 0090 3946     		mov	r1, r7
 5121 0092 0E48     		ldr	r0, .L391+8
 5122 0094 1044     		add	r0, r0, r2
 5123 0096 FFF7FEFF 		bl	vListInsertEnd
 5124              	.LVL377:
4987:FreeRTOS/src/tasks.c **** 				}
 5125              		.loc 1 4987 36 view .LVU1428
 5126              	.L385:
4996:FreeRTOS/src/tasks.c **** 				{
 5127              		.loc 1 4996 5 view .LVU1429
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 210


4996:FreeRTOS/src/tasks.c **** 				{
 5128              		.loc 1 4996 14 is_stmt 0 view .LVU1430
 5129 009a E26A     		ldr	r2, [r4, #44]
4996:FreeRTOS/src/tasks.c **** 				{
 5130              		.loc 1 4996 41 view .LVU1431
 5131 009c 0C4B     		ldr	r3, .L391+12
 5132 009e 1B68     		ldr	r3, [r3]
 5133 00a0 DB6A     		ldr	r3, [r3, #44]
4996:FreeRTOS/src/tasks.c **** 				{
 5134              		.loc 1 4996 7 view .LVU1432
 5135 00a2 9A42     		cmp	r2, r3
 5136 00a4 CDD9     		bls	.L383
5000:FreeRTOS/src/tasks.c **** 					{
 5137              		.loc 1 5000 6 is_stmt 1 view .LVU1433
5000:FreeRTOS/src/tasks.c **** 					{
 5138              		.loc 1 5000 8 is_stmt 0 view .LVU1434
 5139 00a6 069B     		ldr	r3, [sp, #24]
 5140 00a8 13B1     		cbz	r3, .L386
5002:FreeRTOS/src/tasks.c **** 					}
 5141              		.loc 1 5002 7 is_stmt 1 view .LVU1435
5002:FreeRTOS/src/tasks.c **** 					}
 5142              		.loc 1 5002 34 is_stmt 0 view .LVU1436
 5143 00aa 0123     		movs	r3, #1
 5144 00ac 069A     		ldr	r2, [sp, #24]
 5145 00ae 1360     		str	r3, [r2]
 5146              	.L386:
5008:FreeRTOS/src/tasks.c **** 				}
 5147              		.loc 1 5008 6 is_stmt 1 view .LVU1437
5008:FreeRTOS/src/tasks.c **** 				}
 5148              		.loc 1 5008 20 is_stmt 0 view .LVU1438
 5149 00b0 084B     		ldr	r3, .L391+16
 5150 00b2 0122     		movs	r2, #1
 5151 00b4 1A60     		str	r2, [r3]
 5152 00b6 C4E7     		b	.L383
 5153              	.LVL378:
 5154              	.L384:
4993:FreeRTOS/src/tasks.c **** 				}
 5155              		.loc 1 4993 6 is_stmt 1 view .LVU1439
 5156 00b8 00F11801 		add	r1, r0, #24
 5157 00bc 0648     		ldr	r0, .L391+20
 5158              	.LVL379:
4993:FreeRTOS/src/tasks.c **** 				}
 5159              		.loc 1 4993 6 is_stmt 0 view .LVU1440
 5160 00be FFF7FEFF 		bl	vListInsertEnd
 5161              	.LVL380:
 5162 00c2 EAE7     		b	.L385
 5163              	.L392:
 5164              		.align	2
 5165              	.L391:
 5166 00c4 00000000 		.word	.LANCHOR16
 5167 00c8 00000000 		.word	.LANCHOR13
 5168 00cc 00000000 		.word	.LANCHOR4
 5169 00d0 00000000 		.word	.LANCHOR10
 5170 00d4 00000000 		.word	.LANCHOR19
 5171 00d8 00000000 		.word	.LANCHOR1
 5172              		.cfi_endproc
 5173              	.LFE116:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 211


 5175              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5176              		.align	1
 5177              		.global	vTaskNotifyGiveFromISR
 5178              		.syntax unified
 5179              		.thumb
 5180              		.thumb_func
 5181              		.fpu softvfp
 5183              	vTaskNotifyGiveFromISR:
 5184              	.LVL381:
 5185              	.LFB117:
5027:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 5186              		.loc 1 5027 2 is_stmt 1 view -0
 5187              		.cfi_startproc
 5188              		@ args = 0, pretend = 0, frame = 0
 5189              		@ frame_needed = 0, uses_anonymous_args = 0
5027:FreeRTOS/src/tasks.c **** 	TCB_t * pxTCB;
 5190              		.loc 1 5027 2 is_stmt 0 view .LVU1442
 5191 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5192              	.LCFI49:
 5193              		.cfi_def_cfa_offset 24
 5194              		.cfi_offset 3, -24
 5195              		.cfi_offset 4, -20
 5196              		.cfi_offset 5, -16
 5197              		.cfi_offset 6, -12
 5198              		.cfi_offset 7, -8
 5199              		.cfi_offset 14, -4
5028:FreeRTOS/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5200              		.loc 1 5028 2 is_stmt 1 view .LVU1443
5029:FreeRTOS/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5201              		.loc 1 5029 2 view .LVU1444
5030:FreeRTOS/src/tasks.c **** 
 5202              		.loc 1 5030 2 view .LVU1445
5032:FreeRTOS/src/tasks.c **** 
 5203              		.loc 1 5032 32 view .LVU1446
5050:FreeRTOS/src/tasks.c **** 
 5204              		.loc 1 5050 45 view .LVU1447
5052:FreeRTOS/src/tasks.c **** 
 5205              		.loc 1 5052 3 view .LVU1448
 5206              	.LVL382:
5054:FreeRTOS/src/tasks.c **** 		{
 5207              		.loc 1 5054 3 view .LVU1449
 5208              	.LBB63:
 5209              	.LBI63:
 209:FreeRTOS/inc/portmacro.h **** {
 5210              		.loc 2 209 34 view .LVU1450
 5211              	.LBB64:
 211:FreeRTOS/inc/portmacro.h **** 
 5212              		.loc 2 211 1 view .LVU1451
 213:FreeRTOS/inc/portmacro.h **** 	(
 5213              		.loc 2 213 2 view .LVU1452
 5214              		.syntax unified
 5215              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 5216 0002 EFF31185 			mrs r5, basepri											
 5217 0006 4FF0BF03 		mov r3, #191												
 5218 000a 83F31188 		msr basepri, r3											
 5219 000e BFF36F8F 		isb														
 5220 0012 BFF34F8F 		dsb														
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 212


 5221              	
 5222              	@ 0 "" 2
 5223              	.LVL383:
 225:FreeRTOS/inc/portmacro.h **** }
 5224              		.loc 2 225 2 view .LVU1453
 225:FreeRTOS/inc/portmacro.h **** }
 5225              		.loc 2 225 2 is_stmt 0 view .LVU1454
 5226              		.thumb
 5227              		.syntax unified
 5228              	.LBE64:
 5229              	.LBE63:
5056:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5230              		.loc 1 5056 4 is_stmt 1 view .LVU1455
5056:FreeRTOS/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5231              		.loc 1 5056 26 is_stmt 0 view .LVU1456
 5232 0016 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 5233 001a DBB2     		uxtb	r3, r3
 5234              	.LVL384:
5057:FreeRTOS/src/tasks.c **** 
 5235              		.loc 1 5057 4 is_stmt 1 view .LVU1457
5057:FreeRTOS/src/tasks.c **** 
 5236              		.loc 1 5057 25 is_stmt 0 view .LVU1458
 5237 001c 0222     		movs	r2, #2
 5238 001e 80F85020 		strb	r2, [r0, #80]
5061:FreeRTOS/src/tasks.c **** 
 5239              		.loc 1 5061 4 is_stmt 1 view .LVU1459
5061:FreeRTOS/src/tasks.c **** 
 5240              		.loc 1 5061 11 is_stmt 0 view .LVU1460
 5241 0022 C26C     		ldr	r2, [r0, #76]
5061:FreeRTOS/src/tasks.c **** 
 5242              		.loc 1 5061 30 view .LVU1461
 5243 0024 0132     		adds	r2, r2, #1
 5244 0026 C264     		str	r2, [r0, #76]
5063:FreeRTOS/src/tasks.c **** 
 5245              		.loc 1 5063 36 is_stmt 1 view .LVU1462
5067:FreeRTOS/src/tasks.c **** 			{
 5246              		.loc 1 5067 4 view .LVU1463
5067:FreeRTOS/src/tasks.c **** 			{
 5247              		.loc 1 5067 6 is_stmt 0 view .LVU1464
 5248 0028 012B     		cmp	r3, #1
 5249 002a 02D0     		beq	.L399
 5250              	.LVL385:
 5251              	.L394:
5100:FreeRTOS/src/tasks.c **** 				}
 5252              		.loc 1 5100 30 is_stmt 1 view .LVU1465
5104:FreeRTOS/src/tasks.c **** 	}
 5253              		.loc 1 5104 3 view .LVU1466
 5254              	.LBB65:
 5255              	.LBI65:
 229:FreeRTOS/inc/portmacro.h **** {
 5256              		.loc 2 229 30 view .LVU1467
 5257              	.LBB66:
 5258              		.loc 2 231 2 view .LVU1468
 5259              		.syntax unified
 5260              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 5261 002c 85F31188 			msr basepri, r5	
 5262              	@ 0 "" 2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 213


 5263              	.LVL386:
 5264              		.loc 2 231 2 is_stmt 0 view .LVU1469
 5265              		.thumb
 5266              		.syntax unified
 5267              	.LBE66:
 5268              	.LBE65:
5105:FreeRTOS/src/tasks.c **** 
 5269              		.loc 1 5105 2 view .LVU1470
 5270 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5271              	.LVL387:
 5272              	.L399:
5105:FreeRTOS/src/tasks.c **** 
 5273              		.loc 1 5105 2 view .LVU1471
 5274 0032 0E46     		mov	r6, r1
 5275 0034 0446     		mov	r4, r0
5070:FreeRTOS/src/tasks.c **** 
 5276              		.loc 1 5070 82 is_stmt 1 view .LVU1472
5072:FreeRTOS/src/tasks.c **** 				{
 5277              		.loc 1 5072 5 view .LVU1473
5072:FreeRTOS/src/tasks.c **** 				{
 5278              		.loc 1 5072 30 is_stmt 0 view .LVU1474
 5279 0036 144B     		ldr	r3, .L400
 5280              	.LVL388:
5072:FreeRTOS/src/tasks.c **** 				{
 5281              		.loc 1 5072 30 view .LVU1475
 5282 0038 1B68     		ldr	r3, [r3]
5072:FreeRTOS/src/tasks.c **** 				{
 5283              		.loc 1 5072 7 view .LVU1476
 5284 003a FBB9     		cbnz	r3, .L395
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5285              		.loc 1 5074 6 is_stmt 1 view .LVU1477
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5286              		.loc 1 5074 15 is_stmt 0 view .LVU1478
 5287 003c 071D     		adds	r7, r0, #4
 5288 003e 3846     		mov	r0, r7
 5289              	.LVL389:
5074:FreeRTOS/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5290              		.loc 1 5074 15 view .LVU1479
 5291 0040 FFF7FEFF 		bl	uxListRemove
 5292              	.LVL390:
5075:FreeRTOS/src/tasks.c **** 				}
 5293              		.loc 1 5075 6 is_stmt 1 view .LVU1480
5075:FreeRTOS/src/tasks.c **** 				}
 5294              		.loc 1 5075 6 view .LVU1481
 5295 0044 E36A     		ldr	r3, [r4, #44]
 5296 0046 0122     		movs	r2, #1
 5297 0048 9A40     		lsls	r2, r2, r3
 5298 004a 1049     		ldr	r1, .L400+4
 5299 004c 0868     		ldr	r0, [r1]
 5300 004e 0243     		orrs	r2, r2, r0
 5301 0050 0A60     		str	r2, [r1]
5075:FreeRTOS/src/tasks.c **** 				}
 5302              		.loc 1 5075 6 view .LVU1482
 5303 0052 03EB8303 		add	r3, r3, r3, lsl #2
 5304 0056 9A00     		lsls	r2, r3, #2
 5305 0058 3946     		mov	r1, r7
 5306 005a 0D48     		ldr	r0, .L400+8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 214


 5307 005c 1044     		add	r0, r0, r2
 5308 005e FFF7FEFF 		bl	vListInsertEnd
 5309              	.LVL391:
5075:FreeRTOS/src/tasks.c **** 				}
 5310              		.loc 1 5075 36 view .LVU1483
 5311              	.L396:
5084:FreeRTOS/src/tasks.c **** 				{
 5312              		.loc 1 5084 5 view .LVU1484
5084:FreeRTOS/src/tasks.c **** 				{
 5313              		.loc 1 5084 14 is_stmt 0 view .LVU1485
 5314 0062 E26A     		ldr	r2, [r4, #44]
5084:FreeRTOS/src/tasks.c **** 				{
 5315              		.loc 1 5084 41 view .LVU1486
 5316 0064 0B4B     		ldr	r3, .L400+12
 5317 0066 1B68     		ldr	r3, [r3]
 5318 0068 DB6A     		ldr	r3, [r3, #44]
5084:FreeRTOS/src/tasks.c **** 				{
 5319              		.loc 1 5084 7 view .LVU1487
 5320 006a 9A42     		cmp	r2, r3
 5321 006c DED9     		bls	.L394
5088:FreeRTOS/src/tasks.c **** 					{
 5322              		.loc 1 5088 6 is_stmt 1 view .LVU1488
5088:FreeRTOS/src/tasks.c **** 					{
 5323              		.loc 1 5088 8 is_stmt 0 view .LVU1489
 5324 006e 0EB1     		cbz	r6, .L397
5090:FreeRTOS/src/tasks.c **** 					}
 5325              		.loc 1 5090 7 is_stmt 1 view .LVU1490
5090:FreeRTOS/src/tasks.c **** 					}
 5326              		.loc 1 5090 34 is_stmt 0 view .LVU1491
 5327 0070 0123     		movs	r3, #1
 5328 0072 3360     		str	r3, [r6]
 5329              	.L397:
5096:FreeRTOS/src/tasks.c **** 				}
 5330              		.loc 1 5096 6 is_stmt 1 view .LVU1492
5096:FreeRTOS/src/tasks.c **** 				}
 5331              		.loc 1 5096 20 is_stmt 0 view .LVU1493
 5332 0074 084B     		ldr	r3, .L400+16
 5333 0076 0122     		movs	r2, #1
 5334 0078 1A60     		str	r2, [r3]
 5335 007a D7E7     		b	.L394
 5336              	.LVL392:
 5337              	.L395:
5081:FreeRTOS/src/tasks.c **** 				}
 5338              		.loc 1 5081 6 is_stmt 1 view .LVU1494
 5339 007c 00F11801 		add	r1, r0, #24
 5340              	.LVL393:
5081:FreeRTOS/src/tasks.c **** 				}
 5341              		.loc 1 5081 6 is_stmt 0 view .LVU1495
 5342 0080 0648     		ldr	r0, .L400+20
 5343              	.LVL394:
5081:FreeRTOS/src/tasks.c **** 				}
 5344              		.loc 1 5081 6 view .LVU1496
 5345 0082 FFF7FEFF 		bl	vListInsertEnd
 5346              	.LVL395:
 5347 0086 ECE7     		b	.L396
 5348              	.L401:
 5349              		.align	2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 215


 5350              	.L400:
 5351 0088 00000000 		.word	.LANCHOR16
 5352 008c 00000000 		.word	.LANCHOR13
 5353 0090 00000000 		.word	.LANCHOR4
 5354 0094 00000000 		.word	.LANCHOR10
 5355 0098 00000000 		.word	.LANCHOR19
 5356 009c 00000000 		.word	.LANCHOR1
 5357              		.cfi_endproc
 5358              	.LFE117:
 5360              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5361              		.align	1
 5362              		.global	xTaskNotifyStateClear
 5363              		.syntax unified
 5364              		.thumb
 5365              		.thumb_func
 5366              		.fpu softvfp
 5368              	xTaskNotifyStateClear:
 5369              	.LVL396:
 5370              	.LFB118:
5113:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5371              		.loc 1 5113 2 is_stmt 1 view -0
 5372              		.cfi_startproc
 5373              		@ args = 0, pretend = 0, frame = 0
 5374              		@ frame_needed = 0, uses_anonymous_args = 0
5113:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5375              		.loc 1 5113 2 is_stmt 0 view .LVU1498
 5376 0000 10B5     		push	{r4, lr}
 5377              	.LCFI50:
 5378              		.cfi_def_cfa_offset 8
 5379              		.cfi_offset 4, -8
 5380              		.cfi_offset 14, -4
5114:FreeRTOS/src/tasks.c **** 	BaseType_t xReturn;
 5381              		.loc 1 5114 2 is_stmt 1 view .LVU1499
5115:FreeRTOS/src/tasks.c **** 
 5382              		.loc 1 5115 2 view .LVU1500
5119:FreeRTOS/src/tasks.c **** 
 5383              		.loc 1 5119 3 view .LVU1501
5119:FreeRTOS/src/tasks.c **** 
 5384              		.loc 1 5119 11 is_stmt 0 view .LVU1502
 5385 0002 0446     		mov	r4, r0
 5386 0004 58B1     		cbz	r0, .L407
 5387              	.LVL397:
 5388              	.L403:
5121:FreeRTOS/src/tasks.c **** 		{
 5389              		.loc 1 5121 3 is_stmt 1 discriminator 4 view .LVU1503
 5390 0006 FFF7FEFF 		bl	vPortEnterCritical
 5391              	.LVL398:
5123:FreeRTOS/src/tasks.c **** 			{
 5392              		.loc 1 5123 4 discriminator 4 view .LVU1504
5123:FreeRTOS/src/tasks.c **** 			{
 5393              		.loc 1 5123 13 is_stmt 0 discriminator 4 view .LVU1505
 5394 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5395 000e DBB2     		uxtb	r3, r3
5123:FreeRTOS/src/tasks.c **** 			{
 5396              		.loc 1 5123 6 discriminator 4 view .LVU1506
 5397 0010 022B     		cmp	r3, #2
 5398 0012 07D0     		beq	.L408
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 216


5130:FreeRTOS/src/tasks.c **** 			}
 5399              		.loc 1 5130 13 view .LVU1507
 5400 0014 0024     		movs	r4, #0
 5401              	.LVL399:
 5402              	.L404:
5133:FreeRTOS/src/tasks.c **** 
 5403              		.loc 1 5133 3 is_stmt 1 view .LVU1508
 5404 0016 FFF7FEFF 		bl	vPortExitCritical
 5405              	.LVL400:
5135:FreeRTOS/src/tasks.c **** 	}
 5406              		.loc 1 5135 3 view .LVU1509
5136:FreeRTOS/src/tasks.c **** 
 5407              		.loc 1 5136 2 is_stmt 0 view .LVU1510
 5408 001a 2046     		mov	r0, r4
 5409 001c 10BD     		pop	{r4, pc}
 5410              	.LVL401:
 5411              	.L407:
5119:FreeRTOS/src/tasks.c **** 
 5412              		.loc 1 5119 11 discriminator 1 view .LVU1511
 5413 001e 044B     		ldr	r3, .L409
 5414 0020 1C68     		ldr	r4, [r3]
 5415              	.LVL402:
5119:FreeRTOS/src/tasks.c **** 
 5416              		.loc 1 5119 11 discriminator 1 view .LVU1512
 5417 0022 F0E7     		b	.L403
 5418              	.LVL403:
 5419              	.L408:
5125:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 5420              		.loc 1 5125 5 is_stmt 1 view .LVU1513
5125:FreeRTOS/src/tasks.c **** 				xReturn = pdPASS;
 5421              		.loc 1 5125 26 is_stmt 0 view .LVU1514
 5422 0024 0023     		movs	r3, #0
 5423 0026 84F85030 		strb	r3, [r4, #80]
5126:FreeRTOS/src/tasks.c **** 			}
 5424              		.loc 1 5126 5 is_stmt 1 view .LVU1515
 5425              	.LVL404:
5126:FreeRTOS/src/tasks.c **** 			}
 5426              		.loc 1 5126 13 is_stmt 0 view .LVU1516
 5427 002a 0124     		movs	r4, #1
 5428              	.LVL405:
5126:FreeRTOS/src/tasks.c **** 			}
 5429              		.loc 1 5126 13 view .LVU1517
 5430 002c F3E7     		b	.L404
 5431              	.L410:
 5432 002e 00BF     		.align	2
 5433              	.L409:
 5434 0030 00000000 		.word	.LANCHOR10
 5435              		.cfi_endproc
 5436              	.LFE118:
 5438              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 5439              		.align	1
 5440              		.global	ulTaskNotifyValueClear
 5441              		.syntax unified
 5442              		.thumb
 5443              		.thumb_func
 5444              		.fpu softvfp
 5446              	ulTaskNotifyValueClear:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 217


 5447              	.LVL406:
 5448              	.LFB119:
5144:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5449              		.loc 1 5144 2 is_stmt 1 view -0
 5450              		.cfi_startproc
 5451              		@ args = 0, pretend = 0, frame = 0
 5452              		@ frame_needed = 0, uses_anonymous_args = 0
5144:FreeRTOS/src/tasks.c **** 	TCB_t *pxTCB;
 5453              		.loc 1 5144 2 is_stmt 0 view .LVU1519
 5454 0000 70B5     		push	{r4, r5, r6, lr}
 5455              	.LCFI51:
 5456              		.cfi_def_cfa_offset 16
 5457              		.cfi_offset 4, -16
 5458              		.cfi_offset 5, -12
 5459              		.cfi_offset 6, -8
 5460              		.cfi_offset 14, -4
 5461 0002 0E46     		mov	r6, r1
5145:FreeRTOS/src/tasks.c **** 	uint32_t ulReturn;
 5462              		.loc 1 5145 2 is_stmt 1 view .LVU1520
5146:FreeRTOS/src/tasks.c **** 
 5463              		.loc 1 5146 2 view .LVU1521
5150:FreeRTOS/src/tasks.c **** 
 5464              		.loc 1 5150 3 view .LVU1522
5150:FreeRTOS/src/tasks.c **** 
 5465              		.loc 1 5150 11 is_stmt 0 view .LVU1523
 5466 0004 0446     		mov	r4, r0
 5467 0006 60B1     		cbz	r0, .L414
 5468              	.LVL407:
 5469              	.L412:
5152:FreeRTOS/src/tasks.c **** 		{
 5470              		.loc 1 5152 3 is_stmt 1 discriminator 4 view .LVU1524
 5471 0008 FFF7FEFF 		bl	vPortEnterCritical
 5472              	.LVL408:
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5473              		.loc 1 5156 4 discriminator 4 view .LVU1525
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5474              		.loc 1 5156 27 is_stmt 0 discriminator 4 view .LVU1526
 5475 000c 064B     		ldr	r3, .L415
 5476 000e 1B68     		ldr	r3, [r3]
5156:FreeRTOS/src/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5477              		.loc 1 5156 13 discriminator 4 view .LVU1527
 5478 0010 DD6C     		ldr	r5, [r3, #76]
 5479              	.LVL409:
5157:FreeRTOS/src/tasks.c **** 		}
 5480              		.loc 1 5157 4 is_stmt 1 discriminator 4 view .LVU1528
5157:FreeRTOS/src/tasks.c **** 		}
 5481              		.loc 1 5157 27 is_stmt 0 discriminator 4 view .LVU1529
 5482 0012 E16C     		ldr	r1, [r4, #76]
 5483 0014 21EA0601 		bic	r1, r1, r6
 5484 0018 E164     		str	r1, [r4, #76]
5159:FreeRTOS/src/tasks.c **** 
 5485              		.loc 1 5159 3 is_stmt 1 discriminator 4 view .LVU1530
 5486 001a FFF7FEFF 		bl	vPortExitCritical
 5487              	.LVL410:
5161:FreeRTOS/src/tasks.c **** 	}
 5488              		.loc 1 5161 3 discriminator 4 view .LVU1531
5162:FreeRTOS/src/tasks.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 218


 5489              		.loc 1 5162 2 is_stmt 0 discriminator 4 view .LVU1532
 5490 001e 2846     		mov	r0, r5
 5491 0020 70BD     		pop	{r4, r5, r6, pc}
 5492              	.LVL411:
 5493              	.L414:
5150:FreeRTOS/src/tasks.c **** 
 5494              		.loc 1 5150 11 discriminator 1 view .LVU1533
 5495 0022 014B     		ldr	r3, .L415
 5496 0024 1C68     		ldr	r4, [r3]
 5497              	.LVL412:
5150:FreeRTOS/src/tasks.c **** 
 5498              		.loc 1 5150 11 discriminator 1 view .LVU1534
 5499 0026 EFE7     		b	.L412
 5500              	.L416:
 5501              		.align	2
 5502              	.L415:
 5503 0028 00000000 		.word	.LANCHOR10
 5504              		.cfi_endproc
 5505              	.LFE119:
 5507              		.global	pxCurrentTCB
 5508              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5509              		.align	2
 5510              		.set	.LANCHOR10,. + 0
 5513              	pxCurrentTCB:
 5514 0000 00000000 		.space	4
 5515              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5516              		.align	2
 5517              		.set	.LANCHOR2,. + 0
 5520              	pxDelayedTaskList:
 5521 0000 00000000 		.space	4
 5522              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5523              		.align	2
 5524              		.set	.LANCHOR8,. + 0
 5527              	pxOverflowDelayedTaskList:
 5528 0000 00000000 		.space	4
 5529              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5530              		.align	2
 5531              		.set	.LANCHOR4,. + 0
 5534              	pxReadyTasksLists:
 5535 0000 00000000 		.space	100
 5535      00000000 
 5535      00000000 
 5535      00000000 
 5535      00000000 
 5536              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5537              		.align	2
 5538              		.set	.LANCHOR9,. + 0
 5541              	uxCurrentNumberOfTasks:
 5542 0000 00000000 		.space	4
 5543              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5544              		.align	2
 5545              		.set	.LANCHOR14,. + 0
 5548              	uxDeletedTasksWaitingCleanUp:
 5549 0000 00000000 		.space	4
 5550              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5551              		.align	2
 5552              		.set	.LANCHOR16,. + 0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 219


 5555              	uxSchedulerSuspended:
 5556 0000 00000000 		.space	4
 5557              		.section	.bss.uxTaskNumber,"aw",%nobits
 5558              		.align	2
 5559              		.set	.LANCHOR12,. + 0
 5562              	uxTaskNumber:
 5563 0000 00000000 		.space	4
 5564              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5565              		.align	2
 5566              		.set	.LANCHOR13,. + 0
 5569              	uxTopReadyPriority:
 5570 0000 00000000 		.space	4
 5571              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5572              		.align	2
 5573              		.set	.LANCHOR5,. + 0
 5576              	xDelayedTaskList1:
 5577 0000 00000000 		.space	20
 5577      00000000 
 5577      00000000 
 5577      00000000 
 5577      00000000 
 5578              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5579              		.align	2
 5580              		.set	.LANCHOR6,. + 0
 5583              	xDelayedTaskList2:
 5584 0000 00000000 		.space	20
 5584      00000000 
 5584      00000000 
 5584      00000000 
 5584      00000000 
 5585              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5586              		.align	2
 5587              		.set	.LANCHOR17,. + 0
 5590              	xIdleTaskHandle:
 5591 0000 00000000 		.space	4
 5592              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5593              		.align	2
 5594              		.set	.LANCHOR3,. + 0
 5597              	xNextTaskUnblockTime:
 5598 0000 00000000 		.space	4
 5599              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5600              		.align	2
 5601              		.set	.LANCHOR18,. + 0
 5604              	xNumOfOverflows:
 5605 0000 00000000 		.space	4
 5606              		.section	.bss.xPendedTicks,"aw",%nobits
 5607              		.align	2
 5608              		.set	.LANCHOR20,. + 0
 5611              	xPendedTicks:
 5612 0000 00000000 		.space	4
 5613              		.section	.bss.xPendingReadyList,"aw",%nobits
 5614              		.align	2
 5615              		.set	.LANCHOR1,. + 0
 5618              	xPendingReadyList:
 5619 0000 00000000 		.space	20
 5619      00000000 
 5619      00000000 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 220


 5619      00000000 
 5619      00000000 
 5620              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5621              		.align	2
 5622              		.set	.LANCHOR11,. + 0
 5625              	xSchedulerRunning:
 5626 0000 00000000 		.space	4
 5627              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5628              		.align	2
 5629              		.set	.LANCHOR0,. + 0
 5632              	xSuspendedTaskList:
 5633 0000 00000000 		.space	20
 5633      00000000 
 5633      00000000 
 5633      00000000 
 5633      00000000 
 5634              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5635              		.align	2
 5636              		.set	.LANCHOR7,. + 0
 5639              	xTasksWaitingTermination:
 5640 0000 00000000 		.space	20
 5640      00000000 
 5640      00000000 
 5640      00000000 
 5640      00000000 
 5641              		.section	.bss.xTickCount,"aw",%nobits
 5642              		.align	2
 5643              		.set	.LANCHOR15,. + 0
 5646              	xTickCount:
 5647 0000 00000000 		.space	4
 5648              		.section	.bss.xYieldPending,"aw",%nobits
 5649              		.align	2
 5650              		.set	.LANCHOR19,. + 0
 5653              	xYieldPending:
 5654 0000 00000000 		.space	4
 5655              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5656              		.align	2
 5657              	.LC0:
 5658 0000 49444C45 		.ascii	"IDLE\000"
 5658      00
 5659              		.text
 5660              	.Letext0:
 5661              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 5662              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 5663              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 5664              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 5665              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 5666              		.file 8 "FreeRTOS/inc/stdint.h"
 5667              		.file 9 "CMSIS/inc/core_cm3.h"
 5668              		.file 10 "CMSIS/inc/system_stm32f1xx.h"
 5669              		.file 11 "FreeRTOS/inc/projdefs.h"
 5670              		.file 12 "FreeRTOS/inc/list.h"
 5671              		.file 13 "FreeRTOS/inc/task.h"
 5672              		.file 14 "FreeRTOS/inc/portable.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 221


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:83     .text.prvTaskIsTaskSuspended:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:89     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:95     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:138    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:144    .text.prvDeleteTCB:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:150    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:182    .text.prvInitialiseNewTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:188    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:342    .text.prvInitialiseTaskLists:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:348    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:421    .text.prvInitialiseTaskLists:0000000000000048 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:433    .text.prvAddNewTaskToReadyList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:439    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:576    .text.prvAddNewTaskToReadyList:000000000000008c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:587    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:593    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:668    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:675    .text.prvIdleTask:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:681    .text.prvIdleTask:0000000000000000 prvIdleTask
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:730    .text.prvIdleTask:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:736    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:742    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:862    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:873    .text.xTaskCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:880    .text.xTaskCreate:0000000000000000 xTaskCreate
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1002   .text.vTaskDelete:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1009   .text.vTaskDelete:0000000000000000 vTaskDelete
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1164   .text.vTaskDelete:00000000000000a0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1177   .text.uxTaskPriorityGet:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1184   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1230   .text.uxTaskPriorityGet:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1235   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1242   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1316   .text.uxTaskPriorityGetFromISR:0000000000000024 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1321   .text.vTaskPrioritySet:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1328   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1551   .text.vTaskPrioritySet:00000000000000c4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1559   .text.vTaskResume:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1566   .text.vTaskResume:0000000000000000 vTaskResume
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1670   .text.vTaskResume:0000000000000064 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1678   .text.xTaskResumeFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1685   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1830   .text.xTaskResumeFromISR:0000000000000078 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1839   .text.vTaskStartScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1846   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1935   .text.vTaskStartScheduler:000000000000004c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1945   .text.vTaskEndScheduler:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1952   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:1995   .text.vTaskEndScheduler:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2000   .text.vTaskSuspendAll:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2007   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2026   .text.vTaskSuspendAll:000000000000000c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2031   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 222


C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2038   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2059   .text.xTaskGetTickCount:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2064   .text.xTaskGetTickCountFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2071   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2095   .text.xTaskGetTickCountFromISR:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2100   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2107   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2123   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2128   .text.pcTaskGetName:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2135   .text.pcTaskGetName:0000000000000000 pcTaskGetName
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2166   .text.pcTaskGetName:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2171   .text.xTaskIncrementTick:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2178   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2416   .text.xTaskIncrementTick:00000000000000d4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2431   .text.xTaskResumeAll:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2438   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2648   .text.xTaskResumeAll:00000000000000c0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2661   .text.vTaskDelayUntil:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2668   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2802   .text.vTaskDelayUntil:0000000000000058 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2809   .text.vTaskDelay:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2816   .text.vTaskDelay:0000000000000000 vTaskDelay
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2884   .text.vTaskDelay:0000000000000030 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2889   .text.xTaskCatchUpTicks:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2896   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2934   .text.xTaskCatchUpTicks:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2939   .text.vTaskSwitchContext:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:2946   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3067   .text.vTaskSwitchContext:0000000000000068 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3078   .text.vTaskSuspend:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3085   .text.vTaskSuspend:0000000000000000 vTaskSuspend
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3259   .text.vTaskSuspend:00000000000000b0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3270   .text.vTaskPlaceOnEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3277   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3313   .text.vTaskPlaceOnEventList:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3318   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3325   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3369   .text.vTaskPlaceOnUnorderedEventList:0000000000000020 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3374   .text.xTaskRemoveFromEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3381   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3483   .text.xTaskRemoveFromEventList:0000000000000060 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3493   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3500   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3578   .text.vTaskRemoveFromUnorderedEventList:0000000000000048 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3586   .text.vTaskSetTimeOutState:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3593   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3631   .text.vTaskSetTimeOutState:000000000000001c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3637   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3644   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3667   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3673   .text.xTaskCheckForTimeOut:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3680   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3796   .text.xTaskCheckForTimeOut:0000000000000054 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3803   .text.vTaskMissedYield:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3810   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3827   .text.vTaskMissedYield:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3832   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 223


C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3839   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3858   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3863   .text.xTaskPriorityInherit:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:3870   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4038   .text.xTaskPriorityInherit:00000000000000a0 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4045   .text.xTaskPriorityDisinherit:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4052   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4187   .text.xTaskPriorityDisinherit:0000000000000078 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4193   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4200   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4337   .text.vTaskPriorityDisinheritAfterTimeout:000000000000007c $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4343   .text.uxTaskResetEventItemValue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4350   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4377   .text.uxTaskResetEventItemValue:0000000000000014 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4382   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4389   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4420   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4425   .text.ulTaskNotifyTake:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4432   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4554   .text.ulTaskNotifyTake:0000000000000070 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4560   .text.xTaskNotifyWait:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4567   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4709   .text.xTaskNotifyWait:0000000000000090 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4715   .text.xTaskGenericNotify:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4722   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4776   .text.xTaskGenericNotify:000000000000002a $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4780   .text.xTaskGenericNotify:000000000000002e $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4909   .text.xTaskGenericNotify:00000000000000a8 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4917   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:4924   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5000   .text.xTaskGenericNotifyFromISR:0000000000000032 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5004   .text.xTaskGenericNotifyFromISR:0000000000000036 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5166   .text.xTaskGenericNotifyFromISR:00000000000000c4 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5176   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5183   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5351   .text.vTaskNotifyGiveFromISR:0000000000000088 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5361   .text.xTaskNotifyStateClear:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5368   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5434   .text.xTaskNotifyStateClear:0000000000000030 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5439   .text.ulTaskNotifyValueClear:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5446   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5503   .text.ulTaskNotifyValueClear:0000000000000028 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5513   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5509   .bss.pxCurrentTCB:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5516   .bss.pxDelayedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5520   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5523   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5527   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5530   .bss.pxReadyTasksLists:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5534   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5537   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5541   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5544   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5548   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5551   .bss.uxSchedulerSuspended:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5555   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5558   .bss.uxTaskNumber:0000000000000000 $d
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s 			page 224


C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5562   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5565   .bss.uxTopReadyPriority:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5569   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5572   .bss.xDelayedTaskList1:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5576   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5579   .bss.xDelayedTaskList2:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5583   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5586   .bss.xIdleTaskHandle:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5590   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5593   .bss.xNextTaskUnblockTime:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5597   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5600   .bss.xNumOfOverflows:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5604   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5607   .bss.xPendedTicks:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5611   .bss.xPendedTicks:0000000000000000 xPendedTicks
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5614   .bss.xPendingReadyList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5618   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5621   .bss.xSchedulerRunning:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5625   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5628   .bss.xSuspendedTaskList:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5632   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5635   .bss.xTasksWaitingTermination:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5639   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5642   .bss.xTickCount:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5646   .bss.xTickCount:0000000000000000 xTickCount
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5649   .bss.xYieldPending:0000000000000000 $d
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5653   .bss.xYieldPending:0000000000000000 xYieldPending
C:\Users\HARTO_~1\AppData\Local\Temp\ccEOUafe.s:5656   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
xPortStartScheduler
vPortEndScheduler
