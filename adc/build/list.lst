ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"list.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.vListInitialise,"ax",%progbits
  16              		.align	1
  17              		.global	vListInitialise
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	vListInitialise:
  25              	.LVL0:
  26              	.LFB4:
  27              		.file 1 "FreeRTOS/src/list.c"
   1:FreeRTOS/src/list.c **** /*
   2:FreeRTOS/src/list.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/list.c ****  *
   5:FreeRTOS/src/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/list.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/list.c ****  * subject to the following conditions:
  11:FreeRTOS/src/list.c ****  *
  12:FreeRTOS/src/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/list.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/list.c ****  *
  15:FreeRTOS/src/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/list.c ****  *
  22:FreeRTOS/src/list.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/list.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/list.c ****  *
  25:FreeRTOS/src/list.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/list.c ****  */
  27:FreeRTOS/src/list.c **** 
  28:FreeRTOS/src/list.c **** 
  29:FreeRTOS/src/list.c **** #include <stdlib.h>
  30:FreeRTOS/src/list.c **** #include "FreeRTOS.h"
  31:FreeRTOS/src/list.c **** #include "list.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 2


  32:FreeRTOS/src/list.c **** 
  33:FreeRTOS/src/list.c **** /*-----------------------------------------------------------
  34:FreeRTOS/src/list.c ****  * PUBLIC LIST API documented in list.h
  35:FreeRTOS/src/list.c ****  *----------------------------------------------------------*/
  36:FreeRTOS/src/list.c **** 
  37:FreeRTOS/src/list.c **** void vListInitialise( List_t * const pxList )
  38:FreeRTOS/src/list.c **** {
  28              		.loc 1 38 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  39:FreeRTOS/src/list.c **** 	/* The list structure contains a list item which is used to mark the
  40:FreeRTOS/src/list.c **** 	end of the list.  To initialise the list the list end is inserted
  41:FreeRTOS/src/list.c **** 	as the only list entry. */
  42:FreeRTOS/src/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini lis
  33              		.loc 1 42 2 view .LVU1
  34              		.loc 1 42 37 is_stmt 0 view .LVU2
  35 0000 00F10803 		add	r3, r0, #8
  36              		.loc 1 42 18 view .LVU3
  37 0004 4360     		str	r3, [r0, #4]
  43:FreeRTOS/src/list.c **** 
  44:FreeRTOS/src/list.c **** 	/* The list end value is the highest possible value in the list to
  45:FreeRTOS/src/list.c **** 	ensure it remains at the end of the list. */
  46:FreeRTOS/src/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  38              		.loc 1 46 2 is_stmt 1 view .LVU4
  39              		.loc 1 46 30 is_stmt 0 view .LVU5
  40 0006 4FF0FF32 		mov	r2, #-1
  41 000a 8260     		str	r2, [r0, #8]
  47:FreeRTOS/src/list.c **** 
  48:FreeRTOS/src/list.c **** 	/* The list end next and previous pointers point to itself so we know
  49:FreeRTOS/src/list.c **** 	when the list is empty. */
  50:FreeRTOS/src/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mi
  42              		.loc 1 50 2 is_stmt 1 view .LVU6
  43              		.loc 1 50 26 is_stmt 0 view .LVU7
  44 000c C360     		str	r3, [r0, #12]
  51:FreeRTOS/src/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The
  45              		.loc 1 51 2 is_stmt 1 view .LVU8
  46              		.loc 1 51 30 is_stmt 0 view .LVU9
  47 000e 0361     		str	r3, [r0, #16]
  52:FreeRTOS/src/list.c **** 
  53:FreeRTOS/src/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  48              		.loc 1 53 2 is_stmt 1 view .LVU10
  49              		.loc 1 53 26 is_stmt 0 view .LVU11
  50 0010 0023     		movs	r3, #0
  51 0012 0360     		str	r3, [r0]
  54:FreeRTOS/src/list.c **** 
  55:FreeRTOS/src/list.c **** 	/* Write known values into the list if
  56:FreeRTOS/src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  57:FreeRTOS/src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  52              		.loc 1 57 48 is_stmt 1 view .LVU12
  58:FreeRTOS/src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  53              		.loc 1 58 48 view .LVU13
  59:FreeRTOS/src/list.c **** }
  54              		.loc 1 59 1 is_stmt 0 view .LVU14
  55 0014 7047     		bx	lr
  56              		.cfi_endproc
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 3


  57              	.LFE4:
  59              		.section	.text.vListInitialiseItem,"ax",%progbits
  60              		.align	1
  61              		.global	vListInitialiseItem
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu softvfp
  67              	vListInitialiseItem:
  68              	.LVL1:
  69              	.LFB5:
  60:FreeRTOS/src/list.c **** /*-----------------------------------------------------------*/
  61:FreeRTOS/src/list.c **** 
  62:FreeRTOS/src/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  63:FreeRTOS/src/list.c **** {
  70              		.loc 1 63 1 is_stmt 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  64:FreeRTOS/src/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  65:FreeRTOS/src/list.c **** 	pxItem->pxContainer = NULL;
  75              		.loc 1 65 2 view .LVU16
  76              		.loc 1 65 22 is_stmt 0 view .LVU17
  77 0000 0023     		movs	r3, #0
  78 0002 0361     		str	r3, [r0, #16]
  66:FreeRTOS/src/list.c **** 
  67:FreeRTOS/src/list.c **** 	/* Write known values into the list item if
  68:FreeRTOS/src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  69:FreeRTOS/src/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  79              		.loc 1 69 57 is_stmt 1 view .LVU18
  70:FreeRTOS/src/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  80              		.loc 1 70 58 view .LVU19
  71:FreeRTOS/src/list.c **** }
  81              		.loc 1 71 1 is_stmt 0 view .LVU20
  82 0004 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE5:
  86              		.section	.text.vListInsertEnd,"ax",%progbits
  87              		.align	1
  88              		.global	vListInsertEnd
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	vListInsertEnd:
  95              	.LVL2:
  96              	.LFB6:
  72:FreeRTOS/src/list.c **** /*-----------------------------------------------------------*/
  73:FreeRTOS/src/list.c **** 
  74:FreeRTOS/src/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
  75:FreeRTOS/src/list.c **** {
  97              		.loc 1 75 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 4


  76:FreeRTOS/src/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 102              		.loc 1 76 1 view .LVU22
 103              		.loc 1 76 20 is_stmt 0 view .LVU23
 104 0000 4368     		ldr	r3, [r0, #4]
 105              	.LVL3:
  77:FreeRTOS/src/list.c **** 
  78:FreeRTOS/src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
  79:FreeRTOS/src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
  80:FreeRTOS/src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
  81:FreeRTOS/src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 106              		.loc 1 81 35 is_stmt 1 view .LVU24
  82:FreeRTOS/src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 107              		.loc 1 82 47 view .LVU25
  83:FreeRTOS/src/list.c **** 
  84:FreeRTOS/src/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  85:FreeRTOS/src/list.c **** 	makes the new list item the last item to be removed by a call to
  86:FreeRTOS/src/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
  87:FreeRTOS/src/list.c **** 	pxNewListItem->pxNext = pxIndex;
 108              		.loc 1 87 2 view .LVU26
 109              		.loc 1 87 24 is_stmt 0 view .LVU27
 110 0002 4B60     		str	r3, [r1, #4]
  88:FreeRTOS/src/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 111              		.loc 1 88 2 is_stmt 1 view .LVU28
 112              		.loc 1 88 37 is_stmt 0 view .LVU29
 113 0004 9A68     		ldr	r2, [r3, #8]
 114              		.loc 1 88 28 view .LVU30
 115 0006 8A60     		str	r2, [r1, #8]
  89:FreeRTOS/src/list.c **** 
  90:FreeRTOS/src/list.c **** 	/* Only used during decision coverage testing. */
  91:FreeRTOS/src/list.c **** 	mtCOVERAGE_TEST_DELAY();
 116              		.loc 1 91 25 is_stmt 1 view .LVU31
  92:FreeRTOS/src/list.c **** 
  93:FreeRTOS/src/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 117              		.loc 1 93 2 view .LVU32
 118              		.loc 1 93 30 is_stmt 0 view .LVU33
 119 0008 5160     		str	r1, [r2, #4]
  94:FreeRTOS/src/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 120              		.loc 1 94 2 is_stmt 1 view .LVU34
 121              		.loc 1 94 22 is_stmt 0 view .LVU35
 122 000a 9960     		str	r1, [r3, #8]
  95:FreeRTOS/src/list.c **** 
  96:FreeRTOS/src/list.c **** 	/* Remember which list the item is in. */
  97:FreeRTOS/src/list.c **** 	pxNewListItem->pxContainer = pxList;
 123              		.loc 1 97 2 is_stmt 1 view .LVU36
 124              		.loc 1 97 29 is_stmt 0 view .LVU37
 125 000c 0861     		str	r0, [r1, #16]
  98:FreeRTOS/src/list.c **** 
  99:FreeRTOS/src/list.c **** 	( pxList->uxNumberOfItems )++;
 126              		.loc 1 99 2 is_stmt 1 view .LVU38
 127              		.loc 1 99 10 is_stmt 0 view .LVU39
 128 000e 0368     		ldr	r3, [r0]
 129              	.LVL4:
 130              		.loc 1 99 29 view .LVU40
 131 0010 0133     		adds	r3, r3, #1
 132 0012 0360     		str	r3, [r0]
 100:FreeRTOS/src/list.c **** }
 133              		.loc 1 100 1 view .LVU41
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 5


 134 0014 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE6:
 138              		.section	.text.vListInsert,"ax",%progbits
 139              		.align	1
 140              		.global	vListInsert
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	vListInsert:
 147              	.LVL5:
 148              	.LFB7:
 101:FreeRTOS/src/list.c **** /*-----------------------------------------------------------*/
 102:FreeRTOS/src/list.c **** 
 103:FreeRTOS/src/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 104:FreeRTOS/src/list.c **** {
 149              		.loc 1 104 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              		.loc 1 104 1 is_stmt 0 view .LVU43
 155 0000 30B4     		push	{r4, r5}
 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 5, -4
 105:FreeRTOS/src/list.c **** ListItem_t *pxIterator;
 160              		.loc 1 105 1 is_stmt 1 view .LVU44
 106:FreeRTOS/src/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 161              		.loc 1 106 1 view .LVU45
 162              		.loc 1 106 18 is_stmt 0 view .LVU46
 163 0002 0D68     		ldr	r5, [r1]
 164              	.LVL6:
 107:FreeRTOS/src/list.c **** 
 108:FreeRTOS/src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 109:FreeRTOS/src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 110:FreeRTOS/src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 111:FreeRTOS/src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 165              		.loc 1 111 35 is_stmt 1 view .LVU47
 112:FreeRTOS/src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 166              		.loc 1 112 47 view .LVU48
 113:FreeRTOS/src/list.c **** 
 114:FreeRTOS/src/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 115:FreeRTOS/src/list.c **** 
 116:FreeRTOS/src/list.c **** 	If the list already contains a list item with the same item value then the
 117:FreeRTOS/src/list.c **** 	new list item should be placed after it.  This ensures that TCBs which are
 118:FreeRTOS/src/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 119:FreeRTOS/src/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 120:FreeRTOS/src/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 121:FreeRTOS/src/list.c **** 	first, and the algorithm slightly modified if necessary. */
 122:FreeRTOS/src/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 167              		.loc 1 122 2 view .LVU49
 168              		.loc 1 122 4 is_stmt 0 view .LVU50
 169 0004 B5F1FF3F 		cmp	r5, #-1
 170 0008 02D0     		beq	.L10
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 6


 123:FreeRTOS/src/list.c **** 	{
 124:FreeRTOS/src/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 125:FreeRTOS/src/list.c **** 	}
 126:FreeRTOS/src/list.c **** 	else
 127:FreeRTOS/src/list.c **** 	{
 128:FreeRTOS/src/list.c **** 		/* *** NOTE ***********************************************************
 129:FreeRTOS/src/list.c **** 		If you find your application is crashing here then likely causes are
 130:FreeRTOS/src/list.c **** 		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
 131:FreeRTOS/src/list.c **** 		more tips, and ensure configASSERT() is defined!
 132:FreeRTOS/src/list.c **** 		https://www.freertos.org/a00110.html#configASSERT
 133:FreeRTOS/src/list.c **** 
 134:FreeRTOS/src/list.c **** 			1) Stack overflow -
 135:FreeRTOS/src/list.c **** 			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
 136:FreeRTOS/src/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 137:FreeRTOS/src/list.c **** 			   parts where numerically high priority values denote low actual
 138:FreeRTOS/src/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 139:FreeRTOS/src/list.c **** 			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 140:FreeRTOS/src/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 141:FreeRTOS/src/list.c **** 			   https://www.freertos.org/a00110.html
 142:FreeRTOS/src/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/src/list.c **** 			   the scheduler is suspended, or calling an API function that does
 144:FreeRTOS/src/list.c **** 			   not end in "FromISR" from an interrupt.
 145:FreeRTOS/src/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 146:FreeRTOS/src/list.c **** 			   before the scheduler has been started (are interrupts firing
 147:FreeRTOS/src/list.c **** 			   before vTaskStartScheduler() has been called?).
 148:FreeRTOS/src/list.c **** 		**********************************************************************/
 149:FreeRTOS/src/list.c **** 
 150:FreeRTOS/src/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 171              		.loc 1 150 3 is_stmt 1 view .LVU51
 172              		.loc 1 150 19 is_stmt 0 view .LVU52
 173 000a 00F10802 		add	r2, r0, #8
 174              	.LVL7:
 175              		.loc 1 150 3 view .LVU53
 176 000e 02E0     		b	.L7
 177              	.LVL8:
 178              	.L10:
 124:FreeRTOS/src/list.c **** 	}
 179              		.loc 1 124 3 is_stmt 1 view .LVU54
 124:FreeRTOS/src/list.c **** 	}
 180              		.loc 1 124 14 is_stmt 0 view .LVU55
 181 0010 0269     		ldr	r2, [r0, #16]
 182              	.LVL9:
 124:FreeRTOS/src/list.c **** 	}
 183              		.loc 1 124 14 view .LVU56
 184 0012 04E0     		b	.L6
 185              	.L8:
 186              		.loc 1 150 125 view .LVU57
 187 0014 1A46     		mov	r2, r3
 188              	.LVL10:
 189              	.L7:
 190              		.loc 1 150 71 discriminator 1 view .LVU58
 191 0016 5368     		ldr	r3, [r2, #4]
 192              		.loc 1 150 79 discriminator 1 view .LVU59
 193 0018 1C68     		ldr	r4, [r3]
 194              		.loc 1 150 3 discriminator 1 view .LVU60
 195 001a AC42     		cmp	r4, r5
 196 001c FAD9     		bls	.L8
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 7


 197              	.L6:
 151:FreeRTOS/src/list.c **** 		{
 152:FreeRTOS/src/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 153:FreeRTOS/src/list.c **** 			insertion position. */
 154:FreeRTOS/src/list.c **** 		}
 155:FreeRTOS/src/list.c **** 	}
 156:FreeRTOS/src/list.c **** 
 157:FreeRTOS/src/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 198              		.loc 1 157 2 is_stmt 1 view .LVU61
 199              		.loc 1 157 36 is_stmt 0 view .LVU62
 200 001e 5368     		ldr	r3, [r2, #4]
 201              		.loc 1 157 24 view .LVU63
 202 0020 4B60     		str	r3, [r1, #4]
 158:FreeRTOS/src/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 203              		.loc 1 158 2 is_stmt 1 view .LVU64
 204              		.loc 1 158 36 is_stmt 0 view .LVU65
 205 0022 9960     		str	r1, [r3, #8]
 159:FreeRTOS/src/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 206              		.loc 1 159 2 is_stmt 1 view .LVU66
 207              		.loc 1 159 28 is_stmt 0 view .LVU67
 208 0024 8A60     		str	r2, [r1, #8]
 160:FreeRTOS/src/list.c **** 	pxIterator->pxNext = pxNewListItem;
 209              		.loc 1 160 2 is_stmt 1 view .LVU68
 210              		.loc 1 160 21 is_stmt 0 view .LVU69
 211 0026 5160     		str	r1, [r2, #4]
 161:FreeRTOS/src/list.c **** 
 162:FreeRTOS/src/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/src/list.c **** 	item later. */
 164:FreeRTOS/src/list.c **** 	pxNewListItem->pxContainer = pxList;
 212              		.loc 1 164 2 is_stmt 1 view .LVU70
 213              		.loc 1 164 29 is_stmt 0 view .LVU71
 214 0028 0861     		str	r0, [r1, #16]
 165:FreeRTOS/src/list.c **** 
 166:FreeRTOS/src/list.c **** 	( pxList->uxNumberOfItems )++;
 215              		.loc 1 166 2 is_stmt 1 view .LVU72
 216              		.loc 1 166 10 is_stmt 0 view .LVU73
 217 002a 0368     		ldr	r3, [r0]
 218              		.loc 1 166 29 view .LVU74
 219 002c 0133     		adds	r3, r3, #1
 220 002e 0360     		str	r3, [r0]
 167:FreeRTOS/src/list.c **** }
 221              		.loc 1 167 1 view .LVU75
 222 0030 30BC     		pop	{r4, r5}
 223              	.LCFI1:
 224              		.cfi_restore 5
 225              		.cfi_restore 4
 226              		.cfi_def_cfa_offset 0
 227              	.LVL11:
 228              		.loc 1 167 1 view .LVU76
 229 0032 7047     		bx	lr
 230              		.cfi_endproc
 231              	.LFE7:
 233              		.section	.text.uxListRemove,"ax",%progbits
 234              		.align	1
 235              		.global	uxListRemove
 236              		.syntax unified
 237              		.thumb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 8


 238              		.thumb_func
 239              		.fpu softvfp
 241              	uxListRemove:
 242              	.LVL12:
 243              	.LFB8:
 168:FreeRTOS/src/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/src/list.c **** 
 170:FreeRTOS/src/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 171:FreeRTOS/src/list.c **** {
 244              		.loc 1 171 1 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 172:FreeRTOS/src/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 173:FreeRTOS/src/list.c **** item. */
 174:FreeRTOS/src/list.c **** List_t * const pxList = pxItemToRemove->pxContainer;
 249              		.loc 1 174 1 view .LVU78
 250              		.loc 1 174 16 is_stmt 0 view .LVU79
 251 0000 0369     		ldr	r3, [r0, #16]
 252              	.LVL13:
 175:FreeRTOS/src/list.c **** 
 176:FreeRTOS/src/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 253              		.loc 1 176 2 is_stmt 1 view .LVU80
 254              		.loc 1 176 16 is_stmt 0 view .LVU81
 255 0002 4168     		ldr	r1, [r0, #4]
 256              		.loc 1 176 53 view .LVU82
 257 0004 8268     		ldr	r2, [r0, #8]
 258              		.loc 1 176 37 view .LVU83
 259 0006 8A60     		str	r2, [r1, #8]
 177:FreeRTOS/src/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 260              		.loc 1 177 2 is_stmt 1 view .LVU84
 261              		.loc 1 177 53 is_stmt 0 view .LVU85
 262 0008 4168     		ldr	r1, [r0, #4]
 263              		.loc 1 177 37 view .LVU86
 264 000a 5160     		str	r1, [r2, #4]
 178:FreeRTOS/src/list.c **** 
 179:FreeRTOS/src/list.c **** 	/* Only used during decision coverage testing. */
 180:FreeRTOS/src/list.c **** 	mtCOVERAGE_TEST_DELAY();
 265              		.loc 1 180 25 is_stmt 1 view .LVU87
 181:FreeRTOS/src/list.c **** 
 182:FreeRTOS/src/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 183:FreeRTOS/src/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 266              		.loc 1 183 2 view .LVU88
 267              		.loc 1 183 12 is_stmt 0 view .LVU89
 268 000c 5A68     		ldr	r2, [r3, #4]
 269              		.loc 1 183 4 view .LVU90
 270 000e 8242     		cmp	r2, r0
 271 0010 06D0     		beq	.L13
 272              	.L12:
 184:FreeRTOS/src/list.c **** 	{
 185:FreeRTOS/src/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 186:FreeRTOS/src/list.c **** 	}
 187:FreeRTOS/src/list.c **** 	else
 188:FreeRTOS/src/list.c **** 	{
 189:FreeRTOS/src/list.c **** 		mtCOVERAGE_TEST_MARKER();
 273              		.loc 1 189 27 is_stmt 1 view .LVU91
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 9


 190:FreeRTOS/src/list.c **** 	}
 191:FreeRTOS/src/list.c **** 
 192:FreeRTOS/src/list.c **** 	pxItemToRemove->pxContainer = NULL;
 274              		.loc 1 192 2 view .LVU92
 275              		.loc 1 192 30 is_stmt 0 view .LVU93
 276 0012 0022     		movs	r2, #0
 277 0014 0261     		str	r2, [r0, #16]
 193:FreeRTOS/src/list.c **** 	( pxList->uxNumberOfItems )--;
 278              		.loc 1 193 2 is_stmt 1 view .LVU94
 279              		.loc 1 193 10 is_stmt 0 view .LVU95
 280 0016 1A68     		ldr	r2, [r3]
 281              		.loc 1 193 29 view .LVU96
 282 0018 013A     		subs	r2, r2, #1
 283 001a 1A60     		str	r2, [r3]
 194:FreeRTOS/src/list.c **** 
 195:FreeRTOS/src/list.c **** 	return pxList->uxNumberOfItems;
 284              		.loc 1 195 2 is_stmt 1 view .LVU97
 285              		.loc 1 195 15 is_stmt 0 view .LVU98
 286 001c 1868     		ldr	r0, [r3]
 287              	.LVL14:
 196:FreeRTOS/src/list.c **** }
 288              		.loc 1 196 1 view .LVU99
 289 001e 7047     		bx	lr
 290              	.LVL15:
 291              	.L13:
 185:FreeRTOS/src/list.c **** 	}
 292              		.loc 1 185 3 is_stmt 1 view .LVU100
 185:FreeRTOS/src/list.c **** 	}
 293              		.loc 1 185 35 is_stmt 0 view .LVU101
 294 0020 8268     		ldr	r2, [r0, #8]
 185:FreeRTOS/src/list.c **** 	}
 295              		.loc 1 185 19 view .LVU102
 296 0022 5A60     		str	r2, [r3, #4]
 297 0024 F5E7     		b	.L12
 298              		.cfi_endproc
 299              	.LFE8:
 301              		.text
 302              	.Letext0:
 303              		.file 2 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 304              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 305              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 306              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 307              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 308              		.file 7 "FreeRTOS/inc/stdint.h"
 309              		.file 8 "FreeRTOS/inc/portmacro.h"
 310              		.file 9 "FreeRTOS/inc/list.h"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:16     .text.vListInitialise:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:24     .text.vListInitialise:0000000000000000 vListInitialise
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:60     .text.vListInitialiseItem:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:67     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:87     .text.vListInsertEnd:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:94     .text.vListInsertEnd:0000000000000000 vListInsertEnd
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:139    .text.vListInsert:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:146    .text.vListInsert:0000000000000000 vListInsert
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:234    .text.uxListRemove:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\ccp9R4ji.s:241    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
