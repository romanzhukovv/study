ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvGetDisinheritPriorityAfterTimeout:
  24              	.LVL0:
  25              	.LFB87:
  26              		.file 1 "FreeRTOS/src/queue.c"
   1:FreeRTOS/src/queue.c **** /*
   2:FreeRTOS/src/queue.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/src/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/src/queue.c ****  *
   5:FreeRTOS/src/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/src/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/src/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/src/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/src/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/src/queue.c ****  * subject to the following conditions:
  11:FreeRTOS/src/queue.c ****  *
  12:FreeRTOS/src/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/src/queue.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/src/queue.c ****  *
  15:FreeRTOS/src/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/src/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/src/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/src/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/src/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/src/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/src/queue.c ****  *
  22:FreeRTOS/src/queue.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/src/queue.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/src/queue.c ****  *
  25:FreeRTOS/src/queue.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/src/queue.c ****  */
  27:FreeRTOS/src/queue.c **** 
  28:FreeRTOS/src/queue.c **** #include <stdlib.h>
  29:FreeRTOS/src/queue.c **** #include <string.h>
  30:FreeRTOS/src/queue.c **** 
  31:FreeRTOS/src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:FreeRTOS/src/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 2


  33:FreeRTOS/src/queue.c **** task.h is included from an application file. */
  34:FreeRTOS/src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:FreeRTOS/src/queue.c **** 
  36:FreeRTOS/src/queue.c **** #include "FreeRTOS.h"
  37:FreeRTOS/src/queue.c **** #include "task.h"
  38:FreeRTOS/src/queue.c **** #include "queue.h"
  39:FreeRTOS/src/queue.c **** 
  40:FreeRTOS/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:FreeRTOS/src/queue.c **** 	#include "croutine.h"
  42:FreeRTOS/src/queue.c **** #endif
  43:FreeRTOS/src/queue.c **** 
  44:FreeRTOS/src/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:FreeRTOS/src/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:FreeRTOS/src/queue.c **** for the header files above, but not in this file, in order to generate the
  47:FreeRTOS/src/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:FreeRTOS/src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:FreeRTOS/src/queue.c **** 
  50:FreeRTOS/src/queue.c **** 
  51:FreeRTOS/src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:FreeRTOS/src/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:FreeRTOS/src/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:FreeRTOS/src/queue.c **** 
  55:FreeRTOS/src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:FreeRTOS/src/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:FreeRTOS/src/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:FreeRTOS/src/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:FreeRTOS/src/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:FreeRTOS/src/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:FreeRTOS/src/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:FreeRTOS/src/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:FreeRTOS/src/queue.c **** being used for. */
  64:FreeRTOS/src/queue.c **** #define uxQueueType						pcHead
  65:FreeRTOS/src/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:FreeRTOS/src/queue.c **** 
  67:FreeRTOS/src/queue.c **** typedef struct QueuePointers
  68:FreeRTOS/src/queue.c **** {
  69:FreeRTOS/src/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:FreeRTOS/src/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:FreeRTOS/src/queue.c **** } QueuePointers_t;
  72:FreeRTOS/src/queue.c **** 
  73:FreeRTOS/src/queue.c **** typedef struct SemaphoreData
  74:FreeRTOS/src/queue.c **** {
  75:FreeRTOS/src/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:FreeRTOS/src/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:FreeRTOS/src/queue.c **** } SemaphoreData_t;
  78:FreeRTOS/src/queue.c **** 
  79:FreeRTOS/src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:FreeRTOS/src/queue.c **** zero. */
  81:FreeRTOS/src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:FreeRTOS/src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:FreeRTOS/src/queue.c **** 
  84:FreeRTOS/src/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:FreeRTOS/src/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:FreeRTOS/src/queue.c **** 	performed just because a higher priority task has been woken. */
  87:FreeRTOS/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:FreeRTOS/src/queue.c **** #else
  89:FreeRTOS/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 3


  90:FreeRTOS/src/queue.c **** #endif
  91:FreeRTOS/src/queue.c **** 
  92:FreeRTOS/src/queue.c **** /*
  93:FreeRTOS/src/queue.c ****  * Definition of the queue used by the scheduler.
  94:FreeRTOS/src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:FreeRTOS/src/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:FreeRTOS/src/queue.c ****  */
  97:FreeRTOS/src/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:FreeRTOS/src/queue.c **** {
  99:FreeRTOS/src/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:FreeRTOS/src/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:FreeRTOS/src/queue.c **** 
 102:FreeRTOS/src/queue.c **** 	union
 103:FreeRTOS/src/queue.c **** 	{
 104:FreeRTOS/src/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:FreeRTOS/src/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:FreeRTOS/src/queue.c **** 	} u;
 107:FreeRTOS/src/queue.c **** 
 108:FreeRTOS/src/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:FreeRTOS/src/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:FreeRTOS/src/queue.c **** 
 111:FreeRTOS/src/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:FreeRTOS/src/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:FreeRTOS/src/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:FreeRTOS/src/queue.c **** 
 115:FreeRTOS/src/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:FreeRTOS/src/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:FreeRTOS/src/queue.c **** 
 118:FreeRTOS/src/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:FreeRTOS/src/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:FreeRTOS/src/queue.c **** 	#endif
 121:FreeRTOS/src/queue.c **** 
 122:FreeRTOS/src/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:FreeRTOS/src/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:FreeRTOS/src/queue.c **** 	#endif
 125:FreeRTOS/src/queue.c **** 
 126:FreeRTOS/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:FreeRTOS/src/queue.c **** 		UBaseType_t uxQueueNumber;
 128:FreeRTOS/src/queue.c **** 		uint8_t ucQueueType;
 129:FreeRTOS/src/queue.c **** 	#endif
 130:FreeRTOS/src/queue.c **** 
 131:FreeRTOS/src/queue.c **** } xQUEUE;
 132:FreeRTOS/src/queue.c **** 
 133:FreeRTOS/src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:FreeRTOS/src/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:FreeRTOS/src/queue.c **** typedef xQUEUE Queue_t;
 136:FreeRTOS/src/queue.c **** 
 137:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 138:FreeRTOS/src/queue.c **** 
 139:FreeRTOS/src/queue.c **** /*
 140:FreeRTOS/src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:FreeRTOS/src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:FreeRTOS/src/queue.c ****  */
 143:FreeRTOS/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:FreeRTOS/src/queue.c **** 
 145:FreeRTOS/src/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:FreeRTOS/src/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 4


 147:FreeRTOS/src/queue.c **** 	more user friendly. */
 148:FreeRTOS/src/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:FreeRTOS/src/queue.c **** 	{
 150:FreeRTOS/src/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:FreeRTOS/src/queue.c **** 		QueueHandle_t xHandle;
 152:FreeRTOS/src/queue.c **** 	} xQueueRegistryItem;
 153:FreeRTOS/src/queue.c **** 
 154:FreeRTOS/src/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:FreeRTOS/src/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:FreeRTOS/src/queue.c **** 	debuggers. */
 157:FreeRTOS/src/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:FreeRTOS/src/queue.c **** 
 159:FreeRTOS/src/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:FreeRTOS/src/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:FreeRTOS/src/queue.c **** 	array position being vacant. */
 162:FreeRTOS/src/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:FreeRTOS/src/queue.c **** 
 164:FreeRTOS/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:FreeRTOS/src/queue.c **** 
 166:FreeRTOS/src/queue.c **** /*
 167:FreeRTOS/src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:FreeRTOS/src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:FreeRTOS/src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:FreeRTOS/src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:FreeRTOS/src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:FreeRTOS/src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:FreeRTOS/src/queue.c ****  */
 174:FreeRTOS/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:FreeRTOS/src/queue.c **** 
 176:FreeRTOS/src/queue.c **** /*
 177:FreeRTOS/src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:FreeRTOS/src/queue.c ****  *
 179:FreeRTOS/src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:FreeRTOS/src/queue.c ****  */
 181:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:FreeRTOS/src/queue.c **** 
 183:FreeRTOS/src/queue.c **** /*
 184:FreeRTOS/src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:FreeRTOS/src/queue.c ****  *
 186:FreeRTOS/src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:FreeRTOS/src/queue.c ****  */
 188:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:FreeRTOS/src/queue.c **** 
 190:FreeRTOS/src/queue.c **** /*
 191:FreeRTOS/src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:FreeRTOS/src/queue.c ****  * back of the queue.
 193:FreeRTOS/src/queue.c ****  */
 194:FreeRTOS/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:FreeRTOS/src/queue.c **** 
 196:FreeRTOS/src/queue.c **** /*
 197:FreeRTOS/src/queue.c ****  * Copies an item out of a queue.
 198:FreeRTOS/src/queue.c ****  */
 199:FreeRTOS/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:FreeRTOS/src/queue.c **** 
 201:FreeRTOS/src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:FreeRTOS/src/queue.c **** 	/*
 203:FreeRTOS/src/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 5


 204:FreeRTOS/src/queue.c **** 	 * the queue set that the queue contains data.
 205:FreeRTOS/src/queue.c **** 	 */
 206:FreeRTOS/src/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 207:FreeRTOS/src/queue.c **** #endif
 208:FreeRTOS/src/queue.c **** 
 209:FreeRTOS/src/queue.c **** /*
 210:FreeRTOS/src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:FreeRTOS/src/queue.c ****  * dynamically to fill in the structure's members.
 212:FreeRTOS/src/queue.c ****  */
 213:FreeRTOS/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:FreeRTOS/src/queue.c **** 
 215:FreeRTOS/src/queue.c **** /*
 216:FreeRTOS/src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:FreeRTOS/src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:FreeRTOS/src/queue.c ****  * as a mutex.
 219:FreeRTOS/src/queue.c ****  */
 220:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:FreeRTOS/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:FreeRTOS/src/queue.c **** #endif
 223:FreeRTOS/src/queue.c **** 
 224:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:FreeRTOS/src/queue.c **** 	/*
 226:FreeRTOS/src/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:FreeRTOS/src/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:FreeRTOS/src/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:FreeRTOS/src/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:FreeRTOS/src/queue.c **** 	 * that priority.
 231:FreeRTOS/src/queue.c **** 	 */
 232:FreeRTOS/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:FreeRTOS/src/queue.c **** #endif
 234:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 235:FreeRTOS/src/queue.c **** 
 236:FreeRTOS/src/queue.c **** /*
 237:FreeRTOS/src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:FreeRTOS/src/queue.c ****  * accessing the queue event lists.
 239:FreeRTOS/src/queue.c ****  */
 240:FreeRTOS/src/queue.c **** #define prvLockQueue( pxQueue )								\
 241:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();									\
 242:FreeRTOS/src/queue.c **** 	{														\
 243:FreeRTOS/src/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:FreeRTOS/src/queue.c **** 		{													\
 245:FreeRTOS/src/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:FreeRTOS/src/queue.c **** 		}													\
 247:FreeRTOS/src/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:FreeRTOS/src/queue.c **** 		{													\
 249:FreeRTOS/src/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:FreeRTOS/src/queue.c **** 		}													\
 251:FreeRTOS/src/queue.c **** 	}														\
 252:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL()
 253:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 254:FreeRTOS/src/queue.c **** 
 255:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:FreeRTOS/src/queue.c **** {
 257:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 258:FreeRTOS/src/queue.c **** 
 259:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 260:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 6


 261:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
 262:FreeRTOS/src/queue.c **** 	{
 263:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:FreeRTOS/src/queue.c **** 
 270:FreeRTOS/src/queue.c **** 		if( xNewQueue == pdFALSE )
 271:FreeRTOS/src/queue.c **** 		{
 272:FreeRTOS/src/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:FreeRTOS/src/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:FreeRTOS/src/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:FreeRTOS/src/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:FreeRTOS/src/queue.c **** 			it will be possible to write to it. */
 277:FreeRTOS/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:FreeRTOS/src/queue.c **** 			{
 279:FreeRTOS/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:FreeRTOS/src/queue.c **** 				{
 281:FreeRTOS/src/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:FreeRTOS/src/queue.c **** 				}
 283:FreeRTOS/src/queue.c **** 				else
 284:FreeRTOS/src/queue.c **** 				{
 285:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:FreeRTOS/src/queue.c **** 				}
 287:FreeRTOS/src/queue.c **** 			}
 288:FreeRTOS/src/queue.c **** 			else
 289:FreeRTOS/src/queue.c **** 			{
 290:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:FreeRTOS/src/queue.c **** 			}
 292:FreeRTOS/src/queue.c **** 		}
 293:FreeRTOS/src/queue.c **** 		else
 294:FreeRTOS/src/queue.c **** 		{
 295:FreeRTOS/src/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:FreeRTOS/src/queue.c **** 		}
 299:FreeRTOS/src/queue.c **** 	}
 300:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
 301:FreeRTOS/src/queue.c **** 
 302:FreeRTOS/src/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:FreeRTOS/src/queue.c **** 	versions. */
 304:FreeRTOS/src/queue.c **** 	return pdPASS;
 305:FreeRTOS/src/queue.c **** }
 306:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 307:FreeRTOS/src/queue.c **** 
 308:FreeRTOS/src/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:FreeRTOS/src/queue.c **** 
 310:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:FreeRTOS/src/queue.c **** 	{
 312:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 313:FreeRTOS/src/queue.c **** 
 314:FreeRTOS/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:FreeRTOS/src/queue.c **** 
 316:FreeRTOS/src/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:FreeRTOS/src/queue.c **** 		supplied. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 7


 318:FreeRTOS/src/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:FreeRTOS/src/queue.c **** 
 320:FreeRTOS/src/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:FreeRTOS/src/queue.c **** 		should not be provided if the item size is 0. */
 322:FreeRTOS/src/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:FreeRTOS/src/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:FreeRTOS/src/queue.c **** 
 325:FreeRTOS/src/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:FreeRTOS/src/queue.c **** 		{
 327:FreeRTOS/src/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:FreeRTOS/src/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:FreeRTOS/src/queue.c **** 			the real queue and semaphore structures. */
 330:FreeRTOS/src/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:FreeRTOS/src/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:FreeRTOS/src/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:FreeRTOS/src/queue.c **** 		}
 334:FreeRTOS/src/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:FreeRTOS/src/queue.c **** 
 336:FreeRTOS/src/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:FreeRTOS/src/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:FreeRTOS/src/queue.c **** 		but is already set. */
 339:FreeRTOS/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:FreeRTOS/src/queue.c **** 
 341:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 342:FreeRTOS/src/queue.c **** 		{
 343:FreeRTOS/src/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:FreeRTOS/src/queue.c **** 			{
 345:FreeRTOS/src/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:FreeRTOS/src/queue.c **** 				note this queue was allocated statically in case the queue is
 347:FreeRTOS/src/queue.c **** 				later deleted. */
 348:FreeRTOS/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:FreeRTOS/src/queue.c **** 			}
 350:FreeRTOS/src/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:FreeRTOS/src/queue.c **** 
 352:FreeRTOS/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:FreeRTOS/src/queue.c **** 		}
 354:FreeRTOS/src/queue.c **** 		else
 355:FreeRTOS/src/queue.c **** 		{
 356:FreeRTOS/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:FreeRTOS/src/queue.c **** 		}
 359:FreeRTOS/src/queue.c **** 
 360:FreeRTOS/src/queue.c **** 		return pxNewQueue;
 361:FreeRTOS/src/queue.c **** 	}
 362:FreeRTOS/src/queue.c **** 
 363:FreeRTOS/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 365:FreeRTOS/src/queue.c **** 
 366:FreeRTOS/src/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:FreeRTOS/src/queue.c **** 
 368:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:FreeRTOS/src/queue.c **** 	{
 370:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 371:FreeRTOS/src/queue.c **** 	size_t xQueueSizeInBytes;
 372:FreeRTOS/src/queue.c **** 	uint8_t *pucQueueStorage;
 373:FreeRTOS/src/queue.c **** 
 374:FreeRTOS/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 8


 375:FreeRTOS/src/queue.c **** 
 376:FreeRTOS/src/queue.c **** 		/* Allocate enough space to hold the maximum number of items that
 377:FreeRTOS/src/queue.c **** 		can be in the queue at any time.  It is valid for uxItemSize to be
 378:FreeRTOS/src/queue.c **** 		zero in the case the queue is used as a semaphore. */
 379:FreeRTOS/src/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as th
 380:FreeRTOS/src/queue.c **** 
 381:FreeRTOS/src/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 382:FreeRTOS/src/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 383:FreeRTOS/src/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 384:FreeRTOS/src/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 385:FreeRTOS/src/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 386:FreeRTOS/src/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 387:FreeRTOS/src/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 388:FreeRTOS/src/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 389:FreeRTOS/src/queue.c **** 		two bytes). */
 390:FreeRTOS/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 391:FreeRTOS/src/queue.c **** 
 392:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 393:FreeRTOS/src/queue.c **** 		{
 394:FreeRTOS/src/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 395:FreeRTOS/src/queue.c **** 			storage area. */
 396:FreeRTOS/src/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 397:FreeRTOS/src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 398:FreeRTOS/src/queue.c **** 
 399:FreeRTOS/src/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 400:FreeRTOS/src/queue.c **** 			{
 401:FreeRTOS/src/queue.c **** 				/* Queues can be created either statically or dynamically, so
 402:FreeRTOS/src/queue.c **** 				note this task was created dynamically in case it is later
 403:FreeRTOS/src/queue.c **** 				deleted. */
 404:FreeRTOS/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 405:FreeRTOS/src/queue.c **** 			}
 406:FreeRTOS/src/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 407:FreeRTOS/src/queue.c **** 
 408:FreeRTOS/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 409:FreeRTOS/src/queue.c **** 		}
 410:FreeRTOS/src/queue.c **** 		else
 411:FreeRTOS/src/queue.c **** 		{
 412:FreeRTOS/src/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 413:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 414:FreeRTOS/src/queue.c **** 		}
 415:FreeRTOS/src/queue.c **** 
 416:FreeRTOS/src/queue.c **** 		return pxNewQueue;
 417:FreeRTOS/src/queue.c **** 	}
 418:FreeRTOS/src/queue.c **** 
 419:FreeRTOS/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 420:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 421:FreeRTOS/src/queue.c **** 
 422:FreeRTOS/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 423:FreeRTOS/src/queue.c **** {
 424:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 425:FreeRTOS/src/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 426:FreeRTOS/src/queue.c **** 	( void ) ucQueueType;
 427:FreeRTOS/src/queue.c **** 
 428:FreeRTOS/src/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 429:FreeRTOS/src/queue.c **** 	{
 430:FreeRTOS/src/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 431:FreeRTOS/src/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 9


 432:FreeRTOS/src/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 433:FreeRTOS/src/queue.c **** 		value that is known to be within the memory map. */
 434:FreeRTOS/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 435:FreeRTOS/src/queue.c **** 	}
 436:FreeRTOS/src/queue.c **** 	else
 437:FreeRTOS/src/queue.c **** 	{
 438:FreeRTOS/src/queue.c **** 		/* Set the head to the start of the queue storage area. */
 439:FreeRTOS/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 440:FreeRTOS/src/queue.c **** 	}
 441:FreeRTOS/src/queue.c **** 
 442:FreeRTOS/src/queue.c **** 	/* Initialise the queue members as described where the queue type is
 443:FreeRTOS/src/queue.c **** 	defined. */
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 445:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 446:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 447:FreeRTOS/src/queue.c **** 
 448:FreeRTOS/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 449:FreeRTOS/src/queue.c **** 	{
 450:FreeRTOS/src/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 451:FreeRTOS/src/queue.c **** 	}
 452:FreeRTOS/src/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 453:FreeRTOS/src/queue.c **** 
 454:FreeRTOS/src/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 455:FreeRTOS/src/queue.c **** 	{
 456:FreeRTOS/src/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 457:FreeRTOS/src/queue.c **** 	}
 458:FreeRTOS/src/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 459:FreeRTOS/src/queue.c **** 
 460:FreeRTOS/src/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 461:FreeRTOS/src/queue.c **** }
 462:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 463:FreeRTOS/src/queue.c **** 
 464:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 465:FreeRTOS/src/queue.c **** 
 466:FreeRTOS/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 467:FreeRTOS/src/queue.c **** 	{
 468:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 469:FreeRTOS/src/queue.c **** 		{
 470:FreeRTOS/src/queue.c **** 			/* The queue create function will set all the queue structure members
 471:FreeRTOS/src/queue.c **** 			correctly for a generic queue, but this function is creating a
 472:FreeRTOS/src/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 473:FreeRTOS/src/queue.c **** 			in particular the information required for priority inheritance. */
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 475:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 476:FreeRTOS/src/queue.c **** 
 477:FreeRTOS/src/queue.c **** 			/* In case this is a recursive mutex. */
 478:FreeRTOS/src/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 479:FreeRTOS/src/queue.c **** 
 480:FreeRTOS/src/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 481:FreeRTOS/src/queue.c **** 
 482:FreeRTOS/src/queue.c **** 			/* Start with the semaphore in the expected state. */
 483:FreeRTOS/src/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 484:FreeRTOS/src/queue.c **** 		}
 485:FreeRTOS/src/queue.c **** 		else
 486:FreeRTOS/src/queue.c **** 		{
 487:FreeRTOS/src/queue.c **** 			traceCREATE_MUTEX_FAILED();
 488:FreeRTOS/src/queue.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 10


 489:FreeRTOS/src/queue.c **** 	}
 490:FreeRTOS/src/queue.c **** 
 491:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 492:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 493:FreeRTOS/src/queue.c **** 
 494:FreeRTOS/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 495:FreeRTOS/src/queue.c **** 
 496:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 497:FreeRTOS/src/queue.c **** 	{
 498:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 499:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 500:FreeRTOS/src/queue.c **** 
 501:FreeRTOS/src/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 502:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 503:FreeRTOS/src/queue.c **** 
 504:FreeRTOS/src/queue.c **** 		return xNewQueue;
 505:FreeRTOS/src/queue.c **** 	}
 506:FreeRTOS/src/queue.c **** 
 507:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 508:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 509:FreeRTOS/src/queue.c **** 
 510:FreeRTOS/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 511:FreeRTOS/src/queue.c **** 
 512:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 513:FreeRTOS/src/queue.c **** 	{
 514:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 515:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 516:FreeRTOS/src/queue.c **** 
 517:FreeRTOS/src/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 518:FreeRTOS/src/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 519:FreeRTOS/src/queue.c **** 		( void ) ucQueueType;
 520:FreeRTOS/src/queue.c **** 
 521:FreeRTOS/src/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 522:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 523:FreeRTOS/src/queue.c **** 
 524:FreeRTOS/src/queue.c **** 		return xNewQueue;
 525:FreeRTOS/src/queue.c **** 	}
 526:FreeRTOS/src/queue.c **** 
 527:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
 528:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 529:FreeRTOS/src/queue.c **** 
 530:FreeRTOS/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 531:FreeRTOS/src/queue.c **** 
 532:FreeRTOS/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 533:FreeRTOS/src/queue.c **** 	{
 534:FreeRTOS/src/queue.c **** 	TaskHandle_t pxReturn;
 535:FreeRTOS/src/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 536:FreeRTOS/src/queue.c **** 
 537:FreeRTOS/src/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 538:FreeRTOS/src/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 539:FreeRTOS/src/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 540:FreeRTOS/src/queue.c **** 		identity of the mutex holder, as the holder may change between the
 541:FreeRTOS/src/queue.c **** 		following critical section exiting and the function returning. */
 542:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
 543:FreeRTOS/src/queue.c **** 		{
 544:FreeRTOS/src/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 545:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 11


 546:FreeRTOS/src/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 547:FreeRTOS/src/queue.c **** 			}
 548:FreeRTOS/src/queue.c **** 			else
 549:FreeRTOS/src/queue.c **** 			{
 550:FreeRTOS/src/queue.c **** 				pxReturn = NULL;
 551:FreeRTOS/src/queue.c **** 			}
 552:FreeRTOS/src/queue.c **** 		}
 553:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
 554:FreeRTOS/src/queue.c **** 
 555:FreeRTOS/src/queue.c **** 		return pxReturn;
 556:FreeRTOS/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 557:FreeRTOS/src/queue.c **** 
 558:FreeRTOS/src/queue.c **** #endif
 559:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 560:FreeRTOS/src/queue.c **** 
 561:FreeRTOS/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 562:FreeRTOS/src/queue.c **** 
 563:FreeRTOS/src/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 564:FreeRTOS/src/queue.c **** 	{
 565:FreeRTOS/src/queue.c **** 	TaskHandle_t pxReturn;
 566:FreeRTOS/src/queue.c **** 
 567:FreeRTOS/src/queue.c **** 		configASSERT( xSemaphore );
 568:FreeRTOS/src/queue.c **** 
 569:FreeRTOS/src/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 570:FreeRTOS/src/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 571:FreeRTOS/src/queue.c **** 		not required here. */
 572:FreeRTOS/src/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 573:FreeRTOS/src/queue.c **** 		{
 574:FreeRTOS/src/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 575:FreeRTOS/src/queue.c **** 		}
 576:FreeRTOS/src/queue.c **** 		else
 577:FreeRTOS/src/queue.c **** 		{
 578:FreeRTOS/src/queue.c **** 			pxReturn = NULL;
 579:FreeRTOS/src/queue.c **** 		}
 580:FreeRTOS/src/queue.c **** 
 581:FreeRTOS/src/queue.c **** 		return pxReturn;
 582:FreeRTOS/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 583:FreeRTOS/src/queue.c **** 
 584:FreeRTOS/src/queue.c **** #endif
 585:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 586:FreeRTOS/src/queue.c **** 
 587:FreeRTOS/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 588:FreeRTOS/src/queue.c **** 
 589:FreeRTOS/src/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 590:FreeRTOS/src/queue.c **** 	{
 591:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 592:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 593:FreeRTOS/src/queue.c **** 
 594:FreeRTOS/src/queue.c **** 		configASSERT( pxMutex );
 595:FreeRTOS/src/queue.c **** 
 596:FreeRTOS/src/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 597:FreeRTOS/src/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 598:FreeRTOS/src/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 599:FreeRTOS/src/queue.c **** 		this is the only condition we are interested in it does not matter if
 600:FreeRTOS/src/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 601:FreeRTOS/src/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 602:FreeRTOS/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 12


 603:FreeRTOS/src/queue.c **** 		{
 604:FreeRTOS/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 605:FreeRTOS/src/queue.c **** 
 606:FreeRTOS/src/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 607:FreeRTOS/src/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 608:FreeRTOS/src/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 609:FreeRTOS/src/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 610:FreeRTOS/src/queue.c **** 			uxRecursiveCallCount member. */
 611:FreeRTOS/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 612:FreeRTOS/src/queue.c **** 
 613:FreeRTOS/src/queue.c **** 			/* Has the recursive call count unwound to 0? */
 614:FreeRTOS/src/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 615:FreeRTOS/src/queue.c **** 			{
 616:FreeRTOS/src/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 617:FreeRTOS/src/queue.c **** 				task that might be waiting to access the mutex. */
 618:FreeRTOS/src/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 619:FreeRTOS/src/queue.c **** 			}
 620:FreeRTOS/src/queue.c **** 			else
 621:FreeRTOS/src/queue.c **** 			{
 622:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 623:FreeRTOS/src/queue.c **** 			}
 624:FreeRTOS/src/queue.c **** 
 625:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
 626:FreeRTOS/src/queue.c **** 		}
 627:FreeRTOS/src/queue.c **** 		else
 628:FreeRTOS/src/queue.c **** 		{
 629:FreeRTOS/src/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 630:FreeRTOS/src/queue.c **** 			holder. */
 631:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
 632:FreeRTOS/src/queue.c **** 
 633:FreeRTOS/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 634:FreeRTOS/src/queue.c **** 		}
 635:FreeRTOS/src/queue.c **** 
 636:FreeRTOS/src/queue.c **** 		return xReturn;
 637:FreeRTOS/src/queue.c **** 	}
 638:FreeRTOS/src/queue.c **** 
 639:FreeRTOS/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 640:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 641:FreeRTOS/src/queue.c **** 
 642:FreeRTOS/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 643:FreeRTOS/src/queue.c **** 
 644:FreeRTOS/src/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 645:FreeRTOS/src/queue.c **** 	{
 646:FreeRTOS/src/queue.c **** 	BaseType_t xReturn;
 647:FreeRTOS/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 648:FreeRTOS/src/queue.c **** 
 649:FreeRTOS/src/queue.c **** 		configASSERT( pxMutex );
 650:FreeRTOS/src/queue.c **** 
 651:FreeRTOS/src/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 652:FreeRTOS/src/queue.c **** 		xQueueGiveMutexRecursive(). */
 653:FreeRTOS/src/queue.c **** 
 654:FreeRTOS/src/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 655:FreeRTOS/src/queue.c **** 
 656:FreeRTOS/src/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 657:FreeRTOS/src/queue.c **** 		{
 658:FreeRTOS/src/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 659:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 13


 660:FreeRTOS/src/queue.c **** 		}
 661:FreeRTOS/src/queue.c **** 		else
 662:FreeRTOS/src/queue.c **** 		{
 663:FreeRTOS/src/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 664:FreeRTOS/src/queue.c **** 
 665:FreeRTOS/src/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 666:FreeRTOS/src/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 667:FreeRTOS/src/queue.c **** 			before reaching here. */
 668:FreeRTOS/src/queue.c **** 			if( xReturn != pdFAIL )
 669:FreeRTOS/src/queue.c **** 			{
 670:FreeRTOS/src/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 671:FreeRTOS/src/queue.c **** 			}
 672:FreeRTOS/src/queue.c **** 			else
 673:FreeRTOS/src/queue.c **** 			{
 674:FreeRTOS/src/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 675:FreeRTOS/src/queue.c **** 			}
 676:FreeRTOS/src/queue.c **** 		}
 677:FreeRTOS/src/queue.c **** 
 678:FreeRTOS/src/queue.c **** 		return xReturn;
 679:FreeRTOS/src/queue.c **** 	}
 680:FreeRTOS/src/queue.c **** 
 681:FreeRTOS/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 682:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 683:FreeRTOS/src/queue.c **** 
 684:FreeRTOS/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 685:FreeRTOS/src/queue.c **** 
 686:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 687:FreeRTOS/src/queue.c **** 	{
 688:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
 689:FreeRTOS/src/queue.c **** 
 690:FreeRTOS/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 691:FreeRTOS/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 692:FreeRTOS/src/queue.c **** 
 693:FreeRTOS/src/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 694:FreeRTOS/src/queue.c **** 
 695:FreeRTOS/src/queue.c **** 		if( xHandle != NULL )
 696:FreeRTOS/src/queue.c **** 		{
 697:FreeRTOS/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 698:FreeRTOS/src/queue.c **** 
 699:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 700:FreeRTOS/src/queue.c **** 		}
 701:FreeRTOS/src/queue.c **** 		else
 702:FreeRTOS/src/queue.c **** 		{
 703:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 704:FreeRTOS/src/queue.c **** 		}
 705:FreeRTOS/src/queue.c **** 
 706:FreeRTOS/src/queue.c **** 		return xHandle;
 707:FreeRTOS/src/queue.c **** 	}
 708:FreeRTOS/src/queue.c **** 
 709:FreeRTOS/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 710:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 711:FreeRTOS/src/queue.c **** 
 712:FreeRTOS/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 713:FreeRTOS/src/queue.c **** 
 714:FreeRTOS/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 715:FreeRTOS/src/queue.c **** 	{
 716:FreeRTOS/src/queue.c **** 	QueueHandle_t xHandle;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 14


 717:FreeRTOS/src/queue.c **** 
 718:FreeRTOS/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 719:FreeRTOS/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 720:FreeRTOS/src/queue.c **** 
 721:FreeRTOS/src/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 722:FreeRTOS/src/queue.c **** 
 723:FreeRTOS/src/queue.c **** 		if( xHandle != NULL )
 724:FreeRTOS/src/queue.c **** 		{
 725:FreeRTOS/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 726:FreeRTOS/src/queue.c **** 
 727:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 728:FreeRTOS/src/queue.c **** 		}
 729:FreeRTOS/src/queue.c **** 		else
 730:FreeRTOS/src/queue.c **** 		{
 731:FreeRTOS/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 732:FreeRTOS/src/queue.c **** 		}
 733:FreeRTOS/src/queue.c **** 
 734:FreeRTOS/src/queue.c **** 		return xHandle;
 735:FreeRTOS/src/queue.c **** 	}
 736:FreeRTOS/src/queue.c **** 
 737:FreeRTOS/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 738:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 739:FreeRTOS/src/queue.c **** 
 740:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 741:FreeRTOS/src/queue.c **** {
 742:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 743:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 744:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 745:FreeRTOS/src/queue.c **** 
 746:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 747:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 748:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 749:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 750:FreeRTOS/src/queue.c **** 	{
 751:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 752:FreeRTOS/src/queue.c **** 	}
 753:FreeRTOS/src/queue.c **** 	#endif
 754:FreeRTOS/src/queue.c **** 
 755:FreeRTOS/src/queue.c **** 
 756:FreeRTOS/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 757:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
 758:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
 759:FreeRTOS/src/queue.c **** 	for( ;; )
 760:FreeRTOS/src/queue.c **** 	{
 761:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
 762:FreeRTOS/src/queue.c **** 		{
 763:FreeRTOS/src/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 764:FreeRTOS/src/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 765:FreeRTOS/src/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 766:FreeRTOS/src/queue.c **** 			queue is full. */
 767:FreeRTOS/src/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 768:FreeRTOS/src/queue.c **** 			{
 769:FreeRTOS/src/queue.c **** 				traceQUEUE_SEND( pxQueue );
 770:FreeRTOS/src/queue.c **** 
 771:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 772:FreeRTOS/src/queue.c **** 				{
 773:FreeRTOS/src/queue.c **** 				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 15


 774:FreeRTOS/src/queue.c **** 
 775:FreeRTOS/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 776:FreeRTOS/src/queue.c **** 
 777:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 778:FreeRTOS/src/queue.c **** 					{
 779:FreeRTOS/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 780:FreeRTOS/src/queue.c **** 						{
 781:FreeRTOS/src/queue.c **** 							/* Do not notify the queue set as an existing item
 782:FreeRTOS/src/queue.c **** 							was overwritten in the queue so the number of items
 783:FreeRTOS/src/queue.c **** 							in the queue has not changed. */
 784:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 785:FreeRTOS/src/queue.c **** 						}
 786:FreeRTOS/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 787:FreeRTOS/src/queue.c **** 						{
 788:FreeRTOS/src/queue.c **** 							/* The queue is a member of a queue set, and posting
 789:FreeRTOS/src/queue.c **** 							to the queue set caused a higher priority task to
 790:FreeRTOS/src/queue.c **** 							unblock. A context switch is required. */
 791:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 792:FreeRTOS/src/queue.c **** 						}
 793:FreeRTOS/src/queue.c **** 						else
 794:FreeRTOS/src/queue.c **** 						{
 795:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 796:FreeRTOS/src/queue.c **** 						}
 797:FreeRTOS/src/queue.c **** 					}
 798:FreeRTOS/src/queue.c **** 					else
 799:FreeRTOS/src/queue.c **** 					{
 800:FreeRTOS/src/queue.c **** 						/* If there was a task waiting for data to arrive on the
 801:FreeRTOS/src/queue.c **** 						queue then unblock it now. */
 802:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803:FreeRTOS/src/queue.c **** 						{
 804:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805:FreeRTOS/src/queue.c **** 							{
 806:FreeRTOS/src/queue.c **** 								/* The unblocked task has a priority higher than
 807:FreeRTOS/src/queue.c **** 								our own so yield immediately.  Yes it is ok to
 808:FreeRTOS/src/queue.c **** 								do this from within the critical section - the
 809:FreeRTOS/src/queue.c **** 								kernel takes care of that. */
 810:FreeRTOS/src/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 811:FreeRTOS/src/queue.c **** 							}
 812:FreeRTOS/src/queue.c **** 							else
 813:FreeRTOS/src/queue.c **** 							{
 814:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 815:FreeRTOS/src/queue.c **** 							}
 816:FreeRTOS/src/queue.c **** 						}
 817:FreeRTOS/src/queue.c **** 						else if( xYieldRequired != pdFALSE )
 818:FreeRTOS/src/queue.c **** 						{
 819:FreeRTOS/src/queue.c **** 							/* This path is a special case that will only get
 820:FreeRTOS/src/queue.c **** 							executed if the task was holding multiple mutexes
 821:FreeRTOS/src/queue.c **** 							and the mutexes were given back in an order that is
 822:FreeRTOS/src/queue.c **** 							different to that in which they were taken. */
 823:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 824:FreeRTOS/src/queue.c **** 						}
 825:FreeRTOS/src/queue.c **** 						else
 826:FreeRTOS/src/queue.c **** 						{
 827:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 828:FreeRTOS/src/queue.c **** 						}
 829:FreeRTOS/src/queue.c **** 					}
 830:FreeRTOS/src/queue.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 16


 831:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 832:FreeRTOS/src/queue.c **** 				{
 833:FreeRTOS/src/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 834:FreeRTOS/src/queue.c **** 
 835:FreeRTOS/src/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:FreeRTOS/src/queue.c **** 					queue then unblock it now. */
 837:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 838:FreeRTOS/src/queue.c **** 					{
 839:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 840:FreeRTOS/src/queue.c **** 						{
 841:FreeRTOS/src/queue.c **** 							/* The unblocked task has a priority higher than
 842:FreeRTOS/src/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 843:FreeRTOS/src/queue.c **** 							this from within the critical section - the kernel
 844:FreeRTOS/src/queue.c **** 							takes care of that. */
 845:FreeRTOS/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 846:FreeRTOS/src/queue.c **** 						}
 847:FreeRTOS/src/queue.c **** 						else
 848:FreeRTOS/src/queue.c **** 						{
 849:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 850:FreeRTOS/src/queue.c **** 						}
 851:FreeRTOS/src/queue.c **** 					}
 852:FreeRTOS/src/queue.c **** 					else if( xYieldRequired != pdFALSE )
 853:FreeRTOS/src/queue.c **** 					{
 854:FreeRTOS/src/queue.c **** 						/* This path is a special case that will only get
 855:FreeRTOS/src/queue.c **** 						executed if the task was holding multiple mutexes and
 856:FreeRTOS/src/queue.c **** 						the mutexes were given back in an order that is
 857:FreeRTOS/src/queue.c **** 						different to that in which they were taken. */
 858:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 859:FreeRTOS/src/queue.c **** 					}
 860:FreeRTOS/src/queue.c **** 					else
 861:FreeRTOS/src/queue.c **** 					{
 862:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 863:FreeRTOS/src/queue.c **** 					}
 864:FreeRTOS/src/queue.c **** 				}
 865:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 866:FreeRTOS/src/queue.c **** 
 867:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
 868:FreeRTOS/src/queue.c **** 				return pdPASS;
 869:FreeRTOS/src/queue.c **** 			}
 870:FreeRTOS/src/queue.c **** 			else
 871:FreeRTOS/src/queue.c **** 			{
 872:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 873:FreeRTOS/src/queue.c **** 				{
 874:FreeRTOS/src/queue.c **** 					/* The queue was full and no block time is specified (or
 875:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
 876:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
 877:FreeRTOS/src/queue.c **** 
 878:FreeRTOS/src/queue.c **** 					/* Return to the original privilege level before exiting
 879:FreeRTOS/src/queue.c **** 					the function. */
 880:FreeRTOS/src/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 881:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
 882:FreeRTOS/src/queue.c **** 				}
 883:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 884:FreeRTOS/src/queue.c **** 				{
 885:FreeRTOS/src/queue.c **** 					/* The queue was full and a block time was specified so
 886:FreeRTOS/src/queue.c **** 					configure the timeout structure. */
 887:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 17


 888:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 889:FreeRTOS/src/queue.c **** 				}
 890:FreeRTOS/src/queue.c **** 				else
 891:FreeRTOS/src/queue.c **** 				{
 892:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
 893:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 894:FreeRTOS/src/queue.c **** 				}
 895:FreeRTOS/src/queue.c **** 			}
 896:FreeRTOS/src/queue.c **** 		}
 897:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
 898:FreeRTOS/src/queue.c **** 
 899:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 900:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
 901:FreeRTOS/src/queue.c **** 
 902:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
 903:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 904:FreeRTOS/src/queue.c **** 
 905:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 906:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 907:FreeRTOS/src/queue.c **** 		{
 908:FreeRTOS/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 909:FreeRTOS/src/queue.c **** 			{
 910:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 911:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 912:FreeRTOS/src/queue.c **** 
 913:FreeRTOS/src/queue.c **** 				/* Unlocking the queue means queue events can effect the
 914:FreeRTOS/src/queue.c **** 				event list.  It is possible that interrupts occurring now
 915:FreeRTOS/src/queue.c **** 				remove this task from the event list again - but as the
 916:FreeRTOS/src/queue.c **** 				scheduler is suspended the task will go onto the pending
 917:FreeRTOS/src/queue.c **** 				ready last instead of the actual ready list. */
 918:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 919:FreeRTOS/src/queue.c **** 
 920:FreeRTOS/src/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 921:FreeRTOS/src/queue.c **** 				ready list into the ready list - so it is feasible that this
 922:FreeRTOS/src/queue.c **** 				task is already in a ready list before it yields - in which
 923:FreeRTOS/src/queue.c **** 				case the yield will not cause a context switch unless there
 924:FreeRTOS/src/queue.c **** 				is also a higher priority task in the pending ready list. */
 925:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 926:FreeRTOS/src/queue.c **** 				{
 927:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
 928:FreeRTOS/src/queue.c **** 				}
 929:FreeRTOS/src/queue.c **** 			}
 930:FreeRTOS/src/queue.c **** 			else
 931:FreeRTOS/src/queue.c **** 			{
 932:FreeRTOS/src/queue.c **** 				/* Try again. */
 933:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 934:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 935:FreeRTOS/src/queue.c **** 			}
 936:FreeRTOS/src/queue.c **** 		}
 937:FreeRTOS/src/queue.c **** 		else
 938:FreeRTOS/src/queue.c **** 		{
 939:FreeRTOS/src/queue.c **** 			/* The timeout has expired. */
 940:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
 941:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 942:FreeRTOS/src/queue.c **** 
 943:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 944:FreeRTOS/src/queue.c **** 			return errQUEUE_FULL;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 18


 945:FreeRTOS/src/queue.c **** 		}
 946:FreeRTOS/src/queue.c **** 	} /*lint -restore */
 947:FreeRTOS/src/queue.c **** }
 948:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 949:FreeRTOS/src/queue.c **** 
 950:FreeRTOS/src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 951:FreeRTOS/src/queue.c **** {
 952:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 953:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 954:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 955:FreeRTOS/src/queue.c **** 
 956:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 957:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 958:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 959:FreeRTOS/src/queue.c **** 
 960:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 961:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 962:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 963:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 964:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 965:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 966:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 967:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
 968:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 969:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 970:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 971:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 972:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 973:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 974:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 975:FreeRTOS/src/queue.c **** 
 976:FreeRTOS/src/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 977:FreeRTOS/src/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 978:FreeRTOS/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 979:FreeRTOS/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 980:FreeRTOS/src/queue.c **** 	post). */
 981:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 982:FreeRTOS/src/queue.c **** 	{
 983:FreeRTOS/src/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 984:FreeRTOS/src/queue.c **** 		{
 985:FreeRTOS/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 986:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 987:FreeRTOS/src/queue.c **** 
 988:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 989:FreeRTOS/src/queue.c **** 
 990:FreeRTOS/src/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 991:FreeRTOS/src/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 992:FreeRTOS/src/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 993:FreeRTOS/src/queue.c **** 			called here even though the disinherit function does not check if
 994:FreeRTOS/src/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 995:FreeRTOS/src/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 996:FreeRTOS/src/queue.c **** 
 997:FreeRTOS/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 998:FreeRTOS/src/queue.c **** 			be done when the queue is unlocked later. */
 999:FreeRTOS/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1000:FreeRTOS/src/queue.c **** 			{
1001:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 19


1002:FreeRTOS/src/queue.c **** 				{
1003:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1004:FreeRTOS/src/queue.c **** 					{
1005:FreeRTOS/src/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
1006:FreeRTOS/src/queue.c **** 						{
1007:FreeRTOS/src/queue.c **** 							/* Do not notify the queue set as an existing item
1008:FreeRTOS/src/queue.c **** 							was overwritten in the queue so the number of items
1009:FreeRTOS/src/queue.c **** 							in the queue has not changed. */
1010:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1011:FreeRTOS/src/queue.c **** 						}
1012:FreeRTOS/src/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1013:FreeRTOS/src/queue.c **** 						{
1014:FreeRTOS/src/queue.c **** 							/* The queue is a member of a queue set, and posting
1015:FreeRTOS/src/queue.c **** 							to the queue set caused a higher priority task to
1016:FreeRTOS/src/queue.c **** 							unblock.  A context switch is required. */
1017:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1018:FreeRTOS/src/queue.c **** 							{
1019:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1020:FreeRTOS/src/queue.c **** 							}
1021:FreeRTOS/src/queue.c **** 							else
1022:FreeRTOS/src/queue.c **** 							{
1023:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1024:FreeRTOS/src/queue.c **** 							}
1025:FreeRTOS/src/queue.c **** 						}
1026:FreeRTOS/src/queue.c **** 						else
1027:FreeRTOS/src/queue.c **** 						{
1028:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1029:FreeRTOS/src/queue.c **** 						}
1030:FreeRTOS/src/queue.c **** 					}
1031:FreeRTOS/src/queue.c **** 					else
1032:FreeRTOS/src/queue.c **** 					{
1033:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1034:FreeRTOS/src/queue.c **** 						{
1035:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1036:FreeRTOS/src/queue.c **** 							{
1037:FreeRTOS/src/queue.c **** 								/* The task waiting has a higher priority so
1038:FreeRTOS/src/queue.c **** 								record that a context switch is required. */
1039:FreeRTOS/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1040:FreeRTOS/src/queue.c **** 								{
1041:FreeRTOS/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1042:FreeRTOS/src/queue.c **** 								}
1043:FreeRTOS/src/queue.c **** 								else
1044:FreeRTOS/src/queue.c **** 								{
1045:FreeRTOS/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1046:FreeRTOS/src/queue.c **** 								}
1047:FreeRTOS/src/queue.c **** 							}
1048:FreeRTOS/src/queue.c **** 							else
1049:FreeRTOS/src/queue.c **** 							{
1050:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1051:FreeRTOS/src/queue.c **** 							}
1052:FreeRTOS/src/queue.c **** 						}
1053:FreeRTOS/src/queue.c **** 						else
1054:FreeRTOS/src/queue.c **** 						{
1055:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1056:FreeRTOS/src/queue.c **** 						}
1057:FreeRTOS/src/queue.c **** 					}
1058:FreeRTOS/src/queue.c **** 				}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 20


1059:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1060:FreeRTOS/src/queue.c **** 				{
1061:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1062:FreeRTOS/src/queue.c **** 					{
1063:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1064:FreeRTOS/src/queue.c **** 						{
1065:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1066:FreeRTOS/src/queue.c **** 							context	switch is required. */
1067:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1068:FreeRTOS/src/queue.c **** 							{
1069:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1070:FreeRTOS/src/queue.c **** 							}
1071:FreeRTOS/src/queue.c **** 							else
1072:FreeRTOS/src/queue.c **** 							{
1073:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1074:FreeRTOS/src/queue.c **** 							}
1075:FreeRTOS/src/queue.c **** 						}
1076:FreeRTOS/src/queue.c **** 						else
1077:FreeRTOS/src/queue.c **** 						{
1078:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1079:FreeRTOS/src/queue.c **** 						}
1080:FreeRTOS/src/queue.c **** 					}
1081:FreeRTOS/src/queue.c **** 					else
1082:FreeRTOS/src/queue.c **** 					{
1083:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1084:FreeRTOS/src/queue.c **** 					}
1085:FreeRTOS/src/queue.c **** 					
1086:FreeRTOS/src/queue.c **** 					/* Not used in this path. */
1087:FreeRTOS/src/queue.c **** 					( void ) uxPreviousMessagesWaiting;
1088:FreeRTOS/src/queue.c **** 				}
1089:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1090:FreeRTOS/src/queue.c **** 			}
1091:FreeRTOS/src/queue.c **** 			else
1092:FreeRTOS/src/queue.c **** 			{
1093:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1094:FreeRTOS/src/queue.c **** 				knows that data was posted while it was locked. */
1095:FreeRTOS/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1096:FreeRTOS/src/queue.c **** 			}
1097:FreeRTOS/src/queue.c **** 
1098:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1099:FreeRTOS/src/queue.c **** 		}
1100:FreeRTOS/src/queue.c **** 		else
1101:FreeRTOS/src/queue.c **** 		{
1102:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1103:FreeRTOS/src/queue.c **** 			xReturn = errQUEUE_FULL;
1104:FreeRTOS/src/queue.c **** 		}
1105:FreeRTOS/src/queue.c **** 	}
1106:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1107:FreeRTOS/src/queue.c **** 
1108:FreeRTOS/src/queue.c **** 	return xReturn;
1109:FreeRTOS/src/queue.c **** }
1110:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1111:FreeRTOS/src/queue.c **** 
1112:FreeRTOS/src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1113:FreeRTOS/src/queue.c **** {
1114:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1115:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 21


1116:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1117:FreeRTOS/src/queue.c **** 
1118:FreeRTOS/src/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1119:FreeRTOS/src/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1120:FreeRTOS/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1121:FreeRTOS/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1122:FreeRTOS/src/queue.c **** 	post). */
1123:FreeRTOS/src/queue.c **** 
1124:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1125:FreeRTOS/src/queue.c **** 
1126:FreeRTOS/src/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1127:FreeRTOS/src/queue.c **** 	if the item size is not 0. */
1128:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1129:FreeRTOS/src/queue.c **** 
1130:FreeRTOS/src/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1131:FreeRTOS/src/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1132:FreeRTOS/src/queue.c **** 	interrupts, only tasks. */
1133:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1134:FreeRTOS/src/queue.c **** 
1135:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1136:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1137:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1138:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1139:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1140:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1141:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1142:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1143:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1144:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1145:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1146:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1147:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1148:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1149:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1150:FreeRTOS/src/queue.c **** 
1151:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1152:FreeRTOS/src/queue.c **** 	{
1153:FreeRTOS/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1154:FreeRTOS/src/queue.c **** 
1155:FreeRTOS/src/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1156:FreeRTOS/src/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1157:FreeRTOS/src/queue.c **** 		space'. */
1158:FreeRTOS/src/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1159:FreeRTOS/src/queue.c **** 		{
1160:FreeRTOS/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1161:FreeRTOS/src/queue.c **** 
1162:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1163:FreeRTOS/src/queue.c **** 
1164:FreeRTOS/src/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1165:FreeRTOS/src/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1166:FreeRTOS/src/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1167:FreeRTOS/src/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1168:FreeRTOS/src/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1169:FreeRTOS/src/queue.c **** 			messages (semaphores) available. */
1170:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1171:FreeRTOS/src/queue.c **** 
1172:FreeRTOS/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 22


1173:FreeRTOS/src/queue.c **** 			be done when the queue is unlocked later. */
1174:FreeRTOS/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1175:FreeRTOS/src/queue.c **** 			{
1176:FreeRTOS/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1177:FreeRTOS/src/queue.c **** 				{
1178:FreeRTOS/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1179:FreeRTOS/src/queue.c **** 					{
1180:FreeRTOS/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1181:FreeRTOS/src/queue.c **** 						{
1182:FreeRTOS/src/queue.c **** 							/* The semaphore is a member of a queue set, and
1183:FreeRTOS/src/queue.c **** 							posting	to the queue set caused a higher priority
1184:FreeRTOS/src/queue.c **** 							task to	unblock.  A context switch is required. */
1185:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1186:FreeRTOS/src/queue.c **** 							{
1187:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1188:FreeRTOS/src/queue.c **** 							}
1189:FreeRTOS/src/queue.c **** 							else
1190:FreeRTOS/src/queue.c **** 							{
1191:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1192:FreeRTOS/src/queue.c **** 							}
1193:FreeRTOS/src/queue.c **** 						}
1194:FreeRTOS/src/queue.c **** 						else
1195:FreeRTOS/src/queue.c **** 						{
1196:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1197:FreeRTOS/src/queue.c **** 						}
1198:FreeRTOS/src/queue.c **** 					}
1199:FreeRTOS/src/queue.c **** 					else
1200:FreeRTOS/src/queue.c **** 					{
1201:FreeRTOS/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1202:FreeRTOS/src/queue.c **** 						{
1203:FreeRTOS/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1204:FreeRTOS/src/queue.c **** 							{
1205:FreeRTOS/src/queue.c **** 								/* The task waiting has a higher priority so
1206:FreeRTOS/src/queue.c **** 								record that a context switch is required. */
1207:FreeRTOS/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1208:FreeRTOS/src/queue.c **** 								{
1209:FreeRTOS/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1210:FreeRTOS/src/queue.c **** 								}
1211:FreeRTOS/src/queue.c **** 								else
1212:FreeRTOS/src/queue.c **** 								{
1213:FreeRTOS/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1214:FreeRTOS/src/queue.c **** 								}
1215:FreeRTOS/src/queue.c **** 							}
1216:FreeRTOS/src/queue.c **** 							else
1217:FreeRTOS/src/queue.c **** 							{
1218:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1219:FreeRTOS/src/queue.c **** 							}
1220:FreeRTOS/src/queue.c **** 						}
1221:FreeRTOS/src/queue.c **** 						else
1222:FreeRTOS/src/queue.c **** 						{
1223:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1224:FreeRTOS/src/queue.c **** 						}
1225:FreeRTOS/src/queue.c **** 					}
1226:FreeRTOS/src/queue.c **** 				}
1227:FreeRTOS/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1228:FreeRTOS/src/queue.c **** 				{
1229:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 23


1230:FreeRTOS/src/queue.c **** 					{
1231:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1232:FreeRTOS/src/queue.c **** 						{
1233:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1234:FreeRTOS/src/queue.c **** 							context	switch is required. */
1235:FreeRTOS/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1236:FreeRTOS/src/queue.c **** 							{
1237:FreeRTOS/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1238:FreeRTOS/src/queue.c **** 							}
1239:FreeRTOS/src/queue.c **** 							else
1240:FreeRTOS/src/queue.c **** 							{
1241:FreeRTOS/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1242:FreeRTOS/src/queue.c **** 							}
1243:FreeRTOS/src/queue.c **** 						}
1244:FreeRTOS/src/queue.c **** 						else
1245:FreeRTOS/src/queue.c **** 						{
1246:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1247:FreeRTOS/src/queue.c **** 						}
1248:FreeRTOS/src/queue.c **** 					}
1249:FreeRTOS/src/queue.c **** 					else
1250:FreeRTOS/src/queue.c **** 					{
1251:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1252:FreeRTOS/src/queue.c **** 					}
1253:FreeRTOS/src/queue.c **** 				}
1254:FreeRTOS/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1255:FreeRTOS/src/queue.c **** 			}
1256:FreeRTOS/src/queue.c **** 			else
1257:FreeRTOS/src/queue.c **** 			{
1258:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1259:FreeRTOS/src/queue.c **** 				knows that data was posted while it was locked. */
1260:FreeRTOS/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1261:FreeRTOS/src/queue.c **** 			}
1262:FreeRTOS/src/queue.c **** 
1263:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1264:FreeRTOS/src/queue.c **** 		}
1265:FreeRTOS/src/queue.c **** 		else
1266:FreeRTOS/src/queue.c **** 		{
1267:FreeRTOS/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1268:FreeRTOS/src/queue.c **** 			xReturn = errQUEUE_FULL;
1269:FreeRTOS/src/queue.c **** 		}
1270:FreeRTOS/src/queue.c **** 	}
1271:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1272:FreeRTOS/src/queue.c **** 
1273:FreeRTOS/src/queue.c **** 	return xReturn;
1274:FreeRTOS/src/queue.c **** }
1275:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1276:FreeRTOS/src/queue.c **** 
1277:FreeRTOS/src/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1278:FreeRTOS/src/queue.c **** {
1279:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1280:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1281:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1282:FreeRTOS/src/queue.c **** 
1283:FreeRTOS/src/queue.c **** 	/* Check the pointer is not NULL. */
1284:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
1285:FreeRTOS/src/queue.c **** 
1286:FreeRTOS/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 24


1287:FreeRTOS/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1288:FreeRTOS/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1289:FreeRTOS/src/queue.c **** 
1290:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1291:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1292:FreeRTOS/src/queue.c **** 	{
1293:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1294:FreeRTOS/src/queue.c **** 	}
1295:FreeRTOS/src/queue.c **** 	#endif
1296:FreeRTOS/src/queue.c **** 
1297:FreeRTOS/src/queue.c **** 
1298:FreeRTOS/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1299:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1300:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
1301:FreeRTOS/src/queue.c **** 	for( ;; )
1302:FreeRTOS/src/queue.c **** 	{
1303:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1304:FreeRTOS/src/queue.c **** 		{
1305:FreeRTOS/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1306:FreeRTOS/src/queue.c **** 
1307:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1308:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1309:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1310:FreeRTOS/src/queue.c **** 			{
1311:FreeRTOS/src/queue.c **** 				/* Data available, remove one item. */
1312:FreeRTOS/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1313:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1314:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1315:FreeRTOS/src/queue.c **** 
1316:FreeRTOS/src/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1317:FreeRTOS/src/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1318:FreeRTOS/src/queue.c **** 				task. */
1319:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1320:FreeRTOS/src/queue.c **** 				{
1321:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1322:FreeRTOS/src/queue.c **** 					{
1323:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1324:FreeRTOS/src/queue.c **** 					}
1325:FreeRTOS/src/queue.c **** 					else
1326:FreeRTOS/src/queue.c **** 					{
1327:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1328:FreeRTOS/src/queue.c **** 					}
1329:FreeRTOS/src/queue.c **** 				}
1330:FreeRTOS/src/queue.c **** 				else
1331:FreeRTOS/src/queue.c **** 				{
1332:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1333:FreeRTOS/src/queue.c **** 				}
1334:FreeRTOS/src/queue.c **** 
1335:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1336:FreeRTOS/src/queue.c **** 				return pdPASS;
1337:FreeRTOS/src/queue.c **** 			}
1338:FreeRTOS/src/queue.c **** 			else
1339:FreeRTOS/src/queue.c **** 			{
1340:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1341:FreeRTOS/src/queue.c **** 				{
1342:FreeRTOS/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1343:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 25


1344:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1345:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1346:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1347:FreeRTOS/src/queue.c **** 				}
1348:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1349:FreeRTOS/src/queue.c **** 				{
1350:FreeRTOS/src/queue.c **** 					/* The queue was empty and a block time was specified so
1351:FreeRTOS/src/queue.c **** 					configure the timeout structure. */
1352:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1353:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1354:FreeRTOS/src/queue.c **** 				}
1355:FreeRTOS/src/queue.c **** 				else
1356:FreeRTOS/src/queue.c **** 				{
1357:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1358:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1359:FreeRTOS/src/queue.c **** 				}
1360:FreeRTOS/src/queue.c **** 			}
1361:FreeRTOS/src/queue.c **** 		}
1362:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1363:FreeRTOS/src/queue.c **** 
1364:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1365:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1366:FreeRTOS/src/queue.c **** 
1367:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1368:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1369:FreeRTOS/src/queue.c **** 
1370:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1371:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1372:FreeRTOS/src/queue.c **** 		{
1373:FreeRTOS/src/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1374:FreeRTOS/src/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1375:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1376:FreeRTOS/src/queue.c **** 			{
1377:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1378:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1379:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1380:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1381:FreeRTOS/src/queue.c **** 				{
1382:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1383:FreeRTOS/src/queue.c **** 				}
1384:FreeRTOS/src/queue.c **** 				else
1385:FreeRTOS/src/queue.c **** 				{
1386:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1387:FreeRTOS/src/queue.c **** 				}
1388:FreeRTOS/src/queue.c **** 			}
1389:FreeRTOS/src/queue.c **** 			else
1390:FreeRTOS/src/queue.c **** 			{
1391:FreeRTOS/src/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1392:FreeRTOS/src/queue.c **** 				data. */
1393:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1394:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1395:FreeRTOS/src/queue.c **** 			}
1396:FreeRTOS/src/queue.c **** 		}
1397:FreeRTOS/src/queue.c **** 		else
1398:FreeRTOS/src/queue.c **** 		{
1399:FreeRTOS/src/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1400:FreeRTOS/src/queue.c **** 			back and attempt to read the data. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 26


1401:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1402:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1403:FreeRTOS/src/queue.c **** 
1404:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1405:FreeRTOS/src/queue.c **** 			{
1406:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1407:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1408:FreeRTOS/src/queue.c **** 			}
1409:FreeRTOS/src/queue.c **** 			else
1410:FreeRTOS/src/queue.c **** 			{
1411:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1412:FreeRTOS/src/queue.c **** 			}
1413:FreeRTOS/src/queue.c **** 		}
1414:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1415:FreeRTOS/src/queue.c **** }
1416:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1417:FreeRTOS/src/queue.c **** 
1418:FreeRTOS/src/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1419:FreeRTOS/src/queue.c **** {
1420:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1421:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1422:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1423:FreeRTOS/src/queue.c **** 
1424:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
1425:FreeRTOS/src/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1426:FreeRTOS/src/queue.c **** #endif
1427:FreeRTOS/src/queue.c **** 
1428:FreeRTOS/src/queue.c **** 	/* Check the queue pointer is not NULL. */
1429:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
1430:FreeRTOS/src/queue.c **** 
1431:FreeRTOS/src/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1432:FreeRTOS/src/queue.c **** 	0. */
1433:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1434:FreeRTOS/src/queue.c **** 
1435:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1436:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1437:FreeRTOS/src/queue.c **** 	{
1438:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1439:FreeRTOS/src/queue.c **** 	}
1440:FreeRTOS/src/queue.c **** 	#endif
1441:FreeRTOS/src/queue.c **** 
1442:FreeRTOS/src/queue.c **** 
1443:FreeRTOS/src/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1444:FreeRTOS/src/queue.c **** 	statements within the function itself.  This is done in the interest
1445:FreeRTOS/src/queue.c **** 	of execution time efficiency. */
1446:FreeRTOS/src/queue.c **** 	for( ;; )
1447:FreeRTOS/src/queue.c **** 	{
1448:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1449:FreeRTOS/src/queue.c **** 		{
1450:FreeRTOS/src/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1451:FreeRTOS/src/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1452:FreeRTOS/src/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1453:FreeRTOS/src/queue.c **** 
1454:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1455:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1456:FreeRTOS/src/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1457:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 27


1458:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1459:FreeRTOS/src/queue.c **** 
1460:FreeRTOS/src/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1461:FreeRTOS/src/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1462:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1463:FreeRTOS/src/queue.c **** 
1464:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1465:FreeRTOS/src/queue.c **** 				{
1466:FreeRTOS/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1467:FreeRTOS/src/queue.c **** 					{
1468:FreeRTOS/src/queue.c **** 						/* Record the information required to implement
1469:FreeRTOS/src/queue.c **** 						priority inheritance should it become necessary. */
1470:FreeRTOS/src/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1471:FreeRTOS/src/queue.c **** 					}
1472:FreeRTOS/src/queue.c **** 					else
1473:FreeRTOS/src/queue.c **** 					{
1474:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1475:FreeRTOS/src/queue.c **** 					}
1476:FreeRTOS/src/queue.c **** 				}
1477:FreeRTOS/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1478:FreeRTOS/src/queue.c **** 
1479:FreeRTOS/src/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1480:FreeRTOS/src/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1481:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1482:FreeRTOS/src/queue.c **** 				{
1483:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1484:FreeRTOS/src/queue.c **** 					{
1485:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1486:FreeRTOS/src/queue.c **** 					}
1487:FreeRTOS/src/queue.c **** 					else
1488:FreeRTOS/src/queue.c **** 					{
1489:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1490:FreeRTOS/src/queue.c **** 					}
1491:FreeRTOS/src/queue.c **** 				}
1492:FreeRTOS/src/queue.c **** 				else
1493:FreeRTOS/src/queue.c **** 				{
1494:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1495:FreeRTOS/src/queue.c **** 				}
1496:FreeRTOS/src/queue.c **** 
1497:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1498:FreeRTOS/src/queue.c **** 				return pdPASS;
1499:FreeRTOS/src/queue.c **** 			}
1500:FreeRTOS/src/queue.c **** 			else
1501:FreeRTOS/src/queue.c **** 			{
1502:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1503:FreeRTOS/src/queue.c **** 				{
1504:FreeRTOS/src/queue.c **** 					/* For inheritance to have occurred there must have been an
1505:FreeRTOS/src/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1506:FreeRTOS/src/queue.c **** 					if it were 0 the function would have exited. */
1507:FreeRTOS/src/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1508:FreeRTOS/src/queue.c **** 					{
1509:FreeRTOS/src/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1510:FreeRTOS/src/queue.c **** 					}
1511:FreeRTOS/src/queue.c **** 					#endif /* configUSE_MUTEXES */
1512:FreeRTOS/src/queue.c **** 
1513:FreeRTOS/src/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1514:FreeRTOS/src/queue.c **** 					(or the block time has expired) so exit now. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 28


1515:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1516:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1517:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1518:FreeRTOS/src/queue.c **** 				}
1519:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1520:FreeRTOS/src/queue.c **** 				{
1521:FreeRTOS/src/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1522:FreeRTOS/src/queue.c **** 					so configure the timeout structure ready to block. */
1523:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1524:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1525:FreeRTOS/src/queue.c **** 				}
1526:FreeRTOS/src/queue.c **** 				else
1527:FreeRTOS/src/queue.c **** 				{
1528:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1529:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1530:FreeRTOS/src/queue.c **** 				}
1531:FreeRTOS/src/queue.c **** 			}
1532:FreeRTOS/src/queue.c **** 		}
1533:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1534:FreeRTOS/src/queue.c **** 
1535:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1536:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1537:FreeRTOS/src/queue.c **** 
1538:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1539:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1540:FreeRTOS/src/queue.c **** 
1541:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1542:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1543:FreeRTOS/src/queue.c **** 		{
1544:FreeRTOS/src/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1545:FreeRTOS/src/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1546:FreeRTOS/src/queue.c **** 			become available.  As semaphores are implemented with queues the
1547:FreeRTOS/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1548:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1549:FreeRTOS/src/queue.c **** 			{
1550:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1551:FreeRTOS/src/queue.c **** 
1552:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1553:FreeRTOS/src/queue.c **** 				{
1554:FreeRTOS/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1555:FreeRTOS/src/queue.c **** 					{
1556:FreeRTOS/src/queue.c **** 						taskENTER_CRITICAL();
1557:FreeRTOS/src/queue.c **** 						{
1558:FreeRTOS/src/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1559:FreeRTOS/src/queue.c **** 						}
1560:FreeRTOS/src/queue.c **** 						taskEXIT_CRITICAL();
1561:FreeRTOS/src/queue.c **** 					}
1562:FreeRTOS/src/queue.c **** 					else
1563:FreeRTOS/src/queue.c **** 					{
1564:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1565:FreeRTOS/src/queue.c **** 					}
1566:FreeRTOS/src/queue.c **** 				}
1567:FreeRTOS/src/queue.c **** 				#endif
1568:FreeRTOS/src/queue.c **** 
1569:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1570:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1571:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 29


1572:FreeRTOS/src/queue.c **** 				{
1573:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1574:FreeRTOS/src/queue.c **** 				}
1575:FreeRTOS/src/queue.c **** 				else
1576:FreeRTOS/src/queue.c **** 				{
1577:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1578:FreeRTOS/src/queue.c **** 				}
1579:FreeRTOS/src/queue.c **** 			}
1580:FreeRTOS/src/queue.c **** 			else
1581:FreeRTOS/src/queue.c **** 			{
1582:FreeRTOS/src/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1583:FreeRTOS/src/queue.c **** 				attempt to take the semaphore again. */
1584:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1585:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1586:FreeRTOS/src/queue.c **** 			}
1587:FreeRTOS/src/queue.c **** 		}
1588:FreeRTOS/src/queue.c **** 		else
1589:FreeRTOS/src/queue.c **** 		{
1590:FreeRTOS/src/queue.c **** 			/* Timed out. */
1591:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1592:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1593:FreeRTOS/src/queue.c **** 
1594:FreeRTOS/src/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1595:FreeRTOS/src/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1596:FreeRTOS/src/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1597:FreeRTOS/src/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1598:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1599:FreeRTOS/src/queue.c **** 			{
1600:FreeRTOS/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1601:FreeRTOS/src/queue.c **** 				{
1602:FreeRTOS/src/queue.c **** 					/* xInheritanceOccurred could only have be set if
1603:FreeRTOS/src/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1604:FreeRTOS/src/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1605:FreeRTOS/src/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1606:FreeRTOS/src/queue.c **** 					{
1607:FreeRTOS/src/queue.c **** 						taskENTER_CRITICAL();
1608:FreeRTOS/src/queue.c **** 						{
1609:FreeRTOS/src/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1610:FreeRTOS/src/queue.c **** 
1611:FreeRTOS/src/queue.c **** 							/* This task blocking on the mutex caused another
1612:FreeRTOS/src/queue.c **** 							task to inherit this task's priority.  Now this task
1613:FreeRTOS/src/queue.c **** 							has timed out the priority should be disinherited
1614:FreeRTOS/src/queue.c **** 							again, but only as low as the next highest priority
1615:FreeRTOS/src/queue.c **** 							task that is waiting for the same mutex. */
1616:FreeRTOS/src/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1617:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1618:FreeRTOS/src/queue.c **** 						}
1619:FreeRTOS/src/queue.c **** 						taskEXIT_CRITICAL();
1620:FreeRTOS/src/queue.c **** 					}
1621:FreeRTOS/src/queue.c **** 				}
1622:FreeRTOS/src/queue.c **** 				#endif /* configUSE_MUTEXES */
1623:FreeRTOS/src/queue.c **** 
1624:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1625:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1626:FreeRTOS/src/queue.c **** 			}
1627:FreeRTOS/src/queue.c **** 			else
1628:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 30


1629:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1630:FreeRTOS/src/queue.c **** 			}
1631:FreeRTOS/src/queue.c **** 		}
1632:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1633:FreeRTOS/src/queue.c **** }
1634:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1635:FreeRTOS/src/queue.c **** 
1636:FreeRTOS/src/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1637:FreeRTOS/src/queue.c **** {
1638:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1639:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
1640:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
1641:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1642:FreeRTOS/src/queue.c **** 
1643:FreeRTOS/src/queue.c **** 	/* Check the pointer is not NULL. */
1644:FreeRTOS/src/queue.c **** 	configASSERT( ( pxQueue ) );
1645:FreeRTOS/src/queue.c **** 
1646:FreeRTOS/src/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1647:FreeRTOS/src/queue.c **** 	is zero (so no data is copied into the buffer. */
1648:FreeRTOS/src/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1649:FreeRTOS/src/queue.c **** 
1650:FreeRTOS/src/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1651:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1652:FreeRTOS/src/queue.c **** 	{
1653:FreeRTOS/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1654:FreeRTOS/src/queue.c **** 	}
1655:FreeRTOS/src/queue.c **** 	#endif
1656:FreeRTOS/src/queue.c **** 
1657:FreeRTOS/src/queue.c **** 
1658:FreeRTOS/src/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1659:FreeRTOS/src/queue.c **** 	allow return statements within the function itself.  This is done in the
1660:FreeRTOS/src/queue.c **** 	interest of execution time efficiency. */
1661:FreeRTOS/src/queue.c **** 	for( ;; )
1662:FreeRTOS/src/queue.c **** 	{
1663:FreeRTOS/src/queue.c **** 		taskENTER_CRITICAL();
1664:FreeRTOS/src/queue.c **** 		{
1665:FreeRTOS/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1666:FreeRTOS/src/queue.c **** 
1667:FreeRTOS/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1668:FreeRTOS/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1669:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1670:FreeRTOS/src/queue.c **** 			{
1671:FreeRTOS/src/queue.c **** 				/* Remember the read position so it can be reset after the data
1672:FreeRTOS/src/queue.c **** 				is read from the queue as this function is only peeking the
1673:FreeRTOS/src/queue.c **** 				data, not removing it. */
1674:FreeRTOS/src/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1675:FreeRTOS/src/queue.c **** 
1676:FreeRTOS/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1677:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1678:FreeRTOS/src/queue.c **** 
1679:FreeRTOS/src/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1680:FreeRTOS/src/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1681:FreeRTOS/src/queue.c **** 
1682:FreeRTOS/src/queue.c **** 				/* The data is being left in the queue, so see if there are
1683:FreeRTOS/src/queue.c **** 				any other tasks waiting for the data. */
1684:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1685:FreeRTOS/src/queue.c **** 				{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 31


1686:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1687:FreeRTOS/src/queue.c **** 					{
1688:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority than this task. */
1689:FreeRTOS/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1690:FreeRTOS/src/queue.c **** 					}
1691:FreeRTOS/src/queue.c **** 					else
1692:FreeRTOS/src/queue.c **** 					{
1693:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1694:FreeRTOS/src/queue.c **** 					}
1695:FreeRTOS/src/queue.c **** 				}
1696:FreeRTOS/src/queue.c **** 				else
1697:FreeRTOS/src/queue.c **** 				{
1698:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1699:FreeRTOS/src/queue.c **** 				}
1700:FreeRTOS/src/queue.c **** 
1701:FreeRTOS/src/queue.c **** 				taskEXIT_CRITICAL();
1702:FreeRTOS/src/queue.c **** 				return pdPASS;
1703:FreeRTOS/src/queue.c **** 			}
1704:FreeRTOS/src/queue.c **** 			else
1705:FreeRTOS/src/queue.c **** 			{
1706:FreeRTOS/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1707:FreeRTOS/src/queue.c **** 				{
1708:FreeRTOS/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1709:FreeRTOS/src/queue.c **** 					the block time has expired) so leave now. */
1710:FreeRTOS/src/queue.c **** 					taskEXIT_CRITICAL();
1711:FreeRTOS/src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1712:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
1713:FreeRTOS/src/queue.c **** 				}
1714:FreeRTOS/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1715:FreeRTOS/src/queue.c **** 				{
1716:FreeRTOS/src/queue.c **** 					/* The queue was empty and a block time was specified so
1717:FreeRTOS/src/queue.c **** 					configure the timeout structure ready to enter the blocked
1718:FreeRTOS/src/queue.c **** 					state. */
1719:FreeRTOS/src/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1720:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1721:FreeRTOS/src/queue.c **** 				}
1722:FreeRTOS/src/queue.c **** 				else
1723:FreeRTOS/src/queue.c **** 				{
1724:FreeRTOS/src/queue.c **** 					/* Entry time was already set. */
1725:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1726:FreeRTOS/src/queue.c **** 				}
1727:FreeRTOS/src/queue.c **** 			}
1728:FreeRTOS/src/queue.c **** 		}
1729:FreeRTOS/src/queue.c **** 		taskEXIT_CRITICAL();
1730:FreeRTOS/src/queue.c **** 
1731:FreeRTOS/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1732:FreeRTOS/src/queue.c **** 		now the critical section has been exited. */
1733:FreeRTOS/src/queue.c **** 
1734:FreeRTOS/src/queue.c **** 		vTaskSuspendAll();
1735:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
1736:FreeRTOS/src/queue.c **** 
1737:FreeRTOS/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1738:FreeRTOS/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1739:FreeRTOS/src/queue.c **** 		{
1740:FreeRTOS/src/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1741:FreeRTOS/src/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1742:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 32


1743:FreeRTOS/src/queue.c **** 			{
1744:FreeRTOS/src/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1745:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1746:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1747:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1748:FreeRTOS/src/queue.c **** 				{
1749:FreeRTOS/src/queue.c **** 					portYIELD_WITHIN_API();
1750:FreeRTOS/src/queue.c **** 				}
1751:FreeRTOS/src/queue.c **** 				else
1752:FreeRTOS/src/queue.c **** 				{
1753:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1754:FreeRTOS/src/queue.c **** 				}
1755:FreeRTOS/src/queue.c **** 			}
1756:FreeRTOS/src/queue.c **** 			else
1757:FreeRTOS/src/queue.c **** 			{
1758:FreeRTOS/src/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1759:FreeRTOS/src/queue.c **** 				state, instead return to try and obtain the data. */
1760:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
1761:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
1762:FreeRTOS/src/queue.c **** 			}
1763:FreeRTOS/src/queue.c **** 		}
1764:FreeRTOS/src/queue.c **** 		else
1765:FreeRTOS/src/queue.c **** 		{
1766:FreeRTOS/src/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1767:FreeRTOS/src/queue.c **** 			exit, otherwise go back and try to read the data again. */
1768:FreeRTOS/src/queue.c **** 			prvUnlockQueue( pxQueue );
1769:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
1770:FreeRTOS/src/queue.c **** 
1771:FreeRTOS/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1772:FreeRTOS/src/queue.c **** 			{
1773:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1774:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
1775:FreeRTOS/src/queue.c **** 			}
1776:FreeRTOS/src/queue.c **** 			else
1777:FreeRTOS/src/queue.c **** 			{
1778:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1779:FreeRTOS/src/queue.c **** 			}
1780:FreeRTOS/src/queue.c **** 		}
1781:FreeRTOS/src/queue.c **** 	} /*lint -restore */
1782:FreeRTOS/src/queue.c **** }
1783:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1784:FreeRTOS/src/queue.c **** 
1785:FreeRTOS/src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1786:FreeRTOS/src/queue.c **** {
1787:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1788:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1789:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1790:FreeRTOS/src/queue.c **** 
1791:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1792:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1793:FreeRTOS/src/queue.c **** 
1794:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1798:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1799:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 33


1800:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1802:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1808:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1809:FreeRTOS/src/queue.c **** 
1810:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1811:FreeRTOS/src/queue.c **** 	{
1812:FreeRTOS/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1813:FreeRTOS/src/queue.c **** 
1814:FreeRTOS/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1815:FreeRTOS/src/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1816:FreeRTOS/src/queue.c **** 		{
1817:FreeRTOS/src/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1818:FreeRTOS/src/queue.c **** 
1819:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1820:FreeRTOS/src/queue.c **** 
1821:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1822:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1823:FreeRTOS/src/queue.c **** 
1824:FreeRTOS/src/queue.c **** 			/* If the queue is locked the event list will not be modified.
1825:FreeRTOS/src/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1826:FreeRTOS/src/queue.c **** 			will know that an ISR has removed data while the queue was
1827:FreeRTOS/src/queue.c **** 			locked. */
1828:FreeRTOS/src/queue.c **** 			if( cRxLock == queueUNLOCKED )
1829:FreeRTOS/src/queue.c **** 			{
1830:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1831:FreeRTOS/src/queue.c **** 				{
1832:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1833:FreeRTOS/src/queue.c **** 					{
1834:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority than us so
1835:FreeRTOS/src/queue.c **** 						force a context switch. */
1836:FreeRTOS/src/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1837:FreeRTOS/src/queue.c **** 						{
1838:FreeRTOS/src/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1839:FreeRTOS/src/queue.c **** 						}
1840:FreeRTOS/src/queue.c **** 						else
1841:FreeRTOS/src/queue.c **** 						{
1842:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:FreeRTOS/src/queue.c **** 						}
1844:FreeRTOS/src/queue.c **** 					}
1845:FreeRTOS/src/queue.c **** 					else
1846:FreeRTOS/src/queue.c **** 					{
1847:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1848:FreeRTOS/src/queue.c **** 					}
1849:FreeRTOS/src/queue.c **** 				}
1850:FreeRTOS/src/queue.c **** 				else
1851:FreeRTOS/src/queue.c **** 				{
1852:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1853:FreeRTOS/src/queue.c **** 				}
1854:FreeRTOS/src/queue.c **** 			}
1855:FreeRTOS/src/queue.c **** 			else
1856:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 34


1857:FreeRTOS/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1858:FreeRTOS/src/queue.c **** 				knows that data was removed while it was locked. */
1859:FreeRTOS/src/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1860:FreeRTOS/src/queue.c **** 			}
1861:FreeRTOS/src/queue.c **** 
1862:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1863:FreeRTOS/src/queue.c **** 		}
1864:FreeRTOS/src/queue.c **** 		else
1865:FreeRTOS/src/queue.c **** 		{
1866:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
1867:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1868:FreeRTOS/src/queue.c **** 		}
1869:FreeRTOS/src/queue.c **** 	}
1870:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1871:FreeRTOS/src/queue.c **** 
1872:FreeRTOS/src/queue.c **** 	return xReturn;
1873:FreeRTOS/src/queue.c **** }
1874:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1875:FreeRTOS/src/queue.c **** 
1876:FreeRTOS/src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1877:FreeRTOS/src/queue.c **** {
1878:FreeRTOS/src/queue.c **** BaseType_t xReturn;
1879:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1880:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
1881:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1882:FreeRTOS/src/queue.c **** 
1883:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1884:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1885:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1886:FreeRTOS/src/queue.c **** 
1887:FreeRTOS/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1888:FreeRTOS/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1889:FreeRTOS/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1890:FreeRTOS/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1891:FreeRTOS/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1892:FreeRTOS/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1893:FreeRTOS/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1894:FreeRTOS/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1895:FreeRTOS/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1896:FreeRTOS/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1897:FreeRTOS/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1898:FreeRTOS/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1899:FreeRTOS/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1900:FreeRTOS/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1901:FreeRTOS/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1902:FreeRTOS/src/queue.c **** 
1903:FreeRTOS/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1904:FreeRTOS/src/queue.c **** 	{
1905:FreeRTOS/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1906:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1907:FreeRTOS/src/queue.c **** 		{
1908:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1909:FreeRTOS/src/queue.c **** 
1910:FreeRTOS/src/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1911:FreeRTOS/src/queue.c **** 			actually being removed from the queue. */
1912:FreeRTOS/src/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1913:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 35


1914:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1915:FreeRTOS/src/queue.c **** 
1916:FreeRTOS/src/queue.c **** 			xReturn = pdPASS;
1917:FreeRTOS/src/queue.c **** 		}
1918:FreeRTOS/src/queue.c **** 		else
1919:FreeRTOS/src/queue.c **** 		{
1920:FreeRTOS/src/queue.c **** 			xReturn = pdFAIL;
1921:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1922:FreeRTOS/src/queue.c **** 		}
1923:FreeRTOS/src/queue.c **** 	}
1924:FreeRTOS/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1925:FreeRTOS/src/queue.c **** 
1926:FreeRTOS/src/queue.c **** 	return xReturn;
1927:FreeRTOS/src/queue.c **** }
1928:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1929:FreeRTOS/src/queue.c **** 
1930:FreeRTOS/src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1931:FreeRTOS/src/queue.c **** {
1932:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1933:FreeRTOS/src/queue.c **** 
1934:FreeRTOS/src/queue.c **** 	configASSERT( xQueue );
1935:FreeRTOS/src/queue.c **** 
1936:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
1937:FreeRTOS/src/queue.c **** 	{
1938:FreeRTOS/src/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1939:FreeRTOS/src/queue.c **** 	}
1940:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
1941:FreeRTOS/src/queue.c **** 
1942:FreeRTOS/src/queue.c **** 	return uxReturn;
1943:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1944:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1945:FreeRTOS/src/queue.c **** 
1946:FreeRTOS/src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1947:FreeRTOS/src/queue.c **** {
1948:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1949:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1950:FreeRTOS/src/queue.c **** 
1951:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1952:FreeRTOS/src/queue.c **** 
1953:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
1954:FreeRTOS/src/queue.c **** 	{
1955:FreeRTOS/src/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1956:FreeRTOS/src/queue.c **** 	}
1957:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
1958:FreeRTOS/src/queue.c **** 
1959:FreeRTOS/src/queue.c **** 	return uxReturn;
1960:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1961:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1962:FreeRTOS/src/queue.c **** 
1963:FreeRTOS/src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1964:FreeRTOS/src/queue.c **** {
1965:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
1966:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1967:FreeRTOS/src/queue.c **** 
1968:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1969:FreeRTOS/src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1970:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 36


1971:FreeRTOS/src/queue.c **** 	return uxReturn;
1972:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1973:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
1974:FreeRTOS/src/queue.c **** 
1975:FreeRTOS/src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1976:FreeRTOS/src/queue.c **** {
1977:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
1978:FreeRTOS/src/queue.c **** 
1979:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
1980:FreeRTOS/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1981:FreeRTOS/src/queue.c **** 
1982:FreeRTOS/src/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1983:FreeRTOS/src/queue.c **** 	{
1984:FreeRTOS/src/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1985:FreeRTOS/src/queue.c **** 	}
1986:FreeRTOS/src/queue.c **** 	#endif
1987:FreeRTOS/src/queue.c **** 
1988:FreeRTOS/src/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1989:FreeRTOS/src/queue.c **** 	{
1990:FreeRTOS/src/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1991:FreeRTOS/src/queue.c **** 		again. */
1992:FreeRTOS/src/queue.c **** 		vPortFree( pxQueue );
1993:FreeRTOS/src/queue.c **** 	}
1994:FreeRTOS/src/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1995:FreeRTOS/src/queue.c **** 	{
1996:FreeRTOS/src/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1997:FreeRTOS/src/queue.c **** 		check before attempting to free the memory. */
1998:FreeRTOS/src/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1999:FreeRTOS/src/queue.c **** 		{
2000:FreeRTOS/src/queue.c **** 			vPortFree( pxQueue );
2001:FreeRTOS/src/queue.c **** 		}
2002:FreeRTOS/src/queue.c **** 		else
2003:FreeRTOS/src/queue.c **** 		{
2004:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2005:FreeRTOS/src/queue.c **** 		}
2006:FreeRTOS/src/queue.c **** 	}
2007:FreeRTOS/src/queue.c **** 	#else
2008:FreeRTOS/src/queue.c **** 	{
2009:FreeRTOS/src/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2010:FreeRTOS/src/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2011:FreeRTOS/src/queue.c **** 		( void ) pxQueue;
2012:FreeRTOS/src/queue.c **** 	}
2013:FreeRTOS/src/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2014:FreeRTOS/src/queue.c **** }
2015:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2016:FreeRTOS/src/queue.c **** 
2017:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:FreeRTOS/src/queue.c **** 
2019:FreeRTOS/src/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2020:FreeRTOS/src/queue.c **** 	{
2021:FreeRTOS/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2022:FreeRTOS/src/queue.c **** 	}
2023:FreeRTOS/src/queue.c **** 
2024:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2026:FreeRTOS/src/queue.c **** 
2027:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 37


2028:FreeRTOS/src/queue.c **** 
2029:FreeRTOS/src/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2030:FreeRTOS/src/queue.c **** 	{
2031:FreeRTOS/src/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2032:FreeRTOS/src/queue.c **** 	}
2033:FreeRTOS/src/queue.c **** 
2034:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2035:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2036:FreeRTOS/src/queue.c **** 
2037:FreeRTOS/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2038:FreeRTOS/src/queue.c **** 
2039:FreeRTOS/src/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2040:FreeRTOS/src/queue.c **** 	{
2041:FreeRTOS/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2042:FreeRTOS/src/queue.c **** 	}
2043:FreeRTOS/src/queue.c **** 
2044:FreeRTOS/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2045:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2046:FreeRTOS/src/queue.c **** 
2047:FreeRTOS/src/queue.c **** #if( configUSE_MUTEXES == 1 )
2048:FreeRTOS/src/queue.c **** 
2049:FreeRTOS/src/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2050:FreeRTOS/src/queue.c **** 	{
  27              		.loc 1 2050 2 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
2051:FreeRTOS/src/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
  32              		.loc 1 2051 2 view .LVU1
2052:FreeRTOS/src/queue.c **** 
2053:FreeRTOS/src/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2054:FreeRTOS/src/queue.c **** 		priority, but the waiting task times out, then the holder should
2055:FreeRTOS/src/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2056:FreeRTOS/src/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2057:FreeRTOS/src/queue.c **** 		return the priority of the highest priority task that is waiting for the
2058:FreeRTOS/src/queue.c **** 		mutex. */
2059:FreeRTOS/src/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  33              		.loc 1 2059 3 view .LVU2
  34              		.loc 1 2059 7 is_stmt 0 view .LVU3
  35 0000 436A     		ldr	r3, [r0, #36]
  36              		.loc 1 2059 5 view .LVU4
  37 0002 23B1     		cbz	r3, .L3
2060:FreeRTOS/src/queue.c **** 		{
2061:FreeRTOS/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  38              		.loc 1 2061 4 is_stmt 1 view .LVU5
  39              		.loc 1 2061 93 is_stmt 0 view .LVU6
  40 0004 036B     		ldr	r3, [r0, #48]
  41 0006 1868     		ldr	r0, [r3]
  42              	.LVL1:
  43              		.loc 1 2061 36 view .LVU7
  44 0008 C0F10500 		rsb	r0, r0, #5
  45              	.LVL2:
  46              		.loc 1 2061 36 view .LVU8
  47 000c 7047     		bx	lr
  48              	.LVL3:
  49              	.L3:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 38


2062:FreeRTOS/src/queue.c **** 		}
2063:FreeRTOS/src/queue.c **** 		else
2064:FreeRTOS/src/queue.c **** 		{
2065:FreeRTOS/src/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  50              		.loc 1 2065 36 view .LVU9
  51 000e 0020     		movs	r0, #0
  52              	.LVL4:
2066:FreeRTOS/src/queue.c **** 		}
2067:FreeRTOS/src/queue.c **** 
2068:FreeRTOS/src/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
  53              		.loc 1 2068 3 is_stmt 1 view .LVU10
2069:FreeRTOS/src/queue.c **** 	}
  54              		.loc 1 2069 2 is_stmt 0 view .LVU11
  55 0010 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE87:
  59              		.section	.text.prvIsQueueFull,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu softvfp
  66              	prvIsQueueFull:
  67              	.LVL5:
  68              	.LFB93:
2070:FreeRTOS/src/queue.c **** 
2071:FreeRTOS/src/queue.c **** #endif /* configUSE_MUTEXES */
2072:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2073:FreeRTOS/src/queue.c **** 
2074:FreeRTOS/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2075:FreeRTOS/src/queue.c **** {
2076:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
2077:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
2078:FreeRTOS/src/queue.c **** 
2079:FreeRTOS/src/queue.c **** 	/* This function is called from a critical section. */
2080:FreeRTOS/src/queue.c **** 
2081:FreeRTOS/src/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2082:FreeRTOS/src/queue.c **** 
2083:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2084:FreeRTOS/src/queue.c **** 	{
2085:FreeRTOS/src/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2086:FreeRTOS/src/queue.c **** 		{
2087:FreeRTOS/src/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2088:FreeRTOS/src/queue.c **** 			{
2089:FreeRTOS/src/queue.c **** 				/* The mutex is no longer being held. */
2090:FreeRTOS/src/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2091:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2092:FreeRTOS/src/queue.c **** 			}
2093:FreeRTOS/src/queue.c **** 			else
2094:FreeRTOS/src/queue.c **** 			{
2095:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2096:FreeRTOS/src/queue.c **** 			}
2097:FreeRTOS/src/queue.c **** 		}
2098:FreeRTOS/src/queue.c **** 		#endif /* configUSE_MUTEXES */
2099:FreeRTOS/src/queue.c **** 	}
2100:FreeRTOS/src/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2101:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 39


2102:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2103:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2104:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2105:FreeRTOS/src/queue.c **** 		{
2106:FreeRTOS/src/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2107:FreeRTOS/src/queue.c **** 		}
2108:FreeRTOS/src/queue.c **** 		else
2109:FreeRTOS/src/queue.c **** 		{
2110:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2111:FreeRTOS/src/queue.c **** 		}
2112:FreeRTOS/src/queue.c **** 	}
2113:FreeRTOS/src/queue.c **** 	else
2114:FreeRTOS/src/queue.c **** 	{
2115:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2116:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2117:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2118:FreeRTOS/src/queue.c **** 		{
2119:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2120:FreeRTOS/src/queue.c **** 		}
2121:FreeRTOS/src/queue.c **** 		else
2122:FreeRTOS/src/queue.c **** 		{
2123:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:FreeRTOS/src/queue.c **** 		}
2125:FreeRTOS/src/queue.c **** 
2126:FreeRTOS/src/queue.c **** 		if( xPosition == queueOVERWRITE )
2127:FreeRTOS/src/queue.c **** 		{
2128:FreeRTOS/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2129:FreeRTOS/src/queue.c **** 			{
2130:FreeRTOS/src/queue.c **** 				/* An item is not being added but overwritten, so subtract
2131:FreeRTOS/src/queue.c **** 				one from the recorded number of items in the queue so when
2132:FreeRTOS/src/queue.c **** 				one is added again below the number of recorded items remains
2133:FreeRTOS/src/queue.c **** 				correct. */
2134:FreeRTOS/src/queue.c **** 				--uxMessagesWaiting;
2135:FreeRTOS/src/queue.c **** 			}
2136:FreeRTOS/src/queue.c **** 			else
2137:FreeRTOS/src/queue.c **** 			{
2138:FreeRTOS/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2139:FreeRTOS/src/queue.c **** 			}
2140:FreeRTOS/src/queue.c **** 		}
2141:FreeRTOS/src/queue.c **** 		else
2142:FreeRTOS/src/queue.c **** 		{
2143:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2144:FreeRTOS/src/queue.c **** 		}
2145:FreeRTOS/src/queue.c **** 	}
2146:FreeRTOS/src/queue.c **** 
2147:FreeRTOS/src/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2148:FreeRTOS/src/queue.c **** 
2149:FreeRTOS/src/queue.c **** 	return xReturn;
2150:FreeRTOS/src/queue.c **** }
2151:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2152:FreeRTOS/src/queue.c **** 
2153:FreeRTOS/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2154:FreeRTOS/src/queue.c **** {
2155:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2156:FreeRTOS/src/queue.c **** 	{
2157:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2158:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 40


2159:FreeRTOS/src/queue.c **** 		{
2160:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2161:FreeRTOS/src/queue.c **** 		}
2162:FreeRTOS/src/queue.c **** 		else
2163:FreeRTOS/src/queue.c **** 		{
2164:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2165:FreeRTOS/src/queue.c **** 		}
2166:FreeRTOS/src/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2167:FreeRTOS/src/queue.c **** 	}
2168:FreeRTOS/src/queue.c **** }
2169:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2170:FreeRTOS/src/queue.c **** 
2171:FreeRTOS/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2172:FreeRTOS/src/queue.c **** {
2173:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2174:FreeRTOS/src/queue.c **** 
2175:FreeRTOS/src/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2176:FreeRTOS/src/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2177:FreeRTOS/src/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2178:FreeRTOS/src/queue.c **** 	updated. */
2179:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2180:FreeRTOS/src/queue.c **** 	{
2181:FreeRTOS/src/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2182:FreeRTOS/src/queue.c **** 
2183:FreeRTOS/src/queue.c **** 		/* See if data was added to the queue while it was locked. */
2184:FreeRTOS/src/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2185:FreeRTOS/src/queue.c **** 		{
2186:FreeRTOS/src/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2187:FreeRTOS/src/queue.c **** 			blocked waiting for data to become available? */
2188:FreeRTOS/src/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2189:FreeRTOS/src/queue.c **** 			{
2190:FreeRTOS/src/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2191:FreeRTOS/src/queue.c **** 				{
2192:FreeRTOS/src/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2193:FreeRTOS/src/queue.c **** 					{
2194:FreeRTOS/src/queue.c **** 						/* The queue is a member of a queue set, and posting to
2195:FreeRTOS/src/queue.c **** 						the queue set caused a higher priority task to unblock.
2196:FreeRTOS/src/queue.c **** 						A context switch is required. */
2197:FreeRTOS/src/queue.c **** 						vTaskMissedYield();
2198:FreeRTOS/src/queue.c **** 					}
2199:FreeRTOS/src/queue.c **** 					else
2200:FreeRTOS/src/queue.c **** 					{
2201:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2202:FreeRTOS/src/queue.c **** 					}
2203:FreeRTOS/src/queue.c **** 				}
2204:FreeRTOS/src/queue.c **** 				else
2205:FreeRTOS/src/queue.c **** 				{
2206:FreeRTOS/src/queue.c **** 					/* Tasks that are removed from the event list will get
2207:FreeRTOS/src/queue.c **** 					added to the pending ready list as the scheduler is still
2208:FreeRTOS/src/queue.c **** 					suspended. */
2209:FreeRTOS/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2210:FreeRTOS/src/queue.c **** 					{
2211:FreeRTOS/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2212:FreeRTOS/src/queue.c **** 						{
2213:FreeRTOS/src/queue.c **** 							/* The task waiting has a higher priority so record that a
2214:FreeRTOS/src/queue.c **** 							context	switch is required. */
2215:FreeRTOS/src/queue.c **** 							vTaskMissedYield();
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 41


2216:FreeRTOS/src/queue.c **** 						}
2217:FreeRTOS/src/queue.c **** 						else
2218:FreeRTOS/src/queue.c **** 						{
2219:FreeRTOS/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2220:FreeRTOS/src/queue.c **** 						}
2221:FreeRTOS/src/queue.c **** 					}
2222:FreeRTOS/src/queue.c **** 					else
2223:FreeRTOS/src/queue.c **** 					{
2224:FreeRTOS/src/queue.c **** 						break;
2225:FreeRTOS/src/queue.c **** 					}
2226:FreeRTOS/src/queue.c **** 				}
2227:FreeRTOS/src/queue.c **** 			}
2228:FreeRTOS/src/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2229:FreeRTOS/src/queue.c **** 			{
2230:FreeRTOS/src/queue.c **** 				/* Tasks that are removed from the event list will get added to
2231:FreeRTOS/src/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2232:FreeRTOS/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2233:FreeRTOS/src/queue.c **** 				{
2234:FreeRTOS/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2235:FreeRTOS/src/queue.c **** 					{
2236:FreeRTOS/src/queue.c **** 						/* The task waiting has a higher priority so record that
2237:FreeRTOS/src/queue.c **** 						a context switch is required. */
2238:FreeRTOS/src/queue.c **** 						vTaskMissedYield();
2239:FreeRTOS/src/queue.c **** 					}
2240:FreeRTOS/src/queue.c **** 					else
2241:FreeRTOS/src/queue.c **** 					{
2242:FreeRTOS/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:FreeRTOS/src/queue.c **** 					}
2244:FreeRTOS/src/queue.c **** 				}
2245:FreeRTOS/src/queue.c **** 				else
2246:FreeRTOS/src/queue.c **** 				{
2247:FreeRTOS/src/queue.c **** 					break;
2248:FreeRTOS/src/queue.c **** 				}
2249:FreeRTOS/src/queue.c **** 			}
2250:FreeRTOS/src/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2251:FreeRTOS/src/queue.c **** 
2252:FreeRTOS/src/queue.c **** 			--cTxLock;
2253:FreeRTOS/src/queue.c **** 		}
2254:FreeRTOS/src/queue.c **** 
2255:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2256:FreeRTOS/src/queue.c **** 	}
2257:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2258:FreeRTOS/src/queue.c **** 
2259:FreeRTOS/src/queue.c **** 	/* Do the same for the Rx lock. */
2260:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2261:FreeRTOS/src/queue.c **** 	{
2262:FreeRTOS/src/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2263:FreeRTOS/src/queue.c **** 
2264:FreeRTOS/src/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2265:FreeRTOS/src/queue.c **** 		{
2266:FreeRTOS/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2267:FreeRTOS/src/queue.c **** 			{
2268:FreeRTOS/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2269:FreeRTOS/src/queue.c **** 				{
2270:FreeRTOS/src/queue.c **** 					vTaskMissedYield();
2271:FreeRTOS/src/queue.c **** 				}
2272:FreeRTOS/src/queue.c **** 				else
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 42


2273:FreeRTOS/src/queue.c **** 				{
2274:FreeRTOS/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2275:FreeRTOS/src/queue.c **** 				}
2276:FreeRTOS/src/queue.c **** 
2277:FreeRTOS/src/queue.c **** 				--cRxLock;
2278:FreeRTOS/src/queue.c **** 			}
2279:FreeRTOS/src/queue.c **** 			else
2280:FreeRTOS/src/queue.c **** 			{
2281:FreeRTOS/src/queue.c **** 				break;
2282:FreeRTOS/src/queue.c **** 			}
2283:FreeRTOS/src/queue.c **** 		}
2284:FreeRTOS/src/queue.c **** 
2285:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2286:FreeRTOS/src/queue.c **** 	}
2287:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2288:FreeRTOS/src/queue.c **** }
2289:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2290:FreeRTOS/src/queue.c **** 
2291:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2292:FreeRTOS/src/queue.c **** {
2293:FreeRTOS/src/queue.c **** BaseType_t xReturn;
2294:FreeRTOS/src/queue.c **** 
2295:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
2296:FreeRTOS/src/queue.c **** 	{
2297:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2298:FreeRTOS/src/queue.c **** 		{
2299:FreeRTOS/src/queue.c **** 			xReturn = pdTRUE;
2300:FreeRTOS/src/queue.c **** 		}
2301:FreeRTOS/src/queue.c **** 		else
2302:FreeRTOS/src/queue.c **** 		{
2303:FreeRTOS/src/queue.c **** 			xReturn = pdFALSE;
2304:FreeRTOS/src/queue.c **** 		}
2305:FreeRTOS/src/queue.c **** 	}
2306:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
2307:FreeRTOS/src/queue.c **** 
2308:FreeRTOS/src/queue.c **** 	return xReturn;
2309:FreeRTOS/src/queue.c **** }
2310:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2311:FreeRTOS/src/queue.c **** 
2312:FreeRTOS/src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2313:FreeRTOS/src/queue.c **** {
2314:FreeRTOS/src/queue.c **** BaseType_t xReturn;
2315:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
2316:FreeRTOS/src/queue.c **** 
2317:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
2318:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2319:FreeRTOS/src/queue.c **** 	{
2320:FreeRTOS/src/queue.c **** 		xReturn = pdTRUE;
2321:FreeRTOS/src/queue.c **** 	}
2322:FreeRTOS/src/queue.c **** 	else
2323:FreeRTOS/src/queue.c **** 	{
2324:FreeRTOS/src/queue.c **** 		xReturn = pdFALSE;
2325:FreeRTOS/src/queue.c **** 	}
2326:FreeRTOS/src/queue.c **** 
2327:FreeRTOS/src/queue.c **** 	return xReturn;
2328:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2329:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 43


2330:FreeRTOS/src/queue.c **** 
2331:FreeRTOS/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2332:FreeRTOS/src/queue.c **** {
  69              		.loc 1 2332 1 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		.loc 1 2332 1 is_stmt 0 view .LVU13
  74 0000 10B5     		push	{r4, lr}
  75              	.LCFI0:
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 4, -8
  78              		.cfi_offset 14, -4
  79 0002 0446     		mov	r4, r0
2333:FreeRTOS/src/queue.c **** BaseType_t xReturn;
  80              		.loc 1 2333 1 is_stmt 1 view .LVU14
2334:FreeRTOS/src/queue.c **** 
2335:FreeRTOS/src/queue.c **** 	taskENTER_CRITICAL();
  81              		.loc 1 2335 2 view .LVU15
  82 0004 FFF7FEFF 		bl	vPortEnterCritical
  83              	.LVL6:
2336:FreeRTOS/src/queue.c **** 	{
2337:FreeRTOS/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  84              		.loc 1 2337 3 view .LVU16
  85              		.loc 1 2337 14 is_stmt 0 view .LVU17
  86 0008 A26B     		ldr	r2, [r4, #56]
  87              		.loc 1 2337 44 view .LVU18
  88 000a E36B     		ldr	r3, [r4, #60]
  89              		.loc 1 2337 5 view .LVU19
  90 000c 9A42     		cmp	r2, r3
  91 000e 04D0     		beq	.L8
2338:FreeRTOS/src/queue.c **** 		{
2339:FreeRTOS/src/queue.c **** 			xReturn = pdTRUE;
2340:FreeRTOS/src/queue.c **** 		}
2341:FreeRTOS/src/queue.c **** 		else
2342:FreeRTOS/src/queue.c **** 		{
2343:FreeRTOS/src/queue.c **** 			xReturn = pdFALSE;
  92              		.loc 1 2343 12 view .LVU20
  93 0010 0024     		movs	r4, #0
  94              	.LVL7:
  95              	.L5:
2344:FreeRTOS/src/queue.c **** 		}
2345:FreeRTOS/src/queue.c **** 	}
2346:FreeRTOS/src/queue.c **** 	taskEXIT_CRITICAL();
  96              		.loc 1 2346 2 is_stmt 1 view .LVU21
  97 0012 FFF7FEFF 		bl	vPortExitCritical
  98              	.LVL8:
2347:FreeRTOS/src/queue.c **** 
2348:FreeRTOS/src/queue.c **** 	return xReturn;
  99              		.loc 1 2348 2 view .LVU22
2349:FreeRTOS/src/queue.c **** }
 100              		.loc 1 2349 1 is_stmt 0 view .LVU23
 101 0016 2046     		mov	r0, r4
 102 0018 10BD     		pop	{r4, pc}
 103              	.LVL9:
 104              	.L8:
2339:FreeRTOS/src/queue.c **** 		}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 44


 105              		.loc 1 2339 12 view .LVU24
 106 001a 0124     		movs	r4, #1
 107              	.LVL10:
2339:FreeRTOS/src/queue.c **** 		}
 108              		.loc 1 2339 12 view .LVU25
 109 001c F9E7     		b	.L5
 110              		.cfi_endproc
 111              	.LFE93:
 113              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 114              		.align	1
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu softvfp
 120              	prvIsQueueEmpty:
 121              	.LVL11:
 122              	.LFB91:
2292:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 123              		.loc 1 2292 1 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
2292:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 127              		.loc 1 2292 1 is_stmt 0 view .LVU27
 128 0000 10B5     		push	{r4, lr}
 129              	.LCFI1:
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 4, -8
 132              		.cfi_offset 14, -4
 133 0002 0446     		mov	r4, r0
2293:FreeRTOS/src/queue.c **** 
 134              		.loc 1 2293 1 is_stmt 1 view .LVU28
2295:FreeRTOS/src/queue.c **** 	{
 135              		.loc 1 2295 2 view .LVU29
 136 0004 FFF7FEFF 		bl	vPortEnterCritical
 137              	.LVL12:
2297:FreeRTOS/src/queue.c **** 		{
 138              		.loc 1 2297 3 view .LVU30
2297:FreeRTOS/src/queue.c **** 		{
 139              		.loc 1 2297 14 is_stmt 0 view .LVU31
 140 0008 A36B     		ldr	r3, [r4, #56]
2297:FreeRTOS/src/queue.c **** 		{
 141              		.loc 1 2297 5 view .LVU32
 142 000a 23B9     		cbnz	r3, .L11
2299:FreeRTOS/src/queue.c **** 		}
 143              		.loc 1 2299 12 view .LVU33
 144 000c 0124     		movs	r4, #1
 145              	.LVL13:
 146              	.L10:
2306:FreeRTOS/src/queue.c **** 
 147              		.loc 1 2306 2 is_stmt 1 view .LVU34
 148 000e FFF7FEFF 		bl	vPortExitCritical
 149              	.LVL14:
2308:FreeRTOS/src/queue.c **** }
 150              		.loc 1 2308 2 view .LVU35
2309:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 151              		.loc 1 2309 1 is_stmt 0 view .LVU36
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 45


 152 0012 2046     		mov	r0, r4
 153 0014 10BD     		pop	{r4, pc}
 154              	.LVL15:
 155              	.L11:
2303:FreeRTOS/src/queue.c **** 		}
 156              		.loc 1 2303 12 view .LVU37
 157 0016 0024     		movs	r4, #0
 158              	.LVL16:
2303:FreeRTOS/src/queue.c **** 		}
 159              		.loc 1 2303 12 view .LVU38
 160 0018 F9E7     		b	.L10
 161              		.cfi_endproc
 162              	.LFE91:
 164              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 165              		.align	1
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu softvfp
 171              	prvCopyDataToQueue:
 172              	.LVL17:
 173              	.LFB88:
2075:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
 174              		.loc 1 2075 1 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
2075:FreeRTOS/src/queue.c **** BaseType_t xReturn = pdFALSE;
 178              		.loc 1 2075 1 is_stmt 0 view .LVU40
 179 0000 70B5     		push	{r4, r5, r6, lr}
 180              	.LCFI2:
 181              		.cfi_def_cfa_offset 16
 182              		.cfi_offset 4, -16
 183              		.cfi_offset 5, -12
 184              		.cfi_offset 6, -8
 185              		.cfi_offset 14, -4
 186 0002 0446     		mov	r4, r0
 187 0004 1646     		mov	r6, r2
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 188              		.loc 1 2076 1 is_stmt 1 view .LVU41
 189              	.LVL18:
2077:FreeRTOS/src/queue.c **** 
 190              		.loc 1 2077 1 view .LVU42
2081:FreeRTOS/src/queue.c **** 
 191              		.loc 1 2081 2 view .LVU43
2081:FreeRTOS/src/queue.c **** 
 192              		.loc 1 2081 20 is_stmt 0 view .LVU44
 193 0006 856B     		ldr	r5, [r0, #56]
 194              	.LVL19:
2083:FreeRTOS/src/queue.c **** 	{
 195              		.loc 1 2083 2 is_stmt 1 view .LVU45
2083:FreeRTOS/src/queue.c **** 	{
 196              		.loc 1 2083 13 is_stmt 0 view .LVU46
 197 0008 026C     		ldr	r2, [r0, #64]
 198              	.LVL20:
2083:FreeRTOS/src/queue.c **** 	{
 199              		.loc 1 2083 4 view .LVU47
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 46


 200 000a 5AB9     		cbnz	r2, .L14
2087:FreeRTOS/src/queue.c **** 			{
 201              		.loc 1 2087 4 is_stmt 1 view .LVU48
2087:FreeRTOS/src/queue.c **** 			{
 202              		.loc 1 2087 15 is_stmt 0 view .LVU49
 203 000c 0368     		ldr	r3, [r0]
2087:FreeRTOS/src/queue.c **** 			{
 204              		.loc 1 2087 6 view .LVU50
 205 000e 1BB1     		cbz	r3, .L23
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 206              		.loc 1 2076 12 view .LVU51
 207 0010 0020     		movs	r0, #0
 208              	.LVL21:
 209              	.L15:
2143:FreeRTOS/src/queue.c **** 		}
 210              		.loc 1 2143 28 is_stmt 1 view .LVU52
2147:FreeRTOS/src/queue.c **** 
 211              		.loc 1 2147 2 view .LVU53
2147:FreeRTOS/src/queue.c **** 
 212              		.loc 1 2147 49 is_stmt 0 view .LVU54
 213 0012 0135     		adds	r5, r5, #1
 214              	.LVL22:
2147:FreeRTOS/src/queue.c **** 
 215              		.loc 1 2147 29 view .LVU55
 216 0014 A563     		str	r5, [r4, #56]
2149:FreeRTOS/src/queue.c **** }
 217              		.loc 1 2149 2 is_stmt 1 view .LVU56
2150:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 218              		.loc 1 2150 1 is_stmt 0 view .LVU57
 219 0016 70BD     		pop	{r4, r5, r6, pc}
 220              	.LVL23:
 221              	.L23:
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 222              		.loc 1 2090 5 is_stmt 1 view .LVU58
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 223              		.loc 1 2090 15 is_stmt 0 view .LVU59
 224 0018 8068     		ldr	r0, [r0, #8]
 225              	.LVL24:
2090:FreeRTOS/src/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 226              		.loc 1 2090 15 view .LVU60
 227 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 228              	.LVL25:
2091:FreeRTOS/src/queue.c **** 			}
 229              		.loc 1 2091 5 is_stmt 1 view .LVU61
2091:FreeRTOS/src/queue.c **** 			}
 230              		.loc 1 2091 40 is_stmt 0 view .LVU62
 231 001e 0023     		movs	r3, #0
 232 0020 A360     		str	r3, [r4, #8]
 233 0022 F6E7     		b	.L15
 234              	.LVL26:
 235              	.L14:
2100:FreeRTOS/src/queue.c **** 	{
 236              		.loc 1 2100 7 is_stmt 1 view .LVU63
2100:FreeRTOS/src/queue.c **** 	{
 237              		.loc 1 2100 9 is_stmt 0 view .LVU64
 238 0024 6EB9     		cbnz	r6, .L16
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 47


 239              		.loc 1 2102 3 is_stmt 1 view .LVU65
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 240              		.loc 1 2102 12 is_stmt 0 view .LVU66
 241 0026 4068     		ldr	r0, [r0, #4]
 242              	.LVL27:
2102:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 243              		.loc 1 2102 12 view .LVU67
 244 0028 FFF7FEFF 		bl	memcpy
 245              	.LVL28:
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 246              		.loc 1 2103 3 is_stmt 1 view .LVU68
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 247              		.loc 1 2103 32 is_stmt 0 view .LVU69
 248 002c 226C     		ldr	r2, [r4, #64]
2103:FreeRTOS/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 249              		.loc 1 2103 22 view .LVU70
 250 002e 6368     		ldr	r3, [r4, #4]
 251 0030 1344     		add	r3, r3, r2
 252 0032 6360     		str	r3, [r4, #4]
2104:FreeRTOS/src/queue.c **** 		{
 253              		.loc 1 2104 3 is_stmt 1 view .LVU71
2104:FreeRTOS/src/queue.c **** 		{
 254              		.loc 1 2104 46 is_stmt 0 view .LVU72
 255 0034 A268     		ldr	r2, [r4, #8]
2104:FreeRTOS/src/queue.c **** 		{
 256              		.loc 1 2104 5 view .LVU73
 257 0036 9342     		cmp	r3, r2
 258 0038 19D3     		bcc	.L19
2106:FreeRTOS/src/queue.c **** 		}
 259              		.loc 1 2106 4 is_stmt 1 view .LVU74
2106:FreeRTOS/src/queue.c **** 		}
 260              		.loc 1 2106 32 is_stmt 0 view .LVU75
 261 003a 2368     		ldr	r3, [r4]
2106:FreeRTOS/src/queue.c **** 		}
 262              		.loc 1 2106 23 view .LVU76
 263 003c 6360     		str	r3, [r4, #4]
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 264              		.loc 1 2076 12 view .LVU77
 265 003e 0020     		movs	r0, #0
 266 0040 E7E7     		b	.L15
 267              	.LVL29:
 268              	.L16:
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 269              		.loc 1 2115 3 is_stmt 1 view .LVU78
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 270              		.loc 1 2115 12 is_stmt 0 view .LVU79
 271 0042 C068     		ldr	r0, [r0, #12]
 272              	.LVL30:
2115:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 273              		.loc 1 2115 12 view .LVU80
 274 0044 FFF7FEFF 		bl	memcpy
 275              	.LVL31:
2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 276              		.loc 1 2116 3 is_stmt 1 view .LVU81
2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 277              		.loc 1 2116 42 is_stmt 0 view .LVU82
 278 0048 226C     		ldr	r2, [r4, #64]
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 48


2116:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 279              		.loc 1 2116 32 view .LVU83
 280 004a 5242     		rsbs	r2, r2, #0
 281 004c E368     		ldr	r3, [r4, #12]
 282 004e 1344     		add	r3, r3, r2
 283 0050 E360     		str	r3, [r4, #12]
2117:FreeRTOS/src/queue.c **** 		{
 284              		.loc 1 2117 3 is_stmt 1 view .LVU84
2117:FreeRTOS/src/queue.c **** 		{
 285              		.loc 1 2117 45 is_stmt 0 view .LVU85
 286 0052 2168     		ldr	r1, [r4]
2117:FreeRTOS/src/queue.c **** 		{
 287              		.loc 1 2117 5 view .LVU86
 288 0054 8B42     		cmp	r3, r1
 289 0056 02D2     		bcs	.L17
2119:FreeRTOS/src/queue.c **** 		}
 290              		.loc 1 2119 4 is_stmt 1 view .LVU87
2119:FreeRTOS/src/queue.c **** 		}
 291              		.loc 1 2119 54 is_stmt 0 view .LVU88
 292 0058 A368     		ldr	r3, [r4, #8]
2119:FreeRTOS/src/queue.c **** 		}
 293              		.loc 1 2119 62 view .LVU89
 294 005a 1A44     		add	r2, r2, r3
2119:FreeRTOS/src/queue.c **** 		}
 295              		.loc 1 2119 33 view .LVU90
 296 005c E260     		str	r2, [r4, #12]
 297              	.L17:
2123:FreeRTOS/src/queue.c **** 		}
 298              		.loc 1 2123 28 is_stmt 1 view .LVU91
2126:FreeRTOS/src/queue.c **** 		{
 299              		.loc 1 2126 3 view .LVU92
2126:FreeRTOS/src/queue.c **** 		{
 300              		.loc 1 2126 5 is_stmt 0 view .LVU93
 301 005e 022E     		cmp	r6, #2
 302 0060 01D0     		beq	.L24
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 303              		.loc 1 2076 12 view .LVU94
 304 0062 0020     		movs	r0, #0
 305 0064 D5E7     		b	.L15
 306              	.L24:
2128:FreeRTOS/src/queue.c **** 			{
 307              		.loc 1 2128 4 is_stmt 1 view .LVU95
2128:FreeRTOS/src/queue.c **** 			{
 308              		.loc 1 2128 6 is_stmt 0 view .LVU96
 309 0066 25B1     		cbz	r5, .L21
2134:FreeRTOS/src/queue.c **** 			}
 310              		.loc 1 2134 5 is_stmt 1 view .LVU97
 311 0068 013D     		subs	r5, r5, #1
 312              	.LVL32:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 313              		.loc 1 2076 12 is_stmt 0 view .LVU98
 314 006a 0020     		movs	r0, #0
 315 006c D1E7     		b	.L15
 316              	.L19:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 317              		.loc 1 2076 12 view .LVU99
 318 006e 0020     		movs	r0, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 49


 319 0070 CFE7     		b	.L15
 320              	.L21:
2076:FreeRTOS/src/queue.c **** UBaseType_t uxMessagesWaiting;
 321              		.loc 1 2076 12 view .LVU100
 322 0072 0020     		movs	r0, #0
 323 0074 CDE7     		b	.L15
 324              		.cfi_endproc
 325              	.LFE88:
 327              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 328              		.align	1
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu softvfp
 334              	prvCopyDataFromQueue:
 335              	.LVL33:
 336              	.LFB89:
2154:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 337              		.loc 1 2154 1 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
2155:FreeRTOS/src/queue.c **** 	{
 341              		.loc 1 2155 2 view .LVU102
2155:FreeRTOS/src/queue.c **** 	{
 342              		.loc 1 2155 13 is_stmt 0 view .LVU103
 343 0000 026C     		ldr	r2, [r0, #64]
2155:FreeRTOS/src/queue.c **** 	{
 344              		.loc 1 2155 4 view .LVU104
 345 0002 72B1     		cbz	r2, .L29
2154:FreeRTOS/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 346              		.loc 1 2154 1 view .LVU105
 347 0004 10B5     		push	{r4, lr}
 348              	.LCFI3:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 4, -8
 351              		.cfi_offset 14, -4
2157:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 352              		.loc 1 2157 3 is_stmt 1 view .LVU106
2157:FreeRTOS/src/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 353              		.loc 1 2157 32 is_stmt 0 view .LVU107
 354 0006 C368     		ldr	r3, [r0, #12]
 355 0008 1344     		add	r3, r3, r2
 356 000a C360     		str	r3, [r0, #12]
2158:FreeRTOS/src/queue.c **** 		{
 357              		.loc 1 2158 3 is_stmt 1 view .LVU108
2158:FreeRTOS/src/queue.c **** 		{
 358              		.loc 1 2158 56 is_stmt 0 view .LVU109
 359 000c 8468     		ldr	r4, [r0, #8]
2158:FreeRTOS/src/queue.c **** 		{
 360              		.loc 1 2158 5 view .LVU110
 361 000e A342     		cmp	r3, r4
 362 0010 01D3     		bcc	.L27
2160:FreeRTOS/src/queue.c **** 		}
 363              		.loc 1 2160 4 is_stmt 1 view .LVU111
2160:FreeRTOS/src/queue.c **** 		}
 364              		.loc 1 2160 42 is_stmt 0 view .LVU112
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 50


 365 0012 0368     		ldr	r3, [r0]
2160:FreeRTOS/src/queue.c **** 		}
 366              		.loc 1 2160 33 view .LVU113
 367 0014 C360     		str	r3, [r0, #12]
 368              	.L27:
 369 0016 0C46     		mov	r4, r1
2164:FreeRTOS/src/queue.c **** 		}
 370              		.loc 1 2164 28 is_stmt 1 view .LVU114
2166:FreeRTOS/src/queue.c **** 	}
 371              		.loc 1 2166 3 view .LVU115
2166:FreeRTOS/src/queue.c **** 	}
 372              		.loc 1 2166 12 is_stmt 0 view .LVU116
 373 0018 C168     		ldr	r1, [r0, #12]
 374              	.LVL34:
2166:FreeRTOS/src/queue.c **** 	}
 375              		.loc 1 2166 12 view .LVU117
 376 001a 2046     		mov	r0, r4
 377              	.LVL35:
2166:FreeRTOS/src/queue.c **** 	}
 378              		.loc 1 2166 12 view .LVU118
 379 001c FFF7FEFF 		bl	memcpy
 380              	.LVL36:
2168:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 381              		.loc 1 2168 1 view .LVU119
 382 0020 10BD     		pop	{r4, pc}
 383              	.LVL37:
 384              	.L29:
 385              	.LCFI4:
 386              		.cfi_def_cfa_offset 0
 387              		.cfi_restore 4
 388              		.cfi_restore 14
2168:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 389              		.loc 1 2168 1 view .LVU120
 390 0022 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE89:
 394              		.section	.text.prvUnlockQueue,"ax",%progbits
 395              		.align	1
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu softvfp
 401              	prvUnlockQueue:
 402              	.LVL38:
 403              	.LFB90:
2172:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 404              		.loc 1 2172 1 is_stmt 1 view -0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
2172:FreeRTOS/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 408              		.loc 1 2172 1 is_stmt 0 view .LVU122
 409 0000 38B5     		push	{r3, r4, r5, lr}
 410              	.LCFI5:
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 3, -16
 413              		.cfi_offset 4, -12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 51


 414              		.cfi_offset 5, -8
 415              		.cfi_offset 14, -4
 416 0002 0546     		mov	r5, r0
2179:FreeRTOS/src/queue.c **** 	{
 417              		.loc 1 2179 2 is_stmt 1 view .LVU123
 418 0004 FFF7FEFF 		bl	vPortEnterCritical
 419              	.LVL39:
 420              	.LBB23:
2181:FreeRTOS/src/queue.c **** 
 421              		.loc 1 2181 3 view .LVU124
2181:FreeRTOS/src/queue.c **** 
 422              		.loc 1 2181 10 is_stmt 0 view .LVU125
 423 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 424 000c 64B2     		sxtb	r4, r4
 425              	.LVL40:
2184:FreeRTOS/src/queue.c **** 		{
 426              		.loc 1 2184 3 is_stmt 1 view .LVU126
2184:FreeRTOS/src/queue.c **** 		{
 427              		.loc 1 2184 8 is_stmt 0 view .LVU127
 428 000e 03E0     		b	.L33
 429              	.L42:
2238:FreeRTOS/src/queue.c **** 					}
 430              		.loc 1 2238 7 is_stmt 1 view .LVU128
 431 0010 FFF7FEFF 		bl	vTaskMissedYield
 432              	.LVL41:
 433              	.L35:
2242:FreeRTOS/src/queue.c **** 					}
 434              		.loc 1 2242 31 view .LVU129
2252:FreeRTOS/src/queue.c **** 		}
 435              		.loc 1 2252 4 view .LVU130
 436 0014 013C     		subs	r4, r4, #1
 437              	.LVL42:
2252:FreeRTOS/src/queue.c **** 		}
 438              		.loc 1 2252 4 is_stmt 0 view .LVU131
 439 0016 64B2     		sxtb	r4, r4
 440              	.LVL43:
 441              	.L33:
2184:FreeRTOS/src/queue.c **** 		{
 442              		.loc 1 2184 8 view .LVU132
 443 0018 002C     		cmp	r4, #0
 444 001a 08DD     		ble	.L34
2232:FreeRTOS/src/queue.c **** 				{
 445              		.loc 1 2232 5 is_stmt 1 view .LVU133
2232:FreeRTOS/src/queue.c **** 				{
 446              		.loc 1 2232 9 is_stmt 0 view .LVU134
 447 001c 6B6A     		ldr	r3, [r5, #36]
2232:FreeRTOS/src/queue.c **** 				{
 448              		.loc 1 2232 7 view .LVU135
 449 001e 33B1     		cbz	r3, .L34
2234:FreeRTOS/src/queue.c **** 					{
 450              		.loc 1 2234 6 is_stmt 1 view .LVU136
2234:FreeRTOS/src/queue.c **** 					{
 451              		.loc 1 2234 10 is_stmt 0 view .LVU137
 452 0020 05F12400 		add	r0, r5, #36
 453 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 454              	.LVL44:
2234:FreeRTOS/src/queue.c **** 					{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 52


 455              		.loc 1 2234 8 view .LVU138
 456 0028 0028     		cmp	r0, #0
 457 002a F3D0     		beq	.L35
 458 002c F0E7     		b	.L42
 459              	.L34:
2255:FreeRTOS/src/queue.c **** 	}
 460              		.loc 1 2255 3 is_stmt 1 view .LVU139
2255:FreeRTOS/src/queue.c **** 	}
 461              		.loc 1 2255 20 is_stmt 0 view .LVU140
 462 002e FF23     		movs	r3, #255
 463 0030 85F84530 		strb	r3, [r5, #69]
 464              	.LBE23:
2257:FreeRTOS/src/queue.c **** 
 465              		.loc 1 2257 2 is_stmt 1 view .LVU141
 466 0034 FFF7FEFF 		bl	vPortExitCritical
 467              	.LVL45:
2260:FreeRTOS/src/queue.c **** 	{
 468              		.loc 1 2260 2 view .LVU142
 469 0038 FFF7FEFF 		bl	vPortEnterCritical
 470              	.LVL46:
 471              	.LBB24:
2262:FreeRTOS/src/queue.c **** 
 472              		.loc 1 2262 3 view .LVU143
2262:FreeRTOS/src/queue.c **** 
 473              		.loc 1 2262 10 is_stmt 0 view .LVU144
 474 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 475              	.LVL47:
2262:FreeRTOS/src/queue.c **** 
 476              		.loc 1 2262 10 view .LVU145
 477 0040 64B2     		sxtb	r4, r4
 478              	.LVL48:
2264:FreeRTOS/src/queue.c **** 		{
 479              		.loc 1 2264 3 is_stmt 1 view .LVU146
2264:FreeRTOS/src/queue.c **** 		{
 480              		.loc 1 2264 8 is_stmt 0 view .LVU147
 481 0042 03E0     		b	.L37
 482              	.L43:
2270:FreeRTOS/src/queue.c **** 				}
 483              		.loc 1 2270 6 is_stmt 1 view .LVU148
 484 0044 FFF7FEFF 		bl	vTaskMissedYield
 485              	.LVL49:
 486              	.L39:
2274:FreeRTOS/src/queue.c **** 				}
 487              		.loc 1 2274 30 view .LVU149
2277:FreeRTOS/src/queue.c **** 			}
 488              		.loc 1 2277 5 view .LVU150
 489 0048 013C     		subs	r4, r4, #1
 490              	.LVL50:
2277:FreeRTOS/src/queue.c **** 			}
 491              		.loc 1 2277 5 is_stmt 0 view .LVU151
 492 004a 64B2     		sxtb	r4, r4
 493              	.LVL51:
 494              	.L37:
2264:FreeRTOS/src/queue.c **** 		{
 495              		.loc 1 2264 8 view .LVU152
 496 004c 002C     		cmp	r4, #0
 497 004e 08DD     		ble	.L38
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 53


2266:FreeRTOS/src/queue.c **** 			{
 498              		.loc 1 2266 4 is_stmt 1 view .LVU153
2266:FreeRTOS/src/queue.c **** 			{
 499              		.loc 1 2266 8 is_stmt 0 view .LVU154
 500 0050 2B69     		ldr	r3, [r5, #16]
2266:FreeRTOS/src/queue.c **** 			{
 501              		.loc 1 2266 6 view .LVU155
 502 0052 33B1     		cbz	r3, .L38
2268:FreeRTOS/src/queue.c **** 				{
 503              		.loc 1 2268 5 is_stmt 1 view .LVU156
2268:FreeRTOS/src/queue.c **** 				{
 504              		.loc 1 2268 9 is_stmt 0 view .LVU157
 505 0054 05F11000 		add	r0, r5, #16
 506 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 507              	.LVL52:
2268:FreeRTOS/src/queue.c **** 				{
 508              		.loc 1 2268 7 view .LVU158
 509 005c 0028     		cmp	r0, #0
 510 005e F3D0     		beq	.L39
 511 0060 F0E7     		b	.L43
 512              	.L38:
2285:FreeRTOS/src/queue.c **** 	}
 513              		.loc 1 2285 3 is_stmt 1 view .LVU159
2285:FreeRTOS/src/queue.c **** 	}
 514              		.loc 1 2285 20 is_stmt 0 view .LVU160
 515 0062 FF23     		movs	r3, #255
 516 0064 85F84430 		strb	r3, [r5, #68]
 517              	.LBE24:
2287:FreeRTOS/src/queue.c **** }
 518              		.loc 1 2287 2 is_stmt 1 view .LVU161
 519 0068 FFF7FEFF 		bl	vPortExitCritical
 520              	.LVL53:
2288:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 521              		.loc 1 2288 1 is_stmt 0 view .LVU162
 522 006c 38BD     		pop	{r3, r4, r5, pc}
2288:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 523              		.loc 1 2288 1 view .LVU163
 524              		.cfi_endproc
 525              	.LFE90:
 527              		.section	.text.xQueueGenericReset,"ax",%progbits
 528              		.align	1
 529              		.global	xQueueGenericReset
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu softvfp
 535              	xQueueGenericReset:
 536              	.LVL54:
 537              	.LFB70:
 256:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 538              		.loc 1 256 1 is_stmt 1 view -0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 256:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 542              		.loc 1 256 1 is_stmt 0 view .LVU165
 543 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 54


 544              	.LCFI6:
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 3, -16
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 550 0002 0446     		mov	r4, r0
 551 0004 0D46     		mov	r5, r1
 257:FreeRTOS/src/queue.c **** 
 552              		.loc 1 257 1 is_stmt 1 view .LVU166
 553              	.LVL55:
 259:FreeRTOS/src/queue.c **** 
 554              		.loc 1 259 25 view .LVU167
 261:FreeRTOS/src/queue.c **** 	{
 555              		.loc 1 261 2 view .LVU168
 556 0006 FFF7FEFF 		bl	vPortEnterCritical
 557              	.LVL56:
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 558              		.loc 1 263 3 view .LVU169
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 559              		.loc 1 263 37 is_stmt 0 view .LVU170
 560 000a 2168     		ldr	r1, [r4]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 561              		.loc 1 263 57 view .LVU171
 562 000c E26B     		ldr	r2, [r4, #60]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 563              		.loc 1 263 77 view .LVU172
 564 000e 236C     		ldr	r3, [r4, #64]
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 565              		.loc 1 263 46 view .LVU173
 566 0010 03FB0210 		mla	r0, r3, r2, r1
 263:FreeRTOS/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 567              		.loc 1 263 28 view .LVU174
 568 0014 A060     		str	r0, [r4, #8]
 264:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 569              		.loc 1 264 3 is_stmt 1 view .LVU175
 264:FreeRTOS/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 570              		.loc 1 264 30 is_stmt 0 view .LVU176
 571 0016 0020     		movs	r0, #0
 572 0018 A063     		str	r0, [r4, #56]
 265:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 573              		.loc 1 265 3 is_stmt 1 view .LVU177
 265:FreeRTOS/src/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 574              		.loc 1 265 22 is_stmt 0 view .LVU178
 575 001a 6160     		str	r1, [r4, #4]
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 576              		.loc 1 266 3 is_stmt 1 view .LVU179
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 577              		.loc 1 266 74 is_stmt 0 view .LVU180
 578 001c 013A     		subs	r2, r2, #1
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 579              		.loc 1 266 50 view .LVU181
 580 001e 02FB0313 		mla	r3, r2, r3, r1
 266:FreeRTOS/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 581              		.loc 1 266 32 view .LVU182
 582 0022 E360     		str	r3, [r4, #12]
 267:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 55


 583              		.loc 1 267 3 is_stmt 1 view .LVU183
 267:FreeRTOS/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 584              		.loc 1 267 20 is_stmt 0 view .LVU184
 585 0024 FF23     		movs	r3, #255
 586 0026 84F84430 		strb	r3, [r4, #68]
 268:FreeRTOS/src/queue.c **** 
 587              		.loc 1 268 3 is_stmt 1 view .LVU185
 268:FreeRTOS/src/queue.c **** 
 588              		.loc 1 268 20 is_stmt 0 view .LVU186
 589 002a 84F84530 		strb	r3, [r4, #69]
 270:FreeRTOS/src/queue.c **** 		{
 590              		.loc 1 270 3 is_stmt 1 view .LVU187
 270:FreeRTOS/src/queue.c **** 		{
 591              		.loc 1 270 5 is_stmt 0 view .LVU188
 592 002e A5B9     		cbnz	r5, .L45
 277:FreeRTOS/src/queue.c **** 			{
 593              		.loc 1 277 4 is_stmt 1 view .LVU189
 277:FreeRTOS/src/queue.c **** 			{
 594              		.loc 1 277 8 is_stmt 0 view .LVU190
 595 0030 2369     		ldr	r3, [r4, #16]
 277:FreeRTOS/src/queue.c **** 			{
 596              		.loc 1 277 6 view .LVU191
 597 0032 1BB9     		cbnz	r3, .L48
 598              	.L46:
 300:FreeRTOS/src/queue.c **** 
 599              		.loc 1 300 2 is_stmt 1 view .LVU192
 600 0034 FFF7FEFF 		bl	vPortExitCritical
 601              	.LVL57:
 304:FreeRTOS/src/queue.c **** }
 602              		.loc 1 304 2 view .LVU193
 305:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 603              		.loc 1 305 1 is_stmt 0 view .LVU194
 604 0038 0120     		movs	r0, #1
 605 003a 38BD     		pop	{r3, r4, r5, pc}
 606              	.LVL58:
 607              	.L48:
 279:FreeRTOS/src/queue.c **** 				{
 608              		.loc 1 279 5 is_stmt 1 view .LVU195
 279:FreeRTOS/src/queue.c **** 				{
 609              		.loc 1 279 9 is_stmt 0 view .LVU196
 610 003c 04F11000 		add	r0, r4, #16
 611 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 612              	.LVL59:
 279:FreeRTOS/src/queue.c **** 				{
 613              		.loc 1 279 7 view .LVU197
 614 0044 0028     		cmp	r0, #0
 615 0046 F5D0     		beq	.L46
 281:FreeRTOS/src/queue.c **** 				}
 616              		.loc 1 281 6 is_stmt 1 view .LVU198
 617 0048 084B     		ldr	r3, .L49
 618 004a 4FF08052 		mov	r2, #268435456
 619 004e 1A60     		str	r2, [r3]
 281:FreeRTOS/src/queue.c **** 				}
 620              		.loc 1 281 6 view .LVU199
 621              		.syntax unified
 622              	@ 281 "FreeRTOS/src/queue.c" 1
 623 0050 BFF34F8F 		dsb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 56


 624              	@ 0 "" 2
 281:FreeRTOS/src/queue.c **** 				}
 625              		.loc 1 281 6 view .LVU200
 626              	@ 281 "FreeRTOS/src/queue.c" 1
 627 0054 BFF36F8F 		isb
 628              	@ 0 "" 2
 281:FreeRTOS/src/queue.c **** 				}
 629              		.loc 1 281 38 view .LVU201
 630              		.thumb
 631              		.syntax unified
 632 0058 ECE7     		b	.L46
 633              	.L45:
 296:FreeRTOS/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 634              		.loc 1 296 4 view .LVU202
 635 005a 04F11000 		add	r0, r4, #16
 636 005e FFF7FEFF 		bl	vListInitialise
 637              	.LVL60:
 297:FreeRTOS/src/queue.c **** 		}
 638              		.loc 1 297 4 view .LVU203
 639 0062 04F12400 		add	r0, r4, #36
 640 0066 FFF7FEFF 		bl	vListInitialise
 641              	.LVL61:
 642 006a E3E7     		b	.L46
 643              	.L50:
 644              		.align	2
 645              	.L49:
 646 006c 04ED00E0 		.word	-536810236
 647              		.cfi_endproc
 648              	.LFE70:
 650              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 651              		.align	1
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu softvfp
 657              	prvInitialiseNewQueue:
 658              	.LVL62:
 659              	.LFB72:
 423:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 660              		.loc 1 423 1 view -0
 661              		.cfi_startproc
 662              		@ args = 4, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 423:FreeRTOS/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 664              		.loc 1 423 1 is_stmt 0 view .LVU205
 665 0000 10B5     		push	{r4, lr}
 666              	.LCFI7:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 4, -8
 669              		.cfi_offset 14, -4
 670 0002 029B     		ldr	r3, [sp, #8]
 671              	.LVL63:
 426:FreeRTOS/src/queue.c **** 
 672              		.loc 1 426 2 is_stmt 1 view .LVU206
 428:FreeRTOS/src/queue.c **** 	{
 673              		.loc 1 428 2 view .LVU207
 428:FreeRTOS/src/queue.c **** 	{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 57


 674              		.loc 1 428 4 is_stmt 0 view .LVU208
 675 0004 0C46     		mov	r4, r1
 676 0006 39B9     		cbnz	r1, .L52
 434:FreeRTOS/src/queue.c **** 	}
 677              		.loc 1 434 3 is_stmt 1 view .LVU209
 434:FreeRTOS/src/queue.c **** 	}
 678              		.loc 1 434 22 is_stmt 0 view .LVU210
 679 0008 1B60     		str	r3, [r3]
 680              	.L53:
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 681              		.loc 1 444 2 is_stmt 1 view .LVU211
 444:FreeRTOS/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 682              		.loc 1 444 23 is_stmt 0 view .LVU212
 683 000a D863     		str	r0, [r3, #60]
 445:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 684              		.loc 1 445 2 is_stmt 1 view .LVU213
 445:FreeRTOS/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 685              		.loc 1 445 25 is_stmt 0 view .LVU214
 686 000c 1C64     		str	r4, [r3, #64]
 446:FreeRTOS/src/queue.c **** 
 687              		.loc 1 446 2 is_stmt 1 view .LVU215
 446:FreeRTOS/src/queue.c **** 
 688              		.loc 1 446 11 is_stmt 0 view .LVU216
 689 000e 0121     		movs	r1, #1
 690              	.LVL64:
 446:FreeRTOS/src/queue.c **** 
 691              		.loc 1 446 11 view .LVU217
 692 0010 1846     		mov	r0, r3
 693              	.LVL65:
 446:FreeRTOS/src/queue.c **** 
 694              		.loc 1 446 11 view .LVU218
 695 0012 FFF7FEFF 		bl	xQueueGenericReset
 696              	.LVL66:
 460:FreeRTOS/src/queue.c **** }
 697              		.loc 1 460 33 is_stmt 1 view .LVU219
 461:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 698              		.loc 1 461 1 is_stmt 0 view .LVU220
 699 0016 10BD     		pop	{r4, pc}
 700              	.LVL67:
 701              	.L52:
 439:FreeRTOS/src/queue.c **** 	}
 702              		.loc 1 439 3 is_stmt 1 view .LVU221
 439:FreeRTOS/src/queue.c **** 	}
 703              		.loc 1 439 22 is_stmt 0 view .LVU222
 704 0018 1A60     		str	r2, [r3]
 705 001a F6E7     		b	.L53
 706              		.cfi_endproc
 707              	.LFE72:
 709              		.section	.text.xQueueGenericCreate,"ax",%progbits
 710              		.align	1
 711              		.global	xQueueGenericCreate
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu softvfp
 717              	xQueueGenericCreate:
 718              	.LVL68:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 58


 719              	.LFB71:
 369:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 720              		.loc 1 369 2 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 369:FreeRTOS/src/queue.c **** 	Queue_t *pxNewQueue;
 724              		.loc 1 369 2 is_stmt 0 view .LVU224
 725 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 726              	.LCFI8:
 727              		.cfi_def_cfa_offset 20
 728              		.cfi_offset 4, -20
 729              		.cfi_offset 5, -16
 730              		.cfi_offset 6, -12
 731              		.cfi_offset 7, -8
 732              		.cfi_offset 14, -4
 733 0002 83B0     		sub	sp, sp, #12
 734              	.LCFI9:
 735              		.cfi_def_cfa_offset 32
 736 0004 0546     		mov	r5, r0
 737 0006 0E46     		mov	r6, r1
 738 0008 1746     		mov	r7, r2
 370:FreeRTOS/src/queue.c **** 	size_t xQueueSizeInBytes;
 739              		.loc 1 370 2 is_stmt 1 view .LVU225
 371:FreeRTOS/src/queue.c **** 	uint8_t *pucQueueStorage;
 740              		.loc 1 371 2 view .LVU226
 372:FreeRTOS/src/queue.c **** 
 741              		.loc 1 372 2 view .LVU227
 374:FreeRTOS/src/queue.c **** 
 742              		.loc 1 374 52 view .LVU228
 379:FreeRTOS/src/queue.c **** 
 743              		.loc 1 379 3 view .LVU229
 379:FreeRTOS/src/queue.c **** 
 744              		.loc 1 379 21 is_stmt 0 view .LVU230
 745 000a 01FB00F0 		mul	r0, r1, r0
 746              	.LVL69:
 390:FreeRTOS/src/queue.c **** 
 747              		.loc 1 390 3 is_stmt 1 view .LVU231
 390:FreeRTOS/src/queue.c **** 
 748              		.loc 1 390 30 is_stmt 0 view .LVU232
 749 000e 4830     		adds	r0, r0, #72
 750              	.LVL70:
 390:FreeRTOS/src/queue.c **** 
 751              		.loc 1 390 30 view .LVU233
 752 0010 FFF7FEFF 		bl	pvPortMalloc
 753              	.LVL71:
 392:FreeRTOS/src/queue.c **** 		{
 754              		.loc 1 392 3 is_stmt 1 view .LVU234
 392:FreeRTOS/src/queue.c **** 		{
 755              		.loc 1 392 5 is_stmt 0 view .LVU235
 756 0014 0446     		mov	r4, r0
 757 0016 38B1     		cbz	r0, .L55
 396:FreeRTOS/src/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 758              		.loc 1 396 4 is_stmt 1 view .LVU236
 759              	.LVL72:
 397:FreeRTOS/src/queue.c **** 
 760              		.loc 1 397 4 view .LVU237
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 59


 408:FreeRTOS/src/queue.c **** 		}
 761              		.loc 1 408 4 view .LVU238
 762 0018 0090     		str	r0, [sp]
 763 001a 3B46     		mov	r3, r7
 764 001c 00F14802 		add	r2, r0, #72
 765              	.LVL73:
 408:FreeRTOS/src/queue.c **** 		}
 766              		.loc 1 408 4 is_stmt 0 view .LVU239
 767 0020 3146     		mov	r1, r6
 768 0022 2846     		mov	r0, r5
 769              	.LVL74:
 408:FreeRTOS/src/queue.c **** 		}
 770              		.loc 1 408 4 view .LVU240
 771 0024 FFF7FEFF 		bl	prvInitialiseNewQueue
 772              	.LVL75:
 412:FreeRTOS/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 773              		.loc 1 412 43 is_stmt 1 view .LVU241
 413:FreeRTOS/src/queue.c **** 		}
 774              		.loc 1 413 28 view .LVU242
 416:FreeRTOS/src/queue.c **** 	}
 775              		.loc 1 416 3 view .LVU243
 776              	.L55:
 417:FreeRTOS/src/queue.c **** 
 777              		.loc 1 417 2 is_stmt 0 view .LVU244
 778 0028 2046     		mov	r0, r4
 779 002a 03B0     		add	sp, sp, #12
 780              	.LCFI10:
 781              		.cfi_def_cfa_offset 20
 782              		@ sp needed
 783 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 417:FreeRTOS/src/queue.c **** 
 784              		.loc 1 417 2 view .LVU245
 785              		.cfi_endproc
 786              	.LFE71:
 788              		.section	.text.xQueueGenericSend,"ax",%progbits
 789              		.align	1
 790              		.global	xQueueGenericSend
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 794              		.fpu softvfp
 796              	xQueueGenericSend:
 797              	.LVL76:
 798              	.LFB75:
 741:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 799              		.loc 1 741 1 is_stmt 1 view -0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 16
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 741:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 803              		.loc 1 741 1 is_stmt 0 view .LVU247
 804 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 805              	.LCFI11:
 806              		.cfi_def_cfa_offset 20
 807              		.cfi_offset 4, -20
 808              		.cfi_offset 5, -16
 809              		.cfi_offset 6, -12
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 60


 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 85B0     		sub	sp, sp, #20
 813              	.LCFI12:
 814              		.cfi_def_cfa_offset 40
 815 0004 0446     		mov	r4, r0
 816 0006 0F46     		mov	r7, r1
 817 0008 0192     		str	r2, [sp, #4]
 818 000a 1E46     		mov	r6, r3
 742:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 819              		.loc 1 742 1 is_stmt 1 view .LVU248
 820              	.LVL77:
 743:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 821              		.loc 1 743 1 view .LVU249
 744:FreeRTOS/src/queue.c **** 
 822              		.loc 1 744 1 view .LVU250
 742:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 823              		.loc 1 742 12 is_stmt 0 view .LVU251
 824 000c 0025     		movs	r5, #0
 825 000e 39E0     		b	.L59
 826              	.LVL78:
 827              	.L60:
 769:FreeRTOS/src/queue.c **** 
 828              		.loc 1 769 31 is_stmt 1 view .LVU252
 833:FreeRTOS/src/queue.c **** 
 829              		.loc 1 833 6 view .LVU253
 833:FreeRTOS/src/queue.c **** 
 830              		.loc 1 833 23 is_stmt 0 view .LVU254
 831 0010 3246     		mov	r2, r6
 832 0012 3946     		mov	r1, r7
 833 0014 2046     		mov	r0, r4
 834 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 835              	.LVL79:
 837:FreeRTOS/src/queue.c **** 					{
 836              		.loc 1 837 6 is_stmt 1 view .LVU255
 837:FreeRTOS/src/queue.c **** 					{
 837              		.loc 1 837 10 is_stmt 0 view .LVU256
 838 001a 636A     		ldr	r3, [r4, #36]
 837:FreeRTOS/src/queue.c **** 					{
 839              		.loc 1 837 8 view .LVU257
 840 001c 6BB9     		cbnz	r3, .L73
 852:FreeRTOS/src/queue.c **** 					{
 841              		.loc 1 852 11 is_stmt 1 view .LVU258
 852:FreeRTOS/src/queue.c **** 					{
 842              		.loc 1 852 13 is_stmt 0 view .LVU259
 843 001e 38B1     		cbz	r0, .L63
 858:FreeRTOS/src/queue.c **** 					}
 844              		.loc 1 858 7 is_stmt 1 view .LVU260
 845 0020 3C4B     		ldr	r3, .L78
 846 0022 4FF08052 		mov	r2, #268435456
 847 0026 1A60     		str	r2, [r3]
 858:FreeRTOS/src/queue.c **** 					}
 848              		.loc 1 858 7 view .LVU261
 849              		.syntax unified
 850              	@ 858 "FreeRTOS/src/queue.c" 1
 851 0028 BFF34F8F 		dsb
 852              	@ 0 "" 2
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 61


 858:FreeRTOS/src/queue.c **** 					}
 853              		.loc 1 858 7 view .LVU262
 854              	@ 858 "FreeRTOS/src/queue.c" 1
 855 002c BFF36F8F 		isb
 856              	@ 0 "" 2
 858:FreeRTOS/src/queue.c **** 					}
 857              		.loc 1 858 39 view .LVU263
 858              	.LVL80:
 859              		.thumb
 860              		.syntax unified
 861              	.L63:
 862:FreeRTOS/src/queue.c **** 					}
 862              		.loc 1 862 31 view .LVU264
 867:FreeRTOS/src/queue.c **** 				return pdPASS;
 863              		.loc 1 867 5 view .LVU265
 864 0030 FFF7FEFF 		bl	vPortExitCritical
 865              	.LVL81:
 868:FreeRTOS/src/queue.c **** 			}
 866              		.loc 1 868 5 view .LVU266
 868:FreeRTOS/src/queue.c **** 			}
 867              		.loc 1 868 12 is_stmt 0 view .LVU267
 868 0034 0120     		movs	r0, #1
 869              	.L58:
 947:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 870              		.loc 1 947 1 view .LVU268
 871 0036 05B0     		add	sp, sp, #20
 872              	.LCFI13:
 873              		.cfi_remember_state
 874              		.cfi_def_cfa_offset 20
 875              		@ sp needed
 876 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 877              	.LVL82:
 878              	.L73:
 879              	.LCFI14:
 880              		.cfi_restore_state
 839:FreeRTOS/src/queue.c **** 						{
 881              		.loc 1 839 7 is_stmt 1 view .LVU269
 839:FreeRTOS/src/queue.c **** 						{
 882              		.loc 1 839 11 is_stmt 0 view .LVU270
 883 003a 04F12400 		add	r0, r4, #36
 884              	.LVL83:
 839:FreeRTOS/src/queue.c **** 						{
 885              		.loc 1 839 11 view .LVU271
 886 003e FFF7FEFF 		bl	xTaskRemoveFromEventList
 887              	.LVL84:
 839:FreeRTOS/src/queue.c **** 						{
 888              		.loc 1 839 9 view .LVU272
 889 0042 0028     		cmp	r0, #0
 890 0044 F4D0     		beq	.L63
 845:FreeRTOS/src/queue.c **** 						}
 891              		.loc 1 845 8 is_stmt 1 view .LVU273
 892 0046 334B     		ldr	r3, .L78
 893 0048 4FF08052 		mov	r2, #268435456
 894 004c 1A60     		str	r2, [r3]
 845:FreeRTOS/src/queue.c **** 						}
 895              		.loc 1 845 8 view .LVU274
 896              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 62


 897              	@ 845 "FreeRTOS/src/queue.c" 1
 898 004e BFF34F8F 		dsb
 899              	@ 0 "" 2
 845:FreeRTOS/src/queue.c **** 						}
 900              		.loc 1 845 8 view .LVU275
 901              	@ 845 "FreeRTOS/src/queue.c" 1
 902 0052 BFF36F8F 		isb
 903              	@ 0 "" 2
 845:FreeRTOS/src/queue.c **** 						}
 904              		.loc 1 845 40 view .LVU276
 905              		.thumb
 906              		.syntax unified
 907 0056 EBE7     		b	.L63
 908              	.L74:
 876:FreeRTOS/src/queue.c **** 
 909              		.loc 1 876 6 view .LVU277
 910 0058 FFF7FEFF 		bl	vPortExitCritical
 911              	.LVL85:
 880:FreeRTOS/src/queue.c **** 					return errQUEUE_FULL;
 912              		.loc 1 880 39 view .LVU278
 881:FreeRTOS/src/queue.c **** 				}
 913              		.loc 1 881 6 view .LVU279
 881:FreeRTOS/src/queue.c **** 				}
 914              		.loc 1 881 13 is_stmt 0 view .LVU280
 915 005c 0020     		movs	r0, #0
 916 005e EAE7     		b	.L58
 917              	.L75:
 887:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 918              		.loc 1 887 6 is_stmt 1 view .LVU281
 919 0060 02A8     		add	r0, sp, #8
 920 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 921              	.LVL86:
 888:FreeRTOS/src/queue.c **** 				}
 922              		.loc 1 888 6 view .LVU282
 888:FreeRTOS/src/queue.c **** 				}
 923              		.loc 1 888 20 is_stmt 0 view .LVU283
 924 0066 0125     		movs	r5, #1
 925 0068 19E0     		b	.L66
 926              	.LVL87:
 927              	.L76:
 903:FreeRTOS/src/queue.c **** 
 928              		.loc 1 903 3 is_stmt 1 discriminator 1 view .LVU284
 929 006a 0023     		movs	r3, #0
 930 006c 84F84430 		strb	r3, [r4, #68]
 931 0070 21E0     		b	.L67
 932              	.L77:
 903:FreeRTOS/src/queue.c **** 
 933              		.loc 1 903 3 discriminator 4 view .LVU285
 934 0072 0023     		movs	r3, #0
 935 0074 84F84530 		strb	r3, [r4, #69]
 936 0078 23E0     		b	.L68
 937              	.L70:
 933:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 938              		.loc 1 933 5 view .LVU286
 939 007a 2046     		mov	r0, r4
 940 007c FFF7FEFF 		bl	prvUnlockQueue
 941              	.LVL88:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 63


 934:FreeRTOS/src/queue.c **** 			}
 942              		.loc 1 934 5 view .LVU287
 934:FreeRTOS/src/queue.c **** 			}
 943              		.loc 1 934 14 is_stmt 0 view .LVU288
 944 0080 FFF7FEFF 		bl	xTaskResumeAll
 945              	.LVL89:
 946              	.L59:
 746:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 947              		.loc 1 746 25 is_stmt 1 view .LVU289
 747:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 948              		.loc 1 747 97 view .LVU290
 748:FreeRTOS/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 949              		.loc 1 748 88 view .LVU291
 759:FreeRTOS/src/queue.c **** 	{
 950              		.loc 1 759 2 view .LVU292
 761:FreeRTOS/src/queue.c **** 		{
 951              		.loc 1 761 3 view .LVU293
 952 0084 FFF7FEFF 		bl	vPortEnterCritical
 953              	.LVL90:
 767:FreeRTOS/src/queue.c **** 			{
 954              		.loc 1 767 4 view .LVU294
 767:FreeRTOS/src/queue.c **** 			{
 955              		.loc 1 767 17 is_stmt 0 view .LVU295
 956 0088 A26B     		ldr	r2, [r4, #56]
 767:FreeRTOS/src/queue.c **** 			{
 957              		.loc 1 767 46 view .LVU296
 958 008a E36B     		ldr	r3, [r4, #60]
 767:FreeRTOS/src/queue.c **** 			{
 959              		.loc 1 767 6 view .LVU297
 960 008c 9A42     		cmp	r2, r3
 961 008e BFD3     		bcc	.L60
 767:FreeRTOS/src/queue.c **** 			{
 962              		.loc 1 767 59 discriminator 1 view .LVU298
 963 0090 022E     		cmp	r6, #2
 964 0092 BDD0     		beq	.L60
 872:FreeRTOS/src/queue.c **** 				{
 965              		.loc 1 872 5 is_stmt 1 view .LVU299
 872:FreeRTOS/src/queue.c **** 				{
 966              		.loc 1 872 22 is_stmt 0 view .LVU300
 967 0094 019B     		ldr	r3, [sp, #4]
 872:FreeRTOS/src/queue.c **** 				{
 968              		.loc 1 872 7 view .LVU301
 969 0096 002B     		cmp	r3, #0
 970 0098 DED0     		beq	.L74
 883:FreeRTOS/src/queue.c **** 				{
 971              		.loc 1 883 10 is_stmt 1 view .LVU302
 883:FreeRTOS/src/queue.c **** 				{
 972              		.loc 1 883 12 is_stmt 0 view .LVU303
 973 009a 002D     		cmp	r5, #0
 974 009c E0D0     		beq	.L75
 975              	.LVL91:
 976              	.L66:
 893:FreeRTOS/src/queue.c **** 				}
 977              		.loc 1 893 30 is_stmt 1 view .LVU304
 897:FreeRTOS/src/queue.c **** 
 978              		.loc 1 897 3 view .LVU305
 979 009e FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 64


 980              	.LVL92:
 902:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 981              		.loc 1 902 3 view .LVU306
 982 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 983              	.LVL93:
 903:FreeRTOS/src/queue.c **** 
 984              		.loc 1 903 3 view .LVU307
 985 00a6 FFF7FEFF 		bl	vPortEnterCritical
 986              	.LVL94:
 903:FreeRTOS/src/queue.c **** 
 987              		.loc 1 903 3 view .LVU308
 988 00aa 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 989 00ae 5BB2     		sxtb	r3, r3
 990 00b0 B3F1FF3F 		cmp	r3, #-1
 991 00b4 D9D0     		beq	.L76
 992              	.L67:
 903:FreeRTOS/src/queue.c **** 
 993              		.loc 1 903 3 discriminator 3 view .LVU309
 994 00b6 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 995 00ba 5BB2     		sxtb	r3, r3
 996 00bc B3F1FF3F 		cmp	r3, #-1
 997 00c0 D7D0     		beq	.L77
 998              	.L68:
 903:FreeRTOS/src/queue.c **** 
 999              		.loc 1 903 3 discriminator 6 view .LVU310
 1000 00c2 FFF7FEFF 		bl	vPortExitCritical
 1001              	.LVL95:
 906:FreeRTOS/src/queue.c **** 		{
 1002              		.loc 1 906 3 discriminator 6 view .LVU311
 906:FreeRTOS/src/queue.c **** 		{
 1003              		.loc 1 906 7 is_stmt 0 discriminator 6 view .LVU312
 1004 00c6 01A9     		add	r1, sp, #4
 1005 00c8 02A8     		add	r0, sp, #8
 1006 00ca FFF7FEFF 		bl	xTaskCheckForTimeOut
 1007              	.LVL96:
 906:FreeRTOS/src/queue.c **** 		{
 1008              		.loc 1 906 5 discriminator 6 view .LVU313
 1009 00ce C8B9     		cbnz	r0, .L69
 908:FreeRTOS/src/queue.c **** 			{
 1010              		.loc 1 908 4 is_stmt 1 view .LVU314
 908:FreeRTOS/src/queue.c **** 			{
 1011              		.loc 1 908 8 is_stmt 0 view .LVU315
 1012 00d0 2046     		mov	r0, r4
 1013 00d2 FFF7FEFF 		bl	prvIsQueueFull
 1014              	.LVL97:
 908:FreeRTOS/src/queue.c **** 			{
 1015              		.loc 1 908 6 view .LVU316
 1016 00d6 0028     		cmp	r0, #0
 1017 00d8 CFD0     		beq	.L70
 910:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1018              		.loc 1 910 43 is_stmt 1 view .LVU317
 911:FreeRTOS/src/queue.c **** 
 1019              		.loc 1 911 5 view .LVU318
 1020 00da 0199     		ldr	r1, [sp, #4]
 1021 00dc 04F11000 		add	r0, r4, #16
 1022 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1023              	.LVL98:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 65


 918:FreeRTOS/src/queue.c **** 
 1024              		.loc 1 918 5 view .LVU319
 1025 00e4 2046     		mov	r0, r4
 1026 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1027              	.LVL99:
 925:FreeRTOS/src/queue.c **** 				{
 1028              		.loc 1 925 5 view .LVU320
 925:FreeRTOS/src/queue.c **** 				{
 1029              		.loc 1 925 9 is_stmt 0 view .LVU321
 1030 00ea FFF7FEFF 		bl	xTaskResumeAll
 1031              	.LVL100:
 925:FreeRTOS/src/queue.c **** 				{
 1032              		.loc 1 925 7 view .LVU322
 1033 00ee 0028     		cmp	r0, #0
 1034 00f0 C8D1     		bne	.L59
 927:FreeRTOS/src/queue.c **** 				}
 1035              		.loc 1 927 6 is_stmt 1 view .LVU323
 1036 00f2 084B     		ldr	r3, .L78
 1037 00f4 4FF08052 		mov	r2, #268435456
 1038 00f8 1A60     		str	r2, [r3]
 927:FreeRTOS/src/queue.c **** 				}
 1039              		.loc 1 927 6 view .LVU324
 1040              		.syntax unified
 1041              	@ 927 "FreeRTOS/src/queue.c" 1
 1042 00fa BFF34F8F 		dsb
 1043              	@ 0 "" 2
 927:FreeRTOS/src/queue.c **** 				}
 1044              		.loc 1 927 6 view .LVU325
 1045              	@ 927 "FreeRTOS/src/queue.c" 1
 1046 00fe BFF36F8F 		isb
 1047              	@ 0 "" 2
 1048              		.thumb
 1049              		.syntax unified
 1050 0102 BFE7     		b	.L59
 1051              	.L69:
 940:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 1052              		.loc 1 940 4 view .LVU326
 1053 0104 2046     		mov	r0, r4
 1054 0106 FFF7FEFF 		bl	prvUnlockQueue
 1055              	.LVL101:
 941:FreeRTOS/src/queue.c **** 
 1056              		.loc 1 941 4 view .LVU327
 941:FreeRTOS/src/queue.c **** 
 1057              		.loc 1 941 13 is_stmt 0 view .LVU328
 1058 010a FFF7FEFF 		bl	xTaskResumeAll
 1059              	.LVL102:
 943:FreeRTOS/src/queue.c **** 			return errQUEUE_FULL;
 1060              		.loc 1 943 37 is_stmt 1 view .LVU329
 944:FreeRTOS/src/queue.c **** 		}
 1061              		.loc 1 944 4 view .LVU330
 944:FreeRTOS/src/queue.c **** 		}
 1062              		.loc 1 944 11 is_stmt 0 view .LVU331
 1063 010e 0020     		movs	r0, #0
 1064 0110 91E7     		b	.L58
 1065              	.L79:
 1066 0112 00BF     		.align	2
 1067              	.L78:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 66


 1068 0114 04ED00E0 		.word	-536810236
 1069              		.cfi_endproc
 1070              	.LFE75:
 1072              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1073              		.align	1
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu softvfp
 1079              	prvInitialiseMutex:
 1080              	.LVL103:
 1081              	.LFB73:
 467:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 1082              		.loc 1 467 2 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 468:FreeRTOS/src/queue.c **** 		{
 1086              		.loc 1 468 3 view .LVU333
 468:FreeRTOS/src/queue.c **** 		{
 1087              		.loc 1 468 5 is_stmt 0 view .LVU334
 1088 0000 48B1     		cbz	r0, .L83
 467:FreeRTOS/src/queue.c **** 		if( pxNewQueue != NULL )
 1089              		.loc 1 467 2 view .LVU335
 1090 0002 08B5     		push	{r3, lr}
 1091              	.LCFI15:
 1092              		.cfi_def_cfa_offset 8
 1093              		.cfi_offset 3, -8
 1094              		.cfi_offset 14, -4
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1095              		.loc 1 474 4 is_stmt 1 view .LVU336
 474:FreeRTOS/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1096              		.loc 1 474 42 is_stmt 0 view .LVU337
 1097 0004 0021     		movs	r1, #0
 1098 0006 8160     		str	r1, [r0, #8]
 475:FreeRTOS/src/queue.c **** 
 1099              		.loc 1 475 4 is_stmt 1 view .LVU338
 475:FreeRTOS/src/queue.c **** 
 1100              		.loc 1 475 28 is_stmt 0 view .LVU339
 1101 0008 0160     		str	r1, [r0]
 478:FreeRTOS/src/queue.c **** 
 1102              		.loc 1 478 4 is_stmt 1 view .LVU340
 478:FreeRTOS/src/queue.c **** 
 1103              		.loc 1 478 50 is_stmt 0 view .LVU341
 1104 000a C160     		str	r1, [r0, #12]
 480:FreeRTOS/src/queue.c **** 
 1105              		.loc 1 480 35 is_stmt 1 view .LVU342
 483:FreeRTOS/src/queue.c **** 		}
 1106              		.loc 1 483 4 view .LVU343
 483:FreeRTOS/src/queue.c **** 		}
 1107              		.loc 1 483 13 is_stmt 0 view .LVU344
 1108 000c 0B46     		mov	r3, r1
 1109 000e 0A46     		mov	r2, r1
 1110 0010 FFF7FEFF 		bl	xQueueGenericSend
 1111              	.LVL104:
 487:FreeRTOS/src/queue.c **** 		}
 1112              		.loc 1 487 30 is_stmt 1 view .LVU345
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 67


 489:FreeRTOS/src/queue.c **** 
 1113              		.loc 1 489 2 is_stmt 0 view .LVU346
 1114 0014 08BD     		pop	{r3, pc}
 1115              	.LVL105:
 1116              	.L83:
 1117              	.LCFI16:
 1118              		.cfi_def_cfa_offset 0
 1119              		.cfi_restore 3
 1120              		.cfi_restore 14
 489:FreeRTOS/src/queue.c **** 
 1121              		.loc 1 489 2 view .LVU347
 1122 0016 7047     		bx	lr
 1123              		.cfi_endproc
 1124              	.LFE73:
 1126              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1127              		.align	1
 1128              		.global	xQueueCreateMutex
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1132              		.fpu softvfp
 1134              	xQueueCreateMutex:
 1135              	.LVL106:
 1136              	.LFB74:
 497:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 1137              		.loc 1 497 2 is_stmt 1 view -0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 497:FreeRTOS/src/queue.c **** 	QueueHandle_t xNewQueue;
 1141              		.loc 1 497 2 is_stmt 0 view .LVU349
 1142 0000 10B5     		push	{r4, lr}
 1143              	.LCFI17:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 4, -8
 1146              		.cfi_offset 14, -4
 498:FreeRTOS/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1147              		.loc 1 498 2 is_stmt 1 view .LVU350
 499:FreeRTOS/src/queue.c **** 
 1148              		.loc 1 499 2 view .LVU351
 1149              	.LVL107:
 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1150              		.loc 1 501 3 view .LVU352
 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1151              		.loc 1 501 15 is_stmt 0 view .LVU353
 1152 0002 0246     		mov	r2, r0
 1153 0004 0021     		movs	r1, #0
 1154 0006 0120     		movs	r0, #1
 1155              	.LVL108:
 501:FreeRTOS/src/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1156              		.loc 1 501 15 view .LVU354
 1157 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1158              	.LVL109:
 1159 000c 0446     		mov	r4, r0
 1160              	.LVL110:
 502:FreeRTOS/src/queue.c **** 
 1161              		.loc 1 502 3 is_stmt 1 view .LVU355
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 68


 1162 000e FFF7FEFF 		bl	prvInitialiseMutex
 1163              	.LVL111:
 504:FreeRTOS/src/queue.c **** 	}
 1164              		.loc 1 504 3 view .LVU356
 505:FreeRTOS/src/queue.c **** 
 1165              		.loc 1 505 2 is_stmt 0 view .LVU357
 1166 0012 2046     		mov	r0, r4
 1167 0014 10BD     		pop	{r4, pc}
 505:FreeRTOS/src/queue.c **** 
 1168              		.loc 1 505 2 view .LVU358
 1169              		.cfi_endproc
 1170              	.LFE74:
 1172              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1173              		.align	1
 1174              		.global	xQueueGenericSendFromISR
 1175              		.syntax unified
 1176              		.thumb
 1177              		.thumb_func
 1178              		.fpu softvfp
 1180              	xQueueGenericSendFromISR:
 1181              	.LVL112:
 1182              	.LFB76:
 951:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1183              		.loc 1 951 1 is_stmt 1 view -0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 951:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1187              		.loc 1 951 1 is_stmt 0 view .LVU360
 1188 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1189              	.LCFI18:
 1190              		.cfi_def_cfa_offset 24
 1191              		.cfi_offset 3, -24
 1192              		.cfi_offset 4, -20
 1193              		.cfi_offset 5, -16
 1194              		.cfi_offset 6, -12
 1195              		.cfi_offset 7, -8
 1196              		.cfi_offset 14, -4
 952:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1197              		.loc 1 952 1 is_stmt 1 view .LVU361
 953:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1198              		.loc 1 953 1 view .LVU362
 954:FreeRTOS/src/queue.c **** 
 1199              		.loc 1 954 1 view .LVU363
 1200              	.LVL113:
 956:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1201              		.loc 1 956 25 view .LVU364
 957:FreeRTOS/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1202              		.loc 1 957 97 view .LVU365
 958:FreeRTOS/src/queue.c **** 
 1203              		.loc 1 958 88 view .LVU366
 974:FreeRTOS/src/queue.c **** 
 1204              		.loc 1 974 44 view .LVU367
 981:FreeRTOS/src/queue.c **** 	{
 1205              		.loc 1 981 2 view .LVU368
 1206              	.LBB25:
 1207              	.LBI25:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 69


 1208              		.file 2 "FreeRTOS/inc/portmacro.h"
   1:FreeRTOS/inc/portmacro.h **** /*
   2:FreeRTOS/inc/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/inc/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/inc/portmacro.h ****  *
   5:FreeRTOS/inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/inc/portmacro.h ****  * subject to the following conditions:
  11:FreeRTOS/inc/portmacro.h ****  *
  12:FreeRTOS/inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/inc/portmacro.h ****  * copies or substantial portions of the Software.
  14:FreeRTOS/inc/portmacro.h ****  *
  15:FreeRTOS/inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/inc/portmacro.h ****  *
  22:FreeRTOS/inc/portmacro.h ****  * http://www.FreeRTOS.org
  23:FreeRTOS/inc/portmacro.h ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/inc/portmacro.h ****  *
  25:FreeRTOS/inc/portmacro.h ****  * 1 tab == 4 spaces!
  26:FreeRTOS/inc/portmacro.h ****  */
  27:FreeRTOS/inc/portmacro.h **** 
  28:FreeRTOS/inc/portmacro.h **** 
  29:FreeRTOS/inc/portmacro.h **** #ifndef PORTMACRO_H
  30:FreeRTOS/inc/portmacro.h **** #define PORTMACRO_H
  31:FreeRTOS/inc/portmacro.h **** 
  32:FreeRTOS/inc/portmacro.h **** #ifdef __cplusplus
  33:FreeRTOS/inc/portmacro.h **** extern "C" {
  34:FreeRTOS/inc/portmacro.h **** #endif
  35:FreeRTOS/inc/portmacro.h **** 
  36:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------
  37:FreeRTOS/inc/portmacro.h ****  * Port specific definitions.
  38:FreeRTOS/inc/portmacro.h ****  *
  39:FreeRTOS/inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:FreeRTOS/inc/portmacro.h ****  * given hardware and compiler.
  41:FreeRTOS/inc/portmacro.h ****  *
  42:FreeRTOS/inc/portmacro.h ****  * These settings should not be altered.
  43:FreeRTOS/inc/portmacro.h ****  *-----------------------------------------------------------
  44:FreeRTOS/inc/portmacro.h ****  */
  45:FreeRTOS/inc/portmacro.h **** 
  46:FreeRTOS/inc/portmacro.h **** /* Type definitions. */
  47:FreeRTOS/inc/portmacro.h **** #define portCHAR		char
  48:FreeRTOS/inc/portmacro.h **** #define portFLOAT		float
  49:FreeRTOS/inc/portmacro.h **** #define portDOUBLE		double
  50:FreeRTOS/inc/portmacro.h **** #define portLONG		long
  51:FreeRTOS/inc/portmacro.h **** #define portSHORT		short
  52:FreeRTOS/inc/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:FreeRTOS/inc/portmacro.h **** #define portBASE_TYPE	long
  54:FreeRTOS/inc/portmacro.h **** 
  55:FreeRTOS/inc/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:FreeRTOS/inc/portmacro.h **** typedef long BaseType_t;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 70


  57:FreeRTOS/inc/portmacro.h **** typedef unsigned long UBaseType_t;
  58:FreeRTOS/inc/portmacro.h **** 
  59:FreeRTOS/inc/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:FreeRTOS/inc/portmacro.h **** 	typedef uint16_t TickType_t;
  61:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:FreeRTOS/inc/portmacro.h **** #else
  63:FreeRTOS/inc/portmacro.h **** 	typedef uint32_t TickType_t;
  64:FreeRTOS/inc/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:FreeRTOS/inc/portmacro.h **** 
  66:FreeRTOS/inc/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:FreeRTOS/inc/portmacro.h **** 	not need to be guarded with a critical section. */
  68:FreeRTOS/inc/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:FreeRTOS/inc/portmacro.h **** #endif
  70:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  71:FreeRTOS/inc/portmacro.h **** 
  72:FreeRTOS/inc/portmacro.h **** /* Architecture specifics. */
  73:FreeRTOS/inc/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:FreeRTOS/inc/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:FreeRTOS/inc/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  77:FreeRTOS/inc/portmacro.h **** 
  78:FreeRTOS/inc/portmacro.h **** /* Scheduler utilities. */
  79:FreeRTOS/inc/portmacro.h **** #define portYIELD() 															\
  80:FreeRTOS/inc/portmacro.h **** {																				\
  81:FreeRTOS/inc/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:FreeRTOS/inc/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:FreeRTOS/inc/portmacro.h **** 																				\
  84:FreeRTOS/inc/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:FreeRTOS/inc/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "isb" );													\
  88:FreeRTOS/inc/portmacro.h **** }
  89:FreeRTOS/inc/portmacro.h **** 
  90:FreeRTOS/inc/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:FreeRTOS/inc/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:FreeRTOS/inc/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:FreeRTOS/inc/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
  95:FreeRTOS/inc/portmacro.h **** 
  96:FreeRTOS/inc/portmacro.h **** /* Critical section management. */
  97:FreeRTOS/inc/portmacro.h **** extern void vPortEnterCritical( void );
  98:FreeRTOS/inc/portmacro.h **** extern void vPortExitCritical( void );
  99:FreeRTOS/inc/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:FreeRTOS/inc/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:FreeRTOS/inc/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:FreeRTOS/inc/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:FreeRTOS/inc/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:FreeRTOS/inc/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:FreeRTOS/inc/portmacro.h **** 
 106:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 107:FreeRTOS/inc/portmacro.h **** 
 108:FreeRTOS/inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:FreeRTOS/inc/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:FreeRTOS/inc/portmacro.h **** (which build with all the ports) will build. */
 111:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:FreeRTOS/inc/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 71


 114:FreeRTOS/inc/portmacro.h **** 
 115:FreeRTOS/inc/portmacro.h **** /* Tickless idle/low power functionality. */
 116:FreeRTOS/inc/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:FreeRTOS/inc/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:FreeRTOS/inc/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:FreeRTOS/inc/portmacro.h **** #endif
 120:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 121:FreeRTOS/inc/portmacro.h **** 
 122:FreeRTOS/inc/portmacro.h **** /* Architecture specific optimisations. */
 123:FreeRTOS/inc/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:FreeRTOS/inc/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:FreeRTOS/inc/portmacro.h **** #endif
 126:FreeRTOS/inc/portmacro.h **** 
 127:FreeRTOS/inc/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:FreeRTOS/inc/portmacro.h **** 
 129:FreeRTOS/inc/portmacro.h **** 	/* Generic helper function. */
 130:FreeRTOS/inc/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:FreeRTOS/inc/portmacro.h **** 	{
 132:FreeRTOS/inc/portmacro.h **** 	uint8_t ucReturn;
 133:FreeRTOS/inc/portmacro.h **** 
 134:FreeRTOS/inc/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:FreeRTOS/inc/portmacro.h **** 		return ucReturn;
 136:FreeRTOS/inc/portmacro.h **** 	}
 137:FreeRTOS/inc/portmacro.h **** 
 138:FreeRTOS/inc/portmacro.h **** 	/* Check the configuration. */
 139:FreeRTOS/inc/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:FreeRTOS/inc/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:FreeRTOS/inc/portmacro.h **** 	#endif
 142:FreeRTOS/inc/portmacro.h **** 
 143:FreeRTOS/inc/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:FreeRTOS/inc/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:FreeRTOS/inc/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:FreeRTOS/inc/portmacro.h **** 
 147:FreeRTOS/inc/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:FreeRTOS/inc/portmacro.h **** 
 149:FreeRTOS/inc/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:FreeRTOS/inc/portmacro.h **** 
 151:FreeRTOS/inc/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:FreeRTOS/inc/portmacro.h **** 
 153:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 154:FreeRTOS/inc/portmacro.h **** 
 155:FreeRTOS/inc/portmacro.h **** #ifdef configASSERT
 156:FreeRTOS/inc/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:FreeRTOS/inc/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:FreeRTOS/inc/portmacro.h **** #endif
 159:FreeRTOS/inc/portmacro.h **** 
 160:FreeRTOS/inc/portmacro.h **** /* portNOP() is not required by this port. */
 161:FreeRTOS/inc/portmacro.h **** #define portNOP()
 162:FreeRTOS/inc/portmacro.h **** 
 163:FreeRTOS/inc/portmacro.h **** #define portINLINE	__inline
 164:FreeRTOS/inc/portmacro.h **** 
 165:FreeRTOS/inc/portmacro.h **** #ifndef portFORCE_INLINE
 166:FreeRTOS/inc/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:FreeRTOS/inc/portmacro.h **** #endif
 168:FreeRTOS/inc/portmacro.h **** 
 169:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 170:FreeRTOS/inc/portmacro.h **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 72


 171:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:FreeRTOS/inc/portmacro.h **** {
 173:FreeRTOS/inc/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:FreeRTOS/inc/portmacro.h **** BaseType_t xReturn;
 175:FreeRTOS/inc/portmacro.h **** 
 176:FreeRTOS/inc/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:FreeRTOS/inc/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:FreeRTOS/inc/portmacro.h **** 
 179:FreeRTOS/inc/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:FreeRTOS/inc/portmacro.h **** 	{
 181:FreeRTOS/inc/portmacro.h **** 		xReturn = pdFALSE;
 182:FreeRTOS/inc/portmacro.h **** 	}
 183:FreeRTOS/inc/portmacro.h **** 	else
 184:FreeRTOS/inc/portmacro.h **** 	{
 185:FreeRTOS/inc/portmacro.h **** 		xReturn = pdTRUE;
 186:FreeRTOS/inc/portmacro.h **** 	}
 187:FreeRTOS/inc/portmacro.h **** 
 188:FreeRTOS/inc/portmacro.h **** 	return xReturn;
 189:FreeRTOS/inc/portmacro.h **** }
 190:FreeRTOS/inc/portmacro.h **** 
 191:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 192:FreeRTOS/inc/portmacro.h **** 
 193:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:FreeRTOS/inc/portmacro.h **** {
 195:FreeRTOS/inc/portmacro.h **** uint32_t ulNewBASEPRI;
 196:FreeRTOS/inc/portmacro.h **** 
 197:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 198:FreeRTOS/inc/portmacro.h **** 	(
 199:FreeRTOS/inc/portmacro.h **** 		"	mov %0, %1												\n" \
 200:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 202:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 203:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:FreeRTOS/inc/portmacro.h **** 	);
 205:FreeRTOS/inc/portmacro.h **** }
 206:FreeRTOS/inc/portmacro.h **** 
 207:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 208:FreeRTOS/inc/portmacro.h **** 
 209:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1209              		.loc 2 209 34 view .LVU369
 1210              	.LBB26:
 210:FreeRTOS/inc/portmacro.h **** {
 211:FreeRTOS/inc/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1211              		.loc 2 211 1 view .LVU370
 212:FreeRTOS/inc/portmacro.h **** 
 213:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1212              		.loc 2 213 2 view .LVU371
 1213              		.syntax unified
 1214              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1215 0002 EFF31186 			mrs r6, basepri											
 1216 0006 4FF0BF04 		mov r4, #191												
 1217 000a 84F31188 		msr basepri, r4											
 1218 000e BFF36F8F 		isb														
 1219 0012 BFF34F8F 		dsb														
 1220              	
 1221              	@ 0 "" 2
 1222              	.LVL114:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 73


 214:FreeRTOS/inc/portmacro.h **** 	(
 215:FreeRTOS/inc/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:FreeRTOS/inc/portmacro.h **** 		"	mov %1, %2												\n" \
 217:FreeRTOS/inc/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:FreeRTOS/inc/portmacro.h **** 		"	isb														\n" \
 219:FreeRTOS/inc/portmacro.h **** 		"	dsb														\n" \
 220:FreeRTOS/inc/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:FreeRTOS/inc/portmacro.h **** 	);
 222:FreeRTOS/inc/portmacro.h **** 
 223:FreeRTOS/inc/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:FreeRTOS/inc/portmacro.h **** 	warnings. */
 225:FreeRTOS/inc/portmacro.h **** 	return ulOriginalBASEPRI;
 1223              		.loc 2 225 2 view .LVU372
 1224              		.loc 2 225 2 is_stmt 0 view .LVU373
 1225              		.thumb
 1226              		.syntax unified
 1227              	.LBE26:
 1228              	.LBE25:
 983:FreeRTOS/src/queue.c **** 		{
 1229              		.loc 1 983 3 is_stmt 1 view .LVU374
 983:FreeRTOS/src/queue.c **** 		{
 1230              		.loc 1 983 16 is_stmt 0 view .LVU375
 1231 0016 856B     		ldr	r5, [r0, #56]
 983:FreeRTOS/src/queue.c **** 		{
 1232              		.loc 1 983 45 view .LVU376
 1233 0018 C46B     		ldr	r4, [r0, #60]
 983:FreeRTOS/src/queue.c **** 		{
 1234              		.loc 1 983 5 view .LVU377
 1235 001a A542     		cmp	r5, r4
 1236 001c 05D3     		bcc	.L89
 983:FreeRTOS/src/queue.c **** 		{
 1237              		.loc 1 983 58 discriminator 1 view .LVU378
 1238 001e 022B     		cmp	r3, #2
 1239 0020 03D0     		beq	.L89
1103:FreeRTOS/src/queue.c **** 		}
 1240              		.loc 1 1103 12 view .LVU379
 1241 0022 0020     		movs	r0, #0
 1242              	.LVL115:
 1243              	.L90:
1106:FreeRTOS/src/queue.c **** 
 1244              		.loc 1 1106 2 is_stmt 1 view .LVU380
 1245              	.LBB27:
 1246              	.LBI27:
 226:FreeRTOS/inc/portmacro.h **** }
 227:FreeRTOS/inc/portmacro.h **** /*-----------------------------------------------------------*/
 228:FreeRTOS/inc/portmacro.h **** 
 229:FreeRTOS/inc/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1247              		.loc 2 229 30 view .LVU381
 1248              	.LBB28:
 230:FreeRTOS/inc/portmacro.h **** {
 231:FreeRTOS/inc/portmacro.h **** 	__asm volatile
 1249              		.loc 2 231 2 view .LVU382
 1250              		.syntax unified
 1251              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1252 0024 86F31188 			msr basepri, r6	
 1253              	@ 0 "" 2
 1254              	.LVL116:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 74


 1255              		.loc 2 231 2 is_stmt 0 view .LVU383
 1256              		.thumb
 1257              		.syntax unified
 1258              	.LBE28:
 1259              	.LBE27:
1108:FreeRTOS/src/queue.c **** }
 1260              		.loc 1 1108 2 is_stmt 1 view .LVU384
1109:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1261              		.loc 1 1109 1 is_stmt 0 view .LVU385
 1262 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1263              	.LVL117:
 1264              	.L89:
1109:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1265              		.loc 1 1109 1 view .LVU386
 1266 002a 1746     		mov	r7, r2
 1267 002c 0546     		mov	r5, r0
 1268              	.LBB29:
 985:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1269              		.loc 1 985 4 is_stmt 1 view .LVU387
 985:FreeRTOS/src/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1270              		.loc 1 985 17 is_stmt 0 view .LVU388
 1271 002e 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1272 0032 64B2     		sxtb	r4, r4
 1273              	.LVL118:
 986:FreeRTOS/src/queue.c **** 
 1274              		.loc 1 986 4 is_stmt 1 view .LVU389
 986:FreeRTOS/src/queue.c **** 
 1275              		.loc 1 986 22 is_stmt 0 view .LVU390
 1276 0034 826B     		ldr	r2, [r0, #56]
 1277              	.LVL119:
 988:FreeRTOS/src/queue.c **** 
 1278              		.loc 1 988 39 is_stmt 1 view .LVU391
 995:FreeRTOS/src/queue.c **** 
 1279              		.loc 1 995 4 view .LVU392
 995:FreeRTOS/src/queue.c **** 
 1280              		.loc 1 995 13 is_stmt 0 view .LVU393
 1281 0036 1A46     		mov	r2, r3
 1282 0038 FFF7FEFF 		bl	prvCopyDataToQueue
 1283              	.LVL120:
 999:FreeRTOS/src/queue.c **** 			{
 1284              		.loc 1 999 4 is_stmt 1 view .LVU394
 999:FreeRTOS/src/queue.c **** 			{
 1285              		.loc 1 999 6 is_stmt 0 view .LVU395
 1286 003c B4F1FF3F 		cmp	r4, #-1
 1287 0040 05D0     		beq	.L97
1095:FreeRTOS/src/queue.c **** 			}
 1288              		.loc 1 1095 5 is_stmt 1 view .LVU396
1095:FreeRTOS/src/queue.c **** 			}
 1289              		.loc 1 1095 45 is_stmt 0 view .LVU397
 1290 0042 0134     		adds	r4, r4, #1
 1291              	.LVL121:
1095:FreeRTOS/src/queue.c **** 			}
 1292              		.loc 1 1095 24 view .LVU398
 1293 0044 64B2     		sxtb	r4, r4
 1294              	.LVL122:
1095:FreeRTOS/src/queue.c **** 			}
 1295              		.loc 1 1095 22 view .LVU399
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 75


 1296 0046 85F84540 		strb	r4, [r5, #69]
1098:FreeRTOS/src/queue.c **** 		}
 1297              		.loc 1 1098 12 view .LVU400
 1298 004a 0120     		movs	r0, #1
 1299 004c EAE7     		b	.L90
 1300              	.LVL123:
 1301              	.L97:
1061:FreeRTOS/src/queue.c **** 					{
 1302              		.loc 1 1061 6 is_stmt 1 view .LVU401
1061:FreeRTOS/src/queue.c **** 					{
 1303              		.loc 1 1061 10 is_stmt 0 view .LVU402
 1304 004e 6B6A     		ldr	r3, [r5, #36]
1061:FreeRTOS/src/queue.c **** 					{
 1305              		.loc 1 1061 8 view .LVU403
 1306 0050 0BB9     		cbnz	r3, .L98
1098:FreeRTOS/src/queue.c **** 		}
 1307              		.loc 1 1098 12 view .LVU404
 1308 0052 0120     		movs	r0, #1
 1309 0054 E6E7     		b	.L90
 1310              	.L98:
1063:FreeRTOS/src/queue.c **** 						{
 1311              		.loc 1 1063 7 is_stmt 1 view .LVU405
1063:FreeRTOS/src/queue.c **** 						{
 1312              		.loc 1 1063 11 is_stmt 0 view .LVU406
 1313 0056 05F12400 		add	r0, r5, #36
 1314 005a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1315              	.LVL124:
1063:FreeRTOS/src/queue.c **** 						{
 1316              		.loc 1 1063 9 view .LVU407
 1317 005e 18B1     		cbz	r0, .L94
1067:FreeRTOS/src/queue.c **** 							{
 1318              		.loc 1 1067 8 is_stmt 1 view .LVU408
1067:FreeRTOS/src/queue.c **** 							{
 1319              		.loc 1 1067 10 is_stmt 0 view .LVU409
 1320 0060 27B1     		cbz	r7, .L95
1069:FreeRTOS/src/queue.c **** 							}
 1321              		.loc 1 1069 9 is_stmt 1 view .LVU410
1069:FreeRTOS/src/queue.c **** 							}
 1322              		.loc 1 1069 36 is_stmt 0 view .LVU411
 1323 0062 0120     		movs	r0, #1
 1324 0064 3860     		str	r0, [r7]
 1325 0066 DDE7     		b	.L90
 1326              	.L94:
1098:FreeRTOS/src/queue.c **** 		}
 1327              		.loc 1 1098 12 view .LVU412
 1328 0068 0120     		movs	r0, #1
 1329 006a DBE7     		b	.L90
 1330              	.L95:
 1331 006c 0120     		movs	r0, #1
 1332 006e D9E7     		b	.L90
 1333              	.LBE29:
 1334              		.cfi_endproc
 1335              	.LFE76:
 1337              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1338              		.align	1
 1339              		.global	xQueueGiveFromISR
 1340              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 76


 1341              		.thumb
 1342              		.thumb_func
 1343              		.fpu softvfp
 1345              	xQueueGiveFromISR:
 1346              	.LVL125:
 1347              	.LFB77:
1113:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1348              		.loc 1 1113 1 is_stmt 1 view -0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 0
 1351              		@ frame_needed = 0, uses_anonymous_args = 0
1113:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 1352              		.loc 1 1113 1 is_stmt 0 view .LVU414
 1353 0000 38B5     		push	{r3, r4, r5, lr}
 1354              	.LCFI19:
 1355              		.cfi_def_cfa_offset 16
 1356              		.cfi_offset 3, -16
 1357              		.cfi_offset 4, -12
 1358              		.cfi_offset 5, -8
 1359              		.cfi_offset 14, -4
1114:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1360              		.loc 1 1114 1 is_stmt 1 view .LVU415
1115:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1361              		.loc 1 1115 1 view .LVU416
1116:FreeRTOS/src/queue.c **** 
 1362              		.loc 1 1116 1 view .LVU417
 1363              	.LVL126:
1124:FreeRTOS/src/queue.c **** 
 1364              		.loc 1 1124 25 view .LVU418
1128:FreeRTOS/src/queue.c **** 
 1365              		.loc 1 1128 42 view .LVU419
1133:FreeRTOS/src/queue.c **** 
 1366              		.loc 1 1133 120 view .LVU420
1149:FreeRTOS/src/queue.c **** 
 1367              		.loc 1 1149 44 view .LVU421
1151:FreeRTOS/src/queue.c **** 	{
 1368              		.loc 1 1151 2 view .LVU422
 1369              	.LBB30:
 1370              	.LBI30:
 209:FreeRTOS/inc/portmacro.h **** {
 1371              		.loc 2 209 34 view .LVU423
 1372              	.LBB31:
 211:FreeRTOS/inc/portmacro.h **** 
 1373              		.loc 2 211 1 view .LVU424
 213:FreeRTOS/inc/portmacro.h **** 	(
 1374              		.loc 2 213 2 view .LVU425
 1375              		.syntax unified
 1376              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 1377 0002 EFF31184 			mrs r4, basepri											
 1378 0006 4FF0BF03 		mov r3, #191												
 1379 000a 83F31188 		msr basepri, r3											
 1380 000e BFF36F8F 		isb														
 1381 0012 BFF34F8F 		dsb														
 1382              	
 1383              	@ 0 "" 2
 1384              	.LVL127:
 225:FreeRTOS/inc/portmacro.h **** }
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 77


 1385              		.loc 2 225 2 view .LVU426
 225:FreeRTOS/inc/portmacro.h **** }
 1386              		.loc 2 225 2 is_stmt 0 view .LVU427
 1387              		.thumb
 1388              		.syntax unified
 1389              	.LBE31:
 1390              	.LBE30:
 1391              	.LBB32:
1153:FreeRTOS/src/queue.c **** 
 1392              		.loc 1 1153 3 is_stmt 1 view .LVU428
1153:FreeRTOS/src/queue.c **** 
 1393              		.loc 1 1153 21 is_stmt 0 view .LVU429
 1394 0016 826B     		ldr	r2, [r0, #56]
 1395              	.LVL128:
1158:FreeRTOS/src/queue.c **** 		{
 1396              		.loc 1 1158 3 is_stmt 1 view .LVU430
1158:FreeRTOS/src/queue.c **** 		{
 1397              		.loc 1 1158 34 is_stmt 0 view .LVU431
 1398 0018 C36B     		ldr	r3, [r0, #60]
1158:FreeRTOS/src/queue.c **** 		{
 1399              		.loc 1 1158 5 view .LVU432
 1400 001a 9342     		cmp	r3, r2
 1401 001c 1AD9     		bls	.L102
 1402              	.LBB33:
1160:FreeRTOS/src/queue.c **** 
 1403              		.loc 1 1160 4 is_stmt 1 view .LVU433
1160:FreeRTOS/src/queue.c **** 
 1404              		.loc 1 1160 17 is_stmt 0 view .LVU434
 1405 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1406 0022 5BB2     		sxtb	r3, r3
 1407              	.LVL129:
1162:FreeRTOS/src/queue.c **** 
 1408              		.loc 1 1162 39 is_stmt 1 view .LVU435
1170:FreeRTOS/src/queue.c **** 
 1409              		.loc 1 1170 4 view .LVU436
1170:FreeRTOS/src/queue.c **** 
 1410              		.loc 1 1170 51 is_stmt 0 view .LVU437
 1411 0024 0132     		adds	r2, r2, #1
 1412              	.LVL130:
1170:FreeRTOS/src/queue.c **** 
 1413              		.loc 1 1170 31 view .LVU438
 1414 0026 8263     		str	r2, [r0, #56]
1174:FreeRTOS/src/queue.c **** 			{
 1415              		.loc 1 1174 4 is_stmt 1 view .LVU439
1174:FreeRTOS/src/queue.c **** 			{
 1416              		.loc 1 1174 6 is_stmt 0 view .LVU440
 1417 0028 B3F1FF3F 		cmp	r3, #-1
 1418 002c 05D0     		beq	.L107
1260:FreeRTOS/src/queue.c **** 			}
 1419              		.loc 1 1260 5 is_stmt 1 view .LVU441
1260:FreeRTOS/src/queue.c **** 			}
 1420              		.loc 1 1260 45 is_stmt 0 view .LVU442
 1421 002e 0133     		adds	r3, r3, #1
 1422              	.LVL131:
1260:FreeRTOS/src/queue.c **** 			}
 1423              		.loc 1 1260 24 view .LVU443
 1424 0030 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 78


 1425              	.LVL132:
1260:FreeRTOS/src/queue.c **** 			}
 1426              		.loc 1 1260 22 view .LVU444
 1427 0032 80F84530 		strb	r3, [r0, #69]
1263:FreeRTOS/src/queue.c **** 		}
 1428              		.loc 1 1263 12 view .LVU445
 1429 0036 0120     		movs	r0, #1
 1430              	.LVL133:
1263:FreeRTOS/src/queue.c **** 		}
 1431              		.loc 1 1263 12 view .LVU446
 1432 0038 0DE0     		b	.L100
 1433              	.LVL134:
 1434              	.L107:
1229:FreeRTOS/src/queue.c **** 					{
 1435              		.loc 1 1229 6 is_stmt 1 view .LVU447
1229:FreeRTOS/src/queue.c **** 					{
 1436              		.loc 1 1229 10 is_stmt 0 view .LVU448
 1437 003a 436A     		ldr	r3, [r0, #36]
 1438              	.LVL135:
1229:FreeRTOS/src/queue.c **** 					{
 1439              		.loc 1 1229 8 view .LVU449
 1440 003c 0BB9     		cbnz	r3, .L108
1263:FreeRTOS/src/queue.c **** 		}
 1441              		.loc 1 1263 12 view .LVU450
 1442 003e 0120     		movs	r0, #1
 1443              	.LVL136:
1263:FreeRTOS/src/queue.c **** 		}
 1444              		.loc 1 1263 12 view .LVU451
 1445 0040 09E0     		b	.L100
 1446              	.LVL137:
 1447              	.L108:
1263:FreeRTOS/src/queue.c **** 		}
 1448              		.loc 1 1263 12 view .LVU452
 1449 0042 0D46     		mov	r5, r1
1231:FreeRTOS/src/queue.c **** 						{
 1450              		.loc 1 1231 7 is_stmt 1 view .LVU453
1231:FreeRTOS/src/queue.c **** 						{
 1451              		.loc 1 1231 11 is_stmt 0 view .LVU454
 1452 0044 2430     		adds	r0, r0, #36
 1453              	.LVL138:
1231:FreeRTOS/src/queue.c **** 						{
 1454              		.loc 1 1231 11 view .LVU455
 1455 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1456              	.LVL139:
1231:FreeRTOS/src/queue.c **** 						{
 1457              		.loc 1 1231 9 view .LVU456
 1458 004a 38B1     		cbz	r0, .L104
1235:FreeRTOS/src/queue.c **** 							{
 1459              		.loc 1 1235 8 is_stmt 1 view .LVU457
1235:FreeRTOS/src/queue.c **** 							{
 1460              		.loc 1 1235 10 is_stmt 0 view .LVU458
 1461 004c 45B1     		cbz	r5, .L105
1237:FreeRTOS/src/queue.c **** 							}
 1462              		.loc 1 1237 9 is_stmt 1 view .LVU459
1237:FreeRTOS/src/queue.c **** 							}
 1463              		.loc 1 1237 36 is_stmt 0 view .LVU460
 1464 004e 0120     		movs	r0, #1
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 79


 1465 0050 2860     		str	r0, [r5]
 1466 0052 00E0     		b	.L100
 1467              	.LVL140:
 1468              	.L102:
1237:FreeRTOS/src/queue.c **** 							}
 1469              		.loc 1 1237 36 view .LVU461
 1470              	.LBE33:
1268:FreeRTOS/src/queue.c **** 		}
 1471              		.loc 1 1268 12 view .LVU462
 1472 0054 0020     		movs	r0, #0
 1473              	.LVL141:
 1474              	.L100:
1268:FreeRTOS/src/queue.c **** 		}
 1475              		.loc 1 1268 12 view .LVU463
 1476              	.LBE32:
1271:FreeRTOS/src/queue.c **** 
 1477              		.loc 1 1271 2 is_stmt 1 view .LVU464
 1478              	.LBB35:
 1479              	.LBI35:
 229:FreeRTOS/inc/portmacro.h **** {
 1480              		.loc 2 229 30 view .LVU465
 1481              	.LBB36:
 1482              		.loc 2 231 2 view .LVU466
 1483              		.syntax unified
 1484              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 1485 0056 84F31188 			msr basepri, r4	
 1486              	@ 0 "" 2
 1487              	.LVL142:
 1488              		.loc 2 231 2 is_stmt 0 view .LVU467
 1489              		.thumb
 1490              		.syntax unified
 1491              	.LBE36:
 1492              	.LBE35:
1273:FreeRTOS/src/queue.c **** }
 1493              		.loc 1 1273 2 is_stmt 1 view .LVU468
1274:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1494              		.loc 1 1274 1 is_stmt 0 view .LVU469
 1495 005a 38BD     		pop	{r3, r4, r5, pc}
 1496              	.LVL143:
 1497              	.L104:
 1498              	.LBB37:
 1499              	.LBB34:
1263:FreeRTOS/src/queue.c **** 		}
 1500              		.loc 1 1263 12 view .LVU470
 1501 005c 0120     		movs	r0, #1
 1502 005e FAE7     		b	.L100
 1503              	.L105:
 1504 0060 0120     		movs	r0, #1
 1505 0062 F8E7     		b	.L100
 1506              	.LBE34:
 1507              	.LBE37:
 1508              		.cfi_endproc
 1509              	.LFE77:
 1511              		.section	.text.xQueueReceive,"ax",%progbits
 1512              		.align	1
 1513              		.global	xQueueReceive
 1514              		.syntax unified
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 80


 1515              		.thumb
 1516              		.thumb_func
 1517              		.fpu softvfp
 1519              	xQueueReceive:
 1520              	.LVL144:
 1521              	.LFB78:
1278:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1522              		.loc 1 1278 1 is_stmt 1 view -0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 16
 1525              		@ frame_needed = 0, uses_anonymous_args = 0
1278:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1526              		.loc 1 1278 1 is_stmt 0 view .LVU472
 1527 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1528              	.LCFI20:
 1529              		.cfi_def_cfa_offset 20
 1530              		.cfi_offset 4, -20
 1531              		.cfi_offset 5, -16
 1532              		.cfi_offset 6, -12
 1533              		.cfi_offset 7, -8
 1534              		.cfi_offset 14, -4
 1535 0002 85B0     		sub	sp, sp, #20
 1536              	.LCFI21:
 1537              		.cfi_def_cfa_offset 40
 1538 0004 0446     		mov	r4, r0
 1539 0006 0F46     		mov	r7, r1
 1540 0008 0192     		str	r2, [sp, #4]
1279:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1541              		.loc 1 1279 1 is_stmt 1 view .LVU473
 1542              	.LVL145:
1280:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1543              		.loc 1 1280 1 view .LVU474
1281:FreeRTOS/src/queue.c **** 
 1544              		.loc 1 1281 1 view .LVU475
1279:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1545              		.loc 1 1279 12 is_stmt 0 view .LVU476
 1546 000a 0026     		movs	r6, #0
 1547 000c 3CE0     		b	.L110
 1548              	.LVL146:
 1549              	.L124:
 1550              	.LBB38:
1312:FreeRTOS/src/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1551              		.loc 1 1312 5 is_stmt 1 view .LVU477
 1552 000e 3946     		mov	r1, r7
 1553 0010 2046     		mov	r0, r4
 1554 0012 FFF7FEFF 		bl	prvCopyDataFromQueue
 1555              	.LVL147:
1313:FreeRTOS/src/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1556              		.loc 1 1313 34 view .LVU478
1314:FreeRTOS/src/queue.c **** 
 1557              		.loc 1 1314 5 view .LVU479
1314:FreeRTOS/src/queue.c **** 
 1558              		.loc 1 1314 52 is_stmt 0 view .LVU480
 1559 0016 013D     		subs	r5, r5, #1
 1560              	.LVL148:
1314:FreeRTOS/src/queue.c **** 
 1561              		.loc 1 1314 32 view .LVU481
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 81


 1562 0018 A563     		str	r5, [r4, #56]
1319:FreeRTOS/src/queue.c **** 				{
 1563              		.loc 1 1319 5 is_stmt 1 view .LVU482
1319:FreeRTOS/src/queue.c **** 				{
 1564              		.loc 1 1319 9 is_stmt 0 view .LVU483
 1565 001a 2369     		ldr	r3, [r4, #16]
1319:FreeRTOS/src/queue.c **** 				{
 1566              		.loc 1 1319 7 view .LVU484
 1567 001c 23B9     		cbnz	r3, .L122
 1568              	.L112:
1332:FreeRTOS/src/queue.c **** 				}
 1569              		.loc 1 1332 30 is_stmt 1 view .LVU485
1335:FreeRTOS/src/queue.c **** 				return pdPASS;
 1570              		.loc 1 1335 5 view .LVU486
 1571 001e FFF7FEFF 		bl	vPortExitCritical
 1572              	.LVL149:
1336:FreeRTOS/src/queue.c **** 			}
 1573              		.loc 1 1336 5 view .LVU487
1336:FreeRTOS/src/queue.c **** 			}
 1574              		.loc 1 1336 12 is_stmt 0 view .LVU488
 1575 0022 0120     		movs	r0, #1
 1576              	.LVL150:
 1577              	.L109:
1336:FreeRTOS/src/queue.c **** 			}
 1578              		.loc 1 1336 12 view .LVU489
 1579              	.LBE38:
1415:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 1580              		.loc 1 1415 1 view .LVU490
 1581 0024 05B0     		add	sp, sp, #20
 1582              	.LCFI22:
 1583              		.cfi_remember_state
 1584              		.cfi_def_cfa_offset 20
 1585              		@ sp needed
 1586 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 1587              	.LVL151:
 1588              	.L122:
 1589              	.LCFI23:
 1590              		.cfi_restore_state
 1591              	.LBB39:
1321:FreeRTOS/src/queue.c **** 					{
 1592              		.loc 1 1321 6 is_stmt 1 view .LVU491
1321:FreeRTOS/src/queue.c **** 					{
 1593              		.loc 1 1321 10 is_stmt 0 view .LVU492
 1594 0028 04F11000 		add	r0, r4, #16
 1595 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1596              	.LVL152:
1321:FreeRTOS/src/queue.c **** 					{
 1597              		.loc 1 1321 8 view .LVU493
 1598 0030 0028     		cmp	r0, #0
 1599 0032 F4D0     		beq	.L112
1323:FreeRTOS/src/queue.c **** 					}
 1600              		.loc 1 1323 7 is_stmt 1 view .LVU494
 1601 0034 344B     		ldr	r3, .L129
 1602 0036 4FF08052 		mov	r2, #268435456
 1603 003a 1A60     		str	r2, [r3]
1323:FreeRTOS/src/queue.c **** 					}
 1604              		.loc 1 1323 7 view .LVU495
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 82


 1605              		.syntax unified
 1606              	@ 1323 "FreeRTOS/src/queue.c" 1
 1607 003c BFF34F8F 		dsb
 1608              	@ 0 "" 2
1323:FreeRTOS/src/queue.c **** 					}
 1609              		.loc 1 1323 7 view .LVU496
 1610              	@ 1323 "FreeRTOS/src/queue.c" 1
 1611 0040 BFF36F8F 		isb
 1612              	@ 0 "" 2
1323:FreeRTOS/src/queue.c **** 					}
 1613              		.loc 1 1323 39 view .LVU497
 1614              		.thumb
 1615              		.syntax unified
 1616 0044 EBE7     		b	.L112
 1617              	.LVL153:
 1618              	.L125:
1344:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1619              		.loc 1 1344 6 view .LVU498
 1620 0046 FFF7FEFF 		bl	vPortExitCritical
 1621              	.LVL154:
1345:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 1622              		.loc 1 1345 42 view .LVU499
1346:FreeRTOS/src/queue.c **** 				}
 1623              		.loc 1 1346 6 view .LVU500
1346:FreeRTOS/src/queue.c **** 				}
 1624              		.loc 1 1346 13 is_stmt 0 view .LVU501
 1625 004a 0020     		movs	r0, #0
 1626 004c EAE7     		b	.L109
 1627              	.L126:
1352:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1628              		.loc 1 1352 6 is_stmt 1 view .LVU502
 1629 004e 02A8     		add	r0, sp, #8
 1630 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1631              	.LVL155:
1353:FreeRTOS/src/queue.c **** 				}
 1632              		.loc 1 1353 6 view .LVU503
1353:FreeRTOS/src/queue.c **** 				}
 1633              		.loc 1 1353 20 is_stmt 0 view .LVU504
 1634 0054 0126     		movs	r6, #1
 1635 0056 21E0     		b	.L115
 1636              	.LVL156:
 1637              	.L127:
1353:FreeRTOS/src/queue.c **** 				}
 1638              		.loc 1 1353 20 view .LVU505
 1639              	.LBE39:
1368:FreeRTOS/src/queue.c **** 
 1640              		.loc 1 1368 3 is_stmt 1 discriminator 1 view .LVU506
 1641 0058 0023     		movs	r3, #0
 1642 005a 84F84430 		strb	r3, [r4, #68]
 1643 005e 29E0     		b	.L116
 1644              	.L128:
1368:FreeRTOS/src/queue.c **** 
 1645              		.loc 1 1368 3 discriminator 4 view .LVU507
 1646 0060 0023     		movs	r3, #0
 1647 0062 84F84530 		strb	r3, [r4, #69]
 1648 0066 2BE0     		b	.L117
 1649              	.L119:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 83


1393:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 1650              		.loc 1 1393 5 view .LVU508
 1651 0068 2046     		mov	r0, r4
 1652 006a FFF7FEFF 		bl	prvUnlockQueue
 1653              	.LVL157:
1394:FreeRTOS/src/queue.c **** 			}
 1654              		.loc 1 1394 5 view .LVU509
1394:FreeRTOS/src/queue.c **** 			}
 1655              		.loc 1 1394 14 is_stmt 0 view .LVU510
 1656 006e FFF7FEFF 		bl	xTaskResumeAll
 1657              	.LVL158:
 1658 0072 09E0     		b	.L110
 1659              	.L118:
1401:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 1660              		.loc 1 1401 4 is_stmt 1 view .LVU511
 1661 0074 2046     		mov	r0, r4
 1662 0076 FFF7FEFF 		bl	prvUnlockQueue
 1663              	.LVL159:
1402:FreeRTOS/src/queue.c **** 
 1664              		.loc 1 1402 4 view .LVU512
1402:FreeRTOS/src/queue.c **** 
 1665              		.loc 1 1402 13 is_stmt 0 view .LVU513
 1666 007a FFF7FEFF 		bl	xTaskResumeAll
 1667              	.LVL160:
1404:FreeRTOS/src/queue.c **** 			{
 1668              		.loc 1 1404 4 is_stmt 1 view .LVU514
1404:FreeRTOS/src/queue.c **** 			{
 1669              		.loc 1 1404 8 is_stmt 0 view .LVU515
 1670 007e 2046     		mov	r0, r4
 1671 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 1672              	.LVL161:
1404:FreeRTOS/src/queue.c **** 			{
 1673              		.loc 1 1404 6 view .LVU516
 1674 0084 0028     		cmp	r0, #0
 1675 0086 3DD1     		bne	.L123
 1676              	.LVL162:
 1677              	.L110:
1284:FreeRTOS/src/queue.c **** 
 1678              		.loc 1 1284 29 is_stmt 1 view .LVU517
1288:FreeRTOS/src/queue.c **** 
 1679              		.loc 1 1288 100 view .LVU518
1301:FreeRTOS/src/queue.c **** 	{
 1680              		.loc 1 1301 2 view .LVU519
1303:FreeRTOS/src/queue.c **** 		{
 1681              		.loc 1 1303 3 view .LVU520
 1682 0088 FFF7FEFF 		bl	vPortEnterCritical
 1683              	.LVL163:
 1684              	.LBB40:
1305:FreeRTOS/src/queue.c **** 
 1685              		.loc 1 1305 4 view .LVU521
1305:FreeRTOS/src/queue.c **** 
 1686              		.loc 1 1305 22 is_stmt 0 view .LVU522
 1687 008c A56B     		ldr	r5, [r4, #56]
 1688              	.LVL164:
1309:FreeRTOS/src/queue.c **** 			{
 1689              		.loc 1 1309 4 is_stmt 1 view .LVU523
1309:FreeRTOS/src/queue.c **** 			{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 84


 1690              		.loc 1 1309 6 is_stmt 0 view .LVU524
 1691 008e 002D     		cmp	r5, #0
 1692 0090 BDD1     		bne	.L124
1340:FreeRTOS/src/queue.c **** 				{
 1693              		.loc 1 1340 5 is_stmt 1 view .LVU525
1340:FreeRTOS/src/queue.c **** 				{
 1694              		.loc 1 1340 22 is_stmt 0 view .LVU526
 1695 0092 019B     		ldr	r3, [sp, #4]
1340:FreeRTOS/src/queue.c **** 				{
 1696              		.loc 1 1340 7 view .LVU527
 1697 0094 002B     		cmp	r3, #0
 1698 0096 D6D0     		beq	.L125
1348:FreeRTOS/src/queue.c **** 				{
 1699              		.loc 1 1348 10 is_stmt 1 view .LVU528
1348:FreeRTOS/src/queue.c **** 				{
 1700              		.loc 1 1348 12 is_stmt 0 view .LVU529
 1701 0098 002E     		cmp	r6, #0
 1702 009a D8D0     		beq	.L126
 1703              	.LVL165:
 1704              	.L115:
1358:FreeRTOS/src/queue.c **** 				}
 1705              		.loc 1 1358 30 is_stmt 1 view .LVU530
 1706              	.LBE40:
1362:FreeRTOS/src/queue.c **** 
 1707              		.loc 1 1362 3 view .LVU531
 1708 009c FFF7FEFF 		bl	vPortExitCritical
 1709              	.LVL166:
1367:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 1710              		.loc 1 1367 3 view .LVU532
 1711 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 1712              	.LVL167:
1368:FreeRTOS/src/queue.c **** 
 1713              		.loc 1 1368 3 view .LVU533
 1714 00a4 FFF7FEFF 		bl	vPortEnterCritical
 1715              	.LVL168:
1368:FreeRTOS/src/queue.c **** 
 1716              		.loc 1 1368 3 view .LVU534
 1717 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1718 00ac 5BB2     		sxtb	r3, r3
 1719 00ae B3F1FF3F 		cmp	r3, #-1
 1720 00b2 D1D0     		beq	.L127
 1721              	.L116:
1368:FreeRTOS/src/queue.c **** 
 1722              		.loc 1 1368 3 discriminator 3 view .LVU535
 1723 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1724 00b8 5BB2     		sxtb	r3, r3
 1725 00ba B3F1FF3F 		cmp	r3, #-1
 1726 00be CFD0     		beq	.L128
 1727              	.L117:
1368:FreeRTOS/src/queue.c **** 
 1728              		.loc 1 1368 3 discriminator 6 view .LVU536
 1729 00c0 FFF7FEFF 		bl	vPortExitCritical
 1730              	.LVL169:
1371:FreeRTOS/src/queue.c **** 		{
 1731              		.loc 1 1371 3 discriminator 6 view .LVU537
1371:FreeRTOS/src/queue.c **** 		{
 1732              		.loc 1 1371 7 is_stmt 0 discriminator 6 view .LVU538
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 85


 1733 00c4 01A9     		add	r1, sp, #4
 1734 00c6 02A8     		add	r0, sp, #8
 1735 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1736              	.LVL170:
1371:FreeRTOS/src/queue.c **** 		{
 1737              		.loc 1 1371 5 discriminator 6 view .LVU539
 1738 00cc 0028     		cmp	r0, #0
 1739 00ce D1D1     		bne	.L118
1375:FreeRTOS/src/queue.c **** 			{
 1740              		.loc 1 1375 4 is_stmt 1 view .LVU540
1375:FreeRTOS/src/queue.c **** 			{
 1741              		.loc 1 1375 8 is_stmt 0 view .LVU541
 1742 00d0 2046     		mov	r0, r4
 1743 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 1744              	.LVL171:
1375:FreeRTOS/src/queue.c **** 			{
 1745              		.loc 1 1375 6 view .LVU542
 1746 00d6 0028     		cmp	r0, #0
 1747 00d8 C6D0     		beq	.L119
1377:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1748              		.loc 1 1377 46 is_stmt 1 view .LVU543
1378:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 1749              		.loc 1 1378 5 view .LVU544
 1750 00da 0199     		ldr	r1, [sp, #4]
 1751 00dc 04F12400 		add	r0, r4, #36
 1752 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1753              	.LVL172:
1379:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1754              		.loc 1 1379 5 view .LVU545
 1755 00e4 2046     		mov	r0, r4
 1756 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1757              	.LVL173:
1380:FreeRTOS/src/queue.c **** 				{
 1758              		.loc 1 1380 5 view .LVU546
1380:FreeRTOS/src/queue.c **** 				{
 1759              		.loc 1 1380 9 is_stmt 0 view .LVU547
 1760 00ea FFF7FEFF 		bl	xTaskResumeAll
 1761              	.LVL174:
1380:FreeRTOS/src/queue.c **** 				{
 1762              		.loc 1 1380 7 view .LVU548
 1763 00ee 0028     		cmp	r0, #0
 1764 00f0 CAD1     		bne	.L110
1382:FreeRTOS/src/queue.c **** 				}
 1765              		.loc 1 1382 6 is_stmt 1 view .LVU549
 1766 00f2 054B     		ldr	r3, .L129
 1767 00f4 4FF08052 		mov	r2, #268435456
 1768 00f8 1A60     		str	r2, [r3]
1382:FreeRTOS/src/queue.c **** 				}
 1769              		.loc 1 1382 6 view .LVU550
 1770              		.syntax unified
 1771              	@ 1382 "FreeRTOS/src/queue.c" 1
 1772 00fa BFF34F8F 		dsb
 1773              	@ 0 "" 2
1382:FreeRTOS/src/queue.c **** 				}
 1774              		.loc 1 1382 6 view .LVU551
 1775              	@ 1382 "FreeRTOS/src/queue.c" 1
 1776 00fe BFF36F8F 		isb
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 86


 1777              	@ 0 "" 2
1382:FreeRTOS/src/queue.c **** 				}
 1778              		.loc 1 1382 28 view .LVU552
 1779              		.thumb
 1780              		.syntax unified
 1781 0102 C1E7     		b	.L110
 1782              	.L123:
1407:FreeRTOS/src/queue.c **** 			}
 1783              		.loc 1 1407 12 is_stmt 0 view .LVU553
 1784 0104 0020     		movs	r0, #0
 1785 0106 8DE7     		b	.L109
 1786              	.L130:
 1787              		.align	2
 1788              	.L129:
 1789 0108 04ED00E0 		.word	-536810236
 1790              		.cfi_endproc
 1791              	.LFE78:
 1793              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1794              		.align	1
 1795              		.global	xQueueSemaphoreTake
 1796              		.syntax unified
 1797              		.thumb
 1798              		.thumb_func
 1799              		.fpu softvfp
 1801              	xQueueSemaphoreTake:
 1802              	.LVL175:
 1803              	.LFB79:
1419:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1804              		.loc 1 1419 1 is_stmt 1 view -0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 16
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
1419:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1808              		.loc 1 1419 1 is_stmt 0 view .LVU555
 1809 0000 70B5     		push	{r4, r5, r6, lr}
 1810              	.LCFI24:
 1811              		.cfi_def_cfa_offset 16
 1812              		.cfi_offset 4, -16
 1813              		.cfi_offset 5, -12
 1814              		.cfi_offset 6, -8
 1815              		.cfi_offset 14, -4
 1816 0002 84B0     		sub	sp, sp, #16
 1817              	.LCFI25:
 1818              		.cfi_def_cfa_offset 32
 1819 0004 0446     		mov	r4, r0
 1820 0006 0191     		str	r1, [sp, #4]
1420:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1821              		.loc 1 1420 1 is_stmt 1 view .LVU556
 1822              	.LVL176:
1421:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 1823              		.loc 1 1421 1 view .LVU557
1422:FreeRTOS/src/queue.c **** 
 1824              		.loc 1 1422 1 view .LVU558
1425:FreeRTOS/src/queue.c **** #endif
 1825              		.loc 1 1425 2 view .LVU559
1425:FreeRTOS/src/queue.c **** #endif
 1826              		.loc 1 1425 13 is_stmt 0 view .LVU560
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 87


 1827 0008 0026     		movs	r6, #0
1420:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 1828              		.loc 1 1420 12 view .LVU561
 1829 000a 3546     		mov	r5, r6
 1830 000c 47E0     		b	.L132
 1831              	.LVL177:
 1832              	.L150:
 1833              	.LBB41:
1458:FreeRTOS/src/queue.c **** 
 1834              		.loc 1 1458 34 is_stmt 1 view .LVU562
1462:FreeRTOS/src/queue.c **** 
 1835              		.loc 1 1462 5 view .LVU563
1462:FreeRTOS/src/queue.c **** 
 1836              		.loc 1 1462 51 is_stmt 0 view .LVU564
 1837 000e 013B     		subs	r3, r3, #1
 1838              	.LVL178:
1462:FreeRTOS/src/queue.c **** 
 1839              		.loc 1 1462 32 view .LVU565
 1840 0010 A363     		str	r3, [r4, #56]
1466:FreeRTOS/src/queue.c **** 					{
 1841              		.loc 1 1466 6 is_stmt 1 view .LVU566
1466:FreeRTOS/src/queue.c **** 					{
 1842              		.loc 1 1466 17 is_stmt 0 view .LVU567
 1843 0012 2368     		ldr	r3, [r4]
 1844              	.LVL179:
1466:FreeRTOS/src/queue.c **** 					{
 1845              		.loc 1 1466 8 view .LVU568
 1846 0014 33B1     		cbz	r3, .L147
 1847              	.LVL180:
 1848              	.L134:
1474:FreeRTOS/src/queue.c **** 					}
 1849              		.loc 1 1474 31 is_stmt 1 view .LVU569
1481:FreeRTOS/src/queue.c **** 				{
 1850              		.loc 1 1481 5 view .LVU570
1481:FreeRTOS/src/queue.c **** 				{
 1851              		.loc 1 1481 9 is_stmt 0 view .LVU571
 1852 0016 2369     		ldr	r3, [r4, #16]
1481:FreeRTOS/src/queue.c **** 				{
 1853              		.loc 1 1481 7 view .LVU572
 1854 0018 43B9     		cbnz	r3, .L148
 1855              	.L135:
1494:FreeRTOS/src/queue.c **** 				}
 1856              		.loc 1 1494 30 is_stmt 1 view .LVU573
1497:FreeRTOS/src/queue.c **** 				return pdPASS;
 1857              		.loc 1 1497 5 view .LVU574
 1858 001a FFF7FEFF 		bl	vPortExitCritical
 1859              	.LVL181:
1498:FreeRTOS/src/queue.c **** 			}
 1860              		.loc 1 1498 5 view .LVU575
1498:FreeRTOS/src/queue.c **** 			}
 1861              		.loc 1 1498 12 is_stmt 0 view .LVU576
 1862 001e 0120     		movs	r0, #1
 1863              	.L131:
1498:FreeRTOS/src/queue.c **** 			}
 1864              		.loc 1 1498 12 view .LVU577
 1865              	.LBE41:
1633:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 88


 1866              		.loc 1 1633 1 view .LVU578
 1867 0020 04B0     		add	sp, sp, #16
 1868              	.LCFI26:
 1869              		.cfi_remember_state
 1870              		.cfi_def_cfa_offset 16
 1871              		@ sp needed
 1872 0022 70BD     		pop	{r4, r5, r6, pc}
 1873              	.LVL182:
 1874              	.L147:
 1875              	.LCFI27:
 1876              		.cfi_restore_state
 1877              	.LBB42:
1470:FreeRTOS/src/queue.c **** 					}
 1878              		.loc 1 1470 7 is_stmt 1 view .LVU579
1470:FreeRTOS/src/queue.c **** 					}
 1879              		.loc 1 1470 44 is_stmt 0 view .LVU580
 1880 0024 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1881              	.LVL183:
1470:FreeRTOS/src/queue.c **** 					}
 1882              		.loc 1 1470 42 view .LVU581
 1883 0028 A060     		str	r0, [r4, #8]
 1884 002a F4E7     		b	.L134
 1885              	.L148:
1483:FreeRTOS/src/queue.c **** 					{
 1886              		.loc 1 1483 6 is_stmt 1 view .LVU582
1483:FreeRTOS/src/queue.c **** 					{
 1887              		.loc 1 1483 10 is_stmt 0 view .LVU583
 1888 002c 04F11000 		add	r0, r4, #16
 1889 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1890              	.LVL184:
1483:FreeRTOS/src/queue.c **** 					{
 1891              		.loc 1 1483 8 view .LVU584
 1892 0034 0028     		cmp	r0, #0
 1893 0036 F0D0     		beq	.L135
1485:FreeRTOS/src/queue.c **** 					}
 1894              		.loc 1 1485 7 is_stmt 1 view .LVU585
 1895 0038 414B     		ldr	r3, .L157
 1896 003a 4FF08052 		mov	r2, #268435456
 1897 003e 1A60     		str	r2, [r3]
1485:FreeRTOS/src/queue.c **** 					}
 1898              		.loc 1 1485 7 view .LVU586
 1899              		.syntax unified
 1900              	@ 1485 "FreeRTOS/src/queue.c" 1
 1901 0040 BFF34F8F 		dsb
 1902              	@ 0 "" 2
1485:FreeRTOS/src/queue.c **** 					}
 1903              		.loc 1 1485 7 view .LVU587
 1904              	@ 1485 "FreeRTOS/src/queue.c" 1
 1905 0044 BFF36F8F 		isb
 1906              	@ 0 "" 2
1485:FreeRTOS/src/queue.c **** 					}
 1907              		.loc 1 1485 39 view .LVU588
 1908              		.thumb
 1909              		.syntax unified
 1910 0048 E7E7     		b	.L135
 1911              	.L151:
1509:FreeRTOS/src/queue.c **** 					}
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 89


 1912              		.loc 1 1509 54 view .LVU589
1515:FreeRTOS/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1913              		.loc 1 1515 6 view .LVU590
 1914 004a FFF7FEFF 		bl	vPortExitCritical
 1915              	.LVL185:
1516:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 1916              		.loc 1 1516 42 view .LVU591
1517:FreeRTOS/src/queue.c **** 				}
 1917              		.loc 1 1517 6 view .LVU592
1517:FreeRTOS/src/queue.c **** 				}
 1918              		.loc 1 1517 13 is_stmt 0 view .LVU593
 1919 004e 0020     		movs	r0, #0
 1920 0050 E6E7     		b	.L131
 1921              	.L152:
1523:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1922              		.loc 1 1523 6 is_stmt 1 view .LVU594
 1923 0052 02A8     		add	r0, sp, #8
 1924 0054 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1925              	.LVL186:
1524:FreeRTOS/src/queue.c **** 				}
 1926              		.loc 1 1524 6 view .LVU595
1524:FreeRTOS/src/queue.c **** 				}
 1927              		.loc 1 1524 20 is_stmt 0 view .LVU596
 1928 0058 0125     		movs	r5, #1
 1929 005a 2AE0     		b	.L138
 1930              	.LVL187:
 1931              	.L153:
1524:FreeRTOS/src/queue.c **** 				}
 1932              		.loc 1 1524 20 view .LVU597
 1933              	.LBE42:
1539:FreeRTOS/src/queue.c **** 
 1934              		.loc 1 1539 3 is_stmt 1 discriminator 1 view .LVU598
 1935 005c 0023     		movs	r3, #0
 1936 005e 84F84430 		strb	r3, [r4, #68]
 1937 0062 32E0     		b	.L139
 1938              	.L154:
1539:FreeRTOS/src/queue.c **** 
 1939              		.loc 1 1539 3 discriminator 4 view .LVU599
 1940 0064 0023     		movs	r3, #0
 1941 0066 84F84530 		strb	r3, [r4, #69]
 1942 006a 34E0     		b	.L140
 1943              	.L155:
1556:FreeRTOS/src/queue.c **** 						{
 1944              		.loc 1 1556 7 view .LVU600
 1945 006c FFF7FEFF 		bl	vPortEnterCritical
 1946              	.LVL188:
1558:FreeRTOS/src/queue.c **** 						}
 1947              		.loc 1 1558 8 view .LVU601
1558:FreeRTOS/src/queue.c **** 						}
 1948              		.loc 1 1558 31 is_stmt 0 view .LVU602
 1949 0070 A068     		ldr	r0, [r4, #8]
 1950 0072 FFF7FEFF 		bl	xTaskPriorityInherit
 1951              	.LVL189:
 1952 0076 0646     		mov	r6, r0
 1953              	.LVL190:
1560:FreeRTOS/src/queue.c **** 					}
 1954              		.loc 1 1560 7 is_stmt 1 view .LVU603
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 90


 1955 0078 FFF7FEFF 		bl	vPortExitCritical
 1956              	.LVL191:
1560:FreeRTOS/src/queue.c **** 					}
 1957              		.loc 1 1560 7 is_stmt 0 view .LVU604
 1958 007c 3BE0     		b	.L143
 1959              	.L142:
1584:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 1960              		.loc 1 1584 5 is_stmt 1 view .LVU605
 1961 007e 2046     		mov	r0, r4
 1962 0080 FFF7FEFF 		bl	prvUnlockQueue
 1963              	.LVL192:
1585:FreeRTOS/src/queue.c **** 			}
 1964              		.loc 1 1585 5 view .LVU606
1585:FreeRTOS/src/queue.c **** 			}
 1965              		.loc 1 1585 14 is_stmt 0 view .LVU607
 1966 0084 FFF7FEFF 		bl	xTaskResumeAll
 1967              	.LVL193:
 1968 0088 09E0     		b	.L132
 1969              	.L141:
1591:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 1970              		.loc 1 1591 4 is_stmt 1 view .LVU608
 1971 008a 2046     		mov	r0, r4
 1972 008c FFF7FEFF 		bl	prvUnlockQueue
 1973              	.LVL194:
1592:FreeRTOS/src/queue.c **** 
 1974              		.loc 1 1592 4 view .LVU609
1592:FreeRTOS/src/queue.c **** 
 1975              		.loc 1 1592 13 is_stmt 0 view .LVU610
 1976 0090 FFF7FEFF 		bl	xTaskResumeAll
 1977              	.LVL195:
1598:FreeRTOS/src/queue.c **** 			{
 1978              		.loc 1 1598 4 is_stmt 1 view .LVU611
1598:FreeRTOS/src/queue.c **** 			{
 1979              		.loc 1 1598 8 is_stmt 0 view .LVU612
 1980 0094 2046     		mov	r0, r4
 1981 0096 FFF7FEFF 		bl	prvIsQueueEmpty
 1982              	.LVL196:
1598:FreeRTOS/src/queue.c **** 			{
 1983              		.loc 1 1598 6 view .LVU613
 1984 009a 0028     		cmp	r0, #0
 1985 009c 40D1     		bne	.L149
 1986              	.LVL197:
 1987              	.L132:
1429:FreeRTOS/src/queue.c **** 
 1988              		.loc 1 1429 29 is_stmt 1 view .LVU614
1433:FreeRTOS/src/queue.c **** 
 1989              		.loc 1 1433 42 view .LVU615
1446:FreeRTOS/src/queue.c **** 	{
 1990              		.loc 1 1446 2 view .LVU616
1448:FreeRTOS/src/queue.c **** 		{
 1991              		.loc 1 1448 3 view .LVU617
 1992 009e FFF7FEFF 		bl	vPortEnterCritical
 1993              	.LVL198:
 1994              	.LBB43:
1452:FreeRTOS/src/queue.c **** 
 1995              		.loc 1 1452 4 view .LVU618
1452:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 91


 1996              		.loc 1 1452 22 is_stmt 0 view .LVU619
 1997 00a2 A36B     		ldr	r3, [r4, #56]
 1998              	.LVL199:
1456:FreeRTOS/src/queue.c **** 			{
 1999              		.loc 1 1456 4 is_stmt 1 view .LVU620
1456:FreeRTOS/src/queue.c **** 			{
 2000              		.loc 1 1456 6 is_stmt 0 view .LVU621
 2001 00a4 002B     		cmp	r3, #0
 2002 00a6 B2D1     		bne	.L150
1502:FreeRTOS/src/queue.c **** 				{
 2003              		.loc 1 1502 5 is_stmt 1 view .LVU622
1502:FreeRTOS/src/queue.c **** 				{
 2004              		.loc 1 1502 22 is_stmt 0 view .LVU623
 2005 00a8 019B     		ldr	r3, [sp, #4]
 2006              	.LVL200:
1502:FreeRTOS/src/queue.c **** 				{
 2007              		.loc 1 1502 7 view .LVU624
 2008 00aa 002B     		cmp	r3, #0
 2009 00ac CDD0     		beq	.L151
1519:FreeRTOS/src/queue.c **** 				{
 2010              		.loc 1 1519 10 is_stmt 1 view .LVU625
1519:FreeRTOS/src/queue.c **** 				{
 2011              		.loc 1 1519 12 is_stmt 0 view .LVU626
 2012 00ae 002D     		cmp	r5, #0
 2013 00b0 CFD0     		beq	.L152
 2014              	.LVL201:
 2015              	.L138:
1529:FreeRTOS/src/queue.c **** 				}
 2016              		.loc 1 1529 30 is_stmt 1 view .LVU627
 2017              	.LBE43:
1533:FreeRTOS/src/queue.c **** 
 2018              		.loc 1 1533 3 view .LVU628
 2019 00b2 FFF7FEFF 		bl	vPortExitCritical
 2020              	.LVL202:
1538:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
 2021              		.loc 1 1538 3 view .LVU629
 2022 00b6 FFF7FEFF 		bl	vTaskSuspendAll
 2023              	.LVL203:
1539:FreeRTOS/src/queue.c **** 
 2024              		.loc 1 1539 3 view .LVU630
 2025 00ba FFF7FEFF 		bl	vPortEnterCritical
 2026              	.LVL204:
1539:FreeRTOS/src/queue.c **** 
 2027              		.loc 1 1539 3 view .LVU631
 2028 00be 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2029 00c2 5BB2     		sxtb	r3, r3
 2030 00c4 B3F1FF3F 		cmp	r3, #-1
 2031 00c8 C8D0     		beq	.L153
 2032              	.L139:
1539:FreeRTOS/src/queue.c **** 
 2033              		.loc 1 1539 3 discriminator 3 view .LVU632
 2034 00ca 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2035 00ce 5BB2     		sxtb	r3, r3
 2036 00d0 B3F1FF3F 		cmp	r3, #-1
 2037 00d4 C6D0     		beq	.L154
 2038              	.L140:
1539:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 92


 2039              		.loc 1 1539 3 discriminator 6 view .LVU633
 2040 00d6 FFF7FEFF 		bl	vPortExitCritical
 2041              	.LVL205:
1542:FreeRTOS/src/queue.c **** 		{
 2042              		.loc 1 1542 3 discriminator 6 view .LVU634
1542:FreeRTOS/src/queue.c **** 		{
 2043              		.loc 1 1542 7 is_stmt 0 discriminator 6 view .LVU635
 2044 00da 01A9     		add	r1, sp, #4
 2045 00dc 02A8     		add	r0, sp, #8
 2046 00de FFF7FEFF 		bl	xTaskCheckForTimeOut
 2047              	.LVL206:
1542:FreeRTOS/src/queue.c **** 		{
 2048              		.loc 1 1542 5 discriminator 6 view .LVU636
 2049 00e2 0028     		cmp	r0, #0
 2050 00e4 D1D1     		bne	.L141
1548:FreeRTOS/src/queue.c **** 			{
 2051              		.loc 1 1548 4 is_stmt 1 view .LVU637
1548:FreeRTOS/src/queue.c **** 			{
 2052              		.loc 1 1548 8 is_stmt 0 view .LVU638
 2053 00e6 2046     		mov	r0, r4
 2054 00e8 FFF7FEFF 		bl	prvIsQueueEmpty
 2055              	.LVL207:
1548:FreeRTOS/src/queue.c **** 			{
 2056              		.loc 1 1548 6 view .LVU639
 2057 00ec 0028     		cmp	r0, #0
 2058 00ee C6D0     		beq	.L142
1550:FreeRTOS/src/queue.c **** 
 2059              		.loc 1 1550 46 is_stmt 1 view .LVU640
1554:FreeRTOS/src/queue.c **** 					{
 2060              		.loc 1 1554 6 view .LVU641
1554:FreeRTOS/src/queue.c **** 					{
 2061              		.loc 1 1554 17 is_stmt 0 view .LVU642
 2062 00f0 2368     		ldr	r3, [r4]
1554:FreeRTOS/src/queue.c **** 					{
 2063              		.loc 1 1554 8 view .LVU643
 2064 00f2 002B     		cmp	r3, #0
 2065 00f4 BAD0     		beq	.L155
 2066              	.L143:
1564:FreeRTOS/src/queue.c **** 					}
 2067              		.loc 1 1564 31 is_stmt 1 view .LVU644
1569:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2068              		.loc 1 1569 5 view .LVU645
 2069 00f6 0199     		ldr	r1, [sp, #4]
 2070 00f8 04F12400 		add	r0, r4, #36
 2071 00fc FFF7FEFF 		bl	vTaskPlaceOnEventList
 2072              	.LVL208:
1570:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2073              		.loc 1 1570 5 view .LVU646
 2074 0100 2046     		mov	r0, r4
 2075 0102 FFF7FEFF 		bl	prvUnlockQueue
 2076              	.LVL209:
1571:FreeRTOS/src/queue.c **** 				{
 2077              		.loc 1 1571 5 view .LVU647
1571:FreeRTOS/src/queue.c **** 				{
 2078              		.loc 1 1571 9 is_stmt 0 view .LVU648
 2079 0106 FFF7FEFF 		bl	xTaskResumeAll
 2080              	.LVL210:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 93


1571:FreeRTOS/src/queue.c **** 				{
 2081              		.loc 1 1571 7 view .LVU649
 2082 010a 0028     		cmp	r0, #0
 2083 010c C7D1     		bne	.L132
1573:FreeRTOS/src/queue.c **** 				}
 2084              		.loc 1 1573 6 is_stmt 1 view .LVU650
 2085 010e 0C4B     		ldr	r3, .L157
 2086 0110 4FF08052 		mov	r2, #268435456
 2087 0114 1A60     		str	r2, [r3]
1573:FreeRTOS/src/queue.c **** 				}
 2088              		.loc 1 1573 6 view .LVU651
 2089              		.syntax unified
 2090              	@ 1573 "FreeRTOS/src/queue.c" 1
 2091 0116 BFF34F8F 		dsb
 2092              	@ 0 "" 2
1573:FreeRTOS/src/queue.c **** 				}
 2093              		.loc 1 1573 6 view .LVU652
 2094              	@ 1573 "FreeRTOS/src/queue.c" 1
 2095 011a BFF36F8F 		isb
 2096              	@ 0 "" 2
1573:FreeRTOS/src/queue.c **** 				}
 2097              		.loc 1 1573 28 view .LVU653
 2098              		.thumb
 2099              		.syntax unified
 2100 011e BEE7     		b	.L132
 2101              	.L149:
1605:FreeRTOS/src/queue.c **** 					{
 2102              		.loc 1 1605 6 view .LVU654
1605:FreeRTOS/src/queue.c **** 					{
 2103              		.loc 1 1605 8 is_stmt 0 view .LVU655
 2104 0120 0EB9     		cbnz	r6, .L156
 2105              	.L145:
1624:FreeRTOS/src/queue.c **** 				return errQUEUE_EMPTY;
 2106              		.loc 1 1624 41 is_stmt 1 view .LVU656
1625:FreeRTOS/src/queue.c **** 			}
 2107              		.loc 1 1625 5 view .LVU657
1625:FreeRTOS/src/queue.c **** 			}
 2108              		.loc 1 1625 12 is_stmt 0 view .LVU658
 2109 0122 0020     		movs	r0, #0
 2110 0124 7CE7     		b	.L131
 2111              	.L156:
1607:FreeRTOS/src/queue.c **** 						{
 2112              		.loc 1 1607 7 is_stmt 1 view .LVU659
 2113 0126 FFF7FEFF 		bl	vPortEnterCritical
 2114              	.LVL211:
 2115              	.LBB44:
1609:FreeRTOS/src/queue.c **** 
 2116              		.loc 1 1609 8 view .LVU660
1616:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2117              		.loc 1 1616 8 view .LVU661
1616:FreeRTOS/src/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2118              		.loc 1 1616 35 is_stmt 0 view .LVU662
 2119 012a 2046     		mov	r0, r4
 2120 012c FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2121              	.LVL212:
1617:FreeRTOS/src/queue.c **** 						}
 2122              		.loc 1 1617 8 is_stmt 1 view .LVU663
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 94


 2123 0130 0146     		mov	r1, r0
 2124 0132 A068     		ldr	r0, [r4, #8]
 2125              	.LVL213:
1617:FreeRTOS/src/queue.c **** 						}
 2126              		.loc 1 1617 8 is_stmt 0 view .LVU664
 2127 0134 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2128              	.LVL214:
1617:FreeRTOS/src/queue.c **** 						}
 2129              		.loc 1 1617 8 view .LVU665
 2130              	.LBE44:
1619:FreeRTOS/src/queue.c **** 					}
 2131              		.loc 1 1619 7 is_stmt 1 view .LVU666
 2132 0138 FFF7FEFF 		bl	vPortExitCritical
 2133              	.LVL215:
 2134 013c F1E7     		b	.L145
 2135              	.L158:
 2136 013e 00BF     		.align	2
 2137              	.L157:
 2138 0140 04ED00E0 		.word	-536810236
 2139              		.cfi_endproc
 2140              	.LFE79:
 2142              		.section	.text.xQueuePeek,"ax",%progbits
 2143              		.align	1
 2144              		.global	xQueuePeek
 2145              		.syntax unified
 2146              		.thumb
 2147              		.thumb_func
 2148              		.fpu softvfp
 2150              	xQueuePeek:
 2151              	.LVL216:
 2152              	.LFB80:
1637:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2153              		.loc 1 1637 1 view -0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 16
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
1637:FreeRTOS/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2157              		.loc 1 1637 1 is_stmt 0 view .LVU668
 2158 0000 70B5     		push	{r4, r5, r6, lr}
 2159              	.LCFI28:
 2160              		.cfi_def_cfa_offset 16
 2161              		.cfi_offset 4, -16
 2162              		.cfi_offset 5, -12
 2163              		.cfi_offset 6, -8
 2164              		.cfi_offset 14, -4
 2165 0002 84B0     		sub	sp, sp, #16
 2166              	.LCFI29:
 2167              		.cfi_def_cfa_offset 32
 2168 0004 0446     		mov	r4, r0
 2169 0006 0E46     		mov	r6, r1
 2170 0008 0192     		str	r2, [sp, #4]
1638:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 2171              		.loc 1 1638 1 is_stmt 1 view .LVU669
 2172              	.LVL217:
1639:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
 2173              		.loc 1 1639 1 view .LVU670
1640:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 95


 2174              		.loc 1 1640 1 view .LVU671
1641:FreeRTOS/src/queue.c **** 
 2175              		.loc 1 1641 1 view .LVU672
1638:FreeRTOS/src/queue.c **** TimeOut_t xTimeOut;
 2176              		.loc 1 1638 12 is_stmt 0 view .LVU673
 2177 000a 0025     		movs	r5, #0
 2178 000c 3CE0     		b	.L160
 2179              	.LVL218:
 2180              	.L174:
 2181              	.LBB45:
1674:FreeRTOS/src/queue.c **** 
 2182              		.loc 1 1674 5 is_stmt 1 view .LVU674
1674:FreeRTOS/src/queue.c **** 
 2183              		.loc 1 1674 28 is_stmt 0 view .LVU675
 2184 000e E568     		ldr	r5, [r4, #12]
 2185              	.LVL219:
1676:FreeRTOS/src/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2186              		.loc 1 1676 5 is_stmt 1 view .LVU676
 2187 0010 3146     		mov	r1, r6
 2188 0012 2046     		mov	r0, r4
 2189 0014 FFF7FEFF 		bl	prvCopyDataFromQueue
 2190              	.LVL220:
1677:FreeRTOS/src/queue.c **** 
 2191              		.loc 1 1677 31 view .LVU677
1680:FreeRTOS/src/queue.c **** 
 2192              		.loc 1 1680 5 view .LVU678
1680:FreeRTOS/src/queue.c **** 
 2193              		.loc 1 1680 34 is_stmt 0 view .LVU679
 2194 0018 E560     		str	r5, [r4, #12]
1684:FreeRTOS/src/queue.c **** 				{
 2195              		.loc 1 1684 5 is_stmt 1 view .LVU680
1684:FreeRTOS/src/queue.c **** 				{
 2196              		.loc 1 1684 9 is_stmt 0 view .LVU681
 2197 001a 636A     		ldr	r3, [r4, #36]
1684:FreeRTOS/src/queue.c **** 				{
 2198              		.loc 1 1684 7 view .LVU682
 2199 001c 23B9     		cbnz	r3, .L172
 2200              	.L162:
1698:FreeRTOS/src/queue.c **** 				}
 2201              		.loc 1 1698 30 is_stmt 1 view .LVU683
1701:FreeRTOS/src/queue.c **** 				return pdPASS;
 2202              		.loc 1 1701 5 view .LVU684
 2203 001e FFF7FEFF 		bl	vPortExitCritical
 2204              	.LVL221:
1702:FreeRTOS/src/queue.c **** 			}
 2205              		.loc 1 1702 5 view .LVU685
1702:FreeRTOS/src/queue.c **** 			}
 2206              		.loc 1 1702 12 is_stmt 0 view .LVU686
 2207 0022 0120     		movs	r0, #1
 2208              	.LVL222:
 2209              	.L159:
1702:FreeRTOS/src/queue.c **** 			}
 2210              		.loc 1 1702 12 view .LVU687
 2211              	.LBE45:
1782:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2212              		.loc 1 1782 1 view .LVU688
 2213 0024 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 96


 2214              	.LCFI30:
 2215              		.cfi_remember_state
 2216              		.cfi_def_cfa_offset 16
 2217              		@ sp needed
 2218 0026 70BD     		pop	{r4, r5, r6, pc}
 2219              	.LVL223:
 2220              	.L172:
 2221              	.LCFI31:
 2222              		.cfi_restore_state
 2223              	.LBB46:
1686:FreeRTOS/src/queue.c **** 					{
 2224              		.loc 1 1686 6 is_stmt 1 view .LVU689
1686:FreeRTOS/src/queue.c **** 					{
 2225              		.loc 1 1686 10 is_stmt 0 view .LVU690
 2226 0028 04F12400 		add	r0, r4, #36
 2227 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2228              	.LVL224:
1686:FreeRTOS/src/queue.c **** 					{
 2229              		.loc 1 1686 8 view .LVU691
 2230 0030 0028     		cmp	r0, #0
 2231 0032 F4D0     		beq	.L162
1689:FreeRTOS/src/queue.c **** 					}
 2232              		.loc 1 1689 7 is_stmt 1 view .LVU692
 2233 0034 344B     		ldr	r3, .L179
 2234 0036 4FF08052 		mov	r2, #268435456
 2235 003a 1A60     		str	r2, [r3]
1689:FreeRTOS/src/queue.c **** 					}
 2236              		.loc 1 1689 7 view .LVU693
 2237              		.syntax unified
 2238              	@ 1689 "FreeRTOS/src/queue.c" 1
 2239 003c BFF34F8F 		dsb
 2240              	@ 0 "" 2
1689:FreeRTOS/src/queue.c **** 					}
 2241              		.loc 1 1689 7 view .LVU694
 2242              	@ 1689 "FreeRTOS/src/queue.c" 1
 2243 0040 BFF36F8F 		isb
 2244              	@ 0 "" 2
1689:FreeRTOS/src/queue.c **** 					}
 2245              		.loc 1 1689 39 view .LVU695
 2246              		.thumb
 2247              		.syntax unified
 2248 0044 EBE7     		b	.L162
 2249              	.LVL225:
 2250              	.L175:
1710:FreeRTOS/src/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2251              		.loc 1 1710 6 view .LVU696
 2252 0046 FFF7FEFF 		bl	vPortExitCritical
 2253              	.LVL226:
1711:FreeRTOS/src/queue.c **** 					return errQUEUE_EMPTY;
 2254              		.loc 1 1711 39 view .LVU697
1712:FreeRTOS/src/queue.c **** 				}
 2255              		.loc 1 1712 6 view .LVU698
1712:FreeRTOS/src/queue.c **** 				}
 2256              		.loc 1 1712 13 is_stmt 0 view .LVU699
 2257 004a 0020     		movs	r0, #0
 2258 004c EAE7     		b	.L159
 2259              	.L176:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 97


1719:FreeRTOS/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 2260              		.loc 1 1719 6 is_stmt 1 view .LVU700
 2261 004e 02A8     		add	r0, sp, #8
 2262 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2263              	.LVL227:
1720:FreeRTOS/src/queue.c **** 				}
 2264              		.loc 1 1720 6 view .LVU701
1720:FreeRTOS/src/queue.c **** 				}
 2265              		.loc 1 1720 20 is_stmt 0 view .LVU702
 2266 0054 0125     		movs	r5, #1
 2267 0056 21E0     		b	.L165
 2268              	.LVL228:
 2269              	.L177:
1720:FreeRTOS/src/queue.c **** 				}
 2270              		.loc 1 1720 20 view .LVU703
 2271              	.LBE46:
1735:FreeRTOS/src/queue.c **** 
 2272              		.loc 1 1735 3 is_stmt 1 discriminator 1 view .LVU704
 2273 0058 0023     		movs	r3, #0
 2274 005a 84F84430 		strb	r3, [r4, #68]
 2275 005e 29E0     		b	.L166
 2276              	.L178:
1735:FreeRTOS/src/queue.c **** 
 2277              		.loc 1 1735 3 discriminator 4 view .LVU705
 2278 0060 0023     		movs	r3, #0
 2279 0062 84F84530 		strb	r3, [r4, #69]
 2280 0066 2BE0     		b	.L167
 2281              	.L169:
1760:FreeRTOS/src/queue.c **** 				( void ) xTaskResumeAll();
 2282              		.loc 1 1760 5 view .LVU706
 2283 0068 2046     		mov	r0, r4
 2284 006a FFF7FEFF 		bl	prvUnlockQueue
 2285              	.LVL229:
1761:FreeRTOS/src/queue.c **** 			}
 2286              		.loc 1 1761 5 view .LVU707
1761:FreeRTOS/src/queue.c **** 			}
 2287              		.loc 1 1761 14 is_stmt 0 view .LVU708
 2288 006e FFF7FEFF 		bl	xTaskResumeAll
 2289              	.LVL230:
 2290 0072 09E0     		b	.L160
 2291              	.L168:
1768:FreeRTOS/src/queue.c **** 			( void ) xTaskResumeAll();
 2292              		.loc 1 1768 4 is_stmt 1 view .LVU709
 2293 0074 2046     		mov	r0, r4
 2294 0076 FFF7FEFF 		bl	prvUnlockQueue
 2295              	.LVL231:
1769:FreeRTOS/src/queue.c **** 
 2296              		.loc 1 1769 4 view .LVU710
1769:FreeRTOS/src/queue.c **** 
 2297              		.loc 1 1769 13 is_stmt 0 view .LVU711
 2298 007a FFF7FEFF 		bl	xTaskResumeAll
 2299              	.LVL232:
1771:FreeRTOS/src/queue.c **** 			{
 2300              		.loc 1 1771 4 is_stmt 1 view .LVU712
1771:FreeRTOS/src/queue.c **** 			{
 2301              		.loc 1 1771 8 is_stmt 0 view .LVU713
 2302 007e 2046     		mov	r0, r4
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 98


 2303 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 2304              	.LVL233:
1771:FreeRTOS/src/queue.c **** 			{
 2305              		.loc 1 1771 6 view .LVU714
 2306 0084 0028     		cmp	r0, #0
 2307 0086 3DD1     		bne	.L173
 2308              	.LVL234:
 2309              	.L160:
1644:FreeRTOS/src/queue.c **** 
 2310              		.loc 1 1644 29 is_stmt 1 view .LVU715
1648:FreeRTOS/src/queue.c **** 
 2311              		.loc 1 1648 100 view .LVU716
1661:FreeRTOS/src/queue.c **** 	{
 2312              		.loc 1 1661 2 view .LVU717
1663:FreeRTOS/src/queue.c **** 		{
 2313              		.loc 1 1663 3 view .LVU718
 2314 0088 FFF7FEFF 		bl	vPortEnterCritical
 2315              	.LVL235:
 2316              	.LBB47:
1665:FreeRTOS/src/queue.c **** 
 2317              		.loc 1 1665 4 view .LVU719
1665:FreeRTOS/src/queue.c **** 
 2318              		.loc 1 1665 22 is_stmt 0 view .LVU720
 2319 008c A36B     		ldr	r3, [r4, #56]
 2320              	.LVL236:
1669:FreeRTOS/src/queue.c **** 			{
 2321              		.loc 1 1669 4 is_stmt 1 view .LVU721
1669:FreeRTOS/src/queue.c **** 			{
 2322              		.loc 1 1669 6 is_stmt 0 view .LVU722
 2323 008e 002B     		cmp	r3, #0
 2324 0090 BDD1     		bne	.L174
1706:FreeRTOS/src/queue.c **** 				{
 2325              		.loc 1 1706 5 is_stmt 1 view .LVU723
1706:FreeRTOS/src/queue.c **** 				{
 2326              		.loc 1 1706 22 is_stmt 0 view .LVU724
 2327 0092 019B     		ldr	r3, [sp, #4]
 2328              	.LVL237:
1706:FreeRTOS/src/queue.c **** 				{
 2329              		.loc 1 1706 7 view .LVU725
 2330 0094 002B     		cmp	r3, #0
 2331 0096 D6D0     		beq	.L175
1714:FreeRTOS/src/queue.c **** 				{
 2332              		.loc 1 1714 10 is_stmt 1 view .LVU726
1714:FreeRTOS/src/queue.c **** 				{
 2333              		.loc 1 1714 12 is_stmt 0 view .LVU727
 2334 0098 002D     		cmp	r5, #0
 2335 009a D8D0     		beq	.L176
 2336              	.LVL238:
 2337              	.L165:
1725:FreeRTOS/src/queue.c **** 				}
 2338              		.loc 1 1725 30 is_stmt 1 view .LVU728
 2339              	.LBE47:
1729:FreeRTOS/src/queue.c **** 
 2340              		.loc 1 1729 3 view .LVU729
 2341 009c FFF7FEFF 		bl	vPortExitCritical
 2342              	.LVL239:
1734:FreeRTOS/src/queue.c **** 		prvLockQueue( pxQueue );
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 99


 2343              		.loc 1 1734 3 view .LVU730
 2344 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 2345              	.LVL240:
1735:FreeRTOS/src/queue.c **** 
 2346              		.loc 1 1735 3 view .LVU731
 2347 00a4 FFF7FEFF 		bl	vPortEnterCritical
 2348              	.LVL241:
1735:FreeRTOS/src/queue.c **** 
 2349              		.loc 1 1735 3 view .LVU732
 2350 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2351 00ac 5BB2     		sxtb	r3, r3
 2352 00ae B3F1FF3F 		cmp	r3, #-1
 2353 00b2 D1D0     		beq	.L177
 2354              	.L166:
1735:FreeRTOS/src/queue.c **** 
 2355              		.loc 1 1735 3 discriminator 3 view .LVU733
 2356 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2357 00b8 5BB2     		sxtb	r3, r3
 2358 00ba B3F1FF3F 		cmp	r3, #-1
 2359 00be CFD0     		beq	.L178
 2360              	.L167:
1735:FreeRTOS/src/queue.c **** 
 2361              		.loc 1 1735 3 discriminator 6 view .LVU734
 2362 00c0 FFF7FEFF 		bl	vPortExitCritical
 2363              	.LVL242:
1738:FreeRTOS/src/queue.c **** 		{
 2364              		.loc 1 1738 3 discriminator 6 view .LVU735
1738:FreeRTOS/src/queue.c **** 		{
 2365              		.loc 1 1738 7 is_stmt 0 discriminator 6 view .LVU736
 2366 00c4 01A9     		add	r1, sp, #4
 2367 00c6 02A8     		add	r0, sp, #8
 2368 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2369              	.LVL243:
1738:FreeRTOS/src/queue.c **** 		{
 2370              		.loc 1 1738 5 discriminator 6 view .LVU737
 2371 00cc 0028     		cmp	r0, #0
 2372 00ce D1D1     		bne	.L168
1742:FreeRTOS/src/queue.c **** 			{
 2373              		.loc 1 1742 4 is_stmt 1 view .LVU738
1742:FreeRTOS/src/queue.c **** 			{
 2374              		.loc 1 1742 8 is_stmt 0 view .LVU739
 2375 00d0 2046     		mov	r0, r4
 2376 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 2377              	.LVL244:
1742:FreeRTOS/src/queue.c **** 			{
 2378              		.loc 1 1742 6 view .LVU740
 2379 00d6 0028     		cmp	r0, #0
 2380 00d8 C6D0     		beq	.L169
1744:FreeRTOS/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2381              		.loc 1 1744 43 is_stmt 1 view .LVU741
1745:FreeRTOS/src/queue.c **** 				prvUnlockQueue( pxQueue );
 2382              		.loc 1 1745 5 view .LVU742
 2383 00da 0199     		ldr	r1, [sp, #4]
 2384 00dc 04F12400 		add	r0, r4, #36
 2385 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2386              	.LVL245:
1746:FreeRTOS/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 100


 2387              		.loc 1 1746 5 view .LVU743
 2388 00e4 2046     		mov	r0, r4
 2389 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2390              	.LVL246:
1747:FreeRTOS/src/queue.c **** 				{
 2391              		.loc 1 1747 5 view .LVU744
1747:FreeRTOS/src/queue.c **** 				{
 2392              		.loc 1 1747 9 is_stmt 0 view .LVU745
 2393 00ea FFF7FEFF 		bl	xTaskResumeAll
 2394              	.LVL247:
1747:FreeRTOS/src/queue.c **** 				{
 2395              		.loc 1 1747 7 view .LVU746
 2396 00ee 0028     		cmp	r0, #0
 2397 00f0 CAD1     		bne	.L160
1749:FreeRTOS/src/queue.c **** 				}
 2398              		.loc 1 1749 6 is_stmt 1 view .LVU747
 2399 00f2 054B     		ldr	r3, .L179
 2400 00f4 4FF08052 		mov	r2, #268435456
 2401 00f8 1A60     		str	r2, [r3]
1749:FreeRTOS/src/queue.c **** 				}
 2402              		.loc 1 1749 6 view .LVU748
 2403              		.syntax unified
 2404              	@ 1749 "FreeRTOS/src/queue.c" 1
 2405 00fa BFF34F8F 		dsb
 2406              	@ 0 "" 2
1749:FreeRTOS/src/queue.c **** 				}
 2407              		.loc 1 1749 6 view .LVU749
 2408              	@ 1749 "FreeRTOS/src/queue.c" 1
 2409 00fe BFF36F8F 		isb
 2410              	@ 0 "" 2
1749:FreeRTOS/src/queue.c **** 				}
 2411              		.loc 1 1749 28 view .LVU750
 2412              		.thumb
 2413              		.syntax unified
 2414 0102 C1E7     		b	.L160
 2415              	.L173:
1774:FreeRTOS/src/queue.c **** 			}
 2416              		.loc 1 1774 12 is_stmt 0 view .LVU751
 2417 0104 0020     		movs	r0, #0
 2418 0106 8DE7     		b	.L159
 2419              	.L180:
 2420              		.align	2
 2421              	.L179:
 2422 0108 04ED00E0 		.word	-536810236
 2423              		.cfi_endproc
 2424              	.LFE80:
 2426              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2427              		.align	1
 2428              		.global	xQueueReceiveFromISR
 2429              		.syntax unified
 2430              		.thumb
 2431              		.thumb_func
 2432              		.fpu softvfp
 2434              	xQueueReceiveFromISR:
 2435              	.LVL248:
 2436              	.LFB81:
1786:FreeRTOS/src/queue.c **** BaseType_t xReturn;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 101


 2437              		.loc 1 1786 1 is_stmt 1 view -0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
 2440              		@ frame_needed = 0, uses_anonymous_args = 0
1786:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2441              		.loc 1 1786 1 is_stmt 0 view .LVU753
 2442 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2443              	.LCFI32:
 2444              		.cfi_def_cfa_offset 24
 2445              		.cfi_offset 4, -24
 2446              		.cfi_offset 5, -20
 2447              		.cfi_offset 6, -16
 2448              		.cfi_offset 7, -12
 2449              		.cfi_offset 8, -8
 2450              		.cfi_offset 14, -4
1787:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2451              		.loc 1 1787 1 is_stmt 1 view .LVU754
1788:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2452              		.loc 1 1788 1 view .LVU755
1789:FreeRTOS/src/queue.c **** 
 2453              		.loc 1 1789 1 view .LVU756
 2454              	.LVL249:
1791:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2455              		.loc 1 1791 25 view .LVU757
1792:FreeRTOS/src/queue.c **** 
 2456              		.loc 1 1792 92 view .LVU758
1808:FreeRTOS/src/queue.c **** 
 2457              		.loc 1 1808 44 view .LVU759
1810:FreeRTOS/src/queue.c **** 	{
 2458              		.loc 1 1810 2 view .LVU760
 2459              	.LBB48:
 2460              	.LBI48:
 209:FreeRTOS/inc/portmacro.h **** {
 2461              		.loc 2 209 34 view .LVU761
 2462              	.LBB49:
 211:FreeRTOS/inc/portmacro.h **** 
 2463              		.loc 2 211 1 view .LVU762
 213:FreeRTOS/inc/portmacro.h **** 	(
 2464              		.loc 2 213 2 view .LVU763
 2465              		.syntax unified
 2466              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 2467 0004 EFF31186 			mrs r6, basepri											
 2468 0008 4FF0BF03 		mov r3, #191												
 2469 000c 83F31188 		msr basepri, r3											
 2470 0010 BFF36F8F 		isb														
 2471 0014 BFF34F8F 		dsb														
 2472              	
 2473              	@ 0 "" 2
 2474              	.LVL250:
 225:FreeRTOS/inc/portmacro.h **** }
 2475              		.loc 2 225 2 view .LVU764
 225:FreeRTOS/inc/portmacro.h **** }
 2476              		.loc 2 225 2 is_stmt 0 view .LVU765
 2477              		.thumb
 2478              		.syntax unified
 2479              	.LBE49:
 2480              	.LBE48:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 102


 2481              	.LBB50:
1812:FreeRTOS/src/queue.c **** 
 2482              		.loc 1 1812 3 is_stmt 1 view .LVU766
1812:FreeRTOS/src/queue.c **** 
 2483              		.loc 1 1812 21 is_stmt 0 view .LVU767
 2484 0018 846B     		ldr	r4, [r0, #56]
 2485              	.LVL251:
1815:FreeRTOS/src/queue.c **** 		{
 2486              		.loc 1 1815 3 is_stmt 1 view .LVU768
1815:FreeRTOS/src/queue.c **** 		{
 2487              		.loc 1 1815 5 is_stmt 0 view .LVU769
 2488 001a 24B9     		cbnz	r4, .L189
1866:FreeRTOS/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2489              		.loc 1 1866 12 view .LVU770
 2490 001c 0020     		movs	r0, #0
 2491              	.LVL252:
 2492              	.L182:
1867:FreeRTOS/src/queue.c **** 		}
 2493              		.loc 1 1867 49 is_stmt 1 view .LVU771
 2494              	.LBE50:
1870:FreeRTOS/src/queue.c **** 
 2495              		.loc 1 1870 2 view .LVU772
 2496              	.LBB52:
 2497              	.LBI52:
 229:FreeRTOS/inc/portmacro.h **** {
 2498              		.loc 2 229 30 view .LVU773
 2499              	.LBB53:
 2500              		.loc 2 231 2 view .LVU774
 2501              		.syntax unified
 2502              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 2503 001e 86F31188 			msr basepri, r6	
 2504              	@ 0 "" 2
 2505              	.LVL253:
 2506              		.loc 2 231 2 is_stmt 0 view .LVU775
 2507              		.thumb
 2508              		.syntax unified
 2509              	.LBE53:
 2510              	.LBE52:
1872:FreeRTOS/src/queue.c **** }
 2511              		.loc 1 1872 2 is_stmt 1 view .LVU776
1873:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2512              		.loc 1 1873 1 is_stmt 0 view .LVU777
 2513 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2514              	.LVL254:
 2515              	.L189:
1873:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2516              		.loc 1 1873 1 view .LVU778
 2517 0026 9046     		mov	r8, r2
 2518 0028 0746     		mov	r7, r0
 2519              	.LBB54:
 2520              	.LBB51:
1817:FreeRTOS/src/queue.c **** 
 2521              		.loc 1 1817 4 is_stmt 1 view .LVU779
1817:FreeRTOS/src/queue.c **** 
 2522              		.loc 1 1817 17 is_stmt 0 view .LVU780
 2523 002a 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2524 002e 6DB2     		sxtb	r5, r5
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 103


 2525              	.LVL255:
1819:FreeRTOS/src/queue.c **** 
 2526              		.loc 1 1819 42 is_stmt 1 view .LVU781
1821:FreeRTOS/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2527              		.loc 1 1821 4 view .LVU782
 2528 0030 FFF7FEFF 		bl	prvCopyDataFromQueue
 2529              	.LVL256:
1822:FreeRTOS/src/queue.c **** 
 2530              		.loc 1 1822 4 view .LVU783
1822:FreeRTOS/src/queue.c **** 
 2531              		.loc 1 1822 51 is_stmt 0 view .LVU784
 2532 0034 013C     		subs	r4, r4, #1
 2533              	.LVL257:
1822:FreeRTOS/src/queue.c **** 
 2534              		.loc 1 1822 31 view .LVU785
 2535 0036 BC63     		str	r4, [r7, #56]
1828:FreeRTOS/src/queue.c **** 			{
 2536              		.loc 1 1828 4 is_stmt 1 view .LVU786
1828:FreeRTOS/src/queue.c **** 			{
 2537              		.loc 1 1828 6 is_stmt 0 view .LVU787
 2538 0038 B5F1FF3F 		cmp	r5, #-1
 2539 003c 05D0     		beq	.L190
1859:FreeRTOS/src/queue.c **** 			}
 2540              		.loc 1 1859 5 is_stmt 1 view .LVU788
1859:FreeRTOS/src/queue.c **** 			}
 2541              		.loc 1 1859 45 is_stmt 0 view .LVU789
 2542 003e 0135     		adds	r5, r5, #1
 2543              	.LVL258:
1859:FreeRTOS/src/queue.c **** 			}
 2544              		.loc 1 1859 24 view .LVU790
 2545 0040 6DB2     		sxtb	r5, r5
 2546              	.LVL259:
1859:FreeRTOS/src/queue.c **** 			}
 2547              		.loc 1 1859 22 view .LVU791
 2548 0042 87F84450 		strb	r5, [r7, #68]
1862:FreeRTOS/src/queue.c **** 		}
 2549              		.loc 1 1862 12 view .LVU792
 2550 0046 0120     		movs	r0, #1
 2551 0048 E9E7     		b	.L182
 2552              	.LVL260:
 2553              	.L190:
1830:FreeRTOS/src/queue.c **** 				{
 2554              		.loc 1 1830 5 is_stmt 1 view .LVU793
1830:FreeRTOS/src/queue.c **** 				{
 2555              		.loc 1 1830 9 is_stmt 0 view .LVU794
 2556 004a 3B69     		ldr	r3, [r7, #16]
1830:FreeRTOS/src/queue.c **** 				{
 2557              		.loc 1 1830 7 view .LVU795
 2558 004c 0BB9     		cbnz	r3, .L191
1862:FreeRTOS/src/queue.c **** 		}
 2559              		.loc 1 1862 12 view .LVU796
 2560 004e 0120     		movs	r0, #1
 2561 0050 E5E7     		b	.L182
 2562              	.L191:
1832:FreeRTOS/src/queue.c **** 					{
 2563              		.loc 1 1832 6 is_stmt 1 view .LVU797
1832:FreeRTOS/src/queue.c **** 					{
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 104


 2564              		.loc 1 1832 10 is_stmt 0 view .LVU798
 2565 0052 07F11000 		add	r0, r7, #16
 2566 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2567              	.LVL261:
1832:FreeRTOS/src/queue.c **** 					{
 2568              		.loc 1 1832 8 view .LVU799
 2569 005a 30B1     		cbz	r0, .L186
1836:FreeRTOS/src/queue.c **** 						{
 2570              		.loc 1 1836 7 is_stmt 1 view .LVU800
1836:FreeRTOS/src/queue.c **** 						{
 2571              		.loc 1 1836 9 is_stmt 0 view .LVU801
 2572 005c B8F1000F 		cmp	r8, #0
 2573 0060 05D0     		beq	.L187
1838:FreeRTOS/src/queue.c **** 						}
 2574              		.loc 1 1838 8 is_stmt 1 view .LVU802
1838:FreeRTOS/src/queue.c **** 						}
 2575              		.loc 1 1838 35 is_stmt 0 view .LVU803
 2576 0062 0120     		movs	r0, #1
 2577 0064 C8F80000 		str	r0, [r8]
 2578 0068 D9E7     		b	.L182
 2579              	.L186:
1862:FreeRTOS/src/queue.c **** 		}
 2580              		.loc 1 1862 12 view .LVU804
 2581 006a 0120     		movs	r0, #1
 2582 006c D7E7     		b	.L182
 2583              	.L187:
 2584 006e 0120     		movs	r0, #1
 2585 0070 D5E7     		b	.L182
 2586              	.LBE51:
 2587              	.LBE54:
 2588              		.cfi_endproc
 2589              	.LFE81:
 2591              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2592              		.align	1
 2593              		.global	xQueuePeekFromISR
 2594              		.syntax unified
 2595              		.thumb
 2596              		.thumb_func
 2597              		.fpu softvfp
 2599              	xQueuePeekFromISR:
 2600              	.LVL262:
 2601              	.LFB82:
1877:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2602              		.loc 1 1877 1 is_stmt 1 view -0
 2603              		.cfi_startproc
 2604              		@ args = 0, pretend = 0, frame = 0
 2605              		@ frame_needed = 0, uses_anonymous_args = 0
1877:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2606              		.loc 1 1877 1 is_stmt 0 view .LVU806
 2607 0000 70B5     		push	{r4, r5, r6, lr}
 2608              	.LCFI33:
 2609              		.cfi_def_cfa_offset 16
 2610              		.cfi_offset 4, -16
 2611              		.cfi_offset 5, -12
 2612              		.cfi_offset 6, -8
 2613              		.cfi_offset 14, -4
1878:FreeRTOS/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 105


 2614              		.loc 1 1878 1 is_stmt 1 view .LVU807
1879:FreeRTOS/src/queue.c **** int8_t *pcOriginalReadPosition;
 2615              		.loc 1 1879 1 view .LVU808
1880:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2616              		.loc 1 1880 1 view .LVU809
1881:FreeRTOS/src/queue.c **** 
 2617              		.loc 1 1881 1 view .LVU810
 2618              	.LVL263:
1883:FreeRTOS/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2619              		.loc 1 1883 25 view .LVU811
1884:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2620              		.loc 1 1884 92 view .LVU812
1885:FreeRTOS/src/queue.c **** 
 2621              		.loc 1 1885 42 view .LVU813
1901:FreeRTOS/src/queue.c **** 
 2622              		.loc 1 1901 44 view .LVU814
1903:FreeRTOS/src/queue.c **** 	{
 2623              		.loc 1 1903 2 view .LVU815
 2624              	.LBB55:
 2625              	.LBI55:
 209:FreeRTOS/inc/portmacro.h **** {
 2626              		.loc 2 209 34 view .LVU816
 2627              	.LBB56:
 211:FreeRTOS/inc/portmacro.h **** 
 2628              		.loc 2 211 1 view .LVU817
 213:FreeRTOS/inc/portmacro.h **** 	(
 2629              		.loc 2 213 2 view .LVU818
 2630              		.syntax unified
 2631              	@ 213 "FreeRTOS/inc/portmacro.h" 1
 2632 0002 EFF31185 			mrs r5, basepri											
 2633 0006 4FF0BF03 		mov r3, #191												
 2634 000a 83F31188 		msr basepri, r3											
 2635 000e BFF36F8F 		isb														
 2636 0012 BFF34F8F 		dsb														
 2637              	
 2638              	@ 0 "" 2
 2639              	.LVL264:
 225:FreeRTOS/inc/portmacro.h **** }
 2640              		.loc 2 225 2 view .LVU819
 225:FreeRTOS/inc/portmacro.h **** }
 2641              		.loc 2 225 2 is_stmt 0 view .LVU820
 2642              		.thumb
 2643              		.syntax unified
 2644              	.LBE56:
 2645              	.LBE55:
1906:FreeRTOS/src/queue.c **** 		{
 2646              		.loc 1 1906 3 is_stmt 1 view .LVU821
1906:FreeRTOS/src/queue.c **** 		{
 2647              		.loc 1 1906 14 is_stmt 0 view .LVU822
 2648 0016 836B     		ldr	r3, [r0, #56]
1906:FreeRTOS/src/queue.c **** 		{
 2649              		.loc 1 1906 5 view .LVU823
 2650 0018 1BB9     		cbnz	r3, .L196
1920:FreeRTOS/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2651              		.loc 1 1920 12 view .LVU824
 2652 001a 0020     		movs	r0, #0
 2653              	.LVL265:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 106


 2654              	.L193:
1921:FreeRTOS/src/queue.c **** 		}
 2655              		.loc 1 1921 46 is_stmt 1 view .LVU825
1924:FreeRTOS/src/queue.c **** 
 2656              		.loc 1 1924 2 view .LVU826
 2657              	.LBB57:
 2658              	.LBI57:
 229:FreeRTOS/inc/portmacro.h **** {
 2659              		.loc 2 229 30 view .LVU827
 2660              	.LBB58:
 2661              		.loc 2 231 2 view .LVU828
 2662              		.syntax unified
 2663              	@ 231 "FreeRTOS/inc/portmacro.h" 1
 2664 001c 85F31188 			msr basepri, r5	
 2665              	@ 0 "" 2
 2666              	.LVL266:
 2667              		.loc 2 231 2 is_stmt 0 view .LVU829
 2668              		.thumb
 2669              		.syntax unified
 2670              	.LBE58:
 2671              	.LBE57:
1926:FreeRTOS/src/queue.c **** }
 2672              		.loc 1 1926 2 is_stmt 1 view .LVU830
1927:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2673              		.loc 1 1927 1 is_stmt 0 view .LVU831
 2674 0020 70BD     		pop	{r4, r5, r6, pc}
 2675              	.LVL267:
 2676              	.L196:
1927:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2677              		.loc 1 1927 1 view .LVU832
 2678 0022 0446     		mov	r4, r0
1908:FreeRTOS/src/queue.c **** 
 2679              		.loc 1 1908 39 is_stmt 1 view .LVU833
1912:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2680              		.loc 1 1912 4 view .LVU834
1912:FreeRTOS/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2681              		.loc 1 1912 27 is_stmt 0 view .LVU835
 2682 0024 C668     		ldr	r6, [r0, #12]
 2683              	.LVL268:
1913:FreeRTOS/src/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2684              		.loc 1 1913 4 is_stmt 1 view .LVU836
 2685 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2686              	.LVL269:
1914:FreeRTOS/src/queue.c **** 
 2687              		.loc 1 1914 4 view .LVU837
1914:FreeRTOS/src/queue.c **** 
 2688              		.loc 1 1914 33 is_stmt 0 view .LVU838
 2689 002a E660     		str	r6, [r4, #12]
1916:FreeRTOS/src/queue.c **** 		}
 2690              		.loc 1 1916 4 is_stmt 1 view .LVU839
 2691              	.LVL270:
1916:FreeRTOS/src/queue.c **** 		}
 2692              		.loc 1 1916 12 is_stmt 0 view .LVU840
 2693 002c 0120     		movs	r0, #1
 2694 002e F5E7     		b	.L193
 2695              		.cfi_endproc
 2696              	.LFE82:
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 107


 2698              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2699              		.align	1
 2700              		.global	uxQueueMessagesWaiting
 2701              		.syntax unified
 2702              		.thumb
 2703              		.thumb_func
 2704              		.fpu softvfp
 2706              	uxQueueMessagesWaiting:
 2707              	.LVL271:
 2708              	.LFB83:
1931:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2709              		.loc 1 1931 1 is_stmt 1 view -0
 2710              		.cfi_startproc
 2711              		@ args = 0, pretend = 0, frame = 0
 2712              		@ frame_needed = 0, uses_anonymous_args = 0
1931:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2713              		.loc 1 1931 1 is_stmt 0 view .LVU842
 2714 0000 10B5     		push	{r4, lr}
 2715              	.LCFI34:
 2716              		.cfi_def_cfa_offset 8
 2717              		.cfi_offset 4, -8
 2718              		.cfi_offset 14, -4
 2719 0002 0446     		mov	r4, r0
1932:FreeRTOS/src/queue.c **** 
 2720              		.loc 1 1932 1 is_stmt 1 view .LVU843
1934:FreeRTOS/src/queue.c **** 
 2721              		.loc 1 1934 24 view .LVU844
1936:FreeRTOS/src/queue.c **** 	{
 2722              		.loc 1 1936 2 view .LVU845
 2723 0004 FFF7FEFF 		bl	vPortEnterCritical
 2724              	.LVL272:
1938:FreeRTOS/src/queue.c **** 	}
 2725              		.loc 1 1938 3 view .LVU846
1938:FreeRTOS/src/queue.c **** 	}
 2726              		.loc 1 1938 12 is_stmt 0 view .LVU847
 2727 0008 A46B     		ldr	r4, [r4, #56]
 2728              	.LVL273:
1940:FreeRTOS/src/queue.c **** 
 2729              		.loc 1 1940 2 is_stmt 1 view .LVU848
 2730 000a FFF7FEFF 		bl	vPortExitCritical
 2731              	.LVL274:
1942:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2732              		.loc 1 1942 2 view .LVU849
1943:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2733              		.loc 1 1943 1 is_stmt 0 view .LVU850
 2734 000e 2046     		mov	r0, r4
 2735 0010 10BD     		pop	{r4, pc}
1943:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2736              		.loc 1 1943 1 view .LVU851
 2737              		.cfi_endproc
 2738              	.LFE83:
 2740              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2741              		.align	1
 2742              		.global	uxQueueSpacesAvailable
 2743              		.syntax unified
 2744              		.thumb
 2745              		.thumb_func
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 108


 2746              		.fpu softvfp
 2748              	uxQueueSpacesAvailable:
 2749              	.LVL275:
 2750              	.LFB84:
1947:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2751              		.loc 1 1947 1 is_stmt 1 view -0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 0, uses_anonymous_args = 0
1947:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2755              		.loc 1 1947 1 is_stmt 0 view .LVU853
 2756 0000 38B5     		push	{r3, r4, r5, lr}
 2757              	.LCFI35:
 2758              		.cfi_def_cfa_offset 16
 2759              		.cfi_offset 3, -16
 2760              		.cfi_offset 4, -12
 2761              		.cfi_offset 5, -8
 2762              		.cfi_offset 14, -4
 2763 0002 0546     		mov	r5, r0
1948:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2764              		.loc 1 1948 1 is_stmt 1 view .LVU854
1949:FreeRTOS/src/queue.c **** 
 2765              		.loc 1 1949 1 view .LVU855
 2766              	.LVL276:
1951:FreeRTOS/src/queue.c **** 
 2767              		.loc 1 1951 25 view .LVU856
1953:FreeRTOS/src/queue.c **** 	{
 2768              		.loc 1 1953 2 view .LVU857
 2769 0004 FFF7FEFF 		bl	vPortEnterCritical
 2770              	.LVL277:
1955:FreeRTOS/src/queue.c **** 	}
 2771              		.loc 1 1955 3 view .LVU858
1955:FreeRTOS/src/queue.c **** 	}
 2772              		.loc 1 1955 21 is_stmt 0 view .LVU859
 2773 0008 EC6B     		ldr	r4, [r5, #60]
1955:FreeRTOS/src/queue.c **** 	}
 2774              		.loc 1 1955 41 view .LVU860
 2775 000a AB6B     		ldr	r3, [r5, #56]
1955:FreeRTOS/src/queue.c **** 	}
 2776              		.loc 1 1955 12 view .LVU861
 2777 000c E41A     		subs	r4, r4, r3
 2778              	.LVL278:
1957:FreeRTOS/src/queue.c **** 
 2779              		.loc 1 1957 2 is_stmt 1 view .LVU862
 2780 000e FFF7FEFF 		bl	vPortExitCritical
 2781              	.LVL279:
1959:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2782              		.loc 1 1959 2 view .LVU863
1960:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2783              		.loc 1 1960 1 is_stmt 0 view .LVU864
 2784 0012 2046     		mov	r0, r4
 2785 0014 38BD     		pop	{r3, r4, r5, pc}
1960:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2786              		.loc 1 1960 1 view .LVU865
 2787              		.cfi_endproc
 2788              	.LFE84:
 2790              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 109


 2791              		.align	1
 2792              		.global	uxQueueMessagesWaitingFromISR
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu softvfp
 2798              	uxQueueMessagesWaitingFromISR:
 2799              	.LVL280:
 2800              	.LFB85:
1964:FreeRTOS/src/queue.c **** UBaseType_t uxReturn;
 2801              		.loc 1 1964 1 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 2805              		@ link register save eliminated.
1965:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2806              		.loc 1 1965 1 view .LVU867
1966:FreeRTOS/src/queue.c **** 
 2807              		.loc 1 1966 1 view .LVU868
1968:FreeRTOS/src/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 2808              		.loc 1 1968 25 view .LVU869
1969:FreeRTOS/src/queue.c **** 
 2809              		.loc 1 1969 2 view .LVU870
1969:FreeRTOS/src/queue.c **** 
 2810              		.loc 1 1969 11 is_stmt 0 view .LVU871
 2811 0000 806B     		ldr	r0, [r0, #56]
 2812              	.LVL281:
1971:FreeRTOS/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2813              		.loc 1 1971 2 is_stmt 1 view .LVU872
1972:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2814              		.loc 1 1972 1 is_stmt 0 view .LVU873
 2815 0002 7047     		bx	lr
 2816              		.cfi_endproc
 2817              	.LFE85:
 2819              		.section	.text.vQueueDelete,"ax",%progbits
 2820              		.align	1
 2821              		.global	vQueueDelete
 2822              		.syntax unified
 2823              		.thumb
 2824              		.thumb_func
 2825              		.fpu softvfp
 2827              	vQueueDelete:
 2828              	.LVL282:
 2829              	.LFB86:
1976:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2830              		.loc 1 1976 1 is_stmt 1 view -0
 2831              		.cfi_startproc
 2832              		@ args = 0, pretend = 0, frame = 0
 2833              		@ frame_needed = 0, uses_anonymous_args = 0
1976:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2834              		.loc 1 1976 1 is_stmt 0 view .LVU875
 2835 0000 08B5     		push	{r3, lr}
 2836              	.LCFI36:
 2837              		.cfi_def_cfa_offset 8
 2838              		.cfi_offset 3, -8
 2839              		.cfi_offset 14, -4
1977:FreeRTOS/src/queue.c **** 
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 110


 2840              		.loc 1 1977 1 is_stmt 1 view .LVU876
 2841              	.LVL283:
1979:FreeRTOS/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2842              		.loc 1 1979 25 view .LVU877
1980:FreeRTOS/src/queue.c **** 
 2843              		.loc 1 1980 30 view .LVU878
1992:FreeRTOS/src/queue.c **** 	}
 2844              		.loc 1 1992 3 view .LVU879
 2845 0002 FFF7FEFF 		bl	vPortFree
 2846              	.LVL284:
2014:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2847              		.loc 1 2014 1 is_stmt 0 view .LVU880
 2848 0006 08BD     		pop	{r3, pc}
 2849              		.cfi_endproc
 2850              	.LFE86:
 2852              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2853              		.align	1
 2854              		.global	xQueueIsQueueEmptyFromISR
 2855              		.syntax unified
 2856              		.thumb
 2857              		.thumb_func
 2858              		.fpu softvfp
 2860              	xQueueIsQueueEmptyFromISR:
 2861              	.LVL285:
 2862              	.LFB92:
2313:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2863              		.loc 1 2313 1 is_stmt 1 view -0
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 0
 2866              		@ frame_needed = 0, uses_anonymous_args = 0
 2867              		@ link register save eliminated.
2314:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2868              		.loc 1 2314 1 view .LVU882
2315:FreeRTOS/src/queue.c **** 
 2869              		.loc 1 2315 1 view .LVU883
2317:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2870              		.loc 1 2317 25 view .LVU884
2318:FreeRTOS/src/queue.c **** 	{
 2871              		.loc 1 2318 2 view .LVU885
2318:FreeRTOS/src/queue.c **** 	{
 2872              		.loc 1 2318 13 is_stmt 0 view .LVU886
 2873 0000 836B     		ldr	r3, [r0, #56]
2318:FreeRTOS/src/queue.c **** 	{
 2874              		.loc 1 2318 4 view .LVU887
 2875 0002 0BB9     		cbnz	r3, .L206
2320:FreeRTOS/src/queue.c **** 	}
 2876              		.loc 1 2320 11 view .LVU888
 2877 0004 0120     		movs	r0, #1
 2878              	.LVL286:
2320:FreeRTOS/src/queue.c **** 	}
 2879              		.loc 1 2320 11 view .LVU889
 2880 0006 7047     		bx	lr
 2881              	.LVL287:
 2882              	.L206:
2324:FreeRTOS/src/queue.c **** 	}
 2883              		.loc 1 2324 11 view .LVU890
 2884 0008 0020     		movs	r0, #0
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 111


 2885              	.LVL288:
2327:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2886              		.loc 1 2327 2 is_stmt 1 view .LVU891
2328:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
 2887              		.loc 1 2328 1 is_stmt 0 view .LVU892
 2888 000a 7047     		bx	lr
 2889              		.cfi_endproc
 2890              	.LFE92:
 2892              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2893              		.align	1
 2894              		.global	xQueueIsQueueFullFromISR
 2895              		.syntax unified
 2896              		.thumb
 2897              		.thumb_func
 2898              		.fpu softvfp
 2900              	xQueueIsQueueFullFromISR:
 2901              	.LVL289:
 2902              	.LFB94:
2350:FreeRTOS/src/queue.c **** /*-----------------------------------------------------------*/
2351:FreeRTOS/src/queue.c **** 
2352:FreeRTOS/src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2353:FreeRTOS/src/queue.c **** {
 2903              		.loc 1 2353 1 is_stmt 1 view -0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              		@ link register save eliminated.
2354:FreeRTOS/src/queue.c **** BaseType_t xReturn;
 2908              		.loc 1 2354 1 view .LVU894
2355:FreeRTOS/src/queue.c **** Queue_t * const pxQueue = xQueue;
 2909              		.loc 1 2355 1 view .LVU895
2356:FreeRTOS/src/queue.c **** 
2357:FreeRTOS/src/queue.c **** 	configASSERT( pxQueue );
 2910              		.loc 1 2357 25 view .LVU896
2358:FreeRTOS/src/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2911              		.loc 1 2358 2 view .LVU897
 2912              		.loc 1 2358 13 is_stmt 0 view .LVU898
 2913 0000 826B     		ldr	r2, [r0, #56]
 2914              		.loc 1 2358 43 view .LVU899
 2915 0002 C36B     		ldr	r3, [r0, #60]
 2916              		.loc 1 2358 4 view .LVU900
 2917 0004 9A42     		cmp	r2, r3
 2918 0006 01D0     		beq	.L210
2359:FreeRTOS/src/queue.c **** 	{
2360:FreeRTOS/src/queue.c **** 		xReturn = pdTRUE;
2361:FreeRTOS/src/queue.c **** 	}
2362:FreeRTOS/src/queue.c **** 	else
2363:FreeRTOS/src/queue.c **** 	{
2364:FreeRTOS/src/queue.c **** 		xReturn = pdFALSE;
 2919              		.loc 1 2364 11 view .LVU901
 2920 0008 0020     		movs	r0, #0
 2921              	.LVL290:
2365:FreeRTOS/src/queue.c **** 	}
2366:FreeRTOS/src/queue.c **** 
2367:FreeRTOS/src/queue.c **** 	return xReturn;
 2922              		.loc 1 2367 2 is_stmt 1 view .LVU902
2368:FreeRTOS/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 112


 2923              		.loc 1 2368 1 is_stmt 0 view .LVU903
 2924 000a 7047     		bx	lr
 2925              	.LVL291:
 2926              	.L210:
2360:FreeRTOS/src/queue.c **** 	}
 2927              		.loc 1 2360 11 view .LVU904
 2928 000c 0120     		movs	r0, #1
 2929              	.LVL292:
2360:FreeRTOS/src/queue.c **** 	}
 2930              		.loc 1 2360 11 view .LVU905
 2931 000e 7047     		bx	lr
 2932              		.cfi_endproc
 2933              	.LFE94:
 2935              		.text
 2936              	.Letext0:
 2937              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 2938              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 2939              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 2940              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 2941              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 2942              		.file 8 "FreeRTOS/inc/stdint.h"
 2943              		.file 9 "CMSIS/inc/core_cm3.h"
 2944              		.file 10 "CMSIS/inc/system_stm32f1xx.h"
 2945              		.file 11 "FreeRTOS/inc/list.h"
 2946              		.file 12 "FreeRTOS/inc/task.h"
 2947              		.file 13 "FreeRTOS/inc/queue.h"
 2948              		.file 14 "FreeRTOS/inc/portable.h"
 2949              		.file 15 "<built-in>"
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 113


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:16     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:23     .text.prvGetDisinheritPriorityAfterTimeout:0000000000000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:60     .text.prvIsQueueFull:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:66     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:114    .text.prvIsQueueEmpty:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:120    .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:165    .text.prvCopyDataToQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:171    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:328    .text.prvCopyDataFromQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:334    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:395    .text.prvUnlockQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:401    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:528    .text.xQueueGenericReset:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:535    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:646    .text.xQueueGenericReset:000000000000006c $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:651    .text.prvInitialiseNewQueue:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:657    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:710    .text.xQueueGenericCreate:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:717    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:789    .text.xQueueGenericSend:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:796    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1068   .text.xQueueGenericSend:0000000000000114 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1073   .text.prvInitialiseMutex:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1079   .text.prvInitialiseMutex:0000000000000000 prvInitialiseMutex
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1127   .text.xQueueCreateMutex:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1134   .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1173   .text.xQueueGenericSendFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1180   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1338   .text.xQueueGiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1345   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1512   .text.xQueueReceive:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1519   .text.xQueueReceive:0000000000000000 xQueueReceive
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1789   .text.xQueueReceive:0000000000000108 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1794   .text.xQueueSemaphoreTake:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:1801   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2138   .text.xQueueSemaphoreTake:0000000000000140 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2143   .text.xQueuePeek:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2150   .text.xQueuePeek:0000000000000000 xQueuePeek
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2422   .text.xQueuePeek:0000000000000108 $d
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2427   .text.xQueueReceiveFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2434   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2592   .text.xQueuePeekFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2599   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2699   .text.uxQueueMessagesWaiting:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2706   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2741   .text.uxQueueSpacesAvailable:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2748   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2791   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2798   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2820   .text.vQueueDelete:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2827   .text.vQueueDelete:0000000000000000 vQueueDelete
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2853   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2860   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2893   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s:2900   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
ARM GAS  C:\Users\HARTO_~1\AppData\Local\Temp\cc2qG0m7.s 			page 114



UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
